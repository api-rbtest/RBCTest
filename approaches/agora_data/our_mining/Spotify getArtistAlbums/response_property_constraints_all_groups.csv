operation,response resource,attribute,group,description,tp,verification script,status,script confirmation,revised script,revised executable script,revised status,TP
get-/artists/{id}/albums,album-simple-page,total,total,The total number of items available to return,0,"def verify_latest_response(latest_response):
    try:
        if 'total' not in latest_response:
            return 0
        total_value = latest_response['total']
        if isinstance(total_value, int):
            return 1
        else:
            return -1
    except Exception:
        return -1
",unknown,,,,,0
get-/artists/{id}/albums,album-simple,available_markets,items.available_markets,The markets in which the album is available: ISO 3166-1 alpha-2 country codes. Note that an album is considered available in a market when at least 1 of its tracks is available in that market,1,"def verify_latest_response(latest_response):
    try:
        # Check if 'items' key exists in the response
        if 'items' not in latest_response:
            return 0
        
        # Iterate over each 'album-simple' object in the 'items' array
        for album in latest_response['items']:
            # Check if 'available_markets' key exists in the album
            if 'available_markets' not in album:
                return 0
            
            # Check if 'available_markets' is a list
            if not isinstance(album['available_markets'], list):
                return -1
            
            # Check if each market code in 'available_markets' is a string
            for market in album['available_markets']:
                if not isinstance(market, str):
                    return -1
        
        # If all checks pass
        return 1
    except Exception as e:
        # In case of any unexpected error
        return -1
",unknown,,,,,1
get-/artists/{id}/albums,album-simple,album_type,items.album_type,"The type of the album: one of 'album', 'single', or 'compilation'",1,"def verify_latest_response(latest_response):
    try:
        valid_album_types = {'album', 'single', 'compilation'}
        items = latest_response.get('items', [])
        
        for album in items:
            album_type = album.get('album_type')
            if album_type is None:
                return 0  # Attribute does not exist
            if album_type not in valid_album_types:
                return -1  # Constraint not satisfied
        
        return 1  # Constraint satisfied
    except Exception as e:
        return -1  # Constraint not satisfied due to an error
",unknown,,,,,1
get-/artists/{id}/albums,artist-simple,external_urls,items.artists.external_urls,"Known external URLs for this artist, schema: {""type"": ""object"", ""format"": ""uri""}",1,"def verify_latest_response(latest_response):
    try:
        # Check if 'items' key exists in the response
        if 'items' not in latest_response:
            return 0
        
        # Iterate over each album-simple object in 'items'
        for album in latest_response['items']:
            # Check if 'external_urls' key exists in the album object
            if 'external_urls' not in album:
                return 0
            
            external_urls = album['external_urls']
            
            # Verify 'external_urls' is an object
            if not isinstance(external_urls, dict):
                return -1
            
            # Verify all values in 'external_urls' are strings
            for key, value in external_urls.items():
                if not isinstance(value, str):
                    return -1
        
        # If all checks pass
        return 1
    
    except Exception as e:
        # In case of any unexpected error
        return -1
",unknown,,,,,1
get-/artists/{id}/albums,album-simple,type,items.external_urls.type,The object type: 'album',1,"def verify_latest_response(latest_response):
    try:
        # Check if 'items' is in the response and is a list
        if 'items' not in latest_response or not isinstance(latest_response['items'], list):
            return 0
        
        # Iterate over each item in the 'items' list
        for item in latest_response['items']:
            # Check if 'type' is in the item and is a string
            if 'type' not in item or not isinstance(item['type'], str):
                return 0
            
            # Verify that the 'type' is 'album'
            if item['type'] != 'album':
                return -1
        
        # If all items have 'type' as 'album', return 1
        return 1
    except Exception as e:
        # In case of any unexpected error, return -1
        return -1
",unknown,,,,,1
get-/artists/{id}/albums,album-simple,type,items.type,The object type: 'album',1,"def verify_latest_response(latest_response):
    try:
        # Check if 'items' is in the response and is a list
        if 'items' not in latest_response or not isinstance(latest_response['items'], list):
            return 0
        
        # Iterate over each item in the 'items' list
        for item in latest_response['items']:
            # Check if 'type' is in the item and is a string
            if 'type' not in item or not isinstance(item['type'], str):
                return 0
            
            # Verify that the 'type' is 'album'
            if item['type'] != 'album':
                return -1
        
        # If all items have 'type' as 'album', return 1
        return 1
    except Exception as e:
        # In case of any unexpected error, return -1
        return -1
",unknown,,,,,1
get-/artists/{id}/albums,image,url,items.images.url,"The source URL of the image, schema: {""type"": ""string"", ""format"": ""uri""}",1,"def verify_latest_response(latest_response):
    try:
        items = latest_response.get('items', [])
        for album in items:
            images = album.get('images', [])
            for image in images:
                url = image.get('url')
                if url is None:
                    return 0  # URL attribute does not exist
                if not isinstance(url, str):
                    return -1  # URL is not a string
        return 1  # All constraints satisfied
    except Exception as e:
        return -1  # An error occurred during verification
",unknown,,,,,1
get-/artists/{id}/albums,artist-simple,uri,items.artists.uri,"The Spotify URI for the artist, schema: {""type"": ""string"", ""format"": ""uri""}",1,"def verify_latest_response(latest_response):
    try:
        # Check if 'items' is in the response
        if 'items' not in latest_response:
            return 0
        
        # Iterate over each 'album-simple' object in 'items'
        for album in latest_response['items']:
            # Check if 'uri' is in the album object
            if 'uri' not in album:
                return 0
            
            # Check if 'uri' is a string
            if not isinstance(album['uri'], str):
                return -1
            
            # Check if 'uri' starts with 'spotify:'
            if not album['uri'].startswith('spotify:'):
                return -1
        
        # If all checks pass
        return 1
    except Exception as e:
        # In case of any unexpected error
        return -1
",unknown,,,,,1
get-/artists/{id}/albums,artist-simple,type,items.artists.type,The object type: 'artist',1,"def verify_latest_response(latest_response):
    try:
        items = latest_response.get('items', [])
        for item in items:
            if 'type' not in item:
                return 0
            if item['type'] != 'album':
                return -1
        return 1
    except Exception as e:
        return -1
",unknown,,,,,1
get-/artists/{id}/albums,image,height,items.images.height,The image height in pixels. If unknown: null or not returned,0,"def verify_latest_response(latest_response):
    try:
        items = latest_response.get('items', [])
        for album in items:
            images = album.get('images', [])
            for image in images:
                if 'height' in image:
                    height = image['height']
                    if height is not None and not isinstance(height, int):
                        return -1
        return 1
    except Exception as e:
        return -1
",unknown,,,,,0
get-/artists/{id}/albums,album-simple-page,previous,previous,URL to the previous page of items. (null if none,1,"def verify_latest_response(latest_response):
    try:
        previous = latest_response.get(""previous"", None)
        
        # Check if 'previous' is either a string or None
        if previous is None or isinstance(previous, str):
            return 1
        else:
            return -1
    except Exception:
        return 0
",unknown,,,,,1
get-/artists/{id}/albums,album-simple,href,items.href,A link to the Web API endpoint providing full details of the album,1,"def verify_latest_response(latest_response):
    try:
        href = latest_response.get('href')
        if href is None:
            return 0  # Attribute does not exist
        if isinstance(href, str) and href.startswith(""http""):
            return 1  # Constraint satisfied
        else:
            return -1  # Constraint not satisfied
    except Exception as e:
        return -1  # Constraint not satisfied due to an error
",unknown,,,,,1
get-/artists/{id}/albums,album-simple,uri,items.uri,"The Spotify URI for the album, schema: {""type"": ""string"", ""format"": ""uri""}",1,"def verify_latest_response(latest_response):
    try:
        items = latest_response.get('items', [])
        for album in items:
            uri = album.get('uri')
            if uri is None:
                return 0  # Attribute does not exist
            if not isinstance(uri, str):
                return -1  # Constraint not satisfied: 'uri' must be a string
        return 1  # Constraint satisfied for all items
    except Exception as e:
        return -1  # Constraint not satisfied due to an error
",unknown,,,,,1
get-/artists/{id}/albums,artist-simple,href,items.artists.href,A link to the Web API endpoint providing full details of the artist,1,"def verify_latest_response(latest_response):
    try:
        href = latest_response.get('href')
        if href is None:
            return 0  # Attribute does not exist
        if isinstance(href, str):
            return 1  # Constraint satisfied
        else:
            return -1  # Constraint not satisfied
    except Exception as e:
        return -1  # Constraint not satisfied due to an error
",unknown,,,,,1
get-/artists/{id}/albums,album-simple-page,next,next,URL to the next page of items. (null if none,1,"def verify_latest_response(latest_response):
    try:
        # Check if 'next' exists in the response
        if 'next' not in latest_response:
            return 0
        
        next_value = latest_response['next']
        
        # Check if 'next' is either a string or None
        if isinstance(next_value, str) or next_value is None:
            return 1
        else:
            return -1
    except Exception as e:
        return -1
",unknown,,,,,1
