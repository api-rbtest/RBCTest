operation,response resource,attribute,group,kio,description,part,corresponding attribute,corresponding attribute description,verification script,tp,verify_result
get-/albums/{id}/tracks,track-simple-page,limit,limit,1,The maximum number of items in the response (as set in the query or by default),parameters,limit,The maximum number of items to return,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the 'limit' from the response
        response_limit = latest_response.get('limit')
        
        # Check if 'limit' exists in the response
        if response_limit is None:
            return 0
        
        # Ensure 'limit' is an integer
        if not isinstance(response_limit, int):
            return -1
        
        # Extract 'limit' from request_info and cast to integer if it exists
        request_limit = request_info.get('limit')
        if request_limit is not None:
            request_limit = int(request_limit)
        else:
            request_limit = 20  # Default value
        
        # Check if the request limit is within the allowed range
        if request_limit < 0 or request_limit > 50:
            return -1
        
        # Verify the response limit matches the request limit or the default
        if response_limit != request_limit:
            return -1
        
        return 1
    except Exception as e:
        return -1
",1,
get-/albums/{id}/tracks,track-simple-page,offset,offset,2,The offset of the items returned (as set in the query or by default),parameters,offset,The index of the first item to return,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the offset from the response
        response_offset = latest_response.get('offset')
        
        # Check if the offset is present in the response
        if response_offset is None:
            return 0
        
        # Extract the offset from the request_info, default to 0 if not provided
        request_offset = int(request_info.get('offset', 0))
        
        # Verify the offset in the response matches the offset in the request
        if response_offset == request_offset:
            return 1
        else:
            return -1
    except Exception as e:
        return -1
",1,
