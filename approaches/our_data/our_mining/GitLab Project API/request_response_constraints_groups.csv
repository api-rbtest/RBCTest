attribute inferred from operation,response resource,attribute,group,kio,description,x,part,corresponding attribute,corresponding attribute description,x.1,name-identical,request information,API response,constraint_correctness,expected_test_outcome,verification script,Example_value,verify_result,satisfied,mismatched,unknown,code error,tp,category
get-/projects,BasicProjectDetails,merge_requests_enabled,merge_requests_enabled,1,,,parameters,with_merge_requests_enabled,Limit by enabled merge requests feature,c,True,"{
    ""with_merge_requests_enabled"": true,
    ""with_issues_enabled"": true,
    ""visibility"": ""private"",
    ""repository_storage"": ""default"",
    ""last_activity_before"": ""2014-09-30T13:46:02Z"",
    ""last_activity_after"": ""2012-09-30T13:46:02Z"",
    ""id_after"": 0,
    ""archived"": false
  }","[
    {
      ""id"": 4,
      ""description"": ""Lorem ipsum dolor sit amet, consectetur adipiscing elit."",
      ""description_html"": """",
      ""default_branch"": ""main"",
      ""visibility"": ""private"",
      ""ssh_url_to_repo"": ""git@example.com:diaspora/diaspora-client.git"",
      ""http_url_to_repo"": ""http://example.com/diaspora/diaspora-client.git"",
      ""web_url"": ""http://example.com/diaspora/diaspora-client"",
      ""readme_url"": ""http://example.com/diaspora/diaspora-client/blob/main/README.md"",
      ""tag_list"": [
        ""example"",
        ""disapora client""
      ],
      ""topics"": [
        ""example"",
        ""disapora client""
      ],
      ""owner"": {
        ""id"": 3,
        ""name"": ""Diaspora"",
        ""created_at"": ""2013-09-30T13:46:02Z""
      },
      ""name"": ""Diaspora Client"",
      ""name_with_namespace"": ""Diaspora / Diaspora Client"",
      ""path"": ""diaspora-client"",
      ""path_with_namespace"": ""diaspora/diaspora-client"",
      ""issues_enabled"": true,
      ""open_issues_count"": 1,
      ""merge_requests_enabled"": true,
      ""jobs_enabled"": true,
      ""wiki_enabled"": true,
      ""snippets_enabled"": false,
      ""can_create_merge_request_in"": true,
      ""resolve_outdated_diff_discussions"": false,
      ""container_registry_enabled"": false,
      ""container_registry_access_level"": ""disabled"",
      ""security_and_compliance_access_level"": ""disabled"",
      ""created_at"": ""2013-09-30T13:46:02Z"",
      ""updated_at"": ""2013-09-30T13:46:02Z"",
      ""last_activity_at"": ""2013-09-30T13:46:02Z"",
      ""creator_id"": 3,
      ""namespace"": {
        ""id"": 3,
        ""name"": ""Diaspora"",
        ""path"": ""diaspora"",
        ""kind"": ""group"",
        ""full_path"": ""diaspora""
      },
      ""import_status"": ""none"",
      ""archived"": false,
      ""avatar_url"": ""http://example.com/uploads/project/avatar/4/uploads/avatar.png"",
      ""shared_runners_enabled"": true,
      ""group_runners_enabled"": true,
      ""forks_count"": 0,
      ""star_count"": 0,
      ""runners_token"": ""b8547b1dc37721d05889db52fa2f02"",
      ""public_jobs"": true,
      ""shared_with_groups"": [],
      ""only_allow_merge_if_pipeline_succeeds"": false,
      ""allow_merge_on_skipped_pipeline"": false,
      ""restrict_user_defined_variables"": false,
      ""only_allow_merge_if_all_discussions_are_resolved"": false,
      ""remove_source_branch_after_merge"": false,
      ""request_access_enabled"": false,
      ""merge_method"": ""merge"",
      ""squash_option"": ""default_on"",
      ""autoclose_referenced_issues"": true,
      ""enforce_auth_checks_on_uploads"": true,
      ""suggestion_commit_message"": null,
      ""merge_commit_template"": null,
      ""squash_commit_template"": null,
      ""issue_branch_template"": ""gitlab/%{id}-%{title}"",
      ""statistics"": {
        ""commit_count"": 37,
        ""storage_size"": 1038090,
        ""repository_size"": 1038090,
        ""lfs_objects_size"": 0,
        ""job_artifacts_size"": 0,
        ""pipeline_artifacts_size"": 0,
        ""packages_size"": 0,
        ""snippets_size"": 0,
        ""uploads_size"": 0,
        ""container_registry_size"": 0
      },
      ""container_registry_image_prefix"": ""registry.example.com/diaspora/diaspora-client"",
      ""_links"": {
        ""self"": ""http://example.com/api/v4/projects"",
        ""issues"": ""http://example.com/api/v4/projects/1/issues"",
        ""merge_requests"": ""http://example.com/api/v4/projects/1/merge_requests"",
        ""repo_branches"": ""http://example.com/api/v4/projects/1/repository_branches"",
        ""labels"": ""http://example.com/api/v4/projects/1/labels"",
        ""events"": ""http://example.com/api/v4/projects/1/events"",
        ""members"": ""http://example.com/api/v4/projects/1/members"",
        ""cluster_agents"": ""http://example.com/api/v4/projects/1/cluster_agents""
      }
    },
    {
      ""id"": 6,
      ""description"": ""Lorem ipsum dolor sit amet, consectetur adipiscing elit."",
      ""description_html"": """",
      ""default_branch"": ""main"",
      ""visibility"": ""private"",
      ""ssh_url_to_repo"": ""git@example.com:brightbox/puppet.git"",
      ""http_url_to_repo"": ""http://example.com/brightbox/puppet.git"",
      ""web_url"": ""http://example.com/brightbox/puppet"",
      ""readme_url"": ""http://example.com/brightbox/puppet/blob/main/README.md"",
      ""tag_list"": [
        ""example"",
        ""puppet""
      ],
      ""topics"": [
        ""example"",
        ""puppet""
      ],
      ""owner"": {
        ""id"": 4,
        ""name"": ""Brightbox"",
        ""created_at"": ""2013-09-30T13:46:02Z""
      },
      ""name"": ""Puppet"",
      ""name_with_namespace"": ""Brightbox / Puppet"",
      ""path"": ""puppet"",
      ""path_with_namespace"": ""brightbox/puppet"",
      ""issues_enabled"": true,
      ""open_issues_count"": 1,
      ""merge_requests_enabled"": true,
      ""jobs_enabled"": true,
      ""wiki_enabled"": true,
      ""snippets_enabled"": false,
      ""can_create_merge_request_in"": true,
      ""resolve_outdated_diff_discussions"": false,
      ""container_registry_enabled"": false,
      ""container_registry_access_level"": ""disabled"",
      ""security_and_compliance_access_level"": ""disabled"",
      ""created_at"": ""2013-09-30T13:46:02Z"",
      ""updated_at"": ""2013-09-30T13:46:02Z"",
      ""last_activity_at"": ""2013-09-30T13:46:02Z"",
      ""creator_id"": 3,
      ""namespace"": {
        ""id"": 4,
        ""name"": ""Brightbox"",
        ""path"": ""brightbox"",
        ""kind"": ""group"",
        ""full_path"": ""brightbox""
      },
      ""import_status"": ""none"",
      ""import_error"": null,
      ""permissions"": {
        ""project_access"": {
          ""access_level"": 10,
          ""notification_level"": 3
        },
        ""group_access"": {
          ""access_level"": 50,
          ""notification_level"": 3
        }
      },
      ""archived"": false,
      ""avatar_url"": null,
      ""shared_runners_enabled"": true,
      ""group_runners_enabled"": true,
      ""forks_count"": 0,
      ""star_count"": 0,
      ""runners_token"": ""b8547b1dc37721d05889db52fa2f02"",
      ""public_jobs"": true,
      ""shared_with_groups"": [],
      ""only_allow_merge_if_pipeline_succeeds"": false,
      ""allow_merge_on_skipped_pipeline"": false,
      ""restrict_user_defined_variables"": false,
      ""only_allow_merge_if_all_discussions_are_resolved"": false,
      ""remove_source_branch_after_merge"": false,
      ""request_access_enabled"": false,
      ""merge_method"": ""merge"",
      ""squash_option"": ""default_on"",
      ""auto_devops_enabled"": true,
      ""auto_devops_deploy_strategy"": ""continuous"",
      ""repository_storage"": ""default"",
      ""approvals_before_merge"": 0,
      ""mirror"": false,
      ""mirror_user_id"": 45,
      ""mirror_trigger_builds"": false,
      ""only_mirror_protected_branches"": false,
      ""mirror_overwrites_diverged_branches"": false,
      ""external_authorization_classification_label"": null,
      ""packages_enabled"": true,
      ""service_desk_enabled"": false,
      ""service_desk_address"": null,
      ""autoclose_referenced_issues"": true,
      ""enforce_auth_checks_on_uploads"": true,
      ""suggestion_commit_message"": null,
      ""merge_commit_template"": null,
      ""squash_commit_template"": null,
      ""issue_branch_template"": ""gitlab/%{id}-%{title}"",
      ""statistics"": {
        ""commit_count"": 12,
        ""storage_size"": 2066080,
        ""repository_size"": 2066080,
        ""lfs_objects_size"": 0,
        ""job_artifacts_size"": 0,
        ""pipeline_artifacts_size"": 0,
        ""packages_size"": 0,
        ""snippets_size"": 0,
        ""uploads_size"": 0,
        ""container_registry_size"": 0
      },
      ""container_registry_image_prefix"": ""registry.example.com/brightbox/puppet"",
      ""_links"": {
        ""self"": ""http://example.com/api/v4/projects"",
        ""issues"": ""http://example.com/api/v4/projects/1/issues"",
        ""merge_requests"": ""http://example.com/api/v4/projects/1/merge_requests"",
        ""repo_branches"": ""http://example.com/api/v4/projects/1/repository_branches"",
        ""labels"": ""http://example.com/api/v4/projects/1/labels"",
        ""events"": ""http://example.com/api/v4/projects/1/events"",
        ""members"": ""http://example.com/api/v4/projects/1/members"",
        ""cluster_agents"": ""http://example.com/api/v4/projects/1/cluster_agents""
      }
    }
  ]",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the 'with_merge_requests_enabled' parameter from request_info
        with_merge_requests_enabled = request_info.get(""with_merge_requests_enabled"")
        
        # Check if the parameter is provided
        if with_merge_requests_enabled is None:
            return 0
        
        # Iterate through each project in the response
        for project in latest_response:
            # Check if 'merge_requests_enabled' attribute exists in the project
            if 'merge_requests_enabled' not in project:
                return 0
            
            # Verify the 'merge_requests_enabled' attribute against the input parameter
            if project['merge_requests_enabled'] != with_merge_requests_enabled:
                return -1
        
        # If all projects satisfy the constraint
        return 1
    except Exception as e:
        # In case of any unexpected error
        return -1
",True,1.0,1,0,0,0,1,"range of values, logic"
get-/projects,BasicProjectDetails,issues_enabled,issues_enabled,2,,,parameters,with_issues_enabled,Limit by enabled issues feature,c,True,"{
    ""with_merge_requests_enabled"": true,
    ""with_issues_enabled"": true,
    ""visibility"": ""private"",
    ""repository_storage"": ""default"",
    ""last_activity_before"": ""2014-09-30T13:46:02Z"",
    ""last_activity_after"": ""2012-09-30T13:46:02Z"",
    ""id_after"": 0,
    ""archived"": false
  }","[
    {
      ""id"": 4,
      ""description"": ""Lorem ipsum dolor sit amet, consectetur adipiscing elit."",
      ""description_html"": """",
      ""default_branch"": ""main"",
      ""visibility"": ""private"",
      ""ssh_url_to_repo"": ""git@example.com:diaspora/diaspora-client.git"",
      ""http_url_to_repo"": ""http://example.com/diaspora/diaspora-client.git"",
      ""web_url"": ""http://example.com/diaspora/diaspora-client"",
      ""readme_url"": ""http://example.com/diaspora/diaspora-client/blob/main/README.md"",
      ""tag_list"": [
        ""example"",
        ""disapora client""
      ],
      ""topics"": [
        ""example"",
        ""disapora client""
      ],
      ""owner"": {
        ""id"": 3,
        ""name"": ""Diaspora"",
        ""created_at"": ""2013-09-30T13:46:02Z""
      },
      ""name"": ""Diaspora Client"",
      ""name_with_namespace"": ""Diaspora / Diaspora Client"",
      ""path"": ""diaspora-client"",
      ""path_with_namespace"": ""diaspora/diaspora-client"",
      ""issues_enabled"": true,
      ""open_issues_count"": 1,
      ""merge_requests_enabled"": true,
      ""jobs_enabled"": true,
      ""wiki_enabled"": true,
      ""snippets_enabled"": false,
      ""can_create_merge_request_in"": true,
      ""resolve_outdated_diff_discussions"": false,
      ""container_registry_enabled"": false,
      ""container_registry_access_level"": ""disabled"",
      ""security_and_compliance_access_level"": ""disabled"",
      ""created_at"": ""2013-09-30T13:46:02Z"",
      ""updated_at"": ""2013-09-30T13:46:02Z"",
      ""last_activity_at"": ""2013-09-30T13:46:02Z"",
      ""creator_id"": 3,
      ""namespace"": {
        ""id"": 3,
        ""name"": ""Diaspora"",
        ""path"": ""diaspora"",
        ""kind"": ""group"",
        ""full_path"": ""diaspora""
      },
      ""import_status"": ""none"",
      ""archived"": false,
      ""avatar_url"": ""http://example.com/uploads/project/avatar/4/uploads/avatar.png"",
      ""shared_runners_enabled"": true,
      ""group_runners_enabled"": true,
      ""forks_count"": 0,
      ""star_count"": 0,
      ""runners_token"": ""b8547b1dc37721d05889db52fa2f02"",
      ""public_jobs"": true,
      ""shared_with_groups"": [],
      ""only_allow_merge_if_pipeline_succeeds"": false,
      ""allow_merge_on_skipped_pipeline"": false,
      ""restrict_user_defined_variables"": false,
      ""only_allow_merge_if_all_discussions_are_resolved"": false,
      ""remove_source_branch_after_merge"": false,
      ""request_access_enabled"": false,
      ""merge_method"": ""merge"",
      ""squash_option"": ""default_on"",
      ""autoclose_referenced_issues"": true,
      ""enforce_auth_checks_on_uploads"": true,
      ""suggestion_commit_message"": null,
      ""merge_commit_template"": null,
      ""squash_commit_template"": null,
      ""issue_branch_template"": ""gitlab/%{id}-%{title}"",
      ""statistics"": {
        ""commit_count"": 37,
        ""storage_size"": 1038090,
        ""repository_size"": 1038090,
        ""lfs_objects_size"": 0,
        ""job_artifacts_size"": 0,
        ""pipeline_artifacts_size"": 0,
        ""packages_size"": 0,
        ""snippets_size"": 0,
        ""uploads_size"": 0,
        ""container_registry_size"": 0
      },
      ""container_registry_image_prefix"": ""registry.example.com/diaspora/diaspora-client"",
      ""_links"": {
        ""self"": ""http://example.com/api/v4/projects"",
        ""issues"": ""http://example.com/api/v4/projects/1/issues"",
        ""merge_requests"": ""http://example.com/api/v4/projects/1/merge_requests"",
        ""repo_branches"": ""http://example.com/api/v4/projects/1/repository_branches"",
        ""labels"": ""http://example.com/api/v4/projects/1/labels"",
        ""events"": ""http://example.com/api/v4/projects/1/events"",
        ""members"": ""http://example.com/api/v4/projects/1/members"",
        ""cluster_agents"": ""http://example.com/api/v4/projects/1/cluster_agents""
      }
    },
    {
      ""id"": 6,
      ""description"": ""Lorem ipsum dolor sit amet, consectetur adipiscing elit."",
      ""description_html"": """",
      ""default_branch"": ""main"",
      ""visibility"": ""private"",
      ""ssh_url_to_repo"": ""git@example.com:brightbox/puppet.git"",
      ""http_url_to_repo"": ""http://example.com/brightbox/puppet.git"",
      ""web_url"": ""http://example.com/brightbox/puppet"",
      ""readme_url"": ""http://example.com/brightbox/puppet/blob/main/README.md"",
      ""tag_list"": [
        ""example"",
        ""puppet""
      ],
      ""topics"": [
        ""example"",
        ""puppet""
      ],
      ""owner"": {
        ""id"": 4,
        ""name"": ""Brightbox"",
        ""created_at"": ""2013-09-30T13:46:02Z""
      },
      ""name"": ""Puppet"",
      ""name_with_namespace"": ""Brightbox / Puppet"",
      ""path"": ""puppet"",
      ""path_with_namespace"": ""brightbox/puppet"",
      ""issues_enabled"": true,
      ""open_issues_count"": 1,
      ""merge_requests_enabled"": true,
      ""jobs_enabled"": true,
      ""wiki_enabled"": true,
      ""snippets_enabled"": false,
      ""can_create_merge_request_in"": true,
      ""resolve_outdated_diff_discussions"": false,
      ""container_registry_enabled"": false,
      ""container_registry_access_level"": ""disabled"",
      ""security_and_compliance_access_level"": ""disabled"",
      ""created_at"": ""2013-09-30T13:46:02Z"",
      ""updated_at"": ""2013-09-30T13:46:02Z"",
      ""last_activity_at"": ""2013-09-30T13:46:02Z"",
      ""creator_id"": 3,
      ""namespace"": {
        ""id"": 4,
        ""name"": ""Brightbox"",
        ""path"": ""brightbox"",
        ""kind"": ""group"",
        ""full_path"": ""brightbox""
      },
      ""import_status"": ""none"",
      ""import_error"": null,
      ""permissions"": {
        ""project_access"": {
          ""access_level"": 10,
          ""notification_level"": 3
        },
        ""group_access"": {
          ""access_level"": 50,
          ""notification_level"": 3
        }
      },
      ""archived"": false,
      ""avatar_url"": null,
      ""shared_runners_enabled"": true,
      ""group_runners_enabled"": true,
      ""forks_count"": 0,
      ""star_count"": 0,
      ""runners_token"": ""b8547b1dc37721d05889db52fa2f02"",
      ""public_jobs"": true,
      ""shared_with_groups"": [],
      ""only_allow_merge_if_pipeline_succeeds"": false,
      ""allow_merge_on_skipped_pipeline"": false,
      ""restrict_user_defined_variables"": false,
      ""only_allow_merge_if_all_discussions_are_resolved"": false,
      ""remove_source_branch_after_merge"": false,
      ""request_access_enabled"": false,
      ""merge_method"": ""merge"",
      ""squash_option"": ""default_on"",
      ""auto_devops_enabled"": true,
      ""auto_devops_deploy_strategy"": ""continuous"",
      ""repository_storage"": ""default"",
      ""approvals_before_merge"": 0,
      ""mirror"": false,
      ""mirror_user_id"": 45,
      ""mirror_trigger_builds"": false,
      ""only_mirror_protected_branches"": false,
      ""mirror_overwrites_diverged_branches"": false,
      ""external_authorization_classification_label"": null,
      ""packages_enabled"": true,
      ""service_desk_enabled"": false,
      ""service_desk_address"": null,
      ""autoclose_referenced_issues"": true,
      ""enforce_auth_checks_on_uploads"": true,
      ""suggestion_commit_message"": null,
      ""merge_commit_template"": null,
      ""squash_commit_template"": null,
      ""issue_branch_template"": ""gitlab/%{id}-%{title}"",
      ""statistics"": {
        ""commit_count"": 12,
        ""storage_size"": 2066080,
        ""repository_size"": 2066080,
        ""lfs_objects_size"": 0,
        ""job_artifacts_size"": 0,
        ""pipeline_artifacts_size"": 0,
        ""packages_size"": 0,
        ""snippets_size"": 0,
        ""uploads_size"": 0,
        ""container_registry_size"": 0
      },
      ""container_registry_image_prefix"": ""registry.example.com/brightbox/puppet"",
      ""_links"": {
        ""self"": ""http://example.com/api/v4/projects"",
        ""issues"": ""http://example.com/api/v4/projects/1/issues"",
        ""merge_requests"": ""http://example.com/api/v4/projects/1/merge_requests"",
        ""repo_branches"": ""http://example.com/api/v4/projects/1/repository_branches"",
        ""labels"": ""http://example.com/api/v4/projects/1/labels"",
        ""events"": ""http://example.com/api/v4/projects/1/events"",
        ""members"": ""http://example.com/api/v4/projects/1/members"",
        ""cluster_agents"": ""http://example.com/api/v4/projects/1/cluster_agents""
      }
    }
  ]",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        with_issues_enabled = request_info.get(""with_issues_enabled"")
        if with_issues_enabled is None:
            return 0  # No constraint to verify

        for project in latest_response:
            if 'issues_enabled' not in project:
                return 0  # Insufficient information to verify the constraint
            if project['issues_enabled'] != with_issues_enabled:
                return -1  # Constraint not satisfied

        return 1  # Constraint satisfied
    except Exception as e:
        return -1  # In case of any error, return -1
",True,1.0,1,0,0,0,1,"range of values, logic"
get-/projects,BasicProjectDetails,visibility,visibility,3,,,parameters,visibility,Limit by visibility,c,False,"{
    ""with_merge_requests_enabled"": true,
    ""with_issues_enabled"": true,
    ""visibility"": ""private"",
    ""repository_storage"": ""default"",
    ""last_activity_before"": ""2014-09-30T13:46:02Z"",
    ""last_activity_after"": ""2012-09-30T13:46:02Z"",
    ""id_after"": 0,
    ""archived"": false
  }","[
    {
      ""id"": 4,
      ""description"": ""Lorem ipsum dolor sit amet, consectetur adipiscing elit."",
      ""description_html"": """",
      ""default_branch"": ""main"",
      ""visibility"": ""private"",
      ""ssh_url_to_repo"": ""git@example.com:diaspora/diaspora-client.git"",
      ""http_url_to_repo"": ""http://example.com/diaspora/diaspora-client.git"",
      ""web_url"": ""http://example.com/diaspora/diaspora-client"",
      ""readme_url"": ""http://example.com/diaspora/diaspora-client/blob/main/README.md"",
      ""tag_list"": [
        ""example"",
        ""disapora client""
      ],
      ""topics"": [
        ""example"",
        ""disapora client""
      ],
      ""owner"": {
        ""id"": 3,
        ""name"": ""Diaspora"",
        ""created_at"": ""2013-09-30T13:46:02Z""
      },
      ""name"": ""Diaspora Client"",
      ""name_with_namespace"": ""Diaspora / Diaspora Client"",
      ""path"": ""diaspora-client"",
      ""path_with_namespace"": ""diaspora/diaspora-client"",
      ""issues_enabled"": true,
      ""open_issues_count"": 1,
      ""merge_requests_enabled"": true,
      ""jobs_enabled"": true,
      ""wiki_enabled"": true,
      ""snippets_enabled"": false,
      ""can_create_merge_request_in"": true,
      ""resolve_outdated_diff_discussions"": false,
      ""container_registry_enabled"": false,
      ""container_registry_access_level"": ""disabled"",
      ""security_and_compliance_access_level"": ""disabled"",
      ""created_at"": ""2013-09-30T13:46:02Z"",
      ""updated_at"": ""2013-09-30T13:46:02Z"",
      ""last_activity_at"": ""2013-09-30T13:46:02Z"",
      ""creator_id"": 3,
      ""namespace"": {
        ""id"": 3,
        ""name"": ""Diaspora"",
        ""path"": ""diaspora"",
        ""kind"": ""group"",
        ""full_path"": ""diaspora""
      },
      ""import_status"": ""none"",
      ""archived"": false,
      ""avatar_url"": ""http://example.com/uploads/project/avatar/4/uploads/avatar.png"",
      ""shared_runners_enabled"": true,
      ""group_runners_enabled"": true,
      ""forks_count"": 0,
      ""star_count"": 0,
      ""runners_token"": ""b8547b1dc37721d05889db52fa2f02"",
      ""public_jobs"": true,
      ""shared_with_groups"": [],
      ""only_allow_merge_if_pipeline_succeeds"": false,
      ""allow_merge_on_skipped_pipeline"": false,
      ""restrict_user_defined_variables"": false,
      ""only_allow_merge_if_all_discussions_are_resolved"": false,
      ""remove_source_branch_after_merge"": false,
      ""request_access_enabled"": false,
      ""merge_method"": ""merge"",
      ""squash_option"": ""default_on"",
      ""autoclose_referenced_issues"": true,
      ""enforce_auth_checks_on_uploads"": true,
      ""suggestion_commit_message"": null,
      ""merge_commit_template"": null,
      ""squash_commit_template"": null,
      ""issue_branch_template"": ""gitlab/%{id}-%{title}"",
      ""statistics"": {
        ""commit_count"": 37,
        ""storage_size"": 1038090,
        ""repository_size"": 1038090,
        ""lfs_objects_size"": 0,
        ""job_artifacts_size"": 0,
        ""pipeline_artifacts_size"": 0,
        ""packages_size"": 0,
        ""snippets_size"": 0,
        ""uploads_size"": 0,
        ""container_registry_size"": 0
      },
      ""container_registry_image_prefix"": ""registry.example.com/diaspora/diaspora-client"",
      ""_links"": {
        ""self"": ""http://example.com/api/v4/projects"",
        ""issues"": ""http://example.com/api/v4/projects/1/issues"",
        ""merge_requests"": ""http://example.com/api/v4/projects/1/merge_requests"",
        ""repo_branches"": ""http://example.com/api/v4/projects/1/repository_branches"",
        ""labels"": ""http://example.com/api/v4/projects/1/labels"",
        ""events"": ""http://example.com/api/v4/projects/1/events"",
        ""members"": ""http://example.com/api/v4/projects/1/members"",
        ""cluster_agents"": ""http://example.com/api/v4/projects/1/cluster_agents""
      }
    },
    {
      ""id"": 6,
      ""description"": ""Lorem ipsum dolor sit amet, consectetur adipiscing elit."",
      ""description_html"": """",
      ""default_branch"": ""main"",
      ""visibility"": ""private"",
      ""ssh_url_to_repo"": ""git@example.com:brightbox/puppet.git"",
      ""http_url_to_repo"": ""http://example.com/brightbox/puppet.git"",
      ""web_url"": ""http://example.com/brightbox/puppet"",
      ""readme_url"": ""http://example.com/brightbox/puppet/blob/main/README.md"",
      ""tag_list"": [
        ""example"",
        ""puppet""
      ],
      ""topics"": [
        ""example"",
        ""puppet""
      ],
      ""owner"": {
        ""id"": 4,
        ""name"": ""Brightbox"",
        ""created_at"": ""2013-09-30T13:46:02Z""
      },
      ""name"": ""Puppet"",
      ""name_with_namespace"": ""Brightbox / Puppet"",
      ""path"": ""puppet"",
      ""path_with_namespace"": ""brightbox/puppet"",
      ""issues_enabled"": true,
      ""open_issues_count"": 1,
      ""merge_requests_enabled"": true,
      ""jobs_enabled"": true,
      ""wiki_enabled"": true,
      ""snippets_enabled"": false,
      ""can_create_merge_request_in"": true,
      ""resolve_outdated_diff_discussions"": false,
      ""container_registry_enabled"": false,
      ""container_registry_access_level"": ""disabled"",
      ""security_and_compliance_access_level"": ""disabled"",
      ""created_at"": ""2013-09-30T13:46:02Z"",
      ""updated_at"": ""2013-09-30T13:46:02Z"",
      ""last_activity_at"": ""2013-09-30T13:46:02Z"",
      ""creator_id"": 3,
      ""namespace"": {
        ""id"": 4,
        ""name"": ""Brightbox"",
        ""path"": ""brightbox"",
        ""kind"": ""group"",
        ""full_path"": ""brightbox""
      },
      ""import_status"": ""none"",
      ""import_error"": null,
      ""permissions"": {
        ""project_access"": {
          ""access_level"": 10,
          ""notification_level"": 3
        },
        ""group_access"": {
          ""access_level"": 50,
          ""notification_level"": 3
        }
      },
      ""archived"": false,
      ""avatar_url"": null,
      ""shared_runners_enabled"": true,
      ""group_runners_enabled"": true,
      ""forks_count"": 0,
      ""star_count"": 0,
      ""runners_token"": ""b8547b1dc37721d05889db52fa2f02"",
      ""public_jobs"": true,
      ""shared_with_groups"": [],
      ""only_allow_merge_if_pipeline_succeeds"": false,
      ""allow_merge_on_skipped_pipeline"": false,
      ""restrict_user_defined_variables"": false,
      ""only_allow_merge_if_all_discussions_are_resolved"": false,
      ""remove_source_branch_after_merge"": false,
      ""request_access_enabled"": false,
      ""merge_method"": ""merge"",
      ""squash_option"": ""default_on"",
      ""auto_devops_enabled"": true,
      ""auto_devops_deploy_strategy"": ""continuous"",
      ""repository_storage"": ""default"",
      ""approvals_before_merge"": 0,
      ""mirror"": false,
      ""mirror_user_id"": 45,
      ""mirror_trigger_builds"": false,
      ""only_mirror_protected_branches"": false,
      ""mirror_overwrites_diverged_branches"": false,
      ""external_authorization_classification_label"": null,
      ""packages_enabled"": true,
      ""service_desk_enabled"": false,
      ""service_desk_address"": null,
      ""autoclose_referenced_issues"": true,
      ""enforce_auth_checks_on_uploads"": true,
      ""suggestion_commit_message"": null,
      ""merge_commit_template"": null,
      ""squash_commit_template"": null,
      ""issue_branch_template"": ""gitlab/%{id}-%{title}"",
      ""statistics"": {
        ""commit_count"": 12,
        ""storage_size"": 2066080,
        ""repository_size"": 2066080,
        ""lfs_objects_size"": 0,
        ""job_artifacts_size"": 0,
        ""pipeline_artifacts_size"": 0,
        ""packages_size"": 0,
        ""snippets_size"": 0,
        ""uploads_size"": 0,
        ""container_registry_size"": 0
      },
      ""container_registry_image_prefix"": ""registry.example.com/brightbox/puppet"",
      ""_links"": {
        ""self"": ""http://example.com/api/v4/projects"",
        ""issues"": ""http://example.com/api/v4/projects/1/issues"",
        ""merge_requests"": ""http://example.com/api/v4/projects/1/merge_requests"",
        ""repo_branches"": ""http://example.com/api/v4/projects/1/repository_branches"",
        ""labels"": ""http://example.com/api/v4/projects/1/labels"",
        ""events"": ""http://example.com/api/v4/projects/1/events"",
        ""members"": ""http://example.com/api/v4/projects/1/members"",
        ""cluster_agents"": ""http://example.com/api/v4/projects/1/cluster_agents""
      }
    }
  ]",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the visibility constraint from the request_info
        visibility_constraint = request_info.get(""visibility"")
        
        # Check if the visibility constraint is provided
        if visibility_constraint is None:
            return 0
        
        # Define the allowed visibility values
        allowed_visibility_values = [""public"", ""internal"", ""private""]
        
        # Check if the provided visibility constraint is valid
        if visibility_constraint not in allowed_visibility_values:
            return -1
        
        # Verify the visibility attribute in each BasicProjectDetails object in the response
        for project in latest_response:
            if ""visibility"" not in project:
                return 0
            if project[""visibility""] != visibility_constraint:
                return -1
        
        # If all checks pass, return 1
        return 1
    except Exception as e:
        # In case of any exception, return -1
        return -1
",private,1.0,1,0,0,0,1,"range of values, logic"
get-/projects,BasicProjectDetails,repository_storage,repository_storage,4,,,parameters,repository_storage,Limit results to projects stored on repository_storage. (admins only),c,False,"{
    ""with_merge_requests_enabled"": true,
    ""with_issues_enabled"": true,
    ""visibility"": ""private"",
    ""repository_storage"": ""default"",
    ""last_activity_before"": ""2014-09-30T13:46:02Z"",
    ""last_activity_after"": ""2012-09-30T13:46:02Z"",
    ""id_after"": 0,
    ""archived"": false
  }","[
    {
      ""id"": 4,
      ""description"": ""Lorem ipsum dolor sit amet, consectetur adipiscing elit."",
      ""description_html"": """",
      ""default_branch"": ""main"",
      ""visibility"": ""private"",
      ""ssh_url_to_repo"": ""git@example.com:diaspora/diaspora-client.git"",
      ""http_url_to_repo"": ""http://example.com/diaspora/diaspora-client.git"",
      ""web_url"": ""http://example.com/diaspora/diaspora-client"",
      ""readme_url"": ""http://example.com/diaspora/diaspora-client/blob/main/README.md"",
      ""tag_list"": [
        ""example"",
        ""disapora client""
      ],
      ""topics"": [
        ""example"",
        ""disapora client""
      ],
      ""owner"": {
        ""id"": 3,
        ""name"": ""Diaspora"",
        ""created_at"": ""2013-09-30T13:46:02Z""
      },
      ""name"": ""Diaspora Client"",
      ""name_with_namespace"": ""Diaspora / Diaspora Client"",
      ""path"": ""diaspora-client"",
      ""path_with_namespace"": ""diaspora/diaspora-client"",
      ""issues_enabled"": true,
      ""open_issues_count"": 1,
      ""merge_requests_enabled"": true,
      ""jobs_enabled"": true,
      ""wiki_enabled"": true,
      ""snippets_enabled"": false,
      ""can_create_merge_request_in"": true,
      ""resolve_outdated_diff_discussions"": false,
      ""container_registry_enabled"": false,
      ""container_registry_access_level"": ""disabled"",
      ""security_and_compliance_access_level"": ""disabled"",
      ""created_at"": ""2013-09-30T13:46:02Z"",
      ""updated_at"": ""2013-09-30T13:46:02Z"",
      ""last_activity_at"": ""2013-09-30T13:46:02Z"",
      ""creator_id"": 3,
      ""namespace"": {
        ""id"": 3,
        ""name"": ""Diaspora"",
        ""path"": ""diaspora"",
        ""kind"": ""group"",
        ""full_path"": ""diaspora""
      },
      ""import_status"": ""none"",
      ""archived"": false,
      ""avatar_url"": ""http://example.com/uploads/project/avatar/4/uploads/avatar.png"",
      ""shared_runners_enabled"": true,
      ""group_runners_enabled"": true,
      ""forks_count"": 0,
      ""star_count"": 0,
      ""runners_token"": ""b8547b1dc37721d05889db52fa2f02"",
      ""public_jobs"": true,
      ""shared_with_groups"": [],
      ""only_allow_merge_if_pipeline_succeeds"": false,
      ""allow_merge_on_skipped_pipeline"": false,
      ""restrict_user_defined_variables"": false,
      ""only_allow_merge_if_all_discussions_are_resolved"": false,
      ""remove_source_branch_after_merge"": false,
      ""request_access_enabled"": false,
      ""merge_method"": ""merge"",
      ""squash_option"": ""default_on"",
      ""autoclose_referenced_issues"": true,
      ""enforce_auth_checks_on_uploads"": true,
      ""suggestion_commit_message"": null,
      ""merge_commit_template"": null,
      ""squash_commit_template"": null,
      ""issue_branch_template"": ""gitlab/%{id}-%{title}"",
      ""statistics"": {
        ""commit_count"": 37,
        ""storage_size"": 1038090,
        ""repository_size"": 1038090,
        ""lfs_objects_size"": 0,
        ""job_artifacts_size"": 0,
        ""pipeline_artifacts_size"": 0,
        ""packages_size"": 0,
        ""snippets_size"": 0,
        ""uploads_size"": 0,
        ""container_registry_size"": 0
      },
      ""container_registry_image_prefix"": ""registry.example.com/diaspora/diaspora-client"",
      ""_links"": {
        ""self"": ""http://example.com/api/v4/projects"",
        ""issues"": ""http://example.com/api/v4/projects/1/issues"",
        ""merge_requests"": ""http://example.com/api/v4/projects/1/merge_requests"",
        ""repo_branches"": ""http://example.com/api/v4/projects/1/repository_branches"",
        ""labels"": ""http://example.com/api/v4/projects/1/labels"",
        ""events"": ""http://example.com/api/v4/projects/1/events"",
        ""members"": ""http://example.com/api/v4/projects/1/members"",
        ""cluster_agents"": ""http://example.com/api/v4/projects/1/cluster_agents""
      }
    },
    {
      ""id"": 6,
      ""description"": ""Lorem ipsum dolor sit amet, consectetur adipiscing elit."",
      ""description_html"": """",
      ""default_branch"": ""main"",
      ""visibility"": ""private"",
      ""ssh_url_to_repo"": ""git@example.com:brightbox/puppet.git"",
      ""http_url_to_repo"": ""http://example.com/brightbox/puppet.git"",
      ""web_url"": ""http://example.com/brightbox/puppet"",
      ""readme_url"": ""http://example.com/brightbox/puppet/blob/main/README.md"",
      ""tag_list"": [
        ""example"",
        ""puppet""
      ],
      ""topics"": [
        ""example"",
        ""puppet""
      ],
      ""owner"": {
        ""id"": 4,
        ""name"": ""Brightbox"",
        ""created_at"": ""2013-09-30T13:46:02Z""
      },
      ""name"": ""Puppet"",
      ""name_with_namespace"": ""Brightbox / Puppet"",
      ""path"": ""puppet"",
      ""path_with_namespace"": ""brightbox/puppet"",
      ""issues_enabled"": true,
      ""open_issues_count"": 1,
      ""merge_requests_enabled"": true,
      ""jobs_enabled"": true,
      ""wiki_enabled"": true,
      ""snippets_enabled"": false,
      ""can_create_merge_request_in"": true,
      ""resolve_outdated_diff_discussions"": false,
      ""container_registry_enabled"": false,
      ""container_registry_access_level"": ""disabled"",
      ""security_and_compliance_access_level"": ""disabled"",
      ""created_at"": ""2013-09-30T13:46:02Z"",
      ""updated_at"": ""2013-09-30T13:46:02Z"",
      ""last_activity_at"": ""2013-09-30T13:46:02Z"",
      ""creator_id"": 3,
      ""namespace"": {
        ""id"": 4,
        ""name"": ""Brightbox"",
        ""path"": ""brightbox"",
        ""kind"": ""group"",
        ""full_path"": ""brightbox""
      },
      ""import_status"": ""none"",
      ""import_error"": null,
      ""permissions"": {
        ""project_access"": {
          ""access_level"": 10,
          ""notification_level"": 3
        },
        ""group_access"": {
          ""access_level"": 50,
          ""notification_level"": 3
        }
      },
      ""archived"": false,
      ""avatar_url"": null,
      ""shared_runners_enabled"": true,
      ""group_runners_enabled"": true,
      ""forks_count"": 0,
      ""star_count"": 0,
      ""runners_token"": ""b8547b1dc37721d05889db52fa2f02"",
      ""public_jobs"": true,
      ""shared_with_groups"": [],
      ""only_allow_merge_if_pipeline_succeeds"": false,
      ""allow_merge_on_skipped_pipeline"": false,
      ""restrict_user_defined_variables"": false,
      ""only_allow_merge_if_all_discussions_are_resolved"": false,
      ""remove_source_branch_after_merge"": false,
      ""request_access_enabled"": false,
      ""merge_method"": ""merge"",
      ""squash_option"": ""default_on"",
      ""auto_devops_enabled"": true,
      ""auto_devops_deploy_strategy"": ""continuous"",
      ""repository_storage"": ""default"",
      ""approvals_before_merge"": 0,
      ""mirror"": false,
      ""mirror_user_id"": 45,
      ""mirror_trigger_builds"": false,
      ""only_mirror_protected_branches"": false,
      ""mirror_overwrites_diverged_branches"": false,
      ""external_authorization_classification_label"": null,
      ""packages_enabled"": true,
      ""service_desk_enabled"": false,
      ""service_desk_address"": null,
      ""autoclose_referenced_issues"": true,
      ""enforce_auth_checks_on_uploads"": true,
      ""suggestion_commit_message"": null,
      ""merge_commit_template"": null,
      ""squash_commit_template"": null,
      ""issue_branch_template"": ""gitlab/%{id}-%{title}"",
      ""statistics"": {
        ""commit_count"": 12,
        ""storage_size"": 2066080,
        ""repository_size"": 2066080,
        ""lfs_objects_size"": 0,
        ""job_artifacts_size"": 0,
        ""pipeline_artifacts_size"": 0,
        ""packages_size"": 0,
        ""snippets_size"": 0,
        ""uploads_size"": 0,
        ""container_registry_size"": 0
      },
      ""container_registry_image_prefix"": ""registry.example.com/brightbox/puppet"",
      ""_links"": {
        ""self"": ""http://example.com/api/v4/projects"",
        ""issues"": ""http://example.com/api/v4/projects/1/issues"",
        ""merge_requests"": ""http://example.com/api/v4/projects/1/merge_requests"",
        ""repo_branches"": ""http://example.com/api/v4/projects/1/repository_branches"",
        ""labels"": ""http://example.com/api/v4/projects/1/labels"",
        ""events"": ""http://example.com/api/v4/projects/1/events"",
        ""members"": ""http://example.com/api/v4/projects/1/members"",
        ""cluster_agents"": ""http://example.com/api/v4/projects/1/cluster_agents""
      }
    }
  ]",TP,unknown,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the repository_storage value from the request_info
        requested_repository_storage = request_info.get(""repository_storage"")
        
        # Check if the requested repository_storage is provided
        if not requested_repository_storage:
            return 0
        
        # Iterate through the response to verify the constraint
        for project in latest_response:
            if ""repository_storage"" not in project:
                return 0
            if project[""repository_storage""] != requested_repository_storage:
                return -1
        
        return 1
    except Exception as e:
        return -1
",default,1.0,0,0,1,0,1,logic
get-/projects,BasicProjectDetails,last_activity_at,last_activity_at,5,,,parameters,last_activity_before,Limit results to projects with last_activity before specified time. ISO 8601 YYYY-MM-DDTHH:MM:SSZ,c,True,"{
    ""with_merge_requests_enabled"": true,
    ""with_issues_enabled"": true,
    ""visibility"": ""private"",
    ""repository_storage"": ""default"",
    ""last_activity_before"": ""2014-09-30T13:46:02Z"",
    ""last_activity_after"": ""2012-09-30T13:46:02Z"",
    ""id_after"": 0,
    ""archived"": false
  }","[
    {
      ""id"": 4,
      ""description"": ""Lorem ipsum dolor sit amet, consectetur adipiscing elit."",
      ""description_html"": """",
      ""default_branch"": ""main"",
      ""visibility"": ""private"",
      ""ssh_url_to_repo"": ""git@example.com:diaspora/diaspora-client.git"",
      ""http_url_to_repo"": ""http://example.com/diaspora/diaspora-client.git"",
      ""web_url"": ""http://example.com/diaspora/diaspora-client"",
      ""readme_url"": ""http://example.com/diaspora/diaspora-client/blob/main/README.md"",
      ""tag_list"": [
        ""example"",
        ""disapora client""
      ],
      ""topics"": [
        ""example"",
        ""disapora client""
      ],
      ""owner"": {
        ""id"": 3,
        ""name"": ""Diaspora"",
        ""created_at"": ""2013-09-30T13:46:02Z""
      },
      ""name"": ""Diaspora Client"",
      ""name_with_namespace"": ""Diaspora / Diaspora Client"",
      ""path"": ""diaspora-client"",
      ""path_with_namespace"": ""diaspora/diaspora-client"",
      ""issues_enabled"": true,
      ""open_issues_count"": 1,
      ""merge_requests_enabled"": true,
      ""jobs_enabled"": true,
      ""wiki_enabled"": true,
      ""snippets_enabled"": false,
      ""can_create_merge_request_in"": true,
      ""resolve_outdated_diff_discussions"": false,
      ""container_registry_enabled"": false,
      ""container_registry_access_level"": ""disabled"",
      ""security_and_compliance_access_level"": ""disabled"",
      ""created_at"": ""2013-09-30T13:46:02Z"",
      ""updated_at"": ""2013-09-30T13:46:02Z"",
      ""last_activity_at"": ""2013-09-30T13:46:02Z"",
      ""creator_id"": 3,
      ""namespace"": {
        ""id"": 3,
        ""name"": ""Diaspora"",
        ""path"": ""diaspora"",
        ""kind"": ""group"",
        ""full_path"": ""diaspora""
      },
      ""import_status"": ""none"",
      ""archived"": false,
      ""avatar_url"": ""http://example.com/uploads/project/avatar/4/uploads/avatar.png"",
      ""shared_runners_enabled"": true,
      ""group_runners_enabled"": true,
      ""forks_count"": 0,
      ""star_count"": 0,
      ""runners_token"": ""b8547b1dc37721d05889db52fa2f02"",
      ""public_jobs"": true,
      ""shared_with_groups"": [],
      ""only_allow_merge_if_pipeline_succeeds"": false,
      ""allow_merge_on_skipped_pipeline"": false,
      ""restrict_user_defined_variables"": false,
      ""only_allow_merge_if_all_discussions_are_resolved"": false,
      ""remove_source_branch_after_merge"": false,
      ""request_access_enabled"": false,
      ""merge_method"": ""merge"",
      ""squash_option"": ""default_on"",
      ""autoclose_referenced_issues"": true,
      ""enforce_auth_checks_on_uploads"": true,
      ""suggestion_commit_message"": null,
      ""merge_commit_template"": null,
      ""squash_commit_template"": null,
      ""issue_branch_template"": ""gitlab/%{id}-%{title}"",
      ""statistics"": {
        ""commit_count"": 37,
        ""storage_size"": 1038090,
        ""repository_size"": 1038090,
        ""lfs_objects_size"": 0,
        ""job_artifacts_size"": 0,
        ""pipeline_artifacts_size"": 0,
        ""packages_size"": 0,
        ""snippets_size"": 0,
        ""uploads_size"": 0,
        ""container_registry_size"": 0
      },
      ""container_registry_image_prefix"": ""registry.example.com/diaspora/diaspora-client"",
      ""_links"": {
        ""self"": ""http://example.com/api/v4/projects"",
        ""issues"": ""http://example.com/api/v4/projects/1/issues"",
        ""merge_requests"": ""http://example.com/api/v4/projects/1/merge_requests"",
        ""repo_branches"": ""http://example.com/api/v4/projects/1/repository_branches"",
        ""labels"": ""http://example.com/api/v4/projects/1/labels"",
        ""events"": ""http://example.com/api/v4/projects/1/events"",
        ""members"": ""http://example.com/api/v4/projects/1/members"",
        ""cluster_agents"": ""http://example.com/api/v4/projects/1/cluster_agents""
      }
    },
    {
      ""id"": 6,
      ""description"": ""Lorem ipsum dolor sit amet, consectetur adipiscing elit."",
      ""description_html"": """",
      ""default_branch"": ""main"",
      ""visibility"": ""private"",
      ""ssh_url_to_repo"": ""git@example.com:brightbox/puppet.git"",
      ""http_url_to_repo"": ""http://example.com/brightbox/puppet.git"",
      ""web_url"": ""http://example.com/brightbox/puppet"",
      ""readme_url"": ""http://example.com/brightbox/puppet/blob/main/README.md"",
      ""tag_list"": [
        ""example"",
        ""puppet""
      ],
      ""topics"": [
        ""example"",
        ""puppet""
      ],
      ""owner"": {
        ""id"": 4,
        ""name"": ""Brightbox"",
        ""created_at"": ""2013-09-30T13:46:02Z""
      },
      ""name"": ""Puppet"",
      ""name_with_namespace"": ""Brightbox / Puppet"",
      ""path"": ""puppet"",
      ""path_with_namespace"": ""brightbox/puppet"",
      ""issues_enabled"": true,
      ""open_issues_count"": 1,
      ""merge_requests_enabled"": true,
      ""jobs_enabled"": true,
      ""wiki_enabled"": true,
      ""snippets_enabled"": false,
      ""can_create_merge_request_in"": true,
      ""resolve_outdated_diff_discussions"": false,
      ""container_registry_enabled"": false,
      ""container_registry_access_level"": ""disabled"",
      ""security_and_compliance_access_level"": ""disabled"",
      ""created_at"": ""2013-09-30T13:46:02Z"",
      ""updated_at"": ""2013-09-30T13:46:02Z"",
      ""last_activity_at"": ""2013-09-30T13:46:02Z"",
      ""creator_id"": 3,
      ""namespace"": {
        ""id"": 4,
        ""name"": ""Brightbox"",
        ""path"": ""brightbox"",
        ""kind"": ""group"",
        ""full_path"": ""brightbox""
      },
      ""import_status"": ""none"",
      ""import_error"": null,
      ""permissions"": {
        ""project_access"": {
          ""access_level"": 10,
          ""notification_level"": 3
        },
        ""group_access"": {
          ""access_level"": 50,
          ""notification_level"": 3
        }
      },
      ""archived"": false,
      ""avatar_url"": null,
      ""shared_runners_enabled"": true,
      ""group_runners_enabled"": true,
      ""forks_count"": 0,
      ""star_count"": 0,
      ""runners_token"": ""b8547b1dc37721d05889db52fa2f02"",
      ""public_jobs"": true,
      ""shared_with_groups"": [],
      ""only_allow_merge_if_pipeline_succeeds"": false,
      ""allow_merge_on_skipped_pipeline"": false,
      ""restrict_user_defined_variables"": false,
      ""only_allow_merge_if_all_discussions_are_resolved"": false,
      ""remove_source_branch_after_merge"": false,
      ""request_access_enabled"": false,
      ""merge_method"": ""merge"",
      ""squash_option"": ""default_on"",
      ""auto_devops_enabled"": true,
      ""auto_devops_deploy_strategy"": ""continuous"",
      ""repository_storage"": ""default"",
      ""approvals_before_merge"": 0,
      ""mirror"": false,
      ""mirror_user_id"": 45,
      ""mirror_trigger_builds"": false,
      ""only_mirror_protected_branches"": false,
      ""mirror_overwrites_diverged_branches"": false,
      ""external_authorization_classification_label"": null,
      ""packages_enabled"": true,
      ""service_desk_enabled"": false,
      ""service_desk_address"": null,
      ""autoclose_referenced_issues"": true,
      ""enforce_auth_checks_on_uploads"": true,
      ""suggestion_commit_message"": null,
      ""merge_commit_template"": null,
      ""squash_commit_template"": null,
      ""issue_branch_template"": ""gitlab/%{id}-%{title}"",
      ""statistics"": {
        ""commit_count"": 12,
        ""storage_size"": 2066080,
        ""repository_size"": 2066080,
        ""lfs_objects_size"": 0,
        ""job_artifacts_size"": 0,
        ""pipeline_artifacts_size"": 0,
        ""packages_size"": 0,
        ""snippets_size"": 0,
        ""uploads_size"": 0,
        ""container_registry_size"": 0
      },
      ""container_registry_image_prefix"": ""registry.example.com/brightbox/puppet"",
      ""_links"": {
        ""self"": ""http://example.com/api/v4/projects"",
        ""issues"": ""http://example.com/api/v4/projects/1/issues"",
        ""merge_requests"": ""http://example.com/api/v4/projects/1/merge_requests"",
        ""repo_branches"": ""http://example.com/api/v4/projects/1/repository_branches"",
        ""labels"": ""http://example.com/api/v4/projects/1/labels"",
        ""events"": ""http://example.com/api/v4/projects/1/events"",
        ""members"": ""http://example.com/api/v4/projects/1/members"",
        ""cluster_agents"": ""http://example.com/api/v4/projects/1/cluster_agents""
      }
    }
  ]",TP,mismatched,"from datetime import datetime
import json

def verify_latest_response(latest_response, request_info):
    try:
        last_activity_before = request_info.get(""last_activity_before"")
        if not last_activity_before:
            return 0
        
        last_activity_before_dt = datetime.strptime(last_activity_before, ""%Y-%m-%dT%H:%M:%SZ"")
        
        for project in latest_response:
            last_activity_at = project.get(""last_activity_at"")
            if not last_activity_at:
                return 0
            
            last_activity_at_dt = datetime.strptime(last_activity_at, ""%Y-%m-%dT%H:%M:%SZ"")
            if last_activity_at_dt >= last_activity_before_dt:
                return -1
        
        return 1
    except Exception as e:
        return -1
",2013-09-30T13:46:02Z,1.0,1,0,0,0,1,"logic, format"
get-/projects,BasicProjectDetails,last_activity_at,last_activity_at,6,,,parameters,last_activity_after,Limit results to projects with last_activity after specified time.ISO 8601 YYYY-MM-DDTHH:MM:SSZ,c,True,"{
    ""with_merge_requests_enabled"": true,
    ""with_issues_enabled"": true,
    ""visibility"": ""private"",
    ""repository_storage"": ""default"",
    ""last_activity_before"": ""2014-09-30T13:46:02Z"",
    ""last_activity_after"": ""2012-09-30T13:46:02Z"",
    ""id_after"": 0,
    ""archived"": false
  }","[
    {
      ""id"": 4,
      ""description"": ""Lorem ipsum dolor sit amet, consectetur adipiscing elit."",
      ""description_html"": """",
      ""default_branch"": ""main"",
      ""visibility"": ""private"",
      ""ssh_url_to_repo"": ""git@example.com:diaspora/diaspora-client.git"",
      ""http_url_to_repo"": ""http://example.com/diaspora/diaspora-client.git"",
      ""web_url"": ""http://example.com/diaspora/diaspora-client"",
      ""readme_url"": ""http://example.com/diaspora/diaspora-client/blob/main/README.md"",
      ""tag_list"": [
        ""example"",
        ""disapora client""
      ],
      ""topics"": [
        ""example"",
        ""disapora client""
      ],
      ""owner"": {
        ""id"": 3,
        ""name"": ""Diaspora"",
        ""created_at"": ""2013-09-30T13:46:02Z""
      },
      ""name"": ""Diaspora Client"",
      ""name_with_namespace"": ""Diaspora / Diaspora Client"",
      ""path"": ""diaspora-client"",
      ""path_with_namespace"": ""diaspora/diaspora-client"",
      ""issues_enabled"": true,
      ""open_issues_count"": 1,
      ""merge_requests_enabled"": true,
      ""jobs_enabled"": true,
      ""wiki_enabled"": true,
      ""snippets_enabled"": false,
      ""can_create_merge_request_in"": true,
      ""resolve_outdated_diff_discussions"": false,
      ""container_registry_enabled"": false,
      ""container_registry_access_level"": ""disabled"",
      ""security_and_compliance_access_level"": ""disabled"",
      ""created_at"": ""2013-09-30T13:46:02Z"",
      ""updated_at"": ""2013-09-30T13:46:02Z"",
      ""last_activity_at"": ""2013-09-30T13:46:02Z"",
      ""creator_id"": 3,
      ""namespace"": {
        ""id"": 3,
        ""name"": ""Diaspora"",
        ""path"": ""diaspora"",
        ""kind"": ""group"",
        ""full_path"": ""diaspora""
      },
      ""import_status"": ""none"",
      ""archived"": false,
      ""avatar_url"": ""http://example.com/uploads/project/avatar/4/uploads/avatar.png"",
      ""shared_runners_enabled"": true,
      ""group_runners_enabled"": true,
      ""forks_count"": 0,
      ""star_count"": 0,
      ""runners_token"": ""b8547b1dc37721d05889db52fa2f02"",
      ""public_jobs"": true,
      ""shared_with_groups"": [],
      ""only_allow_merge_if_pipeline_succeeds"": false,
      ""allow_merge_on_skipped_pipeline"": false,
      ""restrict_user_defined_variables"": false,
      ""only_allow_merge_if_all_discussions_are_resolved"": false,
      ""remove_source_branch_after_merge"": false,
      ""request_access_enabled"": false,
      ""merge_method"": ""merge"",
      ""squash_option"": ""default_on"",
      ""autoclose_referenced_issues"": true,
      ""enforce_auth_checks_on_uploads"": true,
      ""suggestion_commit_message"": null,
      ""merge_commit_template"": null,
      ""squash_commit_template"": null,
      ""issue_branch_template"": ""gitlab/%{id}-%{title}"",
      ""statistics"": {
        ""commit_count"": 37,
        ""storage_size"": 1038090,
        ""repository_size"": 1038090,
        ""lfs_objects_size"": 0,
        ""job_artifacts_size"": 0,
        ""pipeline_artifacts_size"": 0,
        ""packages_size"": 0,
        ""snippets_size"": 0,
        ""uploads_size"": 0,
        ""container_registry_size"": 0
      },
      ""container_registry_image_prefix"": ""registry.example.com/diaspora/diaspora-client"",
      ""_links"": {
        ""self"": ""http://example.com/api/v4/projects"",
        ""issues"": ""http://example.com/api/v4/projects/1/issues"",
        ""merge_requests"": ""http://example.com/api/v4/projects/1/merge_requests"",
        ""repo_branches"": ""http://example.com/api/v4/projects/1/repository_branches"",
        ""labels"": ""http://example.com/api/v4/projects/1/labels"",
        ""events"": ""http://example.com/api/v4/projects/1/events"",
        ""members"": ""http://example.com/api/v4/projects/1/members"",
        ""cluster_agents"": ""http://example.com/api/v4/projects/1/cluster_agents""
      }
    },
    {
      ""id"": 6,
      ""description"": ""Lorem ipsum dolor sit amet, consectetur adipiscing elit."",
      ""description_html"": """",
      ""default_branch"": ""main"",
      ""visibility"": ""private"",
      ""ssh_url_to_repo"": ""git@example.com:brightbox/puppet.git"",
      ""http_url_to_repo"": ""http://example.com/brightbox/puppet.git"",
      ""web_url"": ""http://example.com/brightbox/puppet"",
      ""readme_url"": ""http://example.com/brightbox/puppet/blob/main/README.md"",
      ""tag_list"": [
        ""example"",
        ""puppet""
      ],
      ""topics"": [
        ""example"",
        ""puppet""
      ],
      ""owner"": {
        ""id"": 4,
        ""name"": ""Brightbox"",
        ""created_at"": ""2013-09-30T13:46:02Z""
      },
      ""name"": ""Puppet"",
      ""name_with_namespace"": ""Brightbox / Puppet"",
      ""path"": ""puppet"",
      ""path_with_namespace"": ""brightbox/puppet"",
      ""issues_enabled"": true,
      ""open_issues_count"": 1,
      ""merge_requests_enabled"": true,
      ""jobs_enabled"": true,
      ""wiki_enabled"": true,
      ""snippets_enabled"": false,
      ""can_create_merge_request_in"": true,
      ""resolve_outdated_diff_discussions"": false,
      ""container_registry_enabled"": false,
      ""container_registry_access_level"": ""disabled"",
      ""security_and_compliance_access_level"": ""disabled"",
      ""created_at"": ""2013-09-30T13:46:02Z"",
      ""updated_at"": ""2013-09-30T13:46:02Z"",
      ""last_activity_at"": ""2013-09-30T13:46:02Z"",
      ""creator_id"": 3,
      ""namespace"": {
        ""id"": 4,
        ""name"": ""Brightbox"",
        ""path"": ""brightbox"",
        ""kind"": ""group"",
        ""full_path"": ""brightbox""
      },
      ""import_status"": ""none"",
      ""import_error"": null,
      ""permissions"": {
        ""project_access"": {
          ""access_level"": 10,
          ""notification_level"": 3
        },
        ""group_access"": {
          ""access_level"": 50,
          ""notification_level"": 3
        }
      },
      ""archived"": false,
      ""avatar_url"": null,
      ""shared_runners_enabled"": true,
      ""group_runners_enabled"": true,
      ""forks_count"": 0,
      ""star_count"": 0,
      ""runners_token"": ""b8547b1dc37721d05889db52fa2f02"",
      ""public_jobs"": true,
      ""shared_with_groups"": [],
      ""only_allow_merge_if_pipeline_succeeds"": false,
      ""allow_merge_on_skipped_pipeline"": false,
      ""restrict_user_defined_variables"": false,
      ""only_allow_merge_if_all_discussions_are_resolved"": false,
      ""remove_source_branch_after_merge"": false,
      ""request_access_enabled"": false,
      ""merge_method"": ""merge"",
      ""squash_option"": ""default_on"",
      ""auto_devops_enabled"": true,
      ""auto_devops_deploy_strategy"": ""continuous"",
      ""repository_storage"": ""default"",
      ""approvals_before_merge"": 0,
      ""mirror"": false,
      ""mirror_user_id"": 45,
      ""mirror_trigger_builds"": false,
      ""only_mirror_protected_branches"": false,
      ""mirror_overwrites_diverged_branches"": false,
      ""external_authorization_classification_label"": null,
      ""packages_enabled"": true,
      ""service_desk_enabled"": false,
      ""service_desk_address"": null,
      ""autoclose_referenced_issues"": true,
      ""enforce_auth_checks_on_uploads"": true,
      ""suggestion_commit_message"": null,
      ""merge_commit_template"": null,
      ""squash_commit_template"": null,
      ""issue_branch_template"": ""gitlab/%{id}-%{title}"",
      ""statistics"": {
        ""commit_count"": 12,
        ""storage_size"": 2066080,
        ""repository_size"": 2066080,
        ""lfs_objects_size"": 0,
        ""job_artifacts_size"": 0,
        ""pipeline_artifacts_size"": 0,
        ""packages_size"": 0,
        ""snippets_size"": 0,
        ""uploads_size"": 0,
        ""container_registry_size"": 0
      },
      ""container_registry_image_prefix"": ""registry.example.com/brightbox/puppet"",
      ""_links"": {
        ""self"": ""http://example.com/api/v4/projects"",
        ""issues"": ""http://example.com/api/v4/projects/1/issues"",
        ""merge_requests"": ""http://example.com/api/v4/projects/1/merge_requests"",
        ""repo_branches"": ""http://example.com/api/v4/projects/1/repository_branches"",
        ""labels"": ""http://example.com/api/v4/projects/1/labels"",
        ""events"": ""http://example.com/api/v4/projects/1/events"",
        ""members"": ""http://example.com/api/v4/projects/1/members"",
        ""cluster_agents"": ""http://example.com/api/v4/projects/1/cluster_agents""
      }
    }
  ]",TP,mismatched,"from datetime import datetime
import json

def verify_latest_response(latest_response, request_info):
    try:
        last_activity_after = request_info.get(""last_activity_after"")
        if not last_activity_after:
            return 0
        
        last_activity_after_dt = datetime.strptime(last_activity_after, ""%Y-%m-%dT%H:%M:%SZ"")
        
        for project in latest_response:
            last_activity_at = project.get(""last_activity_at"")
            if not last_activity_at:
                return 0
            
            last_activity_at_dt = datetime.strptime(last_activity_at, ""%Y-%m-%dT%H:%M:%SZ"")
            if last_activity_at_dt <= last_activity_after_dt:
                return -1
        
        return 1
    except Exception as e:
        return -1
",2013-09-30T13:46:02Z,1.0,1,0,0,0,1,"logic, format"
get-/projects,BasicProjectDetails,last_activity_at,last_activity_at,5,,,parameters,last_activity_before,Limit results to projects with last_activity before specified time. ISO 8601 YYYY-MM-DDTHH:MM:SSZ,c,True,"{
    ""with_merge_requests_enabled"": true,
    ""with_issues_enabled"": true,
    ""visibility"": ""private"",
    ""repository_storage"": ""default"",
    ""last_activity_before"": ""2014-09-30T13:46:02Z"",
    ""last_activity_after"": ""2012-09-30T13:46:02Z"",
    ""id_after"": 0,
    ""archived"": false
  }","[
    {
      ""id"": 4,
      ""description"": ""Lorem ipsum dolor sit amet, consectetur adipiscing elit."",
      ""description_html"": """",
      ""default_branch"": ""main"",
      ""visibility"": ""private"",
      ""ssh_url_to_repo"": ""git@example.com:diaspora/diaspora-client.git"",
      ""http_url_to_repo"": ""http://example.com/diaspora/diaspora-client.git"",
      ""web_url"": ""http://example.com/diaspora/diaspora-client"",
      ""readme_url"": ""http://example.com/diaspora/diaspora-client/blob/main/README.md"",
      ""tag_list"": [
        ""example"",
        ""disapora client""
      ],
      ""topics"": [
        ""example"",
        ""disapora client""
      ],
      ""owner"": {
        ""id"": 3,
        ""name"": ""Diaspora"",
        ""created_at"": ""2013-09-30T13:46:02Z""
      },
      ""name"": ""Diaspora Client"",
      ""name_with_namespace"": ""Diaspora / Diaspora Client"",
      ""path"": ""diaspora-client"",
      ""path_with_namespace"": ""diaspora/diaspora-client"",
      ""issues_enabled"": true,
      ""open_issues_count"": 1,
      ""merge_requests_enabled"": true,
      ""jobs_enabled"": true,
      ""wiki_enabled"": true,
      ""snippets_enabled"": false,
      ""can_create_merge_request_in"": true,
      ""resolve_outdated_diff_discussions"": false,
      ""container_registry_enabled"": false,
      ""container_registry_access_level"": ""disabled"",
      ""security_and_compliance_access_level"": ""disabled"",
      ""created_at"": ""2013-09-30T13:46:02Z"",
      ""updated_at"": ""2013-09-30T13:46:02Z"",
      ""last_activity_at"": ""2013-09-30T13:46:02Z"",
      ""creator_id"": 3,
      ""namespace"": {
        ""id"": 3,
        ""name"": ""Diaspora"",
        ""path"": ""diaspora"",
        ""kind"": ""group"",
        ""full_path"": ""diaspora""
      },
      ""import_status"": ""none"",
      ""archived"": false,
      ""avatar_url"": ""http://example.com/uploads/project/avatar/4/uploads/avatar.png"",
      ""shared_runners_enabled"": true,
      ""group_runners_enabled"": true,
      ""forks_count"": 0,
      ""star_count"": 0,
      ""runners_token"": ""b8547b1dc37721d05889db52fa2f02"",
      ""public_jobs"": true,
      ""shared_with_groups"": [],
      ""only_allow_merge_if_pipeline_succeeds"": false,
      ""allow_merge_on_skipped_pipeline"": false,
      ""restrict_user_defined_variables"": false,
      ""only_allow_merge_if_all_discussions_are_resolved"": false,
      ""remove_source_branch_after_merge"": false,
      ""request_access_enabled"": false,
      ""merge_method"": ""merge"",
      ""squash_option"": ""default_on"",
      ""autoclose_referenced_issues"": true,
      ""enforce_auth_checks_on_uploads"": true,
      ""suggestion_commit_message"": null,
      ""merge_commit_template"": null,
      ""squash_commit_template"": null,
      ""issue_branch_template"": ""gitlab/%{id}-%{title}"",
      ""statistics"": {
        ""commit_count"": 37,
        ""storage_size"": 1038090,
        ""repository_size"": 1038090,
        ""lfs_objects_size"": 0,
        ""job_artifacts_size"": 0,
        ""pipeline_artifacts_size"": 0,
        ""packages_size"": 0,
        ""snippets_size"": 0,
        ""uploads_size"": 0,
        ""container_registry_size"": 0
      },
      ""container_registry_image_prefix"": ""registry.example.com/diaspora/diaspora-client"",
      ""_links"": {
        ""self"": ""http://example.com/api/v4/projects"",
        ""issues"": ""http://example.com/api/v4/projects/1/issues"",
        ""merge_requests"": ""http://example.com/api/v4/projects/1/merge_requests"",
        ""repo_branches"": ""http://example.com/api/v4/projects/1/repository_branches"",
        ""labels"": ""http://example.com/api/v4/projects/1/labels"",
        ""events"": ""http://example.com/api/v4/projects/1/events"",
        ""members"": ""http://example.com/api/v4/projects/1/members"",
        ""cluster_agents"": ""http://example.com/api/v4/projects/1/cluster_agents""
      }
    },
    {
      ""id"": 6,
      ""description"": ""Lorem ipsum dolor sit amet, consectetur adipiscing elit."",
      ""description_html"": """",
      ""default_branch"": ""main"",
      ""visibility"": ""private"",
      ""ssh_url_to_repo"": ""git@example.com:brightbox/puppet.git"",
      ""http_url_to_repo"": ""http://example.com/brightbox/puppet.git"",
      ""web_url"": ""http://example.com/brightbox/puppet"",
      ""readme_url"": ""http://example.com/brightbox/puppet/blob/main/README.md"",
      ""tag_list"": [
        ""example"",
        ""puppet""
      ],
      ""topics"": [
        ""example"",
        ""puppet""
      ],
      ""owner"": {
        ""id"": 4,
        ""name"": ""Brightbox"",
        ""created_at"": ""2013-09-30T13:46:02Z""
      },
      ""name"": ""Puppet"",
      ""name_with_namespace"": ""Brightbox / Puppet"",
      ""path"": ""puppet"",
      ""path_with_namespace"": ""brightbox/puppet"",
      ""issues_enabled"": true,
      ""open_issues_count"": 1,
      ""merge_requests_enabled"": true,
      ""jobs_enabled"": true,
      ""wiki_enabled"": true,
      ""snippets_enabled"": false,
      ""can_create_merge_request_in"": true,
      ""resolve_outdated_diff_discussions"": false,
      ""container_registry_enabled"": false,
      ""container_registry_access_level"": ""disabled"",
      ""security_and_compliance_access_level"": ""disabled"",
      ""created_at"": ""2013-09-30T13:46:02Z"",
      ""updated_at"": ""2013-09-30T13:46:02Z"",
      ""last_activity_at"": ""2013-09-30T13:46:02Z"",
      ""creator_id"": 3,
      ""namespace"": {
        ""id"": 4,
        ""name"": ""Brightbox"",
        ""path"": ""brightbox"",
        ""kind"": ""group"",
        ""full_path"": ""brightbox""
      },
      ""import_status"": ""none"",
      ""import_error"": null,
      ""permissions"": {
        ""project_access"": {
          ""access_level"": 10,
          ""notification_level"": 3
        },
        ""group_access"": {
          ""access_level"": 50,
          ""notification_level"": 3
        }
      },
      ""archived"": false,
      ""avatar_url"": null,
      ""shared_runners_enabled"": true,
      ""group_runners_enabled"": true,
      ""forks_count"": 0,
      ""star_count"": 0,
      ""runners_token"": ""b8547b1dc37721d05889db52fa2f02"",
      ""public_jobs"": true,
      ""shared_with_groups"": [],
      ""only_allow_merge_if_pipeline_succeeds"": false,
      ""allow_merge_on_skipped_pipeline"": false,
      ""restrict_user_defined_variables"": false,
      ""only_allow_merge_if_all_discussions_are_resolved"": false,
      ""remove_source_branch_after_merge"": false,
      ""request_access_enabled"": false,
      ""merge_method"": ""merge"",
      ""squash_option"": ""default_on"",
      ""auto_devops_enabled"": true,
      ""auto_devops_deploy_strategy"": ""continuous"",
      ""repository_storage"": ""default"",
      ""approvals_before_merge"": 0,
      ""mirror"": false,
      ""mirror_user_id"": 45,
      ""mirror_trigger_builds"": false,
      ""only_mirror_protected_branches"": false,
      ""mirror_overwrites_diverged_branches"": false,
      ""external_authorization_classification_label"": null,
      ""packages_enabled"": true,
      ""service_desk_enabled"": false,
      ""service_desk_address"": null,
      ""autoclose_referenced_issues"": true,
      ""enforce_auth_checks_on_uploads"": true,
      ""suggestion_commit_message"": null,
      ""merge_commit_template"": null,
      ""squash_commit_template"": null,
      ""issue_branch_template"": ""gitlab/%{id}-%{title}"",
      ""statistics"": {
        ""commit_count"": 12,
        ""storage_size"": 2066080,
        ""repository_size"": 2066080,
        ""lfs_objects_size"": 0,
        ""job_artifacts_size"": 0,
        ""pipeline_artifacts_size"": 0,
        ""packages_size"": 0,
        ""snippets_size"": 0,
        ""uploads_size"": 0,
        ""container_registry_size"": 0
      },
      ""container_registry_image_prefix"": ""registry.example.com/brightbox/puppet"",
      ""_links"": {
        ""self"": ""http://example.com/api/v4/projects"",
        ""issues"": ""http://example.com/api/v4/projects/1/issues"",
        ""merge_requests"": ""http://example.com/api/v4/projects/1/merge_requests"",
        ""repo_branches"": ""http://example.com/api/v4/projects/1/repository_branches"",
        ""labels"": ""http://example.com/api/v4/projects/1/labels"",
        ""events"": ""http://example.com/api/v4/projects/1/events"",
        ""members"": ""http://example.com/api/v4/projects/1/members"",
        ""cluster_agents"": ""http://example.com/api/v4/projects/1/cluster_agents""
      }
    }
  ]",TP,mismatched,"from datetime import datetime
import json

def verify_latest_response(latest_response, request_info):
    try:
        last_activity_before = request_info.get(""last_activity_before"")
        if not last_activity_before:
            return 0
        
        last_activity_before_dt = datetime.strptime(last_activity_before, ""%Y-%m-%dT%H:%M:%SZ"")
        
        for project in latest_response:
            last_activity_at = project.get(""last_activity_at"")
            if not last_activity_at:
                return 0
            
            last_activity_at_dt = datetime.strptime(last_activity_at, ""%Y-%m-%dT%H:%M:%SZ"")
            if last_activity_at_dt >= last_activity_before_dt:
                return -1
        
        return 1
    except Exception as e:
        return -1
",2013-09-30T13:46:02Z,1.0,1,0,0,0,1,"logic, format"
get-/projects,BasicProjectDetails,last_activity_at,last_activity_at,6,,,parameters,last_activity_after,Limit results to projects with last_activity after specified time.ISO 8601 YYYY-MM-DDTHH:MM:SSZ,c,True,"{
    ""with_merge_requests_enabled"": true,
    ""with_issues_enabled"": true,
    ""visibility"": ""private"",
    ""repository_storage"": ""default"",
    ""last_activity_before"": ""2014-09-30T13:46:02Z"",
    ""last_activity_after"": ""2012-09-30T13:46:02Z"",
    ""id_after"": 0,
    ""archived"": false
  }","[
    {
      ""id"": 4,
      ""description"": ""Lorem ipsum dolor sit amet, consectetur adipiscing elit."",
      ""description_html"": """",
      ""default_branch"": ""main"",
      ""visibility"": ""private"",
      ""ssh_url_to_repo"": ""git@example.com:diaspora/diaspora-client.git"",
      ""http_url_to_repo"": ""http://example.com/diaspora/diaspora-client.git"",
      ""web_url"": ""http://example.com/diaspora/diaspora-client"",
      ""readme_url"": ""http://example.com/diaspora/diaspora-client/blob/main/README.md"",
      ""tag_list"": [
        ""example"",
        ""disapora client""
      ],
      ""topics"": [
        ""example"",
        ""disapora client""
      ],
      ""owner"": {
        ""id"": 3,
        ""name"": ""Diaspora"",
        ""created_at"": ""2013-09-30T13:46:02Z""
      },
      ""name"": ""Diaspora Client"",
      ""name_with_namespace"": ""Diaspora / Diaspora Client"",
      ""path"": ""diaspora-client"",
      ""path_with_namespace"": ""diaspora/diaspora-client"",
      ""issues_enabled"": true,
      ""open_issues_count"": 1,
      ""merge_requests_enabled"": true,
      ""jobs_enabled"": true,
      ""wiki_enabled"": true,
      ""snippets_enabled"": false,
      ""can_create_merge_request_in"": true,
      ""resolve_outdated_diff_discussions"": false,
      ""container_registry_enabled"": false,
      ""container_registry_access_level"": ""disabled"",
      ""security_and_compliance_access_level"": ""disabled"",
      ""created_at"": ""2013-09-30T13:46:02Z"",
      ""updated_at"": ""2013-09-30T13:46:02Z"",
      ""last_activity_at"": ""2013-09-30T13:46:02Z"",
      ""creator_id"": 3,
      ""namespace"": {
        ""id"": 3,
        ""name"": ""Diaspora"",
        ""path"": ""diaspora"",
        ""kind"": ""group"",
        ""full_path"": ""diaspora""
      },
      ""import_status"": ""none"",
      ""archived"": false,
      ""avatar_url"": ""http://example.com/uploads/project/avatar/4/uploads/avatar.png"",
      ""shared_runners_enabled"": true,
      ""group_runners_enabled"": true,
      ""forks_count"": 0,
      ""star_count"": 0,
      ""runners_token"": ""b8547b1dc37721d05889db52fa2f02"",
      ""public_jobs"": true,
      ""shared_with_groups"": [],
      ""only_allow_merge_if_pipeline_succeeds"": false,
      ""allow_merge_on_skipped_pipeline"": false,
      ""restrict_user_defined_variables"": false,
      ""only_allow_merge_if_all_discussions_are_resolved"": false,
      ""remove_source_branch_after_merge"": false,
      ""request_access_enabled"": false,
      ""merge_method"": ""merge"",
      ""squash_option"": ""default_on"",
      ""autoclose_referenced_issues"": true,
      ""enforce_auth_checks_on_uploads"": true,
      ""suggestion_commit_message"": null,
      ""merge_commit_template"": null,
      ""squash_commit_template"": null,
      ""issue_branch_template"": ""gitlab/%{id}-%{title}"",
      ""statistics"": {
        ""commit_count"": 37,
        ""storage_size"": 1038090,
        ""repository_size"": 1038090,
        ""lfs_objects_size"": 0,
        ""job_artifacts_size"": 0,
        ""pipeline_artifacts_size"": 0,
        ""packages_size"": 0,
        ""snippets_size"": 0,
        ""uploads_size"": 0,
        ""container_registry_size"": 0
      },
      ""container_registry_image_prefix"": ""registry.example.com/diaspora/diaspora-client"",
      ""_links"": {
        ""self"": ""http://example.com/api/v4/projects"",
        ""issues"": ""http://example.com/api/v4/projects/1/issues"",
        ""merge_requests"": ""http://example.com/api/v4/projects/1/merge_requests"",
        ""repo_branches"": ""http://example.com/api/v4/projects/1/repository_branches"",
        ""labels"": ""http://example.com/api/v4/projects/1/labels"",
        ""events"": ""http://example.com/api/v4/projects/1/events"",
        ""members"": ""http://example.com/api/v4/projects/1/members"",
        ""cluster_agents"": ""http://example.com/api/v4/projects/1/cluster_agents""
      }
    },
    {
      ""id"": 6,
      ""description"": ""Lorem ipsum dolor sit amet, consectetur adipiscing elit."",
      ""description_html"": """",
      ""default_branch"": ""main"",
      ""visibility"": ""private"",
      ""ssh_url_to_repo"": ""git@example.com:brightbox/puppet.git"",
      ""http_url_to_repo"": ""http://example.com/brightbox/puppet.git"",
      ""web_url"": ""http://example.com/brightbox/puppet"",
      ""readme_url"": ""http://example.com/brightbox/puppet/blob/main/README.md"",
      ""tag_list"": [
        ""example"",
        ""puppet""
      ],
      ""topics"": [
        ""example"",
        ""puppet""
      ],
      ""owner"": {
        ""id"": 4,
        ""name"": ""Brightbox"",
        ""created_at"": ""2013-09-30T13:46:02Z""
      },
      ""name"": ""Puppet"",
      ""name_with_namespace"": ""Brightbox / Puppet"",
      ""path"": ""puppet"",
      ""path_with_namespace"": ""brightbox/puppet"",
      ""issues_enabled"": true,
      ""open_issues_count"": 1,
      ""merge_requests_enabled"": true,
      ""jobs_enabled"": true,
      ""wiki_enabled"": true,
      ""snippets_enabled"": false,
      ""can_create_merge_request_in"": true,
      ""resolve_outdated_diff_discussions"": false,
      ""container_registry_enabled"": false,
      ""container_registry_access_level"": ""disabled"",
      ""security_and_compliance_access_level"": ""disabled"",
      ""created_at"": ""2013-09-30T13:46:02Z"",
      ""updated_at"": ""2013-09-30T13:46:02Z"",
      ""last_activity_at"": ""2013-09-30T13:46:02Z"",
      ""creator_id"": 3,
      ""namespace"": {
        ""id"": 4,
        ""name"": ""Brightbox"",
        ""path"": ""brightbox"",
        ""kind"": ""group"",
        ""full_path"": ""brightbox""
      },
      ""import_status"": ""none"",
      ""import_error"": null,
      ""permissions"": {
        ""project_access"": {
          ""access_level"": 10,
          ""notification_level"": 3
        },
        ""group_access"": {
          ""access_level"": 50,
          ""notification_level"": 3
        }
      },
      ""archived"": false,
      ""avatar_url"": null,
      ""shared_runners_enabled"": true,
      ""group_runners_enabled"": true,
      ""forks_count"": 0,
      ""star_count"": 0,
      ""runners_token"": ""b8547b1dc37721d05889db52fa2f02"",
      ""public_jobs"": true,
      ""shared_with_groups"": [],
      ""only_allow_merge_if_pipeline_succeeds"": false,
      ""allow_merge_on_skipped_pipeline"": false,
      ""restrict_user_defined_variables"": false,
      ""only_allow_merge_if_all_discussions_are_resolved"": false,
      ""remove_source_branch_after_merge"": false,
      ""request_access_enabled"": false,
      ""merge_method"": ""merge"",
      ""squash_option"": ""default_on"",
      ""auto_devops_enabled"": true,
      ""auto_devops_deploy_strategy"": ""continuous"",
      ""repository_storage"": ""default"",
      ""approvals_before_merge"": 0,
      ""mirror"": false,
      ""mirror_user_id"": 45,
      ""mirror_trigger_builds"": false,
      ""only_mirror_protected_branches"": false,
      ""mirror_overwrites_diverged_branches"": false,
      ""external_authorization_classification_label"": null,
      ""packages_enabled"": true,
      ""service_desk_enabled"": false,
      ""service_desk_address"": null,
      ""autoclose_referenced_issues"": true,
      ""enforce_auth_checks_on_uploads"": true,
      ""suggestion_commit_message"": null,
      ""merge_commit_template"": null,
      ""squash_commit_template"": null,
      ""issue_branch_template"": ""gitlab/%{id}-%{title}"",
      ""statistics"": {
        ""commit_count"": 12,
        ""storage_size"": 2066080,
        ""repository_size"": 2066080,
        ""lfs_objects_size"": 0,
        ""job_artifacts_size"": 0,
        ""pipeline_artifacts_size"": 0,
        ""packages_size"": 0,
        ""snippets_size"": 0,
        ""uploads_size"": 0,
        ""container_registry_size"": 0
      },
      ""container_registry_image_prefix"": ""registry.example.com/brightbox/puppet"",
      ""_links"": {
        ""self"": ""http://example.com/api/v4/projects"",
        ""issues"": ""http://example.com/api/v4/projects/1/issues"",
        ""merge_requests"": ""http://example.com/api/v4/projects/1/merge_requests"",
        ""repo_branches"": ""http://example.com/api/v4/projects/1/repository_branches"",
        ""labels"": ""http://example.com/api/v4/projects/1/labels"",
        ""events"": ""http://example.com/api/v4/projects/1/events"",
        ""members"": ""http://example.com/api/v4/projects/1/members"",
        ""cluster_agents"": ""http://example.com/api/v4/projects/1/cluster_agents""
      }
    }
  ]",TP,mismatched,"from datetime import datetime
import json

def verify_latest_response(latest_response, request_info):
    try:
        last_activity_after = request_info.get(""last_activity_after"")
        if not last_activity_after:
            return 0
        
        last_activity_after_dt = datetime.strptime(last_activity_after, ""%Y-%m-%dT%H:%M:%SZ"")
        
        for project in latest_response:
            last_activity_at = project.get(""last_activity_at"")
            if not last_activity_at:
                return 0
            
            last_activity_at_dt = datetime.strptime(last_activity_at, ""%Y-%m-%dT%H:%M:%SZ"")
            if last_activity_at_dt <= last_activity_after_dt:
                return -1
        
        return 1
    except Exception as e:
        return -1
",2013-09-30T13:46:02Z,1.0,1,0,0,0,1,"logic, format"
get-/projects,BasicProjectDetails,id,id,7,,,parameters,id_after,Limit results to projects with IDs greater than the specified ID,c,True,"{
    ""with_merge_requests_enabled"": true,
    ""with_issues_enabled"": true,
    ""visibility"": ""private"",
    ""repository_storage"": ""default"",
    ""last_activity_before"": ""2014-09-30T13:46:02Z"",
    ""last_activity_after"": ""2012-09-30T13:46:02Z"",
    ""id_after"": 0,
    ""archived"": false
  }","[
    {
      ""id"": 4,
      ""description"": ""Lorem ipsum dolor sit amet, consectetur adipiscing elit."",
      ""description_html"": """",
      ""default_branch"": ""main"",
      ""visibility"": ""private"",
      ""ssh_url_to_repo"": ""git@example.com:diaspora/diaspora-client.git"",
      ""http_url_to_repo"": ""http://example.com/diaspora/diaspora-client.git"",
      ""web_url"": ""http://example.com/diaspora/diaspora-client"",
      ""readme_url"": ""http://example.com/diaspora/diaspora-client/blob/main/README.md"",
      ""tag_list"": [
        ""example"",
        ""disapora client""
      ],
      ""topics"": [
        ""example"",
        ""disapora client""
      ],
      ""owner"": {
        ""id"": 3,
        ""name"": ""Diaspora"",
        ""created_at"": ""2013-09-30T13:46:02Z""
      },
      ""name"": ""Diaspora Client"",
      ""name_with_namespace"": ""Diaspora / Diaspora Client"",
      ""path"": ""diaspora-client"",
      ""path_with_namespace"": ""diaspora/diaspora-client"",
      ""issues_enabled"": true,
      ""open_issues_count"": 1,
      ""merge_requests_enabled"": true,
      ""jobs_enabled"": true,
      ""wiki_enabled"": true,
      ""snippets_enabled"": false,
      ""can_create_merge_request_in"": true,
      ""resolve_outdated_diff_discussions"": false,
      ""container_registry_enabled"": false,
      ""container_registry_access_level"": ""disabled"",
      ""security_and_compliance_access_level"": ""disabled"",
      ""created_at"": ""2013-09-30T13:46:02Z"",
      ""updated_at"": ""2013-09-30T13:46:02Z"",
      ""last_activity_at"": ""2013-09-30T13:46:02Z"",
      ""creator_id"": 3,
      ""namespace"": {
        ""id"": 3,
        ""name"": ""Diaspora"",
        ""path"": ""diaspora"",
        ""kind"": ""group"",
        ""full_path"": ""diaspora""
      },
      ""import_status"": ""none"",
      ""archived"": false,
      ""avatar_url"": ""http://example.com/uploads/project/avatar/4/uploads/avatar.png"",
      ""shared_runners_enabled"": true,
      ""group_runners_enabled"": true,
      ""forks_count"": 0,
      ""star_count"": 0,
      ""runners_token"": ""b8547b1dc37721d05889db52fa2f02"",
      ""public_jobs"": true,
      ""shared_with_groups"": [],
      ""only_allow_merge_if_pipeline_succeeds"": false,
      ""allow_merge_on_skipped_pipeline"": false,
      ""restrict_user_defined_variables"": false,
      ""only_allow_merge_if_all_discussions_are_resolved"": false,
      ""remove_source_branch_after_merge"": false,
      ""request_access_enabled"": false,
      ""merge_method"": ""merge"",
      ""squash_option"": ""default_on"",
      ""autoclose_referenced_issues"": true,
      ""enforce_auth_checks_on_uploads"": true,
      ""suggestion_commit_message"": null,
      ""merge_commit_template"": null,
      ""squash_commit_template"": null,
      ""issue_branch_template"": ""gitlab/%{id}-%{title}"",
      ""statistics"": {
        ""commit_count"": 37,
        ""storage_size"": 1038090,
        ""repository_size"": 1038090,
        ""lfs_objects_size"": 0,
        ""job_artifacts_size"": 0,
        ""pipeline_artifacts_size"": 0,
        ""packages_size"": 0,
        ""snippets_size"": 0,
        ""uploads_size"": 0,
        ""container_registry_size"": 0
      },
      ""container_registry_image_prefix"": ""registry.example.com/diaspora/diaspora-client"",
      ""_links"": {
        ""self"": ""http://example.com/api/v4/projects"",
        ""issues"": ""http://example.com/api/v4/projects/1/issues"",
        ""merge_requests"": ""http://example.com/api/v4/projects/1/merge_requests"",
        ""repo_branches"": ""http://example.com/api/v4/projects/1/repository_branches"",
        ""labels"": ""http://example.com/api/v4/projects/1/labels"",
        ""events"": ""http://example.com/api/v4/projects/1/events"",
        ""members"": ""http://example.com/api/v4/projects/1/members"",
        ""cluster_agents"": ""http://example.com/api/v4/projects/1/cluster_agents""
      }
    },
    {
      ""id"": 6,
      ""description"": ""Lorem ipsum dolor sit amet, consectetur adipiscing elit."",
      ""description_html"": """",
      ""default_branch"": ""main"",
      ""visibility"": ""private"",
      ""ssh_url_to_repo"": ""git@example.com:brightbox/puppet.git"",
      ""http_url_to_repo"": ""http://example.com/brightbox/puppet.git"",
      ""web_url"": ""http://example.com/brightbox/puppet"",
      ""readme_url"": ""http://example.com/brightbox/puppet/blob/main/README.md"",
      ""tag_list"": [
        ""example"",
        ""puppet""
      ],
      ""topics"": [
        ""example"",
        ""puppet""
      ],
      ""owner"": {
        ""id"": 4,
        ""name"": ""Brightbox"",
        ""created_at"": ""2013-09-30T13:46:02Z""
      },
      ""name"": ""Puppet"",
      ""name_with_namespace"": ""Brightbox / Puppet"",
      ""path"": ""puppet"",
      ""path_with_namespace"": ""brightbox/puppet"",
      ""issues_enabled"": true,
      ""open_issues_count"": 1,
      ""merge_requests_enabled"": true,
      ""jobs_enabled"": true,
      ""wiki_enabled"": true,
      ""snippets_enabled"": false,
      ""can_create_merge_request_in"": true,
      ""resolve_outdated_diff_discussions"": false,
      ""container_registry_enabled"": false,
      ""container_registry_access_level"": ""disabled"",
      ""security_and_compliance_access_level"": ""disabled"",
      ""created_at"": ""2013-09-30T13:46:02Z"",
      ""updated_at"": ""2013-09-30T13:46:02Z"",
      ""last_activity_at"": ""2013-09-30T13:46:02Z"",
      ""creator_id"": 3,
      ""namespace"": {
        ""id"": 4,
        ""name"": ""Brightbox"",
        ""path"": ""brightbox"",
        ""kind"": ""group"",
        ""full_path"": ""brightbox""
      },
      ""import_status"": ""none"",
      ""import_error"": null,
      ""permissions"": {
        ""project_access"": {
          ""access_level"": 10,
          ""notification_level"": 3
        },
        ""group_access"": {
          ""access_level"": 50,
          ""notification_level"": 3
        }
      },
      ""archived"": false,
      ""avatar_url"": null,
      ""shared_runners_enabled"": true,
      ""group_runners_enabled"": true,
      ""forks_count"": 0,
      ""star_count"": 0,
      ""runners_token"": ""b8547b1dc37721d05889db52fa2f02"",
      ""public_jobs"": true,
      ""shared_with_groups"": [],
      ""only_allow_merge_if_pipeline_succeeds"": false,
      ""allow_merge_on_skipped_pipeline"": false,
      ""restrict_user_defined_variables"": false,
      ""only_allow_merge_if_all_discussions_are_resolved"": false,
      ""remove_source_branch_after_merge"": false,
      ""request_access_enabled"": false,
      ""merge_method"": ""merge"",
      ""squash_option"": ""default_on"",
      ""auto_devops_enabled"": true,
      ""auto_devops_deploy_strategy"": ""continuous"",
      ""repository_storage"": ""default"",
      ""approvals_before_merge"": 0,
      ""mirror"": false,
      ""mirror_user_id"": 45,
      ""mirror_trigger_builds"": false,
      ""only_mirror_protected_branches"": false,
      ""mirror_overwrites_diverged_branches"": false,
      ""external_authorization_classification_label"": null,
      ""packages_enabled"": true,
      ""service_desk_enabled"": false,
      ""service_desk_address"": null,
      ""autoclose_referenced_issues"": true,
      ""enforce_auth_checks_on_uploads"": true,
      ""suggestion_commit_message"": null,
      ""merge_commit_template"": null,
      ""squash_commit_template"": null,
      ""issue_branch_template"": ""gitlab/%{id}-%{title}"",
      ""statistics"": {
        ""commit_count"": 12,
        ""storage_size"": 2066080,
        ""repository_size"": 2066080,
        ""lfs_objects_size"": 0,
        ""job_artifacts_size"": 0,
        ""pipeline_artifacts_size"": 0,
        ""packages_size"": 0,
        ""snippets_size"": 0,
        ""uploads_size"": 0,
        ""container_registry_size"": 0
      },
      ""container_registry_image_prefix"": ""registry.example.com/brightbox/puppet"",
      ""_links"": {
        ""self"": ""http://example.com/api/v4/projects"",
        ""issues"": ""http://example.com/api/v4/projects/1/issues"",
        ""merge_requests"": ""http://example.com/api/v4/projects/1/merge_requests"",
        ""repo_branches"": ""http://example.com/api/v4/projects/1/repository_branches"",
        ""labels"": ""http://example.com/api/v4/projects/1/labels"",
        ""events"": ""http://example.com/api/v4/projects/1/events"",
        ""members"": ""http://example.com/api/v4/projects/1/members"",
        ""cluster_agents"": ""http://example.com/api/v4/projects/1/cluster_agents""
      }
    }
  ]",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        id_after = int(request_info.get(""id_after"", 0))
        for project in latest_response:
            if ""id"" not in project:
                return 0
            if not isinstance(project[""id""], int):
                return -1
            if project[""id""] <= id_after:
                return -1
        return 1
    except Exception as e:
        return -1
",4,1.0,1,0,0,0,1,logic
get-/projects,BasicProjectDetails,archived,archived,8,,,parameters,archived,Limit by archived status,c,False,"{
    ""with_merge_requests_enabled"": true,
    ""with_issues_enabled"": true,
    ""visibility"": ""private"",
    ""repository_storage"": ""default"",
    ""last_activity_before"": ""2014-09-30T13:46:02Z"",
    ""last_activity_after"": ""2012-09-30T13:46:02Z"",
    ""id_after"": 0,
    ""archived"": false
  }","[
    {
      ""id"": 4,
      ""description"": ""Lorem ipsum dolor sit amet, consectetur adipiscing elit."",
      ""description_html"": """",
      ""default_branch"": ""main"",
      ""visibility"": ""private"",
      ""ssh_url_to_repo"": ""git@example.com:diaspora/diaspora-client.git"",
      ""http_url_to_repo"": ""http://example.com/diaspora/diaspora-client.git"",
      ""web_url"": ""http://example.com/diaspora/diaspora-client"",
      ""readme_url"": ""http://example.com/diaspora/diaspora-client/blob/main/README.md"",
      ""tag_list"": [
        ""example"",
        ""disapora client""
      ],
      ""topics"": [
        ""example"",
        ""disapora client""
      ],
      ""owner"": {
        ""id"": 3,
        ""name"": ""Diaspora"",
        ""created_at"": ""2013-09-30T13:46:02Z""
      },
      ""name"": ""Diaspora Client"",
      ""name_with_namespace"": ""Diaspora / Diaspora Client"",
      ""path"": ""diaspora-client"",
      ""path_with_namespace"": ""diaspora/diaspora-client"",
      ""issues_enabled"": true,
      ""open_issues_count"": 1,
      ""merge_requests_enabled"": true,
      ""jobs_enabled"": true,
      ""wiki_enabled"": true,
      ""snippets_enabled"": false,
      ""can_create_merge_request_in"": true,
      ""resolve_outdated_diff_discussions"": false,
      ""container_registry_enabled"": false,
      ""container_registry_access_level"": ""disabled"",
      ""security_and_compliance_access_level"": ""disabled"",
      ""created_at"": ""2013-09-30T13:46:02Z"",
      ""updated_at"": ""2013-09-30T13:46:02Z"",
      ""last_activity_at"": ""2013-09-30T13:46:02Z"",
      ""creator_id"": 3,
      ""namespace"": {
        ""id"": 3,
        ""name"": ""Diaspora"",
        ""path"": ""diaspora"",
        ""kind"": ""group"",
        ""full_path"": ""diaspora""
      },
      ""import_status"": ""none"",
      ""archived"": false,
      ""avatar_url"": ""http://example.com/uploads/project/avatar/4/uploads/avatar.png"",
      ""shared_runners_enabled"": true,
      ""group_runners_enabled"": true,
      ""forks_count"": 0,
      ""star_count"": 0,
      ""runners_token"": ""b8547b1dc37721d05889db52fa2f02"",
      ""public_jobs"": true,
      ""shared_with_groups"": [],
      ""only_allow_merge_if_pipeline_succeeds"": false,
      ""allow_merge_on_skipped_pipeline"": false,
      ""restrict_user_defined_variables"": false,
      ""only_allow_merge_if_all_discussions_are_resolved"": false,
      ""remove_source_branch_after_merge"": false,
      ""request_access_enabled"": false,
      ""merge_method"": ""merge"",
      ""squash_option"": ""default_on"",
      ""autoclose_referenced_issues"": true,
      ""enforce_auth_checks_on_uploads"": true,
      ""suggestion_commit_message"": null,
      ""merge_commit_template"": null,
      ""squash_commit_template"": null,
      ""issue_branch_template"": ""gitlab/%{id}-%{title}"",
      ""statistics"": {
        ""commit_count"": 37,
        ""storage_size"": 1038090,
        ""repository_size"": 1038090,
        ""lfs_objects_size"": 0,
        ""job_artifacts_size"": 0,
        ""pipeline_artifacts_size"": 0,
        ""packages_size"": 0,
        ""snippets_size"": 0,
        ""uploads_size"": 0,
        ""container_registry_size"": 0
      },
      ""container_registry_image_prefix"": ""registry.example.com/diaspora/diaspora-client"",
      ""_links"": {
        ""self"": ""http://example.com/api/v4/projects"",
        ""issues"": ""http://example.com/api/v4/projects/1/issues"",
        ""merge_requests"": ""http://example.com/api/v4/projects/1/merge_requests"",
        ""repo_branches"": ""http://example.com/api/v4/projects/1/repository_branches"",
        ""labels"": ""http://example.com/api/v4/projects/1/labels"",
        ""events"": ""http://example.com/api/v4/projects/1/events"",
        ""members"": ""http://example.com/api/v4/projects/1/members"",
        ""cluster_agents"": ""http://example.com/api/v4/projects/1/cluster_agents""
      }
    },
    {
      ""id"": 6,
      ""description"": ""Lorem ipsum dolor sit amet, consectetur adipiscing elit."",
      ""description_html"": """",
      ""default_branch"": ""main"",
      ""visibility"": ""private"",
      ""ssh_url_to_repo"": ""git@example.com:brightbox/puppet.git"",
      ""http_url_to_repo"": ""http://example.com/brightbox/puppet.git"",
      ""web_url"": ""http://example.com/brightbox/puppet"",
      ""readme_url"": ""http://example.com/brightbox/puppet/blob/main/README.md"",
      ""tag_list"": [
        ""example"",
        ""puppet""
      ],
      ""topics"": [
        ""example"",
        ""puppet""
      ],
      ""owner"": {
        ""id"": 4,
        ""name"": ""Brightbox"",
        ""created_at"": ""2013-09-30T13:46:02Z""
      },
      ""name"": ""Puppet"",
      ""name_with_namespace"": ""Brightbox / Puppet"",
      ""path"": ""puppet"",
      ""path_with_namespace"": ""brightbox/puppet"",
      ""issues_enabled"": true,
      ""open_issues_count"": 1,
      ""merge_requests_enabled"": true,
      ""jobs_enabled"": true,
      ""wiki_enabled"": true,
      ""snippets_enabled"": false,
      ""can_create_merge_request_in"": true,
      ""resolve_outdated_diff_discussions"": false,
      ""container_registry_enabled"": false,
      ""container_registry_access_level"": ""disabled"",
      ""security_and_compliance_access_level"": ""disabled"",
      ""created_at"": ""2013-09-30T13:46:02Z"",
      ""updated_at"": ""2013-09-30T13:46:02Z"",
      ""last_activity_at"": ""2013-09-30T13:46:02Z"",
      ""creator_id"": 3,
      ""namespace"": {
        ""id"": 4,
        ""name"": ""Brightbox"",
        ""path"": ""brightbox"",
        ""kind"": ""group"",
        ""full_path"": ""brightbox""
      },
      ""import_status"": ""none"",
      ""import_error"": null,
      ""permissions"": {
        ""project_access"": {
          ""access_level"": 10,
          ""notification_level"": 3
        },
        ""group_access"": {
          ""access_level"": 50,
          ""notification_level"": 3
        }
      },
      ""archived"": false,
      ""avatar_url"": null,
      ""shared_runners_enabled"": true,
      ""group_runners_enabled"": true,
      ""forks_count"": 0,
      ""star_count"": 0,
      ""runners_token"": ""b8547b1dc37721d05889db52fa2f02"",
      ""public_jobs"": true,
      ""shared_with_groups"": [],
      ""only_allow_merge_if_pipeline_succeeds"": false,
      ""allow_merge_on_skipped_pipeline"": false,
      ""restrict_user_defined_variables"": false,
      ""only_allow_merge_if_all_discussions_are_resolved"": false,
      ""remove_source_branch_after_merge"": false,
      ""request_access_enabled"": false,
      ""merge_method"": ""merge"",
      ""squash_option"": ""default_on"",
      ""auto_devops_enabled"": true,
      ""auto_devops_deploy_strategy"": ""continuous"",
      ""repository_storage"": ""default"",
      ""approvals_before_merge"": 0,
      ""mirror"": false,
      ""mirror_user_id"": 45,
      ""mirror_trigger_builds"": false,
      ""only_mirror_protected_branches"": false,
      ""mirror_overwrites_diverged_branches"": false,
      ""external_authorization_classification_label"": null,
      ""packages_enabled"": true,
      ""service_desk_enabled"": false,
      ""service_desk_address"": null,
      ""autoclose_referenced_issues"": true,
      ""enforce_auth_checks_on_uploads"": true,
      ""suggestion_commit_message"": null,
      ""merge_commit_template"": null,
      ""squash_commit_template"": null,
      ""issue_branch_template"": ""gitlab/%{id}-%{title}"",
      ""statistics"": {
        ""commit_count"": 12,
        ""storage_size"": 2066080,
        ""repository_size"": 2066080,
        ""lfs_objects_size"": 0,
        ""job_artifacts_size"": 0,
        ""pipeline_artifacts_size"": 0,
        ""packages_size"": 0,
        ""snippets_size"": 0,
        ""uploads_size"": 0,
        ""container_registry_size"": 0
      },
      ""container_registry_image_prefix"": ""registry.example.com/brightbox/puppet"",
      ""_links"": {
        ""self"": ""http://example.com/api/v4/projects"",
        ""issues"": ""http://example.com/api/v4/projects/1/issues"",
        ""merge_requests"": ""http://example.com/api/v4/projects/1/merge_requests"",
        ""repo_branches"": ""http://example.com/api/v4/projects/1/repository_branches"",
        ""labels"": ""http://example.com/api/v4/projects/1/labels"",
        ""events"": ""http://example.com/api/v4/projects/1/events"",
        ""members"": ""http://example.com/api/v4/projects/1/members"",
        ""cluster_agents"": ""http://example.com/api/v4/projects/1/cluster_agents""
      }
    }
  ]",TP,unknown,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the 'archived' parameter from the request_info
        archived_param = request_info.get('archived')
        
        # If 'archived' parameter is not provided in the request_info, return 0
        if archived_param is None:
            return 0
        
        # Convert the 'archived' parameter to a boolean
        archived_param = bool(archived_param)
        
        # Iterate through each project in the response
        for project in latest_response:
            # Check if the 'archived' attribute exists in the project
            if 'archived' not in project:
                return 0
            
            # Verify that the 'archived' attribute matches the 'archived' parameter
            if project['archived'] != archived_param:
                return -1
        
        # If all projects satisfy the constraint, return 1
        return 1
    except Exception as e:
        # If any exception occurs, return -1
        return -1
",False,1.0,1,0,0,0,1,"range of values, logic"
get-/projects/{id}/forks,Project,merge_requests_enabled,merge_requests_enabled,9,,,parameters,with_merge_requests_enabled,Limit by enabled merge requests feature,c,True,"{
    ""with_merge_requests_enabled"": true,
    ""with_issues_enabled"": true,
    ""visibility"": ""private"",
    ""order_by"": ""id"",
    ""id"": 4,
    ""archived"": false
  }","[
    {
      ""id"": 4,
      ""description"": ""Lorem ipsum dolor sit amet, consectetur adipiscing elit."",
      ""description_html"": """",
      ""default_branch"": ""main"",
      ""visibility"": ""private"",
      ""ssh_url_to_repo"": ""git@example.com:diaspora/diaspora-client.git"",
      ""http_url_to_repo"": ""http://example.com/diaspora/diaspora-client.git"",
      ""web_url"": ""http://example.com/diaspora/diaspora-client"",
      ""readme_url"": ""http://example.com/diaspora/diaspora-client/blob/main/README.md"",
      ""tag_list"": [
        ""example"",
        ""disapora client""
      ],
      ""topics"": [
        ""example"",
        ""disapora client""
      ],
      ""owner"": {
        ""id"": 3,
        ""name"": ""Diaspora"",
        ""created_at"": ""2013-09-30T13:46:02Z""
      },
      ""name"": ""Diaspora Client"",
      ""name_with_namespace"": ""Diaspora / Diaspora Client"",
      ""path"": ""diaspora-client"",
      ""path_with_namespace"": ""diaspora/diaspora-client"",
      ""issues_enabled"": true,
      ""open_issues_count"": 1,
      ""merge_requests_enabled"": true,
      ""jobs_enabled"": true,
      ""wiki_enabled"": true,
      ""snippets_enabled"": false,
      ""can_create_merge_request_in"": true,
      ""resolve_outdated_diff_discussions"": false,
      ""container_registry_enabled"": false,
      ""container_registry_access_level"": ""disabled"",
      ""security_and_compliance_access_level"": ""disabled"",
      ""created_at"": ""2013-09-30T13:46:02Z"",
      ""updated_at"": ""2013-09-30T13:46:02Z"",
      ""last_activity_at"": ""2013-09-30T13:46:02Z"",
      ""creator_id"": 3,
      ""namespace"": {
        ""id"": 3,
        ""name"": ""Diaspora"",
        ""path"": ""diaspora"",
        ""kind"": ""group"",
        ""full_path"": ""diaspora""
      },
      ""import_status"": ""none"",
      ""archived"": false,
      ""avatar_url"": ""http://example.com/uploads/project/avatar/4/uploads/avatar.png"",
      ""shared_runners_enabled"": true,
      ""group_runners_enabled"": true,
      ""forks_count"": 0,
      ""star_count"": 0,
      ""runners_token"": ""b8547b1dc37721d05889db52fa2f02"",
      ""public_jobs"": true,
      ""shared_with_groups"": [],
      ""only_allow_merge_if_pipeline_succeeds"": false,
      ""allow_merge_on_skipped_pipeline"": false,
      ""restrict_user_defined_variables"": false,
      ""only_allow_merge_if_all_discussions_are_resolved"": false,
      ""remove_source_branch_after_merge"": false,
      ""request_access_enabled"": false,
      ""merge_method"": ""merge"",
      ""squash_option"": ""default_on"",
      ""autoclose_referenced_issues"": true,
      ""enforce_auth_checks_on_uploads"": true,
      ""suggestion_commit_message"": null,
      ""merge_commit_template"": null,
      ""squash_commit_template"": null,
      ""issue_branch_template"": ""gitlab/%{id}-%{title}"",
      ""statistics"": {
        ""commit_count"": 37,
        ""storage_size"": 1038090,
        ""repository_size"": 1038090,
        ""lfs_objects_size"": 0,
        ""job_artifacts_size"": 0,
        ""pipeline_artifacts_size"": 0,
        ""packages_size"": 0,
        ""snippets_size"": 0,
        ""uploads_size"": 0,
        ""container_registry_size"": 0
      },
      ""container_registry_image_prefix"": ""registry.example.com/diaspora/diaspora-client"",
      ""_links"": {
        ""self"": ""http://example.com/api/v4/projects"",
        ""issues"": ""http://example.com/api/v4/projects/1/issues"",
        ""merge_requests"": ""http://example.com/api/v4/projects/1/merge_requests"",
        ""repo_branches"": ""http://example.com/api/v4/projects/1/repository_branches"",
        ""labels"": ""http://example.com/api/v4/projects/1/labels"",
        ""events"": ""http://example.com/api/v4/projects/1/events"",
        ""members"": ""http://example.com/api/v4/projects/1/members"",
        ""cluster_agents"": ""http://example.com/api/v4/projects/1/cluster_agents""
      }
    }
  ]",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'with_merge_requests_enabled' is in request_info
        if 'with_merge_requests_enabled' not in request_info:
            return 0
        
        # Get the value of 'with_merge_requests_enabled' from request_info
        with_merge_requests_enabled = request_info['with_merge_requests_enabled']
        
        # Iterate through each project in the response
        for project in latest_response:
            # Check if 'merge_requests_enabled' attribute exists in the project
            if 'merge_requests_enabled' not in project:
                return 0
            
            # Verify the 'merge_requests_enabled' attribute against the input parameter
            if project['merge_requests_enabled'] != with_merge_requests_enabled:
                return -1
        
        # If all projects satisfy the constraint
        return 1
    except Exception as e:
        # In case of any unexpected errors
        return -1
",True,1.0,1,0,0,0,1,"range of values, logic"
get-/projects/{id}/forks,Project,issues_enabled,issues_enabled,10,,,parameters,with_issues_enabled,Limit by enabled issues feature,c,True,"{
    ""with_merge_requests_enabled"": true,
    ""with_issues_enabled"": true,
    ""visibility"": ""private"",
    ""order_by"": ""id"",
    ""id"": 4,
    ""archived"": false
  }","[
    {
      ""id"": 4,
      ""description"": ""Lorem ipsum dolor sit amet, consectetur adipiscing elit."",
      ""description_html"": """",
      ""default_branch"": ""main"",
      ""visibility"": ""private"",
      ""ssh_url_to_repo"": ""git@example.com:diaspora/diaspora-client.git"",
      ""http_url_to_repo"": ""http://example.com/diaspora/diaspora-client.git"",
      ""web_url"": ""http://example.com/diaspora/diaspora-client"",
      ""readme_url"": ""http://example.com/diaspora/diaspora-client/blob/main/README.md"",
      ""tag_list"": [
        ""example"",
        ""disapora client""
      ],
      ""topics"": [
        ""example"",
        ""disapora client""
      ],
      ""owner"": {
        ""id"": 3,
        ""name"": ""Diaspora"",
        ""created_at"": ""2013-09-30T13:46:02Z""
      },
      ""name"": ""Diaspora Client"",
      ""name_with_namespace"": ""Diaspora / Diaspora Client"",
      ""path"": ""diaspora-client"",
      ""path_with_namespace"": ""diaspora/diaspora-client"",
      ""issues_enabled"": true,
      ""open_issues_count"": 1,
      ""merge_requests_enabled"": true,
      ""jobs_enabled"": true,
      ""wiki_enabled"": true,
      ""snippets_enabled"": false,
      ""can_create_merge_request_in"": true,
      ""resolve_outdated_diff_discussions"": false,
      ""container_registry_enabled"": false,
      ""container_registry_access_level"": ""disabled"",
      ""security_and_compliance_access_level"": ""disabled"",
      ""created_at"": ""2013-09-30T13:46:02Z"",
      ""updated_at"": ""2013-09-30T13:46:02Z"",
      ""last_activity_at"": ""2013-09-30T13:46:02Z"",
      ""creator_id"": 3,
      ""namespace"": {
        ""id"": 3,
        ""name"": ""Diaspora"",
        ""path"": ""diaspora"",
        ""kind"": ""group"",
        ""full_path"": ""diaspora""
      },
      ""import_status"": ""none"",
      ""archived"": false,
      ""avatar_url"": ""http://example.com/uploads/project/avatar/4/uploads/avatar.png"",
      ""shared_runners_enabled"": true,
      ""group_runners_enabled"": true,
      ""forks_count"": 0,
      ""star_count"": 0,
      ""runners_token"": ""b8547b1dc37721d05889db52fa2f02"",
      ""public_jobs"": true,
      ""shared_with_groups"": [],
      ""only_allow_merge_if_pipeline_succeeds"": false,
      ""allow_merge_on_skipped_pipeline"": false,
      ""restrict_user_defined_variables"": false,
      ""only_allow_merge_if_all_discussions_are_resolved"": false,
      ""remove_source_branch_after_merge"": false,
      ""request_access_enabled"": false,
      ""merge_method"": ""merge"",
      ""squash_option"": ""default_on"",
      ""autoclose_referenced_issues"": true,
      ""enforce_auth_checks_on_uploads"": true,
      ""suggestion_commit_message"": null,
      ""merge_commit_template"": null,
      ""squash_commit_template"": null,
      ""issue_branch_template"": ""gitlab/%{id}-%{title}"",
      ""statistics"": {
        ""commit_count"": 37,
        ""storage_size"": 1038090,
        ""repository_size"": 1038090,
        ""lfs_objects_size"": 0,
        ""job_artifacts_size"": 0,
        ""pipeline_artifacts_size"": 0,
        ""packages_size"": 0,
        ""snippets_size"": 0,
        ""uploads_size"": 0,
        ""container_registry_size"": 0
      },
      ""container_registry_image_prefix"": ""registry.example.com/diaspora/diaspora-client"",
      ""_links"": {
        ""self"": ""http://example.com/api/v4/projects"",
        ""issues"": ""http://example.com/api/v4/projects/1/issues"",
        ""merge_requests"": ""http://example.com/api/v4/projects/1/merge_requests"",
        ""repo_branches"": ""http://example.com/api/v4/projects/1/repository_branches"",
        ""labels"": ""http://example.com/api/v4/projects/1/labels"",
        ""events"": ""http://example.com/api/v4/projects/1/events"",
        ""members"": ""http://example.com/api/v4/projects/1/members"",
        ""cluster_agents"": ""http://example.com/api/v4/projects/1/cluster_agents""
      }
    }
  ]",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        with_issues_enabled = request_info.get(""with_issues_enabled"")
        if with_issues_enabled is None:
            return 0  # No constraint to verify

        for project in latest_response:
            if ""issues_enabled"" not in project:
                return 0  # Missing attribute in response
            if project[""issues_enabled""] != with_issues_enabled:
                return -1  # Constraint not satisfied

        return 1  # Constraint satisfied
    except Exception as e:
        return -1  # Error occurred during verification
",True,1.0,1,0,0,0,1,"range of values, logic"
get-/projects/{id}/forks,Project,visibility,visibility,11,,,parameters,visibility,"Limit by visibilitypublic,internal, orprivate",c,False,"{
    ""with_merge_requests_enabled"": true,
    ""with_issues_enabled"": true,
    ""visibility"": ""private"",
    ""order_by"": ""id"",
    ""id"": 4,
    ""archived"": false
  }","[
    {
      ""id"": 4,
      ""description"": ""Lorem ipsum dolor sit amet, consectetur adipiscing elit."",
      ""description_html"": """",
      ""default_branch"": ""main"",
      ""visibility"": ""private"",
      ""ssh_url_to_repo"": ""git@example.com:diaspora/diaspora-client.git"",
      ""http_url_to_repo"": ""http://example.com/diaspora/diaspora-client.git"",
      ""web_url"": ""http://example.com/diaspora/diaspora-client"",
      ""readme_url"": ""http://example.com/diaspora/diaspora-client/blob/main/README.md"",
      ""tag_list"": [
        ""example"",
        ""disapora client""
      ],
      ""topics"": [
        ""example"",
        ""disapora client""
      ],
      ""owner"": {
        ""id"": 3,
        ""name"": ""Diaspora"",
        ""created_at"": ""2013-09-30T13:46:02Z""
      },
      ""name"": ""Diaspora Client"",
      ""name_with_namespace"": ""Diaspora / Diaspora Client"",
      ""path"": ""diaspora-client"",
      ""path_with_namespace"": ""diaspora/diaspora-client"",
      ""issues_enabled"": true,
      ""open_issues_count"": 1,
      ""merge_requests_enabled"": true,
      ""jobs_enabled"": true,
      ""wiki_enabled"": true,
      ""snippets_enabled"": false,
      ""can_create_merge_request_in"": true,
      ""resolve_outdated_diff_discussions"": false,
      ""container_registry_enabled"": false,
      ""container_registry_access_level"": ""disabled"",
      ""security_and_compliance_access_level"": ""disabled"",
      ""created_at"": ""2013-09-30T13:46:02Z"",
      ""updated_at"": ""2013-09-30T13:46:02Z"",
      ""last_activity_at"": ""2013-09-30T13:46:02Z"",
      ""creator_id"": 3,
      ""namespace"": {
        ""id"": 3,
        ""name"": ""Diaspora"",
        ""path"": ""diaspora"",
        ""kind"": ""group"",
        ""full_path"": ""diaspora""
      },
      ""import_status"": ""none"",
      ""archived"": false,
      ""avatar_url"": ""http://example.com/uploads/project/avatar/4/uploads/avatar.png"",
      ""shared_runners_enabled"": true,
      ""group_runners_enabled"": true,
      ""forks_count"": 0,
      ""star_count"": 0,
      ""runners_token"": ""b8547b1dc37721d05889db52fa2f02"",
      ""public_jobs"": true,
      ""shared_with_groups"": [],
      ""only_allow_merge_if_pipeline_succeeds"": false,
      ""allow_merge_on_skipped_pipeline"": false,
      ""restrict_user_defined_variables"": false,
      ""only_allow_merge_if_all_discussions_are_resolved"": false,
      ""remove_source_branch_after_merge"": false,
      ""request_access_enabled"": false,
      ""merge_method"": ""merge"",
      ""squash_option"": ""default_on"",
      ""autoclose_referenced_issues"": true,
      ""enforce_auth_checks_on_uploads"": true,
      ""suggestion_commit_message"": null,
      ""merge_commit_template"": null,
      ""squash_commit_template"": null,
      ""issue_branch_template"": ""gitlab/%{id}-%{title}"",
      ""statistics"": {
        ""commit_count"": 37,
        ""storage_size"": 1038090,
        ""repository_size"": 1038090,
        ""lfs_objects_size"": 0,
        ""job_artifacts_size"": 0,
        ""pipeline_artifacts_size"": 0,
        ""packages_size"": 0,
        ""snippets_size"": 0,
        ""uploads_size"": 0,
        ""container_registry_size"": 0
      },
      ""container_registry_image_prefix"": ""registry.example.com/diaspora/diaspora-client"",
      ""_links"": {
        ""self"": ""http://example.com/api/v4/projects"",
        ""issues"": ""http://example.com/api/v4/projects/1/issues"",
        ""merge_requests"": ""http://example.com/api/v4/projects/1/merge_requests"",
        ""repo_branches"": ""http://example.com/api/v4/projects/1/repository_branches"",
        ""labels"": ""http://example.com/api/v4/projects/1/labels"",
        ""events"": ""http://example.com/api/v4/projects/1/events"",
        ""members"": ""http://example.com/api/v4/projects/1/members"",
        ""cluster_agents"": ""http://example.com/api/v4/projects/1/cluster_agents""
      }
    }
  ]",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        valid_visibilities = {""public"", ""internal"", ""private""}
        if ""visibility"" not in request_info:
            return 0
        
        requested_visibility = request_info[""visibility""]
        if requested_visibility not in valid_visibilities:
            return -1
        
        for project in latest_response:
            if ""visibility"" not in project:
                return 0
            if project[""visibility""] != requested_visibility:
                return -1
        
        return 1
    except Exception as e:
        return -1
",internal,1.0,1,0,0,0,1,range of values
get-/projects/{id}/forks,Project,created_at,created_at,12,,,parameters,order_by,"Return projects ordered byid,name,path,created_at,updated_at, orlast_activity_atfields. Default iscreated_at",c,True,"{
    ""with_merge_requests_enabled"": true,
    ""with_issues_enabled"": true,
    ""visibility"": ""private"",
    ""order_by"": ""id"",
    ""id"": 4,
    ""archived"": false
  }","[
    {
      ""id"": 4,
      ""description"": ""Lorem ipsum dolor sit amet, consectetur adipiscing elit."",
      ""description_html"": """",
      ""default_branch"": ""main"",
      ""visibility"": ""private"",
      ""ssh_url_to_repo"": ""git@example.com:diaspora/diaspora-client.git"",
      ""http_url_to_repo"": ""http://example.com/diaspora/diaspora-client.git"",
      ""web_url"": ""http://example.com/diaspora/diaspora-client"",
      ""readme_url"": ""http://example.com/diaspora/diaspora-client/blob/main/README.md"",
      ""tag_list"": [
        ""example"",
        ""disapora client""
      ],
      ""topics"": [
        ""example"",
        ""disapora client""
      ],
      ""owner"": {
        ""id"": 3,
        ""name"": ""Diaspora"",
        ""created_at"": ""2013-09-30T13:46:02Z""
      },
      ""name"": ""Diaspora Client"",
      ""name_with_namespace"": ""Diaspora / Diaspora Client"",
      ""path"": ""diaspora-client"",
      ""path_with_namespace"": ""diaspora/diaspora-client"",
      ""issues_enabled"": true,
      ""open_issues_count"": 1,
      ""merge_requests_enabled"": true,
      ""jobs_enabled"": true,
      ""wiki_enabled"": true,
      ""snippets_enabled"": false,
      ""can_create_merge_request_in"": true,
      ""resolve_outdated_diff_discussions"": false,
      ""container_registry_enabled"": false,
      ""container_registry_access_level"": ""disabled"",
      ""security_and_compliance_access_level"": ""disabled"",
      ""created_at"": ""2013-09-30T13:46:02Z"",
      ""updated_at"": ""2013-09-30T13:46:02Z"",
      ""last_activity_at"": ""2013-09-30T13:46:02Z"",
      ""creator_id"": 3,
      ""namespace"": {
        ""id"": 3,
        ""name"": ""Diaspora"",
        ""path"": ""diaspora"",
        ""kind"": ""group"",
        ""full_path"": ""diaspora""
      },
      ""import_status"": ""none"",
      ""archived"": false,
      ""avatar_url"": ""http://example.com/uploads/project/avatar/4/uploads/avatar.png"",
      ""shared_runners_enabled"": true,
      ""group_runners_enabled"": true,
      ""forks_count"": 0,
      ""star_count"": 0,
      ""runners_token"": ""b8547b1dc37721d05889db52fa2f02"",
      ""public_jobs"": true,
      ""shared_with_groups"": [],
      ""only_allow_merge_if_pipeline_succeeds"": false,
      ""allow_merge_on_skipped_pipeline"": false,
      ""restrict_user_defined_variables"": false,
      ""only_allow_merge_if_all_discussions_are_resolved"": false,
      ""remove_source_branch_after_merge"": false,
      ""request_access_enabled"": false,
      ""merge_method"": ""merge"",
      ""squash_option"": ""default_on"",
      ""autoclose_referenced_issues"": true,
      ""enforce_auth_checks_on_uploads"": true,
      ""suggestion_commit_message"": null,
      ""merge_commit_template"": null,
      ""squash_commit_template"": null,
      ""issue_branch_template"": ""gitlab/%{id}-%{title}"",
      ""statistics"": {
        ""commit_count"": 37,
        ""storage_size"": 1038090,
        ""repository_size"": 1038090,
        ""lfs_objects_size"": 0,
        ""job_artifacts_size"": 0,
        ""pipeline_artifacts_size"": 0,
        ""packages_size"": 0,
        ""snippets_size"": 0,
        ""uploads_size"": 0,
        ""container_registry_size"": 0
      },
      ""container_registry_image_prefix"": ""registry.example.com/diaspora/diaspora-client"",
      ""_links"": {
        ""self"": ""http://example.com/api/v4/projects"",
        ""issues"": ""http://example.com/api/v4/projects/1/issues"",
        ""merge_requests"": ""http://example.com/api/v4/projects/1/merge_requests"",
        ""repo_branches"": ""http://example.com/api/v4/projects/1/repository_branches"",
        ""labels"": ""http://example.com/api/v4/projects/1/labels"",
        ""events"": ""http://example.com/api/v4/projects/1/events"",
        ""members"": ""http://example.com/api/v4/projects/1/members"",
        ""cluster_agents"": ""http://example.com/api/v4/projects/1/cluster_agents""
      }
    }
  ]",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        order_by = request_info.get(""order_by"", ""created_at"")
        valid_order_by_fields = [""id"", ""name"", ""path"", ""created_at"", ""updated_at"", ""last_activity_at""]
        
        if order_by not in valid_order_by_fields:
            return -1
        
        if not latest_response:
            return 0
        
        if order_by == ""created_at"":
            created_at_values = [project.get(""created_at"") for project in latest_response]
            if not all(created_at_values):
                return 0
            
            sorted_created_at_values = sorted(created_at_values)
            if created_at_values == sorted_created_at_values:
                return 1
            else:
                return -1
        else:
            # Implement other order_by fields verification if needed
            return 0
    except Exception as e:
        return -1
",2013-09-30T13:46:02Z,1.0,0,0,1,0,1,"range of values, logic"
get-/projects/{id}/forks,Project,id,id,13,,,parameters,id,The ID orURL-encoded path of the project,c,False,"{
    ""with_merge_requests_enabled"": true,
    ""with_issues_enabled"": true,
    ""visibility"": ""private"",
    ""order_by"": ""id"",
    ""id"": 4,
    ""archived"": false
  }","[
    {
      ""id"": 4,
      ""description"": ""Lorem ipsum dolor sit amet, consectetur adipiscing elit."",
      ""description_html"": """",
      ""default_branch"": ""main"",
      ""visibility"": ""private"",
      ""ssh_url_to_repo"": ""git@example.com:diaspora/diaspora-client.git"",
      ""http_url_to_repo"": ""http://example.com/diaspora/diaspora-client.git"",
      ""web_url"": ""http://example.com/diaspora/diaspora-client"",
      ""readme_url"": ""http://example.com/diaspora/diaspora-client/blob/main/README.md"",
      ""tag_list"": [
        ""example"",
        ""disapora client""
      ],
      ""topics"": [
        ""example"",
        ""disapora client""
      ],
      ""owner"": {
        ""id"": 3,
        ""name"": ""Diaspora"",
        ""created_at"": ""2013-09-30T13:46:02Z""
      },
      ""name"": ""Diaspora Client"",
      ""name_with_namespace"": ""Diaspora / Diaspora Client"",
      ""path"": ""diaspora-client"",
      ""path_with_namespace"": ""diaspora/diaspora-client"",
      ""issues_enabled"": true,
      ""open_issues_count"": 1,
      ""merge_requests_enabled"": true,
      ""jobs_enabled"": true,
      ""wiki_enabled"": true,
      ""snippets_enabled"": false,
      ""can_create_merge_request_in"": true,
      ""resolve_outdated_diff_discussions"": false,
      ""container_registry_enabled"": false,
      ""container_registry_access_level"": ""disabled"",
      ""security_and_compliance_access_level"": ""disabled"",
      ""created_at"": ""2013-09-30T13:46:02Z"",
      ""updated_at"": ""2013-09-30T13:46:02Z"",
      ""last_activity_at"": ""2013-09-30T13:46:02Z"",
      ""creator_id"": 3,
      ""namespace"": {
        ""id"": 3,
        ""name"": ""Diaspora"",
        ""path"": ""diaspora"",
        ""kind"": ""group"",
        ""full_path"": ""diaspora""
      },
      ""import_status"": ""none"",
      ""archived"": false,
      ""avatar_url"": ""http://example.com/uploads/project/avatar/4/uploads/avatar.png"",
      ""shared_runners_enabled"": true,
      ""group_runners_enabled"": true,
      ""forks_count"": 0,
      ""star_count"": 0,
      ""runners_token"": ""b8547b1dc37721d05889db52fa2f02"",
      ""public_jobs"": true,
      ""shared_with_groups"": [],
      ""only_allow_merge_if_pipeline_succeeds"": false,
      ""allow_merge_on_skipped_pipeline"": false,
      ""restrict_user_defined_variables"": false,
      ""only_allow_merge_if_all_discussions_are_resolved"": false,
      ""remove_source_branch_after_merge"": false,
      ""request_access_enabled"": false,
      ""merge_method"": ""merge"",
      ""squash_option"": ""default_on"",
      ""autoclose_referenced_issues"": true,
      ""enforce_auth_checks_on_uploads"": true,
      ""suggestion_commit_message"": null,
      ""merge_commit_template"": null,
      ""squash_commit_template"": null,
      ""issue_branch_template"": ""gitlab/%{id}-%{title}"",
      ""statistics"": {
        ""commit_count"": 37,
        ""storage_size"": 1038090,
        ""repository_size"": 1038090,
        ""lfs_objects_size"": 0,
        ""job_artifacts_size"": 0,
        ""pipeline_artifacts_size"": 0,
        ""packages_size"": 0,
        ""snippets_size"": 0,
        ""uploads_size"": 0,
        ""container_registry_size"": 0
      },
      ""container_registry_image_prefix"": ""registry.example.com/diaspora/diaspora-client"",
      ""_links"": {
        ""self"": ""http://example.com/api/v4/projects"",
        ""issues"": ""http://example.com/api/v4/projects/1/issues"",
        ""merge_requests"": ""http://example.com/api/v4/projects/1/merge_requests"",
        ""repo_branches"": ""http://example.com/api/v4/projects/1/repository_branches"",
        ""labels"": ""http://example.com/api/v4/projects/1/labels"",
        ""events"": ""http://example.com/api/v4/projects/1/events"",
        ""members"": ""http://example.com/api/v4/projects/1/members"",
        ""cluster_agents"": ""http://example.com/api/v4/projects/1/cluster_agents""
      }
    }
  ]",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the 'id' from the request_info
        request_id = int(request_info.get('id'))
        
        # Check if the response is a list of Project objects
        if not isinstance(latest_response, list):
            return 0
        
        for project in latest_response:
            # Ensure each project is a dictionary and has an 'id' attribute
            if not isinstance(project, dict) or 'id' not in project:
                return 0
            
            # Ensure the 'id' in the response is an integer
            if not isinstance(project['id'], int):
                return -1
            
            # Check if the 'id' in the response matches the 'id' from the request
            if project['id'] != request_id:
                return -1
        
        return 1
    except (ValueError, TypeError):
        return -1
",3,1.0,1,0,0,0,1,logic
get-/projects/{id}/forks,Project,archived,archived,14,,,parameters,archived,Limit by archived status,c,False,"{
    ""with_merge_requests_enabled"": true,
    ""with_issues_enabled"": true,
    ""visibility"": ""private"",
    ""order_by"": ""id"",
    ""id"": 4,
    ""archived"": false
  }","[
    {
      ""id"": 4,
      ""description"": ""Lorem ipsum dolor sit amet, consectetur adipiscing elit."",
      ""description_html"": """",
      ""default_branch"": ""main"",
      ""visibility"": ""private"",
      ""ssh_url_to_repo"": ""git@example.com:diaspora/diaspora-client.git"",
      ""http_url_to_repo"": ""http://example.com/diaspora/diaspora-client.git"",
      ""web_url"": ""http://example.com/diaspora/diaspora-client"",
      ""readme_url"": ""http://example.com/diaspora/diaspora-client/blob/main/README.md"",
      ""tag_list"": [
        ""example"",
        ""disapora client""
      ],
      ""topics"": [
        ""example"",
        ""disapora client""
      ],
      ""owner"": {
        ""id"": 3,
        ""name"": ""Diaspora"",
        ""created_at"": ""2013-09-30T13:46:02Z""
      },
      ""name"": ""Diaspora Client"",
      ""name_with_namespace"": ""Diaspora / Diaspora Client"",
      ""path"": ""diaspora-client"",
      ""path_with_namespace"": ""diaspora/diaspora-client"",
      ""issues_enabled"": true,
      ""open_issues_count"": 1,
      ""merge_requests_enabled"": true,
      ""jobs_enabled"": true,
      ""wiki_enabled"": true,
      ""snippets_enabled"": false,
      ""can_create_merge_request_in"": true,
      ""resolve_outdated_diff_discussions"": false,
      ""container_registry_enabled"": false,
      ""container_registry_access_level"": ""disabled"",
      ""security_and_compliance_access_level"": ""disabled"",
      ""created_at"": ""2013-09-30T13:46:02Z"",
      ""updated_at"": ""2013-09-30T13:46:02Z"",
      ""last_activity_at"": ""2013-09-30T13:46:02Z"",
      ""creator_id"": 3,
      ""namespace"": {
        ""id"": 3,
        ""name"": ""Diaspora"",
        ""path"": ""diaspora"",
        ""kind"": ""group"",
        ""full_path"": ""diaspora""
      },
      ""import_status"": ""none"",
      ""archived"": false,
      ""avatar_url"": ""http://example.com/uploads/project/avatar/4/uploads/avatar.png"",
      ""shared_runners_enabled"": true,
      ""group_runners_enabled"": true,
      ""forks_count"": 0,
      ""star_count"": 0,
      ""runners_token"": ""b8547b1dc37721d05889db52fa2f02"",
      ""public_jobs"": true,
      ""shared_with_groups"": [],
      ""only_allow_merge_if_pipeline_succeeds"": false,
      ""allow_merge_on_skipped_pipeline"": false,
      ""restrict_user_defined_variables"": false,
      ""only_allow_merge_if_all_discussions_are_resolved"": false,
      ""remove_source_branch_after_merge"": false,
      ""request_access_enabled"": false,
      ""merge_method"": ""merge"",
      ""squash_option"": ""default_on"",
      ""autoclose_referenced_issues"": true,
      ""enforce_auth_checks_on_uploads"": true,
      ""suggestion_commit_message"": null,
      ""merge_commit_template"": null,
      ""squash_commit_template"": null,
      ""issue_branch_template"": ""gitlab/%{id}-%{title}"",
      ""statistics"": {
        ""commit_count"": 37,
        ""storage_size"": 1038090,
        ""repository_size"": 1038090,
        ""lfs_objects_size"": 0,
        ""job_artifacts_size"": 0,
        ""pipeline_artifacts_size"": 0,
        ""packages_size"": 0,
        ""snippets_size"": 0,
        ""uploads_size"": 0,
        ""container_registry_size"": 0
      },
      ""container_registry_image_prefix"": ""registry.example.com/diaspora/diaspora-client"",
      ""_links"": {
        ""self"": ""http://example.com/api/v4/projects"",
        ""issues"": ""http://example.com/api/v4/projects/1/issues"",
        ""merge_requests"": ""http://example.com/api/v4/projects/1/merge_requests"",
        ""repo_branches"": ""http://example.com/api/v4/projects/1/repository_branches"",
        ""labels"": ""http://example.com/api/v4/projects/1/labels"",
        ""events"": ""http://example.com/api/v4/projects/1/events"",
        ""members"": ""http://example.com/api/v4/projects/1/members"",
        ""cluster_agents"": ""http://example.com/api/v4/projects/1/cluster_agents""
      }
    }
  ]",TP,unknown,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'archived' parameter was part of the request
        archived_requested = request_info.get('archived', None)
        
        # If 'archived' was not part of the request, we cannot verify against it
        if archived_requested is None:
            return 0
        
        # Convert archived_requested to boolean if it's not None
        if isinstance(archived_requested, str):
            archived_requested = archived_requested.lower() in ['true', '1', 't', 'y', 'yes']
        
        # Verify each project in the response
        for project in latest_response:
            # Check if 'archived' exists in the project and is not None
            if 'archived' not in project or project['archived'] is None:
                return 0
            
            # Check if the project's 'archived' status matches the requested 'archived' status
            if project['archived'] != archived_requested:
                return -1
        
        # If all projects match the requested 'archived' status
        return 1
    except Exception as e:
        # In case of any error during verification, consider the verification failed
        return -1
",True,1.0,1,0,0,0,1,"range of values, logic"
get-/users/{user_id}/projects,BasicProjectDetails,merge_requests_enabled,merge_requests_enabled,15,,,parameters,with_merge_requests_enabled,Limit by enabled merge requests feature,c,True,"{""user_id"":""5"", ""with_merge_requests_enabled"": true,  ""issues_enabled"": true, ""visibility"": ""private"", ""archived"": false}","[
    {
      ""id"": 4,
      ""description"": ""Lorem ipsum dolor sit amet, consectetur adipiscing elit."",
      ""description_html"": """",
      ""default_branch"": ""main"",
      ""visibility"": ""private"",
      ""ssh_url_to_repo"": ""git@example.com:diaspora/diaspora-client.git"",
      ""http_url_to_repo"": ""http://example.com/diaspora/diaspora-client.git"",
      ""web_url"": ""http://example.com/diaspora/diaspora-client"",
      ""readme_url"": ""http://example.com/diaspora/diaspora-client/blob/main/README.md"",
      ""tag_list"": [
        ""example"",
        ""disapora client""
      ],
      ""topics"": [
        ""example"",
        ""disapora client""
      ],
      ""owner"": {
        ""id"": 3,
        ""name"": ""Diaspora"",
        ""created_at"": ""2013-09-30T13:46:02Z""
      },
      ""name"": ""Diaspora Client"",
      ""name_with_namespace"": ""Diaspora / Diaspora Client"",
      ""path"": ""diaspora-client"",
      ""path_with_namespace"": ""diaspora/diaspora-client"",
      ""issues_enabled"": true,
      ""open_issues_count"": 1,
      ""merge_requests_enabled"": true,
      ""jobs_enabled"": true,
      ""wiki_enabled"": true,
      ""snippets_enabled"": false,
      ""can_create_merge_request_in"": true,
      ""resolve_outdated_diff_discussions"": false,
      ""container_registry_enabled"": false,
      ""container_registry_access_level"": ""disabled"",
      ""security_and_compliance_access_level"": ""disabled"",
      ""created_at"": ""2013-09-30T13:46:02Z"",
      ""updated_at"": ""2013-09-30T13:46:02Z"",
      ""last_activity_at"": ""2013-09-30T13:46:02Z"",
      ""creator_id"": 3,
      ""namespace"": {
        ""id"": 3,
        ""name"": ""Diaspora"",
        ""path"": ""diaspora"",
        ""kind"": ""group"",
        ""full_path"": ""diaspora""
      },
      ""import_status"": ""none"",
      ""archived"": false,
      ""avatar_url"": ""http://example.com/uploads/project/avatar/4/uploads/avatar.png"",
      ""shared_runners_enabled"": true,
      ""group_runners_enabled"": true,
      ""forks_count"": 0,
      ""star_count"": 0,
      ""runners_token"": ""b8547b1dc37721d05889db52fa2f02"",
      ""public_jobs"": true,
      ""shared_with_groups"": [],
      ""only_allow_merge_if_pipeline_succeeds"": false,
      ""allow_merge_on_skipped_pipeline"": false,
      ""restrict_user_defined_variables"": false,
      ""only_allow_merge_if_all_discussions_are_resolved"": false,
      ""remove_source_branch_after_merge"": false,
      ""request_access_enabled"": false,
      ""merge_method"": ""merge"",
      ""squash_option"": ""default_on"",
      ""autoclose_referenced_issues"": true,
      ""enforce_auth_checks_on_uploads"": true,
      ""suggestion_commit_message"": null,
      ""merge_commit_template"": null,
      ""squash_commit_template"": null,
      ""issue_branch_template"": ""gitlab/%{id}-%{title}"",
      ""statistics"": {
        ""commit_count"": 37,
        ""storage_size"": 1038090,
        ""repository_size"": 1038090,
        ""lfs_objects_size"": 0,
        ""job_artifacts_size"": 0,
        ""pipeline_artifacts_size"": 0,
        ""packages_size"": 0,
        ""snippets_size"": 0,
        ""uploads_size"": 0,
        ""container_registry_size"": 0
      },
      ""container_registry_image_prefix"": ""registry.example.com/diaspora/diaspora-client"",
      ""_links"": {
        ""self"": ""http://example.com/api/v4/projects"",
        ""issues"": ""http://example.com/api/v4/projects/1/issues"",
        ""merge_requests"": ""http://example.com/api/v4/projects/1/merge_requests"",
        ""repo_branches"": ""http://example.com/api/v4/projects/1/repository_branches"",
        ""labels"": ""http://example.com/api/v4/projects/1/labels"",
        ""events"": ""http://example.com/api/v4/projects/1/events"",
        ""members"": ""http://example.com/api/v4/projects/1/members"",
        ""cluster_agents"": ""http://example.com/api/v4/projects/1/cluster_agents""
      }
    },
    {
      ""id"": 6,
      ""description"": ""Lorem ipsum dolor sit amet, consectetur adipiscing elit."",
      ""description_html"": """",
      ""default_branch"": ""main"",
      ""visibility"": ""private"",
      ""ssh_url_to_repo"": ""git@example.com:brightbox/puppet.git"",
      ""http_url_to_repo"": ""http://example.com/brightbox/puppet.git"",
      ""web_url"": ""http://example.com/brightbox/puppet"",
      ""readme_url"": ""http://example.com/brightbox/puppet/blob/main/README.md"",
      ""tag_list"": [
        ""example"",
        ""puppet""
      ],
      ""topics"": [
        ""example"",
        ""puppet""
      ],
      ""owner"": {
        ""id"": 4,
        ""name"": ""Brightbox"",
        ""created_at"": ""2013-09-30T13:46:02Z""
      },
      ""name"": ""Puppet"",
      ""name_with_namespace"": ""Brightbox / Puppet"",
      ""path"": ""puppet"",
      ""path_with_namespace"": ""brightbox/puppet"",
      ""issues_enabled"": true,
      ""open_issues_count"": 1,
      ""merge_requests_enabled"": true,
      ""jobs_enabled"": true,
      ""wiki_enabled"": true,
      ""snippets_enabled"": false,
      ""can_create_merge_request_in"": true,
      ""resolve_outdated_diff_discussions"": false,
      ""container_registry_enabled"": false,
      ""container_registry_access_level"": ""disabled"",
      ""security_and_compliance_access_level"": ""disabled"",
      ""created_at"": ""2013-09-30T13:46:02Z"",
      ""updated_at"": ""2013-09-30T13:46:02Z"",
      ""last_activity_at"": ""2013-09-30T13:46:02Z"",
      ""creator_id"": 3,
      ""namespace"": {
        ""id"": 4,
        ""name"": ""Brightbox"",
        ""path"": ""brightbox"",
        ""kind"": ""group"",
        ""full_path"": ""brightbox""
      },
      ""import_status"": ""none"",
      ""import_error"": null,
      ""permissions"": {
        ""project_access"": {
          ""access_level"": 10,
          ""notification_level"": 3
        },
        ""group_access"": {
          ""access_level"": 50,
          ""notification_level"": 3
        }
      },
      ""archived"": false,
      ""avatar_url"": null,
      ""shared_runners_enabled"": true,
      ""group_runners_enabled"": true,
      ""forks_count"": 0,
      ""star_count"": 0,
      ""runners_token"": ""b8547b1dc37721d05889db52fa2f02"",
      ""public_jobs"": true,
      ""shared_with_groups"": [],
      ""only_allow_merge_if_pipeline_succeeds"": false,
      ""allow_merge_on_skipped_pipeline"": false,
      ""restrict_user_defined_variables"": false,
      ""only_allow_merge_if_all_discussions_are_resolved"": false,
      ""remove_source_branch_after_merge"": false,
      ""request_access_enabled"": false,
      ""merge_method"": ""merge"",
      ""squash_option"": ""default_on"",
      ""auto_devops_enabled"": true,
      ""auto_devops_deploy_strategy"": ""continuous"",
      ""repository_storage"": ""default"",
      ""approvals_before_merge"": 0,
      ""mirror"": false,
      ""mirror_user_id"": 45,
      ""mirror_trigger_builds"": false,
      ""only_mirror_protected_branches"": false,
      ""mirror_overwrites_diverged_branches"": false,
      ""external_authorization_classification_label"": null,
      ""packages_enabled"": true,
      ""service_desk_enabled"": false,
      ""service_desk_address"": null,
      ""autoclose_referenced_issues"": true,
      ""enforce_auth_checks_on_uploads"": true,
      ""suggestion_commit_message"": null,
      ""merge_commit_template"": null,
      ""squash_commit_template"": null,
      ""issue_branch_template"": ""gitlab/%{id}-%{title}"",
      ""statistics"": {
        ""commit_count"": 12,
        ""storage_size"": 2066080,
        ""repository_size"": 2066080,
        ""lfs_objects_size"": 0,
        ""job_artifacts_size"": 0,
        ""pipeline_artifacts_size"": 0,
        ""packages_size"": 0,
        ""snippets_size"": 0,
        ""uploads_size"": 0,
        ""container_registry_size"": 0
      },
      ""container_registry_image_prefix"": ""registry.example.com/brightbox/puppet"",
      ""_links"": {
        ""self"": ""http://example.com/api/v4/projects"",
        ""issues"": ""http://example.com/api/v4/projects/1/issues"",
        ""merge_requests"": ""http://example.com/api/v4/projects/1/merge_requests"",
        ""repo_branches"": ""http://example.com/api/v4/projects/1/repository_branches"",
        ""labels"": ""http://example.com/api/v4/projects/1/labels"",
        ""events"": ""http://example.com/api/v4/projects/1/events"",
        ""members"": ""http://example.com/api/v4/projects/1/members"",
        ""cluster_agents"": ""http://example.com/api/v4/projects/1/cluster_agents""
      }
    }
  ]",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the 'with_merge_requests_enabled' parameter from request_info
        with_merge_requests_enabled = request_info.get(""with_merge_requests_enabled"")
        
        # Check if the parameter is provided
        if with_merge_requests_enabled is None:
            return 0
        
        # Iterate through each project in the response
        for project in latest_response:
            # Check if 'merge_requests_enabled' attribute exists in the project
            if 'merge_requests_enabled' not in project:
                return 0
            
            # Verify the 'merge_requests_enabled' attribute against the input parameter
            if project['merge_requests_enabled'] != with_merge_requests_enabled:
                return -1
        
        # If all projects satisfy the constraint
        return 1
    except Exception as e:
        # In case of any unexpected error
        return -1
",True,1.0,1,0,0,0,1,"range of values, logic"
get-/users/{user_id}/projects,BasicProjectDetails,issues_enabled,issues_enabled,16,,,parameters,with_issues_enabled,Limit by enabled issues feature,c,True,"{""user_id"":""5"", ""merge_requests_enabled"": true,  ""with_issues_enabled"": true, ""visibility"": ""private"", ""archived"": false}","[
    {
      ""id"": 4,
      ""description"": ""Lorem ipsum dolor sit amet, consectetur adipiscing elit."",
      ""description_html"": """",
      ""default_branch"": ""main"",
      ""visibility"": ""private"",
      ""ssh_url_to_repo"": ""git@example.com:diaspora/diaspora-client.git"",
      ""http_url_to_repo"": ""http://example.com/diaspora/diaspora-client.git"",
      ""web_url"": ""http://example.com/diaspora/diaspora-client"",
      ""readme_url"": ""http://example.com/diaspora/diaspora-client/blob/main/README.md"",
      ""tag_list"": [
        ""example"",
        ""disapora client""
      ],
      ""topics"": [
        ""example"",
        ""disapora client""
      ],
      ""owner"": {
        ""id"": 3,
        ""name"": ""Diaspora"",
        ""created_at"": ""2013-09-30T13:46:02Z""
      },
      ""name"": ""Diaspora Client"",
      ""name_with_namespace"": ""Diaspora / Diaspora Client"",
      ""path"": ""diaspora-client"",
      ""path_with_namespace"": ""diaspora/diaspora-client"",
      ""issues_enabled"": true,
      ""open_issues_count"": 1,
      ""merge_requests_enabled"": true,
      ""jobs_enabled"": true,
      ""wiki_enabled"": true,
      ""snippets_enabled"": false,
      ""can_create_merge_request_in"": true,
      ""resolve_outdated_diff_discussions"": false,
      ""container_registry_enabled"": false,
      ""container_registry_access_level"": ""disabled"",
      ""security_and_compliance_access_level"": ""disabled"",
      ""created_at"": ""2013-09-30T13:46:02Z"",
      ""updated_at"": ""2013-09-30T13:46:02Z"",
      ""last_activity_at"": ""2013-09-30T13:46:02Z"",
      ""creator_id"": 3,
      ""namespace"": {
        ""id"": 3,
        ""name"": ""Diaspora"",
        ""path"": ""diaspora"",
        ""kind"": ""group"",
        ""full_path"": ""diaspora""
      },
      ""import_status"": ""none"",
      ""archived"": false,
      ""avatar_url"": ""http://example.com/uploads/project/avatar/4/uploads/avatar.png"",
      ""shared_runners_enabled"": true,
      ""group_runners_enabled"": true,
      ""forks_count"": 0,
      ""star_count"": 0,
      ""runners_token"": ""b8547b1dc37721d05889db52fa2f02"",
      ""public_jobs"": true,
      ""shared_with_groups"": [],
      ""only_allow_merge_if_pipeline_succeeds"": false,
      ""allow_merge_on_skipped_pipeline"": false,
      ""restrict_user_defined_variables"": false,
      ""only_allow_merge_if_all_discussions_are_resolved"": false,
      ""remove_source_branch_after_merge"": false,
      ""request_access_enabled"": false,
      ""merge_method"": ""merge"",
      ""squash_option"": ""default_on"",
      ""autoclose_referenced_issues"": true,
      ""enforce_auth_checks_on_uploads"": true,
      ""suggestion_commit_message"": null,
      ""merge_commit_template"": null,
      ""squash_commit_template"": null,
      ""issue_branch_template"": ""gitlab/%{id}-%{title}"",
      ""statistics"": {
        ""commit_count"": 37,
        ""storage_size"": 1038090,
        ""repository_size"": 1038090,
        ""lfs_objects_size"": 0,
        ""job_artifacts_size"": 0,
        ""pipeline_artifacts_size"": 0,
        ""packages_size"": 0,
        ""snippets_size"": 0,
        ""uploads_size"": 0,
        ""container_registry_size"": 0
      },
      ""container_registry_image_prefix"": ""registry.example.com/diaspora/diaspora-client"",
      ""_links"": {
        ""self"": ""http://example.com/api/v4/projects"",
        ""issues"": ""http://example.com/api/v4/projects/1/issues"",
        ""merge_requests"": ""http://example.com/api/v4/projects/1/merge_requests"",
        ""repo_branches"": ""http://example.com/api/v4/projects/1/repository_branches"",
        ""labels"": ""http://example.com/api/v4/projects/1/labels"",
        ""events"": ""http://example.com/api/v4/projects/1/events"",
        ""members"": ""http://example.com/api/v4/projects/1/members"",
        ""cluster_agents"": ""http://example.com/api/v4/projects/1/cluster_agents""
      }
    },
    {
      ""id"": 6,
      ""description"": ""Lorem ipsum dolor sit amet, consectetur adipiscing elit."",
      ""description_html"": """",
      ""default_branch"": ""main"",
      ""visibility"": ""private"",
      ""ssh_url_to_repo"": ""git@example.com:brightbox/puppet.git"",
      ""http_url_to_repo"": ""http://example.com/brightbox/puppet.git"",
      ""web_url"": ""http://example.com/brightbox/puppet"",
      ""readme_url"": ""http://example.com/brightbox/puppet/blob/main/README.md"",
      ""tag_list"": [
        ""example"",
        ""puppet""
      ],
      ""topics"": [
        ""example"",
        ""puppet""
      ],
      ""owner"": {
        ""id"": 4,
        ""name"": ""Brightbox"",
        ""created_at"": ""2013-09-30T13:46:02Z""
      },
      ""name"": ""Puppet"",
      ""name_with_namespace"": ""Brightbox / Puppet"",
      ""path"": ""puppet"",
      ""path_with_namespace"": ""brightbox/puppet"",
      ""issues_enabled"": true,
      ""open_issues_count"": 1,
      ""merge_requests_enabled"": true,
      ""jobs_enabled"": true,
      ""wiki_enabled"": true,
      ""snippets_enabled"": false,
      ""can_create_merge_request_in"": true,
      ""resolve_outdated_diff_discussions"": false,
      ""container_registry_enabled"": false,
      ""container_registry_access_level"": ""disabled"",
      ""security_and_compliance_access_level"": ""disabled"",
      ""created_at"": ""2013-09-30T13:46:02Z"",
      ""updated_at"": ""2013-09-30T13:46:02Z"",
      ""last_activity_at"": ""2013-09-30T13:46:02Z"",
      ""creator_id"": 3,
      ""namespace"": {
        ""id"": 4,
        ""name"": ""Brightbox"",
        ""path"": ""brightbox"",
        ""kind"": ""group"",
        ""full_path"": ""brightbox""
      },
      ""import_status"": ""none"",
      ""import_error"": null,
      ""permissions"": {
        ""project_access"": {
          ""access_level"": 10,
          ""notification_level"": 3
        },
        ""group_access"": {
          ""access_level"": 50,
          ""notification_level"": 3
        }
      },
      ""archived"": false,
      ""avatar_url"": null,
      ""shared_runners_enabled"": true,
      ""group_runners_enabled"": true,
      ""forks_count"": 0,
      ""star_count"": 0,
      ""runners_token"": ""b8547b1dc37721d05889db52fa2f02"",
      ""public_jobs"": true,
      ""shared_with_groups"": [],
      ""only_allow_merge_if_pipeline_succeeds"": false,
      ""allow_merge_on_skipped_pipeline"": false,
      ""restrict_user_defined_variables"": false,
      ""only_allow_merge_if_all_discussions_are_resolved"": false,
      ""remove_source_branch_after_merge"": false,
      ""request_access_enabled"": false,
      ""merge_method"": ""merge"",
      ""squash_option"": ""default_on"",
      ""auto_devops_enabled"": true,
      ""auto_devops_deploy_strategy"": ""continuous"",
      ""repository_storage"": ""default"",
      ""approvals_before_merge"": 0,
      ""mirror"": false,
      ""mirror_user_id"": 45,
      ""mirror_trigger_builds"": false,
      ""only_mirror_protected_branches"": false,
      ""mirror_overwrites_diverged_branches"": false,
      ""external_authorization_classification_label"": null,
      ""packages_enabled"": true,
      ""service_desk_enabled"": false,
      ""service_desk_address"": null,
      ""autoclose_referenced_issues"": true,
      ""enforce_auth_checks_on_uploads"": true,
      ""suggestion_commit_message"": null,
      ""merge_commit_template"": null,
      ""squash_commit_template"": null,
      ""issue_branch_template"": ""gitlab/%{id}-%{title}"",
      ""statistics"": {
        ""commit_count"": 12,
        ""storage_size"": 2066080,
        ""repository_size"": 2066080,
        ""lfs_objects_size"": 0,
        ""job_artifacts_size"": 0,
        ""pipeline_artifacts_size"": 0,
        ""packages_size"": 0,
        ""snippets_size"": 0,
        ""uploads_size"": 0,
        ""container_registry_size"": 0
      },
      ""container_registry_image_prefix"": ""registry.example.com/brightbox/puppet"",
      ""_links"": {
        ""self"": ""http://example.com/api/v4/projects"",
        ""issues"": ""http://example.com/api/v4/projects/1/issues"",
        ""merge_requests"": ""http://example.com/api/v4/projects/1/merge_requests"",
        ""repo_branches"": ""http://example.com/api/v4/projects/1/repository_branches"",
        ""labels"": ""http://example.com/api/v4/projects/1/labels"",
        ""events"": ""http://example.com/api/v4/projects/1/events"",
        ""members"": ""http://example.com/api/v4/projects/1/members"",
        ""cluster_agents"": ""http://example.com/api/v4/projects/1/cluster_agents""
      }
    }
  ]",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        with_issues_enabled = request_info.get(""with_issues_enabled"")
        if with_issues_enabled is None:
            return 0  # No constraint to verify

        for project in latest_response:
            if 'issues_enabled' not in project:
                return 0  # Insufficient information to verify the constraint
            if project['issues_enabled'] != with_issues_enabled:
                return -1  # Constraint not satisfied

        return 1  # Constraint satisfied
    except Exception as e:
        return -1  # In case of any error, return -1
",True,1.0,1,0,0,0,1,"range of values, logic"
get-/users/{user_id}/projects,BasicProjectDetails,visibility,visibility,17,,,parameters,visibility,Limit by visibility,c,False,"{""user_id"":""5"", ""merge_requests_enabled"": true,  ""with_issues_enabled"": true, ""visibility"": ""private"", ""archived"": false}","[
    {
      ""id"": 4,
      ""description"": ""Lorem ipsum dolor sit amet, consectetur adipiscing elit."",
      ""description_html"": """",
      ""default_branch"": ""main"",
      ""visibility"": ""private"",
      ""ssh_url_to_repo"": ""git@example.com:diaspora/diaspora-client.git"",
      ""http_url_to_repo"": ""http://example.com/diaspora/diaspora-client.git"",
      ""web_url"": ""http://example.com/diaspora/diaspora-client"",
      ""readme_url"": ""http://example.com/diaspora/diaspora-client/blob/main/README.md"",
      ""tag_list"": [
        ""example"",
        ""disapora client""
      ],
      ""topics"": [
        ""example"",
        ""disapora client""
      ],
      ""owner"": {
        ""id"": 3,
        ""name"": ""Diaspora"",
        ""created_at"": ""2013-09-30T13:46:02Z""
      },
      ""name"": ""Diaspora Client"",
      ""name_with_namespace"": ""Diaspora / Diaspora Client"",
      ""path"": ""diaspora-client"",
      ""path_with_namespace"": ""diaspora/diaspora-client"",
      ""issues_enabled"": true,
      ""open_issues_count"": 1,
      ""merge_requests_enabled"": true,
      ""jobs_enabled"": true,
      ""wiki_enabled"": true,
      ""snippets_enabled"": false,
      ""can_create_merge_request_in"": true,
      ""resolve_outdated_diff_discussions"": false,
      ""container_registry_enabled"": false,
      ""container_registry_access_level"": ""disabled"",
      ""security_and_compliance_access_level"": ""disabled"",
      ""created_at"": ""2013-09-30T13:46:02Z"",
      ""updated_at"": ""2013-09-30T13:46:02Z"",
      ""last_activity_at"": ""2013-09-30T13:46:02Z"",
      ""creator_id"": 3,
      ""namespace"": {
        ""id"": 3,
        ""name"": ""Diaspora"",
        ""path"": ""diaspora"",
        ""kind"": ""group"",
        ""full_path"": ""diaspora""
      },
      ""import_status"": ""none"",
      ""archived"": false,
      ""avatar_url"": ""http://example.com/uploads/project/avatar/4/uploads/avatar.png"",
      ""shared_runners_enabled"": true,
      ""group_runners_enabled"": true,
      ""forks_count"": 0,
      ""star_count"": 0,
      ""runners_token"": ""b8547b1dc37721d05889db52fa2f02"",
      ""public_jobs"": true,
      ""shared_with_groups"": [],
      ""only_allow_merge_if_pipeline_succeeds"": false,
      ""allow_merge_on_skipped_pipeline"": false,
      ""restrict_user_defined_variables"": false,
      ""only_allow_merge_if_all_discussions_are_resolved"": false,
      ""remove_source_branch_after_merge"": false,
      ""request_access_enabled"": false,
      ""merge_method"": ""merge"",
      ""squash_option"": ""default_on"",
      ""autoclose_referenced_issues"": true,
      ""enforce_auth_checks_on_uploads"": true,
      ""suggestion_commit_message"": null,
      ""merge_commit_template"": null,
      ""squash_commit_template"": null,
      ""issue_branch_template"": ""gitlab/%{id}-%{title}"",
      ""statistics"": {
        ""commit_count"": 37,
        ""storage_size"": 1038090,
        ""repository_size"": 1038090,
        ""lfs_objects_size"": 0,
        ""job_artifacts_size"": 0,
        ""pipeline_artifacts_size"": 0,
        ""packages_size"": 0,
        ""snippets_size"": 0,
        ""uploads_size"": 0,
        ""container_registry_size"": 0
      },
      ""container_registry_image_prefix"": ""registry.example.com/diaspora/diaspora-client"",
      ""_links"": {
        ""self"": ""http://example.com/api/v4/projects"",
        ""issues"": ""http://example.com/api/v4/projects/1/issues"",
        ""merge_requests"": ""http://example.com/api/v4/projects/1/merge_requests"",
        ""repo_branches"": ""http://example.com/api/v4/projects/1/repository_branches"",
        ""labels"": ""http://example.com/api/v4/projects/1/labels"",
        ""events"": ""http://example.com/api/v4/projects/1/events"",
        ""members"": ""http://example.com/api/v4/projects/1/members"",
        ""cluster_agents"": ""http://example.com/api/v4/projects/1/cluster_agents""
      }
    },
    {
      ""id"": 6,
      ""description"": ""Lorem ipsum dolor sit amet, consectetur adipiscing elit."",
      ""description_html"": """",
      ""default_branch"": ""main"",
      ""visibility"": ""private"",
      ""ssh_url_to_repo"": ""git@example.com:brightbox/puppet.git"",
      ""http_url_to_repo"": ""http://example.com/brightbox/puppet.git"",
      ""web_url"": ""http://example.com/brightbox/puppet"",
      ""readme_url"": ""http://example.com/brightbox/puppet/blob/main/README.md"",
      ""tag_list"": [
        ""example"",
        ""puppet""
      ],
      ""topics"": [
        ""example"",
        ""puppet""
      ],
      ""owner"": {
        ""id"": 4,
        ""name"": ""Brightbox"",
        ""created_at"": ""2013-09-30T13:46:02Z""
      },
      ""name"": ""Puppet"",
      ""name_with_namespace"": ""Brightbox / Puppet"",
      ""path"": ""puppet"",
      ""path_with_namespace"": ""brightbox/puppet"",
      ""issues_enabled"": true,
      ""open_issues_count"": 1,
      ""merge_requests_enabled"": true,
      ""jobs_enabled"": true,
      ""wiki_enabled"": true,
      ""snippets_enabled"": false,
      ""can_create_merge_request_in"": true,
      ""resolve_outdated_diff_discussions"": false,
      ""container_registry_enabled"": false,
      ""container_registry_access_level"": ""disabled"",
      ""security_and_compliance_access_level"": ""disabled"",
      ""created_at"": ""2013-09-30T13:46:02Z"",
      ""updated_at"": ""2013-09-30T13:46:02Z"",
      ""last_activity_at"": ""2013-09-30T13:46:02Z"",
      ""creator_id"": 3,
      ""namespace"": {
        ""id"": 4,
        ""name"": ""Brightbox"",
        ""path"": ""brightbox"",
        ""kind"": ""group"",
        ""full_path"": ""brightbox""
      },
      ""import_status"": ""none"",
      ""import_error"": null,
      ""permissions"": {
        ""project_access"": {
          ""access_level"": 10,
          ""notification_level"": 3
        },
        ""group_access"": {
          ""access_level"": 50,
          ""notification_level"": 3
        }
      },
      ""archived"": false,
      ""avatar_url"": null,
      ""shared_runners_enabled"": true,
      ""group_runners_enabled"": true,
      ""forks_count"": 0,
      ""star_count"": 0,
      ""runners_token"": ""b8547b1dc37721d05889db52fa2f02"",
      ""public_jobs"": true,
      ""shared_with_groups"": [],
      ""only_allow_merge_if_pipeline_succeeds"": false,
      ""allow_merge_on_skipped_pipeline"": false,
      ""restrict_user_defined_variables"": false,
      ""only_allow_merge_if_all_discussions_are_resolved"": false,
      ""remove_source_branch_after_merge"": false,
      ""request_access_enabled"": false,
      ""merge_method"": ""merge"",
      ""squash_option"": ""default_on"",
      ""auto_devops_enabled"": true,
      ""auto_devops_deploy_strategy"": ""continuous"",
      ""repository_storage"": ""default"",
      ""approvals_before_merge"": 0,
      ""mirror"": false,
      ""mirror_user_id"": 45,
      ""mirror_trigger_builds"": false,
      ""only_mirror_protected_branches"": false,
      ""mirror_overwrites_diverged_branches"": false,
      ""external_authorization_classification_label"": null,
      ""packages_enabled"": true,
      ""service_desk_enabled"": false,
      ""service_desk_address"": null,
      ""autoclose_referenced_issues"": true,
      ""enforce_auth_checks_on_uploads"": true,
      ""suggestion_commit_message"": null,
      ""merge_commit_template"": null,
      ""squash_commit_template"": null,
      ""issue_branch_template"": ""gitlab/%{id}-%{title}"",
      ""statistics"": {
        ""commit_count"": 12,
        ""storage_size"": 2066080,
        ""repository_size"": 2066080,
        ""lfs_objects_size"": 0,
        ""job_artifacts_size"": 0,
        ""pipeline_artifacts_size"": 0,
        ""packages_size"": 0,
        ""snippets_size"": 0,
        ""uploads_size"": 0,
        ""container_registry_size"": 0
      },
      ""container_registry_image_prefix"": ""registry.example.com/brightbox/puppet"",
      ""_links"": {
        ""self"": ""http://example.com/api/v4/projects"",
        ""issues"": ""http://example.com/api/v4/projects/1/issues"",
        ""merge_requests"": ""http://example.com/api/v4/projects/1/merge_requests"",
        ""repo_branches"": ""http://example.com/api/v4/projects/1/repository_branches"",
        ""labels"": ""http://example.com/api/v4/projects/1/labels"",
        ""events"": ""http://example.com/api/v4/projects/1/events"",
        ""members"": ""http://example.com/api/v4/projects/1/members"",
        ""cluster_agents"": ""http://example.com/api/v4/projects/1/cluster_agents""
      }
    }
  ]",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the visibility constraint from the request_info
        visibility_constraint = request_info.get(""visibility"")
        
        # Check if the visibility constraint is provided
        if visibility_constraint is None:
            return 0
        
        # Define the allowed visibility values
        allowed_visibility_values = [""public"", ""internal"", ""private""]
        
        # Check if the provided visibility constraint is valid
        if visibility_constraint not in allowed_visibility_values:
            return -1
        
        # Verify the visibility attribute in each BasicProjectDetails object in the response
        for project in latest_response:
            if ""visibility"" not in project:
                return 0
            if project[""visibility""] != visibility_constraint:
                return -1
        
        # If all checks pass, return 1
        return 1
    except Exception as e:
        # In case of any exception, return -1
        return -1
",private,1.0,1,0,0,0,1,"range of values, logic"
get-/users/{user_id}/projects,BasicProjectDetails,id,id,18,,,parameters,id_after,Limit results to projects with IDs greater than the specified ID,c,True,"{""user_id"": 1, ""last_activity_after"": ""2024-03-01T00:00:00Z"", ""last_activity_before"": ""2024-03-05T00:00:00Z"", ""id_after"": 3, ""id_before"": 6, ""order_by"": ""last_activity_at""}","[{""id"":5,""description"":null,""name"":""test_project_5"",""name_with_namespace"":""Administrator / test_project_5"",""path"":""test_project_5"",""path_with_namespace"":""root/test_project_5"",""created_at"":""2024-03-04T09:07:53.324Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/test_project_5.git"",""http_url_to_repo"":""http://gitlab.example.com/root/test_project_5.git"",""web_url"":""http://gitlab.example.com/root/test_project_5"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":1,""last_activity_at"":""2024-03-04T09:07:53.324Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/5"",""issues"":""http://gitlab.example.com/api/v4/projects/5/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/5/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/5/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/5/labels"",""events"":""http://gitlab.example.com/api/v4/projects/5/events"",""members"":""http://gitlab.example.com/api/v4/projects/5/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/5/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-05T09:07:53.350Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-04T09:07:53.324Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941ymtrSxowSdg86ipmkzJL"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[{""group_id"":8,""group_name"":""test"",""group_full_path"":""test"",""group_access_level"":10,""expires_at"":null},{""group_id"":9,""group_name"":""test-1"",""group_full_path"":""test-1"",""group_access_level"":20,""expires_at"":null}],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":null,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":null}}]",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        id_after = int(request_info.get(""id_after"", 0))
        for project in latest_response:
            if ""id"" not in project:
                return 0
            if not isinstance(project[""id""], int):
                return -1
            if project[""id""] <= id_after:
                return -1
        return 1
    except Exception as e:
        return -1
",4,1.0,1,0,0,0,1,logic
get-/users/{user_id}/projects,BasicProjectDetails,archived,archived,19,,,parameters,archived,Limit by archived status,c,False,"{""user_id"": 1, ""last_activity_after"": ""2024-03-01T00:00:00Z"", ""last_activity_before"": ""2024-03-05T00:00:00Z"", ""id_after"": 3, ""id_before"": 6, ""order_by"": ""last_activity_at""}","[{""id"":5,""description"":null,""name"":""test_project_5"",""name_with_namespace"":""Administrator / test_project_5"",""path"":""test_project_5"",""path_with_namespace"":""root/test_project_5"",""created_at"":""2024-03-04T09:07:53.324Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/test_project_5.git"",""http_url_to_repo"":""http://gitlab.example.com/root/test_project_5.git"",""web_url"":""http://gitlab.example.com/root/test_project_5"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":1,""last_activity_at"":""2024-03-04T09:07:53.324Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/5"",""issues"":""http://gitlab.example.com/api/v4/projects/5/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/5/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/5/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/5/labels"",""events"":""http://gitlab.example.com/api/v4/projects/5/events"",""members"":""http://gitlab.example.com/api/v4/projects/5/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/5/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-05T09:07:53.350Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-04T09:07:53.324Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941ymtrSxowSdg86ipmkzJL"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[{""group_id"":8,""group_name"":""test"",""group_full_path"":""test"",""group_access_level"":10,""expires_at"":null},{""group_id"":9,""group_name"":""test-1"",""group_full_path"":""test-1"",""group_access_level"":20,""expires_at"":null}],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":null,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":null}}]",TP,unknown,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the 'archived' parameter from the request_info
        archived_param = request_info.get('archived')
        
        # If 'archived' parameter is not provided in the request_info, return 0
        if archived_param is None:
            return 0
        
        # Convert the 'archived' parameter to a boolean
        archived_param = bool(archived_param)
        
        # Iterate through each project in the response
        for project in latest_response:
            # Check if the 'archived' attribute exists in the project
            if 'archived' not in project:
                return 0
            
            # Verify that the 'archived' attribute matches the 'archived' parameter
            if project['archived'] != archived_param:
                return -1
        
        # If all projects satisfy the constraint, return 1
        return 1
    except Exception as e:
        # If any exception occurs, return -1
        return -1
",False,1.0,1,0,0,0,1,"range of values, logic"
get-/users/{user_id}/starred_projects,BasicProjectDetails,merge_requests_enabled,merge_requests_enabled,20,,,parameters,with_merge_requests_enabled,Limit by enabled merge requests feature,c,True,"{""user_id"":""5"", ""with_merge_requests_enabled"": true,  ""issues_enabled"": true, ""visibility"": ""private"", ""archived"": false}","[
    {
      ""id"": 4,
      ""description"": ""Lorem ipsum dolor sit amet, consectetur adipiscing elit."",
      ""description_html"": """",
      ""default_branch"": ""main"",
      ""visibility"": ""private"",
      ""ssh_url_to_repo"": ""git@example.com:diaspora/diaspora-client.git"",
      ""http_url_to_repo"": ""http://example.com/diaspora/diaspora-client.git"",
      ""web_url"": ""http://example.com/diaspora/diaspora-client"",
      ""readme_url"": ""http://example.com/diaspora/diaspora-client/blob/main/README.md"",
      ""tag_list"": [
        ""example"",
        ""disapora client""
      ],
      ""topics"": [
        ""example"",
        ""disapora client""
      ],
      ""owner"": {
        ""id"": 3,
        ""name"": ""Diaspora"",
        ""created_at"": ""2013-09-30T13:46:02Z""
      },
      ""name"": ""Diaspora Client"",
      ""name_with_namespace"": ""Diaspora / Diaspora Client"",
      ""path"": ""diaspora-client"",
      ""path_with_namespace"": ""diaspora/diaspora-client"",
      ""issues_enabled"": true,
      ""open_issues_count"": 1,
      ""merge_requests_enabled"": true,
      ""jobs_enabled"": true,
      ""wiki_enabled"": true,
      ""snippets_enabled"": false,
      ""can_create_merge_request_in"": true,
      ""resolve_outdated_diff_discussions"": false,
      ""container_registry_enabled"": false,
      ""container_registry_access_level"": ""disabled"",
      ""security_and_compliance_access_level"": ""disabled"",
      ""created_at"": ""2013-09-30T13:46:02Z"",
      ""updated_at"": ""2013-09-30T13:46:02Z"",
      ""last_activity_at"": ""2013-09-30T13:46:02Z"",
      ""creator_id"": 3,
      ""namespace"": {
        ""id"": 3,
        ""name"": ""Diaspora"",
        ""path"": ""diaspora"",
        ""kind"": ""group"",
        ""full_path"": ""diaspora""
      },
      ""import_status"": ""none"",
      ""archived"": false,
      ""avatar_url"": ""http://example.com/uploads/project/avatar/4/uploads/avatar.png"",
      ""shared_runners_enabled"": true,
      ""group_runners_enabled"": true,
      ""forks_count"": 0,
      ""star_count"": 0,
      ""runners_token"": ""b8547b1dc37721d05889db52fa2f02"",
      ""public_jobs"": true,
      ""shared_with_groups"": [],
      ""only_allow_merge_if_pipeline_succeeds"": false,
      ""allow_merge_on_skipped_pipeline"": false,
      ""restrict_user_defined_variables"": false,
      ""only_allow_merge_if_all_discussions_are_resolved"": false,
      ""remove_source_branch_after_merge"": false,
      ""request_access_enabled"": false,
      ""merge_method"": ""merge"",
      ""squash_option"": ""default_on"",
      ""autoclose_referenced_issues"": true,
      ""enforce_auth_checks_on_uploads"": true,
      ""suggestion_commit_message"": null,
      ""merge_commit_template"": null,
      ""squash_commit_template"": null,
      ""issue_branch_template"": ""gitlab/%{id}-%{title}"",
      ""statistics"": {
        ""commit_count"": 37,
        ""storage_size"": 1038090,
        ""repository_size"": 1038090,
        ""lfs_objects_size"": 0,
        ""job_artifacts_size"": 0,
        ""pipeline_artifacts_size"": 0,
        ""packages_size"": 0,
        ""snippets_size"": 0,
        ""uploads_size"": 0,
        ""container_registry_size"": 0
      },
      ""container_registry_image_prefix"": ""registry.example.com/diaspora/diaspora-client"",
      ""_links"": {
        ""self"": ""http://example.com/api/v4/projects"",
        ""issues"": ""http://example.com/api/v4/projects/1/issues"",
        ""merge_requests"": ""http://example.com/api/v4/projects/1/merge_requests"",
        ""repo_branches"": ""http://example.com/api/v4/projects/1/repository_branches"",
        ""labels"": ""http://example.com/api/v4/projects/1/labels"",
        ""events"": ""http://example.com/api/v4/projects/1/events"",
        ""members"": ""http://example.com/api/v4/projects/1/members"",
        ""cluster_agents"": ""http://example.com/api/v4/projects/1/cluster_agents""
      }
    },
    {
      ""id"": 6,
      ""description"": ""Lorem ipsum dolor sit amet, consectetur adipiscing elit."",
      ""description_html"": """",
      ""default_branch"": ""main"",
      ""visibility"": ""private"",
      ""ssh_url_to_repo"": ""git@example.com:brightbox/puppet.git"",
      ""http_url_to_repo"": ""http://example.com/brightbox/puppet.git"",
      ""web_url"": ""http://example.com/brightbox/puppet"",
      ""readme_url"": ""http://example.com/brightbox/puppet/blob/main/README.md"",
      ""tag_list"": [
        ""example"",
        ""puppet""
      ],
      ""topics"": [
        ""example"",
        ""puppet""
      ],
      ""owner"": {
        ""id"": 4,
        ""name"": ""Brightbox"",
        ""created_at"": ""2013-09-30T13:46:02Z""
      },
      ""name"": ""Puppet"",
      ""name_with_namespace"": ""Brightbox / Puppet"",
      ""path"": ""puppet"",
      ""path_with_namespace"": ""brightbox/puppet"",
      ""issues_enabled"": true,
      ""open_issues_count"": 1,
      ""merge_requests_enabled"": true,
      ""jobs_enabled"": true,
      ""wiki_enabled"": true,
      ""snippets_enabled"": false,
      ""can_create_merge_request_in"": true,
      ""resolve_outdated_diff_discussions"": false,
      ""container_registry_enabled"": false,
      ""container_registry_access_level"": ""disabled"",
      ""security_and_compliance_access_level"": ""disabled"",
      ""created_at"": ""2013-09-30T13:46:02Z"",
      ""updated_at"": ""2013-09-30T13:46:02Z"",
      ""last_activity_at"": ""2013-09-30T13:46:02Z"",
      ""creator_id"": 3,
      ""namespace"": {
        ""id"": 4,
        ""name"": ""Brightbox"",
        ""path"": ""brightbox"",
        ""kind"": ""group"",
        ""full_path"": ""brightbox""
      },
      ""import_status"": ""none"",
      ""import_error"": null,
      ""permissions"": {
        ""project_access"": {
          ""access_level"": 10,
          ""notification_level"": 3
        },
        ""group_access"": {
          ""access_level"": 50,
          ""notification_level"": 3
        }
      },
      ""archived"": false,
      ""avatar_url"": null,
      ""shared_runners_enabled"": true,
      ""group_runners_enabled"": true,
      ""forks_count"": 0,
      ""star_count"": 0,
      ""runners_token"": ""b8547b1dc37721d05889db52fa2f02"",
      ""public_jobs"": true,
      ""shared_with_groups"": [],
      ""only_allow_merge_if_pipeline_succeeds"": false,
      ""allow_merge_on_skipped_pipeline"": false,
      ""restrict_user_defined_variables"": false,
      ""only_allow_merge_if_all_discussions_are_resolved"": false,
      ""remove_source_branch_after_merge"": false,
      ""request_access_enabled"": false,
      ""merge_method"": ""merge"",
      ""squash_option"": ""default_on"",
      ""auto_devops_enabled"": true,
      ""auto_devops_deploy_strategy"": ""continuous"",
      ""repository_storage"": ""default"",
      ""approvals_before_merge"": 0,
      ""mirror"": false,
      ""mirror_user_id"": 45,
      ""mirror_trigger_builds"": false,
      ""only_mirror_protected_branches"": false,
      ""mirror_overwrites_diverged_branches"": false,
      ""external_authorization_classification_label"": null,
      ""packages_enabled"": true,
      ""service_desk_enabled"": false,
      ""service_desk_address"": null,
      ""autoclose_referenced_issues"": true,
      ""enforce_auth_checks_on_uploads"": true,
      ""suggestion_commit_message"": null,
      ""merge_commit_template"": null,
      ""squash_commit_template"": null,
      ""issue_branch_template"": ""gitlab/%{id}-%{title}"",
      ""statistics"": {
        ""commit_count"": 12,
        ""storage_size"": 2066080,
        ""repository_size"": 2066080,
        ""lfs_objects_size"": 0,
        ""job_artifacts_size"": 0,
        ""pipeline_artifacts_size"": 0,
        ""packages_size"": 0,
        ""snippets_size"": 0,
        ""uploads_size"": 0,
        ""container_registry_size"": 0
      },
      ""container_registry_image_prefix"": ""registry.example.com/brightbox/puppet"",
      ""_links"": {
        ""self"": ""http://example.com/api/v4/projects"",
        ""issues"": ""http://example.com/api/v4/projects/1/issues"",
        ""merge_requests"": ""http://example.com/api/v4/projects/1/merge_requests"",
        ""repo_branches"": ""http://example.com/api/v4/projects/1/repository_branches"",
        ""labels"": ""http://example.com/api/v4/projects/1/labels"",
        ""events"": ""http://example.com/api/v4/projects/1/events"",
        ""members"": ""http://example.com/api/v4/projects/1/members"",
        ""cluster_agents"": ""http://example.com/api/v4/projects/1/cluster_agents""
      }
    }
  ]",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the 'with_merge_requests_enabled' parameter from request_info
        with_merge_requests_enabled = request_info.get(""with_merge_requests_enabled"")
        
        # Check if the parameter is provided
        if with_merge_requests_enabled is None:
            return 0
        
        # Iterate through each project in the response
        for project in latest_response:
            # Check if 'merge_requests_enabled' attribute exists in the project
            if 'merge_requests_enabled' not in project:
                return 0
            
            # Verify the 'merge_requests_enabled' attribute against the input parameter
            if project['merge_requests_enabled'] != with_merge_requests_enabled:
                return -1
        
        # If all projects satisfy the constraint
        return 1
    except Exception as e:
        # In case of any unexpected error
        return -1
",True,1.0,1,0,0,0,1,"range of values, logic"
get-/users/{user_id}/starred_projects,BasicProjectDetails,issues_enabled,issues_enabled,21,,,parameters,with_issues_enabled,Limit by enabled issues feature,c,True,"{""user_id"":""5"", ""merge_requests_enabled"": true,  ""with_issues_enabled"": true, ""visibility"": ""private"", ""archived"": false}","[
    {
      ""id"": 4,
      ""description"": ""Lorem ipsum dolor sit amet, consectetur adipiscing elit."",
      ""description_html"": """",
      ""default_branch"": ""main"",
      ""visibility"": ""private"",
      ""ssh_url_to_repo"": ""git@example.com:diaspora/diaspora-client.git"",
      ""http_url_to_repo"": ""http://example.com/diaspora/diaspora-client.git"",
      ""web_url"": ""http://example.com/diaspora/diaspora-client"",
      ""readme_url"": ""http://example.com/diaspora/diaspora-client/blob/main/README.md"",
      ""tag_list"": [
        ""example"",
        ""disapora client""
      ],
      ""topics"": [
        ""example"",
        ""disapora client""
      ],
      ""owner"": {
        ""id"": 3,
        ""name"": ""Diaspora"",
        ""created_at"": ""2013-09-30T13:46:02Z""
      },
      ""name"": ""Diaspora Client"",
      ""name_with_namespace"": ""Diaspora / Diaspora Client"",
      ""path"": ""diaspora-client"",
      ""path_with_namespace"": ""diaspora/diaspora-client"",
      ""issues_enabled"": true,
      ""open_issues_count"": 1,
      ""merge_requests_enabled"": true,
      ""jobs_enabled"": true,
      ""wiki_enabled"": true,
      ""snippets_enabled"": false,
      ""can_create_merge_request_in"": true,
      ""resolve_outdated_diff_discussions"": false,
      ""container_registry_enabled"": false,
      ""container_registry_access_level"": ""disabled"",
      ""security_and_compliance_access_level"": ""disabled"",
      ""created_at"": ""2013-09-30T13:46:02Z"",
      ""updated_at"": ""2013-09-30T13:46:02Z"",
      ""last_activity_at"": ""2013-09-30T13:46:02Z"",
      ""creator_id"": 3,
      ""namespace"": {
        ""id"": 3,
        ""name"": ""Diaspora"",
        ""path"": ""diaspora"",
        ""kind"": ""group"",
        ""full_path"": ""diaspora""
      },
      ""import_status"": ""none"",
      ""archived"": false,
      ""avatar_url"": ""http://example.com/uploads/project/avatar/4/uploads/avatar.png"",
      ""shared_runners_enabled"": true,
      ""group_runners_enabled"": true,
      ""forks_count"": 0,
      ""star_count"": 0,
      ""runners_token"": ""b8547b1dc37721d05889db52fa2f02"",
      ""public_jobs"": true,
      ""shared_with_groups"": [],
      ""only_allow_merge_if_pipeline_succeeds"": false,
      ""allow_merge_on_skipped_pipeline"": false,
      ""restrict_user_defined_variables"": false,
      ""only_allow_merge_if_all_discussions_are_resolved"": false,
      ""remove_source_branch_after_merge"": false,
      ""request_access_enabled"": false,
      ""merge_method"": ""merge"",
      ""squash_option"": ""default_on"",
      ""autoclose_referenced_issues"": true,
      ""enforce_auth_checks_on_uploads"": true,
      ""suggestion_commit_message"": null,
      ""merge_commit_template"": null,
      ""squash_commit_template"": null,
      ""issue_branch_template"": ""gitlab/%{id}-%{title}"",
      ""statistics"": {
        ""commit_count"": 37,
        ""storage_size"": 1038090,
        ""repository_size"": 1038090,
        ""lfs_objects_size"": 0,
        ""job_artifacts_size"": 0,
        ""pipeline_artifacts_size"": 0,
        ""packages_size"": 0,
        ""snippets_size"": 0,
        ""uploads_size"": 0,
        ""container_registry_size"": 0
      },
      ""container_registry_image_prefix"": ""registry.example.com/diaspora/diaspora-client"",
      ""_links"": {
        ""self"": ""http://example.com/api/v4/projects"",
        ""issues"": ""http://example.com/api/v4/projects/1/issues"",
        ""merge_requests"": ""http://example.com/api/v4/projects/1/merge_requests"",
        ""repo_branches"": ""http://example.com/api/v4/projects/1/repository_branches"",
        ""labels"": ""http://example.com/api/v4/projects/1/labels"",
        ""events"": ""http://example.com/api/v4/projects/1/events"",
        ""members"": ""http://example.com/api/v4/projects/1/members"",
        ""cluster_agents"": ""http://example.com/api/v4/projects/1/cluster_agents""
      }
    },
    {
      ""id"": 6,
      ""description"": ""Lorem ipsum dolor sit amet, consectetur adipiscing elit."",
      ""description_html"": """",
      ""default_branch"": ""main"",
      ""visibility"": ""private"",
      ""ssh_url_to_repo"": ""git@example.com:brightbox/puppet.git"",
      ""http_url_to_repo"": ""http://example.com/brightbox/puppet.git"",
      ""web_url"": ""http://example.com/brightbox/puppet"",
      ""readme_url"": ""http://example.com/brightbox/puppet/blob/main/README.md"",
      ""tag_list"": [
        ""example"",
        ""puppet""
      ],
      ""topics"": [
        ""example"",
        ""puppet""
      ],
      ""owner"": {
        ""id"": 4,
        ""name"": ""Brightbox"",
        ""created_at"": ""2013-09-30T13:46:02Z""
      },
      ""name"": ""Puppet"",
      ""name_with_namespace"": ""Brightbox / Puppet"",
      ""path"": ""puppet"",
      ""path_with_namespace"": ""brightbox/puppet"",
      ""issues_enabled"": true,
      ""open_issues_count"": 1,
      ""merge_requests_enabled"": true,
      ""jobs_enabled"": true,
      ""wiki_enabled"": true,
      ""snippets_enabled"": false,
      ""can_create_merge_request_in"": true,
      ""resolve_outdated_diff_discussions"": false,
      ""container_registry_enabled"": false,
      ""container_registry_access_level"": ""disabled"",
      ""security_and_compliance_access_level"": ""disabled"",
      ""created_at"": ""2013-09-30T13:46:02Z"",
      ""updated_at"": ""2013-09-30T13:46:02Z"",
      ""last_activity_at"": ""2013-09-30T13:46:02Z"",
      ""creator_id"": 3,
      ""namespace"": {
        ""id"": 4,
        ""name"": ""Brightbox"",
        ""path"": ""brightbox"",
        ""kind"": ""group"",
        ""full_path"": ""brightbox""
      },
      ""import_status"": ""none"",
      ""import_error"": null,
      ""permissions"": {
        ""project_access"": {
          ""access_level"": 10,
          ""notification_level"": 3
        },
        ""group_access"": {
          ""access_level"": 50,
          ""notification_level"": 3
        }
      },
      ""archived"": false,
      ""avatar_url"": null,
      ""shared_runners_enabled"": true,
      ""group_runners_enabled"": true,
      ""forks_count"": 0,
      ""star_count"": 0,
      ""runners_token"": ""b8547b1dc37721d05889db52fa2f02"",
      ""public_jobs"": true,
      ""shared_with_groups"": [],
      ""only_allow_merge_if_pipeline_succeeds"": false,
      ""allow_merge_on_skipped_pipeline"": false,
      ""restrict_user_defined_variables"": false,
      ""only_allow_merge_if_all_discussions_are_resolved"": false,
      ""remove_source_branch_after_merge"": false,
      ""request_access_enabled"": false,
      ""merge_method"": ""merge"",
      ""squash_option"": ""default_on"",
      ""auto_devops_enabled"": true,
      ""auto_devops_deploy_strategy"": ""continuous"",
      ""repository_storage"": ""default"",
      ""approvals_before_merge"": 0,
      ""mirror"": false,
      ""mirror_user_id"": 45,
      ""mirror_trigger_builds"": false,
      ""only_mirror_protected_branches"": false,
      ""mirror_overwrites_diverged_branches"": false,
      ""external_authorization_classification_label"": null,
      ""packages_enabled"": true,
      ""service_desk_enabled"": false,
      ""service_desk_address"": null,
      ""autoclose_referenced_issues"": true,
      ""enforce_auth_checks_on_uploads"": true,
      ""suggestion_commit_message"": null,
      ""merge_commit_template"": null,
      ""squash_commit_template"": null,
      ""issue_branch_template"": ""gitlab/%{id}-%{title}"",
      ""statistics"": {
        ""commit_count"": 12,
        ""storage_size"": 2066080,
        ""repository_size"": 2066080,
        ""lfs_objects_size"": 0,
        ""job_artifacts_size"": 0,
        ""pipeline_artifacts_size"": 0,
        ""packages_size"": 0,
        ""snippets_size"": 0,
        ""uploads_size"": 0,
        ""container_registry_size"": 0
      },
      ""container_registry_image_prefix"": ""registry.example.com/brightbox/puppet"",
      ""_links"": {
        ""self"": ""http://example.com/api/v4/projects"",
        ""issues"": ""http://example.com/api/v4/projects/1/issues"",
        ""merge_requests"": ""http://example.com/api/v4/projects/1/merge_requests"",
        ""repo_branches"": ""http://example.com/api/v4/projects/1/repository_branches"",
        ""labels"": ""http://example.com/api/v4/projects/1/labels"",
        ""events"": ""http://example.com/api/v4/projects/1/events"",
        ""members"": ""http://example.com/api/v4/projects/1/members"",
        ""cluster_agents"": ""http://example.com/api/v4/projects/1/cluster_agents""
      }
    }
  ]",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        with_issues_enabled = request_info.get(""with_issues_enabled"")
        if with_issues_enabled is None:
            return 0  # No constraint to verify

        for project in latest_response:
            if 'issues_enabled' not in project:
                return 0  # Insufficient information to verify the constraint
            if project['issues_enabled'] != with_issues_enabled:
                return -1  # Constraint not satisfied

        return 1  # Constraint satisfied
    except Exception as e:
        return -1  # In case of any error, return -1
",True,1.0,1,0,0,0,1,"range of values, logic"
get-/users/{user_id}/starred_projects,BasicProjectDetails,visibility,visibility,22,,,parameters,visibility,Limit by visibility,c,False,"{""user_id"":""5"", ""merge_requests_enabled"": true,  ""issues_enabled"": true, ""visibility"": ""private"", ""archived"": false}","[
    {
      ""id"": 4,
      ""description"": ""Lorem ipsum dolor sit amet, consectetur adipiscing elit."",
      ""description_html"": """",
      ""default_branch"": ""main"",
      ""visibility"": ""private"",
      ""ssh_url_to_repo"": ""git@example.com:diaspora/diaspora-client.git"",
      ""http_url_to_repo"": ""http://example.com/diaspora/diaspora-client.git"",
      ""web_url"": ""http://example.com/diaspora/diaspora-client"",
      ""readme_url"": ""http://example.com/diaspora/diaspora-client/blob/main/README.md"",
      ""tag_list"": [
        ""example"",
        ""disapora client""
      ],
      ""topics"": [
        ""example"",
        ""disapora client""
      ],
      ""owner"": {
        ""id"": 3,
        ""name"": ""Diaspora"",
        ""created_at"": ""2013-09-30T13:46:02Z""
      },
      ""name"": ""Diaspora Client"",
      ""name_with_namespace"": ""Diaspora / Diaspora Client"",
      ""path"": ""diaspora-client"",
      ""path_with_namespace"": ""diaspora/diaspora-client"",
      ""issues_enabled"": true,
      ""open_issues_count"": 1,
      ""merge_requests_enabled"": true,
      ""jobs_enabled"": true,
      ""wiki_enabled"": true,
      ""snippets_enabled"": false,
      ""can_create_merge_request_in"": true,
      ""resolve_outdated_diff_discussions"": false,
      ""container_registry_enabled"": false,
      ""container_registry_access_level"": ""disabled"",
      ""security_and_compliance_access_level"": ""disabled"",
      ""created_at"": ""2013-09-30T13:46:02Z"",
      ""updated_at"": ""2013-09-30T13:46:02Z"",
      ""last_activity_at"": ""2013-09-30T13:46:02Z"",
      ""creator_id"": 3,
      ""namespace"": {
        ""id"": 3,
        ""name"": ""Diaspora"",
        ""path"": ""diaspora"",
        ""kind"": ""group"",
        ""full_path"": ""diaspora""
      },
      ""import_status"": ""none"",
      ""archived"": false,
      ""avatar_url"": ""http://example.com/uploads/project/avatar/4/uploads/avatar.png"",
      ""shared_runners_enabled"": true,
      ""group_runners_enabled"": true,
      ""forks_count"": 0,
      ""star_count"": 0,
      ""runners_token"": ""b8547b1dc37721d05889db52fa2f02"",
      ""public_jobs"": true,
      ""shared_with_groups"": [],
      ""only_allow_merge_if_pipeline_succeeds"": false,
      ""allow_merge_on_skipped_pipeline"": false,
      ""restrict_user_defined_variables"": false,
      ""only_allow_merge_if_all_discussions_are_resolved"": false,
      ""remove_source_branch_after_merge"": false,
      ""request_access_enabled"": false,
      ""merge_method"": ""merge"",
      ""squash_option"": ""default_on"",
      ""autoclose_referenced_issues"": true,
      ""enforce_auth_checks_on_uploads"": true,
      ""suggestion_commit_message"": null,
      ""merge_commit_template"": null,
      ""squash_commit_template"": null,
      ""issue_branch_template"": ""gitlab/%{id}-%{title}"",
      ""statistics"": {
        ""commit_count"": 37,
        ""storage_size"": 1038090,
        ""repository_size"": 1038090,
        ""lfs_objects_size"": 0,
        ""job_artifacts_size"": 0,
        ""pipeline_artifacts_size"": 0,
        ""packages_size"": 0,
        ""snippets_size"": 0,
        ""uploads_size"": 0,
        ""container_registry_size"": 0
      },
      ""container_registry_image_prefix"": ""registry.example.com/diaspora/diaspora-client"",
      ""_links"": {
        ""self"": ""http://example.com/api/v4/projects"",
        ""issues"": ""http://example.com/api/v4/projects/1/issues"",
        ""merge_requests"": ""http://example.com/api/v4/projects/1/merge_requests"",
        ""repo_branches"": ""http://example.com/api/v4/projects/1/repository_branches"",
        ""labels"": ""http://example.com/api/v4/projects/1/labels"",
        ""events"": ""http://example.com/api/v4/projects/1/events"",
        ""members"": ""http://example.com/api/v4/projects/1/members"",
        ""cluster_agents"": ""http://example.com/api/v4/projects/1/cluster_agents""
      }
    },
    {
      ""id"": 6,
      ""description"": ""Lorem ipsum dolor sit amet, consectetur adipiscing elit."",
      ""description_html"": """",
      ""default_branch"": ""main"",
      ""visibility"": ""private"",
      ""ssh_url_to_repo"": ""git@example.com:brightbox/puppet.git"",
      ""http_url_to_repo"": ""http://example.com/brightbox/puppet.git"",
      ""web_url"": ""http://example.com/brightbox/puppet"",
      ""readme_url"": ""http://example.com/brightbox/puppet/blob/main/README.md"",
      ""tag_list"": [
        ""example"",
        ""puppet""
      ],
      ""topics"": [
        ""example"",
        ""puppet""
      ],
      ""owner"": {
        ""id"": 4,
        ""name"": ""Brightbox"",
        ""created_at"": ""2013-09-30T13:46:02Z""
      },
      ""name"": ""Puppet"",
      ""name_with_namespace"": ""Brightbox / Puppet"",
      ""path"": ""puppet"",
      ""path_with_namespace"": ""brightbox/puppet"",
      ""issues_enabled"": true,
      ""open_issues_count"": 1,
      ""merge_requests_enabled"": true,
      ""jobs_enabled"": true,
      ""wiki_enabled"": true,
      ""snippets_enabled"": false,
      ""can_create_merge_request_in"": true,
      ""resolve_outdated_diff_discussions"": false,
      ""container_registry_enabled"": false,
      ""container_registry_access_level"": ""disabled"",
      ""security_and_compliance_access_level"": ""disabled"",
      ""created_at"": ""2013-09-30T13:46:02Z"",
      ""updated_at"": ""2013-09-30T13:46:02Z"",
      ""last_activity_at"": ""2013-09-30T13:46:02Z"",
      ""creator_id"": 3,
      ""namespace"": {
        ""id"": 4,
        ""name"": ""Brightbox"",
        ""path"": ""brightbox"",
        ""kind"": ""group"",
        ""full_path"": ""brightbox""
      },
      ""import_status"": ""none"",
      ""import_error"": null,
      ""permissions"": {
        ""project_access"": {
          ""access_level"": 10,
          ""notification_level"": 3
        },
        ""group_access"": {
          ""access_level"": 50,
          ""notification_level"": 3
        }
      },
      ""archived"": false,
      ""avatar_url"": null,
      ""shared_runners_enabled"": true,
      ""group_runners_enabled"": true,
      ""forks_count"": 0,
      ""star_count"": 0,
      ""runners_token"": ""b8547b1dc37721d05889db52fa2f02"",
      ""public_jobs"": true,
      ""shared_with_groups"": [],
      ""only_allow_merge_if_pipeline_succeeds"": false,
      ""allow_merge_on_skipped_pipeline"": false,
      ""restrict_user_defined_variables"": false,
      ""only_allow_merge_if_all_discussions_are_resolved"": false,
      ""remove_source_branch_after_merge"": false,
      ""request_access_enabled"": false,
      ""merge_method"": ""merge"",
      ""squash_option"": ""default_on"",
      ""auto_devops_enabled"": true,
      ""auto_devops_deploy_strategy"": ""continuous"",
      ""repository_storage"": ""default"",
      ""approvals_before_merge"": 0,
      ""mirror"": false,
      ""mirror_user_id"": 45,
      ""mirror_trigger_builds"": false,
      ""only_mirror_protected_branches"": false,
      ""mirror_overwrites_diverged_branches"": false,
      ""external_authorization_classification_label"": null,
      ""packages_enabled"": true,
      ""service_desk_enabled"": false,
      ""service_desk_address"": null,
      ""autoclose_referenced_issues"": true,
      ""enforce_auth_checks_on_uploads"": true,
      ""suggestion_commit_message"": null,
      ""merge_commit_template"": null,
      ""squash_commit_template"": null,
      ""issue_branch_template"": ""gitlab/%{id}-%{title}"",
      ""statistics"": {
        ""commit_count"": 12,
        ""storage_size"": 2066080,
        ""repository_size"": 2066080,
        ""lfs_objects_size"": 0,
        ""job_artifacts_size"": 0,
        ""pipeline_artifacts_size"": 0,
        ""packages_size"": 0,
        ""snippets_size"": 0,
        ""uploads_size"": 0,
        ""container_registry_size"": 0
      },
      ""container_registry_image_prefix"": ""registry.example.com/brightbox/puppet"",
      ""_links"": {
        ""self"": ""http://example.com/api/v4/projects"",
        ""issues"": ""http://example.com/api/v4/projects/1/issues"",
        ""merge_requests"": ""http://example.com/api/v4/projects/1/merge_requests"",
        ""repo_branches"": ""http://example.com/api/v4/projects/1/repository_branches"",
        ""labels"": ""http://example.com/api/v4/projects/1/labels"",
        ""events"": ""http://example.com/api/v4/projects/1/events"",
        ""members"": ""http://example.com/api/v4/projects/1/members"",
        ""cluster_agents"": ""http://example.com/api/v4/projects/1/cluster_agents""
      }
    }
  ]",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the visibility constraint from the request_info
        visibility_constraint = request_info.get(""visibility"")
        
        # Check if the visibility constraint is provided
        if visibility_constraint is None:
            return 0
        
        # Define the allowed visibility values
        allowed_visibility_values = [""public"", ""internal"", ""private""]
        
        # Check if the provided visibility constraint is valid
        if visibility_constraint not in allowed_visibility_values:
            return -1
        
        # Verify the visibility attribute in each BasicProjectDetails object in the response
        for project in latest_response:
            if ""visibility"" not in project:
                return 0
            if project[""visibility""] != visibility_constraint:
                return -1
        
        # If all checks pass, return 1
        return 1
    except Exception as e:
        # In case of any exception, return -1
        return -1
",private,1.0,1,0,0,0,1,"range of values, logic"
get-/users/{user_id}/starred_projects,BasicProjectDetails,archived,archived,23,,,parameters,archived,Limit by archived status,c,False,"{""user_id"":""5"", ""merge_requests_enabled"": true,  ""issues_enabled"": true, ""visibility"": ""private"", ""archived"": false}","[
    {
      ""id"": 4,
      ""description"": ""Lorem ipsum dolor sit amet, consectetur adipiscing elit."",
      ""description_html"": """",
      ""default_branch"": ""main"",
      ""visibility"": ""private"",
      ""ssh_url_to_repo"": ""git@example.com:diaspora/diaspora-client.git"",
      ""http_url_to_repo"": ""http://example.com/diaspora/diaspora-client.git"",
      ""web_url"": ""http://example.com/diaspora/diaspora-client"",
      ""readme_url"": ""http://example.com/diaspora/diaspora-client/blob/main/README.md"",
      ""tag_list"": [
        ""example"",
        ""disapora client""
      ],
      ""topics"": [
        ""example"",
        ""disapora client""
      ],
      ""owner"": {
        ""id"": 3,
        ""name"": ""Diaspora"",
        ""created_at"": ""2013-09-30T13:46:02Z""
      },
      ""name"": ""Diaspora Client"",
      ""name_with_namespace"": ""Diaspora / Diaspora Client"",
      ""path"": ""diaspora-client"",
      ""path_with_namespace"": ""diaspora/diaspora-client"",
      ""issues_enabled"": true,
      ""open_issues_count"": 1,
      ""merge_requests_enabled"": true,
      ""jobs_enabled"": true,
      ""wiki_enabled"": true,
      ""snippets_enabled"": false,
      ""can_create_merge_request_in"": true,
      ""resolve_outdated_diff_discussions"": false,
      ""container_registry_enabled"": false,
      ""container_registry_access_level"": ""disabled"",
      ""security_and_compliance_access_level"": ""disabled"",
      ""created_at"": ""2013-09-30T13:46:02Z"",
      ""updated_at"": ""2013-09-30T13:46:02Z"",
      ""last_activity_at"": ""2013-09-30T13:46:02Z"",
      ""creator_id"": 3,
      ""namespace"": {
        ""id"": 3,
        ""name"": ""Diaspora"",
        ""path"": ""diaspora"",
        ""kind"": ""group"",
        ""full_path"": ""diaspora""
      },
      ""import_status"": ""none"",
      ""archived"": false,
      ""avatar_url"": ""http://example.com/uploads/project/avatar/4/uploads/avatar.png"",
      ""shared_runners_enabled"": true,
      ""group_runners_enabled"": true,
      ""forks_count"": 0,
      ""star_count"": 0,
      ""runners_token"": ""b8547b1dc37721d05889db52fa2f02"",
      ""public_jobs"": true,
      ""shared_with_groups"": [],
      ""only_allow_merge_if_pipeline_succeeds"": false,
      ""allow_merge_on_skipped_pipeline"": false,
      ""restrict_user_defined_variables"": false,
      ""only_allow_merge_if_all_discussions_are_resolved"": false,
      ""remove_source_branch_after_merge"": false,
      ""request_access_enabled"": false,
      ""merge_method"": ""merge"",
      ""squash_option"": ""default_on"",
      ""autoclose_referenced_issues"": true,
      ""enforce_auth_checks_on_uploads"": true,
      ""suggestion_commit_message"": null,
      ""merge_commit_template"": null,
      ""squash_commit_template"": null,
      ""issue_branch_template"": ""gitlab/%{id}-%{title}"",
      ""statistics"": {
        ""commit_count"": 37,
        ""storage_size"": 1038090,
        ""repository_size"": 1038090,
        ""lfs_objects_size"": 0,
        ""job_artifacts_size"": 0,
        ""pipeline_artifacts_size"": 0,
        ""packages_size"": 0,
        ""snippets_size"": 0,
        ""uploads_size"": 0,
        ""container_registry_size"": 0
      },
      ""container_registry_image_prefix"": ""registry.example.com/diaspora/diaspora-client"",
      ""_links"": {
        ""self"": ""http://example.com/api/v4/projects"",
        ""issues"": ""http://example.com/api/v4/projects/1/issues"",
        ""merge_requests"": ""http://example.com/api/v4/projects/1/merge_requests"",
        ""repo_branches"": ""http://example.com/api/v4/projects/1/repository_branches"",
        ""labels"": ""http://example.com/api/v4/projects/1/labels"",
        ""events"": ""http://example.com/api/v4/projects/1/events"",
        ""members"": ""http://example.com/api/v4/projects/1/members"",
        ""cluster_agents"": ""http://example.com/api/v4/projects/1/cluster_agents""
      }
    },
    {
      ""id"": 6,
      ""description"": ""Lorem ipsum dolor sit amet, consectetur adipiscing elit."",
      ""description_html"": """",
      ""default_branch"": ""main"",
      ""visibility"": ""private"",
      ""ssh_url_to_repo"": ""git@example.com:brightbox/puppet.git"",
      ""http_url_to_repo"": ""http://example.com/brightbox/puppet.git"",
      ""web_url"": ""http://example.com/brightbox/puppet"",
      ""readme_url"": ""http://example.com/brightbox/puppet/blob/main/README.md"",
      ""tag_list"": [
        ""example"",
        ""puppet""
      ],
      ""topics"": [
        ""example"",
        ""puppet""
      ],
      ""owner"": {
        ""id"": 4,
        ""name"": ""Brightbox"",
        ""created_at"": ""2013-09-30T13:46:02Z""
      },
      ""name"": ""Puppet"",
      ""name_with_namespace"": ""Brightbox / Puppet"",
      ""path"": ""puppet"",
      ""path_with_namespace"": ""brightbox/puppet"",
      ""issues_enabled"": true,
      ""open_issues_count"": 1,
      ""merge_requests_enabled"": true,
      ""jobs_enabled"": true,
      ""wiki_enabled"": true,
      ""snippets_enabled"": false,
      ""can_create_merge_request_in"": true,
      ""resolve_outdated_diff_discussions"": false,
      ""container_registry_enabled"": false,
      ""container_registry_access_level"": ""disabled"",
      ""security_and_compliance_access_level"": ""disabled"",
      ""created_at"": ""2013-09-30T13:46:02Z"",
      ""updated_at"": ""2013-09-30T13:46:02Z"",
      ""last_activity_at"": ""2013-09-30T13:46:02Z"",
      ""creator_id"": 3,
      ""namespace"": {
        ""id"": 4,
        ""name"": ""Brightbox"",
        ""path"": ""brightbox"",
        ""kind"": ""group"",
        ""full_path"": ""brightbox""
      },
      ""import_status"": ""none"",
      ""import_error"": null,
      ""permissions"": {
        ""project_access"": {
          ""access_level"": 10,
          ""notification_level"": 3
        },
        ""group_access"": {
          ""access_level"": 50,
          ""notification_level"": 3
        }
      },
      ""archived"": false,
      ""avatar_url"": null,
      ""shared_runners_enabled"": true,
      ""group_runners_enabled"": true,
      ""forks_count"": 0,
      ""star_count"": 0,
      ""runners_token"": ""b8547b1dc37721d05889db52fa2f02"",
      ""public_jobs"": true,
      ""shared_with_groups"": [],
      ""only_allow_merge_if_pipeline_succeeds"": false,
      ""allow_merge_on_skipped_pipeline"": false,
      ""restrict_user_defined_variables"": false,
      ""only_allow_merge_if_all_discussions_are_resolved"": false,
      ""remove_source_branch_after_merge"": false,
      ""request_access_enabled"": false,
      ""merge_method"": ""merge"",
      ""squash_option"": ""default_on"",
      ""auto_devops_enabled"": true,
      ""auto_devops_deploy_strategy"": ""continuous"",
      ""repository_storage"": ""default"",
      ""approvals_before_merge"": 0,
      ""mirror"": false,
      ""mirror_user_id"": 45,
      ""mirror_trigger_builds"": false,
      ""only_mirror_protected_branches"": false,
      ""mirror_overwrites_diverged_branches"": false,
      ""external_authorization_classification_label"": null,
      ""packages_enabled"": true,
      ""service_desk_enabled"": false,
      ""service_desk_address"": null,
      ""autoclose_referenced_issues"": true,
      ""enforce_auth_checks_on_uploads"": true,
      ""suggestion_commit_message"": null,
      ""merge_commit_template"": null,
      ""squash_commit_template"": null,
      ""issue_branch_template"": ""gitlab/%{id}-%{title}"",
      ""statistics"": {
        ""commit_count"": 12,
        ""storage_size"": 2066080,
        ""repository_size"": 2066080,
        ""lfs_objects_size"": 0,
        ""job_artifacts_size"": 0,
        ""pipeline_artifacts_size"": 0,
        ""packages_size"": 0,
        ""snippets_size"": 0,
        ""uploads_size"": 0,
        ""container_registry_size"": 0
      },
      ""container_registry_image_prefix"": ""registry.example.com/brightbox/puppet"",
      ""_links"": {
        ""self"": ""http://example.com/api/v4/projects"",
        ""issues"": ""http://example.com/api/v4/projects/1/issues"",
        ""merge_requests"": ""http://example.com/api/v4/projects/1/merge_requests"",
        ""repo_branches"": ""http://example.com/api/v4/projects/1/repository_branches"",
        ""labels"": ""http://example.com/api/v4/projects/1/labels"",
        ""events"": ""http://example.com/api/v4/projects/1/events"",
        ""members"": ""http://example.com/api/v4/projects/1/members"",
        ""cluster_agents"": ""http://example.com/api/v4/projects/1/cluster_agents""
      }
    }
  ]",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the 'archived' parameter from the request_info
        archived_param = request_info.get('archived')
        
        # If 'archived' parameter is not provided in the request_info, return 0
        if archived_param is None:
            return 0
        
        # Convert the 'archived' parameter to a boolean
        archived_param = bool(archived_param)
        
        # Iterate through each project in the response
        for project in latest_response:
            # Check if the 'archived' attribute exists in the project
            if 'archived' not in project:
                return 0
            
            # Verify that the 'archived' attribute matches the 'archived' parameter
            if project['archived'] != archived_param:
                return -1
        
        # If all projects satisfy the constraint, return 1
        return 1
    except Exception as e:
        # If any exception occurs, return -1
        return -1
",False,1.0,1,0,0,0,1,"range of values, logic"
post-/projects,BasicProjectDetails,wiki_enabled,wiki_enabled,24,,,parameters,wiki_enabled,(Deprecated)Enable wiki for this project. Use wiki_access_levelinstead,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""tag_list"": [],
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""test_project_1"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""test_project_1"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""description"": null,
  ""default_branch"": ""main"",
  ""container_registry_enabled"": true,
  ""avatar"": null,
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'wiki_enabled' is present in the response
        if 'wiki_enabled' not in latest_response:
            return 0
        
        # Ensure 'wiki_enabled' is a boolean
        if not isinstance(latest_response['wiki_enabled'], bool):
            return -1
        
        # Check if the request_info contains 'wiki_enabled' and validate it
        if 'wiki_enabled' in request_info:
            if latest_response['wiki_enabled'] != request_info['wiki_enabled']:
                return -1
        
        return 1
    except Exception as e:
        return -1
",True,1.0,1,0,0,0,1,"range of values, logic"
post-/projects,BasicProjectDetails,visibility,visibility,25,,,parameters,visibility,See project visibility level,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""tag_list"": [],
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""test_project_1"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""test_project_1"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""description"": null,
  ""default_branch"": ""main"",
  ""container_registry_enabled"": true,
  ""avatar"": null,
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the visibility attribute from the response
        visibility = latest_response.get(""visibility"")
        
        # Check if the visibility attribute exists in the response
        if visibility is None:
            return 0
        
        # Define the allowed visibility values
        allowed_values = [""private"", ""internal"", ""public""]
        
        # Verify if the visibility value is within the allowed values
        if visibility in allowed_values:
            return 1
        else:
            return -1
    except Exception as e:
        return -1
",private,1.0,1,0,0,0,1,"range of values, logic"
post-/projects,BasicProjectDetails,tag_list,tag_list,26,,,parameters,tag_list,"The list of tags for a project; put array of tags, that should be finally assigned to a project",c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""tag_list"": [],
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""test_project_1"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""test_project_1"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""description"": null,
  ""default_branch"": ""main"",
  ""container_registry_enabled"": true,
  ""avatar"": null,
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the tag_list from the response
        response_tag_list = latest_response.get('tag_list', None)
        
        # Check if tag_list exists in the response
        if response_tag_list is None:
            return 0
        
        # Ensure tag_list is an array
        if not isinstance(response_tag_list, list):
            return -1
        
        # Ensure each item in tag_list is a string
        for tag in response_tag_list:
            if not isinstance(tag, string):
                return -1
        
        # Extract the tag_list from the request info
        request_tag_list = request_info.get('tag_list', None)
        
        # Check if tag_list exists in the request info
        if request_tag_list is None:
            return 0
        
        # Ensure the request tag_list is an array
        if not isinstance(request_tag_list, list):
            return -1
        
        # Ensure each item in request tag_list is a string
        for tag in request_tag_list:
            if not isinstance(tag, str):
                return -1
        
        # Compare the request and response tag_list
        if set(response_tag_list) == set(request_tag_list):
            return 1
        else:
            return -1
    except Exception as e:
        return -1
","['example', 'disapora client']",1.0,1,0,0,0,1,logic
post-/projects,BasicProjectDetails,snippets_enabled,snippets_enabled,27,,,parameters,snippets_enabled,(Deprecated)Enable snippets for this project. Use snippets_access_level instead,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""tag_list"": [],
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""test_project_1"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""test_project_1"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""description"": null,
  ""default_branch"": ""main"",
  ""container_registry_enabled"": true,
  ""avatar"": null,
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'snippets_enabled' is in the response
        if 'snippets_enabled' not in latest_response:
            return 0
        
        # Ensure 'snippets_enabled' is a boolean
        if not isinstance(latest_response['snippets_enabled'], bool):
            return -1
        
        # If 'snippets_enabled' is present and is a boolean, the constraint is satisfied
        return 1
    except Exception as e:
        # In case of any unexpected error, return -1
        return -1
",False,1.0,1,0,0,0,1,"range of values, logic"
post-/projects,BasicProjectDetails,shared_runners_enabled,shared_runners_enabled,28,,,parameters,shared_runners_enabled,Enable shared runners for this project,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""tag_list"": [],
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""test_project_1"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""test_project_1"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""description"": null,
  ""default_branch"": ""main"",
  ""container_registry_enabled"": true,
  ""avatar"": null,
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'shared_runners_enabled' is in the response
        if 'shared_runners_enabled' not in latest_response:
            return 0  # Insufficient information to verify the constraint
        
        # Extract the value of 'shared_runners_enabled' from the response
        shared_runners_enabled_response = latest_response['shared_runners_enabled']
        
        # Check if the value is a boolean
        if not isinstance(shared_runners_enabled_response, bool):
            return -1  # Constraint not satisfied
        
        # Extract the value of 'shared_runners_enabled' from the request info
        shared_runners_enabled_request = request_info.get('shared_runners_enabled')
        
        # Check if the request parameter is provided and is a boolean
        if shared_runners_enabled_request is not None:
            if not isinstance(shared_runners_enabled_request, bool):
                return -1  # Constraint not satisfied
            
            # Verify if the request and response values match
            if shared_runners_enabled_response != shared_runners_enabled_request:
                return -1  # Constraint not satisfied
        
        return 1  # Constraint satisfied
    except Exception as e:
        return -1  # Constraint not satisfied due to an error
",True,1.0,1,0,0,0,1,"range of values, logic"
post-/projects,BasicProjectDetails,resolve_outdated_diff_discussions,resolve_outdated_diff_discussions,29,,,parameters,resolve_outdated_diff_discussions,Automatically resolve merge request diffs discussions on lines changed with a push,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""tag_list"": [],
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""test_project_1"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""test_project_1"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""description"": null,
  ""default_branch"": ""main"",
  ""container_registry_enabled"": true,
  ""avatar"": null,
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if the 'resolve_outdated_diff_discussions' attribute exists in the response
        if 'resolve_outdated_diff_discussions' not in latest_response:
            return 0
        
        # Extract the value of 'resolve_outdated_diff_discussions' from the response
        response_value = latest_response['resolve_outdated_diff_discussions']
        
        # Ensure the value is of type boolean
        if isinstance(response_value, bool):
            return 1
        else:
            return -1
    except Exception as e:
        return -1
",False,1.0,1,0,0,0,1,logic
post-/projects,BasicProjectDetails,request_access_enabled,request_access_enabled,30,,,parameters,request_access_enabled,Allow users to request member access,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""tag_list"": [],
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""test_project_1"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""test_project_1"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""description"": null,
  ""default_branch"": ""main"",
  ""container_registry_enabled"": true,
  ""avatar"": null,
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'request_access_enabled' exists in request_info and is a boolean
        if 'request_access_enabled' in request_info:
            if not isinstance(request_info['request_access_enabled'], bool):
                return -1  # Request info has the key but not boolean type

        # Check if 'request_access_enabled' exists in latest_response and is a boolean
        if 'request_access_enabled' in latest_response:
            if not isinstance(latest_response['request_access_enabled'], bool):
                return -1  # Response has the key but not boolean type
        else:
            return 0  # Key does not exist in the response

        # If both exist and are booleans, check if they match
        if 'request_access_enabled' in request_info and 'request_access_enabled' in latest_response:
            if request_info['request_access_enabled'] == latest_response['request_access_enabled']:
                return 1  # Both values match
            else:
                return -1  # Both values do not match

        return 1  # All checks passed, and constraints are satisfied
    except Exception as e:
        return -1  # Any exception implies a failure in constraint satisfaction
",False,1.0,1,0,0,0,1,logic
post-/projects,BasicProjectDetails,repository_storage,repository_storage,31,,,parameters,repository_storage,Which storage shard the repository is on.(admins only),c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""tag_list"": [],
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""test_project_1"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""test_project_1"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""description"": null,
  ""default_branch"": ""main"",
  ""container_registry_enabled"": true,
  ""avatar"": null,
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the repository_storage from the request_info
        expected_repository_storage = request_info.get(""repository_storage"")
        
        # Check if the repository_storage exists in the latest_response
        if ""repository_storage"" not in latest_response:
            return 0
        
        # Extract the repository_storage from the latest_response
        actual_repository_storage = latest_response[""repository_storage""]
        
        # Verify if the actual repository_storage matches the expected repository_storage
        if actual_repository_storage == expected_repository_storage:
            return 1
        else:
            return -1
    except Exception as e:
        # In case of any exception, return -1 indicating the constraint is not satisfied
        return -1
",default,1.0,1,0,0,0,1,logic
post-/projects,BasicProjectDetails,remove_source_branch_after_merge,remove_source_branch_after_merge,32,,,parameters,remove_source_branch_after_merge,Enable Delete source branch option by default for all new merge requests,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""tag_list"": [],
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""test_project_1"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""test_project_1"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""description"": null,
  ""default_branch"": ""main"",
  ""container_registry_enabled"": true,
  ""avatar"": null,
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if the attribute exists in the response
        if 'remove_source_branch_after_merge' not in latest_response:
            return 0
        
        # Check if the attribute is of type boolean
        if isinstance(latest_response['remove_source_branch_after_merge'], bool):
            return 1
        else:
            return -1
    except Exception as e:
        return -1
",False,1.0,1,0,0,0,1,"range of values, logic"
post-/projects,BasicProjectDetails,path,path,33,,,parameters,path,Repository name for new project. Generated based on name if not provided (generated as lowercase with dashes),c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""tag_list"": [],
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""test_project_1"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""test_project_1"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""description"": null,
  ""default_branch"": ""main"",
  ""container_registry_enabled"": true,
  ""avatar"": null,
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the 'path' from the response
        response_path = latest_response.get('path')
        
        # Check if 'path' exists in the response
        if response_path is None:
            return 0
        
        # Extract the 'path' from the request info
        request_path = request_info.get('path')
        
        # If 'path' is provided in the request, it should match the response 'path'
        if request_path:
            if response_path == request_path:
                return 1
            else:
                return -1
        else:
            # If 'path' is not provided, it should be generated as lowercase with dashes
            generated_path = request_info.get('name', '').lower().replace(' ', '-')
            if response_path == generated_path:
                return 1
            else:
                return -1
    except Exception as e:
        return -1
",diaspora-client,1.0,1,0,0,0,1,inter-parameter dependency
post-/projects,BasicProjectDetails,packages_enabled,packages_enabled,35,,,parameters,packages_enabled,Enable or disable packages repository feature,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""tag_list"": [],
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""test_project_1"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""test_project_1"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""description"": null,
  ""default_branch"": ""main"",
  ""container_registry_enabled"": true,
  ""avatar"": null,
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'packages_enabled' exists in request_info and is a boolean
        if 'packages_enabled' in request_info:
            if not isinstance(request_info['packages_enabled'], bool):
                return -1
        
        # Check if 'packages_enabled' exists in latest_response and is a boolean
        if 'packages_enabled' in latest_response:
            if not isinstance(latest_response['packages_enabled'], bool):
                return -1
        else:
            # 'packages_enabled' does not exist in the response
            return 0
        
        # If 'packages_enabled' exists in both request_info and latest_response, compare them
        if 'packages_enabled' in request_info:
            if request_info['packages_enabled'] != latest_response['packages_enabled']:
                return -1
        
        # If all checks pass, the constraint is satisfied
        return 1
    except Exception as e:
        # In case of any exception, consider the verification failed
        return -1
",True,1.0,1,0,0,0,1,range of values
post-/projects,BasicProjectDetails,only_allow_merge_if_pipeline_succeeds,only_allow_merge_if_pipeline_succeeds,36,,,parameters,only_allow_merge_if_pipeline_succeeds,Set whether merge requests can only be merged with successful jobs,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""tag_list"": [],
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""test_project_1"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""test_project_1"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""description"": null,
  ""default_branch"": ""main"",
  ""container_registry_enabled"": true,
  ""avatar"": null,
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if the attribute exists in the response
        if 'only_allow_merge_if_pipeline_succeeds' not in latest_response:
            return 0
        
        # Extract the value from the response
        response_value = latest_response['only_allow_merge_if_pipeline_succeeds']
        
        # Check if the value is a boolean
        if not isinstance(response_value, bool):
            return -1
        
        # Extract the expected value from the request info
        if 'only_allow_merge_if_pipeline_succeeds' not in request_info:
            return 0
        
        expected_value = request_info['only_allow_merge_if_pipeline_succeeds']
        
        # Check if the expected value is a boolean
        if not isinstance(expected_value, bool):
            return -1
        
        # Verify if the response value matches the expected value
        if response_value == expected_value:
            return 1
        else:
            return -1
    except Exception as e:
        return -1
",False,1.0,1,0,0,0,1,"range of values, logic"
post-/projects,BasicProjectDetails,only_allow_merge_if_all_discussions_are_resolved,only_allow_merge_if_all_discussions_are_resolved,37,,,parameters,only_allow_merge_if_all_discussions_are_resolved,Set whether merge requests can only be merged when all the discussions are resolved,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""tag_list"": [],
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""test_project_1"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""test_project_1"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""description"": null,
  ""default_branch"": ""main"",
  ""container_registry_enabled"": true,
  ""avatar"": null,
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if the attribute exists in the response
        if 'only_allow_merge_if_all_discussions_are_resolved' not in latest_response:
            return 0
        
        # Extract the value from the response
        response_value = latest_response['only_allow_merge_if_all_discussions_are_resolved']
        
        # Ensure the value is a boolean
        if not isinstance(response_value, bool):
            return -1
        
        # Extract the value from the request info
        request_value = request_info.get('only_allow_merge_if_all_discussions_are_resolved')
        
        # Ensure the request value is a boolean
        if request_value is not None and not isinstance(request_value, bool):
            return -1
        
        # Compare the values
        if request_value is not None and response_value != request_value:
            return -1
        
        return 1
    except Exception as e:
        return -1
",False,1.0,1,0,0,0,1,"range of values, logic"
post-/projects,BasicProjectDetails,name,name,38,,,parameters,name,"The name of the new project. Either path or name is required, not both",x,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""tag_list"": [],
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""test_project_1"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""test_project_1"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""description"": null,
  ""default_branch"": ""main"",
  ""container_registry_enabled"": true,
  ""avatar"": null,
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'name' is in the request_info
        if 'name' in request_info:
            # Ensure 'name' is in the response
            if 'name' not in latest_response:
                return 0  # Insufficient information to verify the constraint
            
            # Verify the 'name' attribute in the response
            if isinstance(latest_response['name'], str):
                return 1  # Constraint is satisfied
            else:
                return -1  # Constraint is not satisfied
        else:
            return 0  # Insufficient information to verify the constraint
    except Exception as e:
        return -1  # Constraint is not satisfied due to an error
",Diaspora Client,1.0,1,0,0,0,1,logic
post-/projects,BasicProjectDetails,merge_requests_enabled,merge_requests_enabled,39,,,parameters,merge_requests_enabled,(Deprecated)Enable merge requests for this project. Use merge_requests_access_level instead,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""tag_list"": [],
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""test_project_1"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""test_project_1"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""description"": null,
  ""default_branch"": ""main"",
  ""container_registry_enabled"": true,
  ""avatar"": null,
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'merge_requests_enabled' is in the response
        if 'merge_requests_enabled' not in latest_response:
            return 0
        
        # Check if 'merge_requests_enabled' is a boolean
        if not isinstance(latest_response['merge_requests_enabled'], bool):
            return -1
        
        # If the request_info contains 'merge_requests_enabled', verify it matches the response
        if 'merge_requests_enabled' in request_info:
            if latest_response['merge_requests_enabled'] != request_info['merge_requests_enabled']:
                return -1
        
        return 1
    except Exception as e:
        return -1
",True,1.0,1,0,0,0,1,"range of values, logic"
post-/projects,BasicProjectDetails,merge_method,merge_method,40,,,parameters,merge_method,Set the merge method used,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""tag_list"": [],
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""test_project_1"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""test_project_1"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""description"": null,
  ""default_branch"": ""main"",
  ""container_registry_enabled"": true,
  ""avatar"": null,
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the merge_method from the response
        merge_method = latest_response.get(""merge_method"")
        
        # Check if merge_method exists in the response
        if merge_method is None:
            return 0
        
        # Define the allowed values for merge_method
        allowed_merge_methods = [""merge"", ""rebase_merge"", ""ff""]
        
        # Verify if the merge_method in the response is one of the allowed values
        if merge_method in allowed_merge_methods:
            return 1
        else:
            return -1
    except Exception as e:
        # Handle any unexpected errors
        return -1
",merge,1.0,1,0,0,0,1,"range of values, logic"
post-/projects,BasicProjectDetails,jobs_enabled,jobs_enabled,41,,,parameters,jobs_enabled,(Deprecated)Enable jobs for this project. Use builds_access_level instead,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""tag_list"": [],
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""test_project_1"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""test_project_1"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""description"": null,
  ""default_branch"": ""main"",
  ""container_registry_enabled"": true,
  ""avatar"": null,
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'jobs_enabled' is in the response
        if 'jobs_enabled' not in latest_response:
            return 0  # Attribute does not exist in the response
        
        # Check if 'jobs_enabled' is of type boolean
        if not isinstance(latest_response['jobs_enabled'], bool):
            return -1  # Constraint not satisfied, type mismatch
        
        return 1  # Constraint satisfied
    except Exception as e:
        return -1  # Constraint not satisfied due to an exception
",True,1.0,1,0,0,0,1,"range of values, logic"
post-/projects,BasicProjectDetails,issues_enabled,issues_enabled,42,,,parameters,issues_enabled,(Deprecated)Enable issues for this project. Use issues_access_level instead,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""tag_list"": [],
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""test_project_1"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""test_project_1"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""description"": null,
  ""default_branch"": ""main"",
  ""container_registry_enabled"": true,
  ""avatar"": null,
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'issues_enabled' is in the response
        if 'issues_enabled' not in latest_response:
            return 0
        
        # Check if 'issues_enabled' is a boolean
        if not isinstance(latest_response['issues_enabled'], bool):
            return -1
        
        # Check if the request_info contains 'issues_enabled' and compare it with the response
        if 'issues_enabled' in request_info:
            if latest_response['issues_enabled'] != request_info['issues_enabled']:
                return -1
        
        return 1
    except Exception as e:
        return -1
",True,1.0,1,0,0,0,1,"range of values, logic"
post-/projects,BasicProjectDetails,description,description,43,,,parameters,description,Short project description,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""tag_list"": [],
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""test_project_1"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""test_project_1"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""description"": null,
  ""default_branch"": ""main"",
  ""container_registry_enabled"": true,
  ""avatar"": null,
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}",TP,unknown,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the description from the response
        response_description = latest_response.get(""description"", None)
        
        # Check if the description exists in the response
        if response_description is None:
            return 0
        
        # Extract the description from the request info
        request_description = request_info.get(""description"", None)
        
        # Check if the description exists in the request info
        if request_description is None:
            return 0
        
        # Verify the description matches the request description
        if response_description == request_description:
            return 1
        else:
            return -1
    except Exception as e:
        # Handle any unexpected errors
        return -1
",GitLab Community Edition,1.0,0,0,1,0,1,logic
post-/projects,BasicProjectDetails,default_branch,default_branch,44,,,parameters,default_branch,master by default,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""tag_list"": [],
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""test_project_1"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""test_project_1"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""description"": null,
  ""default_branch"": ""main"",
  ""container_registry_enabled"": true,
  ""avatar"": null,
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the default_branch from the response
        default_branch_response = latest_response.get(""default_branch"")
        
        # Check if the default_branch exists in the response
        if default_branch_response is None:
            return 0
        
        # Extract the default_branch from the request info, if provided
        default_branch_request = request_info.get(""default_branch"", ""master"")
        
        # Verify the constraint
        if isinstance(default_branch_response, str) and default_branch_response == default_branch_request:
            return 1
        else:
            return -1
    except Exception as e:
        return -1
",master,1.0,1,0,0,0,1,logic
post-/projects,BasicProjectDetails,container_registry_enabled,container_registry_enabled,45,,,parameters,container_registry_enabled,Enable container registry for this project,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""tag_list"": [],
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""test_project_1"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""test_project_1"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""description"": null,
  ""default_branch"": ""main"",
  ""container_registry_enabled"": true,
  ""avatar"": null,
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'container_registry_enabled' exists in both request_info and latest_response
        request_value = request_info.get('container_registry_enabled', None)
        response_value = latest_response.get('container_registry_enabled', None)

        # If the attribute does not exist in the response, return 0 indicating insufficient information
        if response_value is None:
            return 0

        # Ensure the type of the response value is boolean
        if not isinstance(response_value, bool):
            return -1

        # If the attribute exists in the request, check if it matches the response
        if request_value is not None:
            if isinstance(request_value, bool) and request_value == response_value:
                return 1
            else:
                return -1

        # If the attribute does not exist in the request, but exists in the response and is a valid boolean
        return 1

    except Exception as e:
        # In case of any error during verification, consider the constraints not satisfied
        return -1
",False,1.0,1,0,0,0,1,"range of values, logic"
post-/projects,BasicProjectDetails,autoclose_referenced_issues,autoclose_referenced_issues,47,,,parameters,autoclose_referenced_issues,Set whether auto-closing referenced issues on default branch,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""tag_list"": [],
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""test_project_1"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""test_project_1"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""description"": null,
  ""default_branch"": ""main"",
  ""container_registry_enabled"": true,
  ""avatar"": null,
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'autoclose_referenced_issues' exists in the response
        if 'autoclose_referenced_issues' not in latest_response:
            return 0
        
        # Extract the value from the response
        response_value = latest_response['autoclose_referenced_issues']
        
        # Check if the value is of boolean type
        if isinstance(response_value, bool):
            return 1
        else:
            return -1
    except Exception as e:
        return -1
",True,1.0,1,0,0,0,1,"range of values, logic"
post-/projects,BasicProjectDetails,auto_devops_enabled,auto_devops_enabled,48,,,parameters,auto_devops_enabled,Enable Auto DevOps for this project,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""tag_list"": [],
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""test_project_1"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""test_project_1"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""description"": null,
  ""default_branch"": ""main"",
  ""container_registry_enabled"": true,
  ""avatar"": null,
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'auto_devops_enabled' is in the response
        if 'auto_devops_enabled' not in latest_response:
            return 0
        
        # Extract the value of 'auto_devops_enabled' from the response
        response_value = latest_response['auto_devops_enabled']
        
        # Check if the value is a boolean
        if not isinstance(response_value, bool):
            return -1
        
        # Extract the value of 'auto_devops_enabled' from the request info
        request_value = request_info.get('auto_devops_enabled')
        
        # Convert request_value to boolean if it's a string
        if isinstance(request_value, str):
            request_value = request_value.lower() == 'true'
        
        # Check if the request value matches the response value
        if response_value == request_value:
            return 1
        else:
            return -1
    except Exception as e:
        return -1
",True,1.0,1,0,0,0,1,"range of values, logic"
post-/projects,BasicProjectDetails,auto_devops_deploy_strategy,auto_devops_deploy_strategy,49,,,parameters,auto_devops_deploy_strategy,Auto Deploy strategy,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""tag_list"": [],
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""test_project_1"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""test_project_1"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""description"": null,
  ""default_branch"": ""main"",
  ""container_registry_enabled"": true,
  ""avatar"": null,
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the auto_devops_deploy_strategy from the response
        auto_devops_deploy_strategy = latest_response.get(""auto_devops_deploy_strategy"")
        
        # Check if the attribute exists in the response
        if auto_devops_deploy_strategy is None:
            return 0
        
        # Define the allowed values for auto_devops_deploy_strategy
        allowed_values = [""continuous"", ""manual"", ""timed_incremental""]
        
        # Verify if the value of auto_devops_deploy_strategy is within the allowed values
        if auto_devops_deploy_strategy in allowed_values:
            return 1
        else:
            return -1
    except Exception as e:
        # In case of any exception, return -1 indicating the constraint is not satisfied
        return -1
",continuous,1.0,1,0,0,0,1,logic
post-/projects,BasicProjectDetails,allow_merge_on_skipped_pipeline,allow_merge_on_skipped_pipeline,50,,,parameters,allow_merge_on_skipped_pipeline,Set whether or not merge requests can be merged with skipped jobs,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""tag_list"": [],
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""test_project_1"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""test_project_1"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""description"": null,
  ""default_branch"": ""main"",
  ""container_registry_enabled"": true,
  ""avatar"": null,
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}",TP,unknown,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'allow_merge_on_skipped_pipeline' exists in the response
        if 'allow_merge_on_skipped_pipeline' not in latest_response:
            return 0
        
        # Extract the value from the response
        response_value = latest_response['allow_merge_on_skipped_pipeline']
        
        # Check if the value is a boolean
        if not isinstance(response_value, bool):
            return -1
        
        # Extract the value from the request info
        request_value = request_info.get('allow_merge_on_skipped_pipeline')
        
        # Check if the request value is a boolean
        if request_value is not None and not isinstance(request_value, bool):
            return -1
        
        # Compare the response value with the request value if provided
        if request_value is not None and response_value != request_value:
            return -1
        
        return 1
    except Exception as e:
        return -1
",False,1.0,1,0,0,0,1,"range of values, logic"
post-/projects/{id}/archive,ArchiveProject,id,id,51,,,parameters,id,The ID or URL-encoded path of the project,c,False,"{""id"": 1}","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":2,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":true,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""can_create_merge_request_in"":false,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T16:14:29.635Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":null,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the 'id' from the request_info and ensure it is an integer
        request_id = int(request_info.get('id'))
        
        # Extract the 'id' from the latest_response and ensure it is an integer
        response_id = latest_response.get('id')
        
        if response_id is None:
            return 0  # The response lacks sufficient information to verify the constraint
        
        if not isinstance(response_id, int):
            return -1  # The 'id' in the response is not an integer
        
        # Check if the response 'id' matches the request 'id'
        if response_id == request_id:
            return 1  # The constraint is satisfied
        else:
            return -1  # The 'id' in the response does not match the request 'id'
    
    except (ValueError, TypeError):
        return -1  # The 'id' in the request_info is not a valid integer
",3,1.0,1,0,0,0,1,logic
post-/projects/{id}/fork,BasicProjectDetails,path,path,52,,,parameters,path,"The path assigned to the resultant project after forking. Either path or name is required, not both",x,False,"{""id"": 7}","{""id"":7,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""Administrator / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""root/test_project_1"",""created_at"":""2024-03-10T16:00:00.131Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/root/test_project_1.git"",""web_url"":""http://gitlab.example.com/root/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T16:00:00.131Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/7"",""issues"":""http://gitlab.example.com/api/v4/projects/7/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/7/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/7/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/7/labels"",""events"":""http://gitlab.example.com/api/v4/projects/7/events"",""members"":""http://gitlab.example.com/api/v4/projects/7/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/7/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-11T16:00:00.232Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""forked_from_project"":{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":2,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default""},""mr_default_target_self"":false,""import_url"":null,""import_type"":null,""import_status"":""scheduled"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T16:00:00.131Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941Jr3m5yJAdsYGhK6tdaF1"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":null,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true}",TP,unknown,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'path' exists in the response
        if 'path' not in latest_response:
            return 0
        
        response_path = latest_response['path']
        
        # Check if 'path' is in the request_info
        if 'path' in request_info:
            request_path = request_info['path']
            
            # Verify that the 'path' in the response matches the 'path' in the request
            if response_path == request_path:
                return 1
            else:
                return -1
        else:
            # If 'path' is not in request_info, we cannot verify the constraint
            return 0
    except Exception as e:
        # In case of any exception, return -1 indicating the constraint is not satisfied
        return -1
",diaspora-client,1.0,0,0,1,0,1,inter-parameter dependency
post-/projects/{id}/fork,BasicProjectDetails,name,name,53,,,parameters,name,The name assigned to the resultant project after forking,c,False,"{""id"": 7}","{""id"":7,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""Administrator / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""root/test_project_1"",""created_at"":""2024-03-10T16:00:00.131Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/root/test_project_1.git"",""web_url"":""http://gitlab.example.com/root/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T16:00:00.131Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/7"",""issues"":""http://gitlab.example.com/api/v4/projects/7/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/7/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/7/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/7/labels"",""events"":""http://gitlab.example.com/api/v4/projects/7/events"",""members"":""http://gitlab.example.com/api/v4/projects/7/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/7/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-11T16:00:00.232Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""forked_from_project"":{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":2,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default""},""mr_default_target_self"":false,""import_url"":null,""import_type"":null,""import_status"":""scheduled"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T16:00:00.131Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941Jr3m5yJAdsYGhK6tdaF1"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":null,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the 'name' from the request_info
        input_name = request_info.get('name', None)
        
        # Check if 'name' exists in the request_info
        if input_name is None:
            return 0
        
        # Extract the 'name' from the latest_response
        response_name = latest_response.get('name', None)
        
        # Check if 'name' exists in the latest_response
        if response_name is None:
            return 0
        
        # Verify if the 'name' in the response matches the 'name' in the request_info
        if response_name == input_name:
            return 1
        else:
            return -1
    except Exception as e:
        # In case of any exception, return -1 indicating the constraint is not satisfied
        return -1
",Diaspora Client,1.0,0,0,1,0,1,logic
post-/projects/{id}/fork,BasicProjectDetails,id,id,54,,,parameters,id,The ID orURL-encoded path of the project,c,False,"{""id"": 7}","{""id"":7,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""Administrator / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""root/test_project_1"",""created_at"":""2024-03-10T16:00:00.131Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/root/test_project_1.git"",""web_url"":""http://gitlab.example.com/root/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T16:00:00.131Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/7"",""issues"":""http://gitlab.example.com/api/v4/projects/7/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/7/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/7/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/7/labels"",""events"":""http://gitlab.example.com/api/v4/projects/7/events"",""members"":""http://gitlab.example.com/api/v4/projects/7/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/7/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-11T16:00:00.232Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""forked_from_project"":{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":2,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default""},""mr_default_target_self"":false,""import_url"":null,""import_type"":null,""import_status"":""scheduled"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T16:00:00.131Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941Jr3m5yJAdsYGhK6tdaF1"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":null,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'id' exists in the response
        if 'id' not in latest_response:
            return 0
        
        # Check if 'id' is an integer
        if not isinstance(latest_response['id'], int):
            return -1
        
        # Check if 'id' matches the input parameter 'id' in request_info
        if 'id' in request_info and latest_response['id'] != int(request_info['id']):
            return -1
        
        return 1
    except Exception as e:
        return -1
",4,1.0,1,0,0,0,1,logic
post-/projects/{id}/share,ProjectGroupLink,expires_at,expires_at,56,,,parameters,expires_at,Share expiration date in ISO 8601 format: 2016-09-26,c,False,"{""group_access"": 10, ""group_id"": 8, ""id"": 5}","{
    ""id"": 3,
    ""description"": ""Lorem ipsum dolor sit amet, consectetur adipiscing elit."",
    ""description_html"": """",
    ""default_branch"": ""main"",
    ""visibility"": ""private"",
    ""ssh_url_to_repo"": ""git@example.com:diaspora/diaspora-project-site.git"",
    ""http_url_to_repo"": ""http://example.com/diaspora/diaspora-project-site.git"",
    ""web_url"": ""http://example.com/diaspora/diaspora-project-site"",
    ""readme_url"": ""http://example.com/diaspora/diaspora-project-site/blob/main/README.md"",
    ""tag_list"": [ 
      ""example"",
      ""disapora project""
    ],
    ""topics"": [
      ""example"",
      ""disapora project""
    ],
    ""owner"": {
      ""id"": 3,
      ""name"": ""Diaspora"",
      ""created_at"": ""2013-09-30T13:46:02Z""
    },
    ""name"": ""Diaspora Project Site"",
    ""name_with_namespace"": ""Diaspora / Diaspora Project Site"",
    ""path"": ""diaspora-project-site"",
    ""path_with_namespace"": ""diaspora/diaspora-project-site"",
    ""repository_object_format"": ""sha1"",
    ""issues_enabled"": true,
    ""open_issues_count"": 1,
    ""merge_requests_enabled"": true,
    ""jobs_enabled"": true,
    ""wiki_enabled"": true,
    ""snippets_enabled"": false,
    ""can_create_merge_request_in"": true,
    ""resolve_outdated_diff_discussions"": false,
    ""container_registry_enabled"": false, 
    ""container_registry_access_level"": ""disabled"",
    ""security_and_compliance_access_level"": ""disabled"",
    ""created_at"": ""2013-09-30T13:46:02Z"",
    ""updated_at"": ""2013-09-30T13:46:02Z"",
    ""last_activity_at"": ""2013-09-30T13:46:02Z"",
    ""creator_id"": 3,
    ""namespace"": {
      ""id"": 3,
      ""name"": ""Diaspora"",
      ""path"": ""diaspora"",
      ""kind"": ""group"",
      ""full_path"": ""diaspora""
    },
    ""import_status"": ""none"",
    ""import_error"": null,
    ""permissions"": {
      ""project_access"": {
        ""access_level"": 10,
        ""notification_level"": 3
      },
      ""group_access"": {
        ""access_level"": 50,
        ""notification_level"": 3
      }
    },
    ""archived"": false,
    ""avatar_url"": ""http://example.com/uploads/project/avatar/3/uploads/avatar.png"",
    ""license_url"": ""http://example.com/diaspora/diaspora-client/blob/main/LICENSE"",
    ""license"": {
      ""key"": ""lgpl-3.0"",
      ""name"": ""GNU Lesser General Public License v3.0"",
      ""nickname"": ""GNU LGPLv3"",
      ""html_url"": ""http://choosealicense.com/licenses/lgpl-3.0/"",
      ""source_url"": ""http://www.gnu.org/licenses/lgpl-3.0.txt""
    },
    ""shared_runners_enabled"": true,
    ""group_runners_enabled"": true,
    ""forks_count"": 0,
    ""star_count"": 0,
    ""runners_token"": ""b8bc4a7a29eb76ea83cf79e4908c2b"",
    ""ci_default_git_depth"": 50,
    ""ci_forward_deployment_enabled"": true,
    ""ci_forward_deployment_rollback_allowed"": true,
    ""ci_allow_fork_pipelines_to_run_in_parent_project"": true,
    ""ci_separated_caches"": true,
    ""ci_restrict_pipeline_cancellation_role"": ""developer"",
    ""public_jobs"": true,
    ""shared_with_groups"": [],
    ""only_allow_merge_if_pipeline_succeeds"": false,
    ""allow_merge_on_skipped_pipeline"": false,
    ""restrict_user_defined_variables"": false,
    ""only_allow_merge_if_all_discussions_are_resolved"": false,
    ""remove_source_branch_after_merge"": false,
    ""request_access_enabled"": false,
    ""merge_method"": ""merge"",
    ""squash_option"": ""default_on"",
    ""autoclose_referenced_issues"": true,
    ""enforce_auth_checks_on_uploads"": true,
    ""suggestion_commit_message"": null,
    ""merge_commit_template"": null,
    ""container_registry_image_prefix"": ""registry.example.com/diaspora/diaspora-project-site"",
    ""_links"": {
      ""self"": ""http://example.com/api/v4/projects"",
      ""issues"": ""http://example.com/api/v4/projects/1/issues"",
      ""merge_requests"": ""http://example.com/api/v4/projects/1/merge_requests"",
      ""repo_branches"": ""http://example.com/api/v4/projects/1/repository_branches"",
      ""labels"": ""http://example.com/api/v4/projects/1/labels"",
      ""events"": ""http://example.com/api/v4/projects/1/events"",
      ""members"": ""http://example.com/api/v4/projects/1/members"",
      ""cluster_agents"": ""http://example.com/api/v4/projects/1/cluster_agents""
    }
  }",TP,unknown,"from datetime import datetime

def verify_latest_response(latest_response, request_info):
    try:
        # Extract the 'expires_at' value from the response
        response_expires_at = latest_response.get(""expires_at"")
        
        # Check if 'expires_at' exists in the response
        if response_expires_at is None:
            return 0
        
        # Extract the 'expires_at' value from the request info
        request_expires_at = request_info.get(""expires_at"")
        
        # Check if 'expires_at' exists in the request info
        if request_expires_at is None:
            return 0
        
        # Parse the dates to ensure they are in ISO 8601 format
        response_date = datetime.strptime(response_expires_at, ""%Y-%m-%d"")
        request_date = datetime.strptime(request_expires_at, ""%Y-%m-%d"")
        
        # Verify that the dates match
        if response_date == request_date:
            return 1
        else:
            return -1
    except ValueError:
        # If there is a ValueError during date parsing, the format is incorrect
        return -1
    except Exception as e:
        # Catch any other exceptions
        return -1
",2018-08-14T00:00:00Z,1.0,0,0,1,0,1,format
post-/projects/{id}/star,StarProject,id,id,57,,,parameters,id,The ID or URL-encoded path of the project,c,False,"{""id"": 5}","{""id"":5,""description"":null,""name"":""test_project_5"",""name_with_namespace"":""Administrator / test_project_5"",""path"":""test_project_5"",""path_with_namespace"":""root/test_project_5"",""created_at"":""2024-03-04T09:07:53.324Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/test_project_5.git"",""http_url_to_repo"":""http://gitlab.example.com/root/test_project_5.git"",""web_url"":""http://gitlab.example.com/root/test_project_5"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":1,""last_activity_at"":""2024-03-04T09:07:53.324Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/5"",""issues"":""http://gitlab.example.com/api/v4/projects/5/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/5/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/5/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/5/labels"",""events"":""http://gitlab.example.com/api/v4/projects/5/events"",""members"":""http://gitlab.example.com/api/v4/projects/5/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/5/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-05T09:07:53.350Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-04T09:07:53.324Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941ymtrSxowSdg86ipmkzJL"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":null,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'id' exists in the response
        if 'id' not in latest_response:
            return 0
        
        # Check if 'id' is an integer
        if not isinstance(latest_response['id'], int):
            return -1
        
        # Check if 'id' matches the input parameter 'id' in request_info
        if 'id' in request_info and latest_response['id'] != int(request_info['id']):
            return -1
        
        return 1
    except Exception as e:
        return -1
",3,1.0,1,0,0,0,1,logic
post-/projects/{id}/unarchive,ArchiveProject,id,id,58,,,parameters,id,The ID or URL-encoded path of the project,c,False,"{""id"": 1}","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":2,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T16:17:12.648Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":null,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the 'id' from the request_info and ensure it is an integer
        request_id = int(request_info.get('id'))
        
        # Extract the 'id' from the latest_response and ensure it is an integer
        response_id = latest_response.get('id')
        
        if response_id is None:
            return 0  # The response lacks sufficient information to verify the constraint
        
        if not isinstance(response_id, int):
            return -1  # The 'id' in the response is not an integer
        
        # Check if the response 'id' matches the request 'id'
        if response_id == request_id:
            return 1  # The constraint is satisfied
        else:
            return -1  # The 'id' in the response does not match the request 'id'
    
    except (ValueError, TypeError):
        return -1  # The 'id' in the request_info is not a valid integer
",3,1.0,1,0,0,0,1,logic
post-/projects/{id}/unstar,StarProject,id,id,59,,,parameters,id,The ID or URL-encoded path of the project,c,False,"{""id"": 5}","{""id"":5,""description"":null,""name"":""test_project_5"",""name_with_namespace"":""Administrator / test_project_5"",""path"":""test_project_5"",""path_with_namespace"":""root/test_project_5"",""created_at"":""2024-03-04T09:07:53.324Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/test_project_5.git"",""http_url_to_repo"":""http://gitlab.example.com/root/test_project_5.git"",""web_url"":""http://gitlab.example.com/root/test_project_5"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-04T09:07:53.324Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/5"",""issues"":""http://gitlab.example.com/api/v4/projects/5/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/5/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/5/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/5/labels"",""events"":""http://gitlab.example.com/api/v4/projects/5/events"",""members"":""http://gitlab.example.com/api/v4/projects/5/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/5/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-05T09:07:53.350Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-04T09:07:53.324Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941ymtrSxowSdg86ipmkzJL"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":null,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'id' exists in the response
        if 'id' not in latest_response:
            return 0
        
        # Check if 'id' is an integer
        if not isinstance(latest_response['id'], int):
            return -1
        
        # Check if 'id' matches the input parameter 'id' in request_info
        if 'id' in request_info and latest_response['id'] != int(request_info['id']):
            return -1
        
        return 1
    except Exception as e:
        return -1
",3,1.0,1,0,0,0,1,logic
post-/projects/user/{user_id},BasicProjectDetails,wiki_enabled,wiki_enabled,60,,,parameters,wiki_enabled,(Deprecated)Enable wiki for this project. Use wiki_access_levelinstead,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""user_id"": 1,
  ""tag_list"": [],
  ""suggestion_commit_message"": null,
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""user-project-test"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""user-project-test"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""description"": null,
  ""container_registry_enabled"": true,
  ""avatar"": ""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":11,""description"":null,""name"":""user-project-test"",""name_with_namespace"":""Administrator / user-project-test"",""path"":""user-project-test"",""path_with_namespace"":""root/user-project-test"",""created_at"":""2024-03-18T07:37:22.079Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/user-project-test.git"",""http_url_to_repo"":""http://gitlab.example.com/root/user-project-test.git"",""web_url"":""http://gitlab.example.com/root/user-project-test"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-18T07:37:22.079Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/11"",""issues"":""http://gitlab.example.com/api/v4/projects/11/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/11/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/11/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/11/labels"",""events"":""http://gitlab.example.com/api/v4/projects/11/events"",""members"":""http://gitlab.example.com/api/v4/projects/11/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/11/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-19T07:37:22.202Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-18T07:37:22.079Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941AZPz3asxs6r2LcTJtyBt"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'wiki_enabled' is present in the response
        if 'wiki_enabled' not in latest_response:
            return 0
        
        # Ensure 'wiki_enabled' is a boolean
        if not isinstance(latest_response['wiki_enabled'], bool):
            return -1
        
        # Check if the request_info contains 'wiki_enabled' and validate it
        if 'wiki_enabled' in request_info:
            if latest_response['wiki_enabled'] != request_info['wiki_enabled']:
                return -1
        
        return 1
    except Exception as e:
        return -1
",True,1.0,1,0,0,0,1,"range of values, logic"
post-/projects/user/{user_id},BasicProjectDetails,visibility,visibility,61,,,parameters,visibility,See project visibility level,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""user_id"": 1,
  ""tag_list"": [],
  ""suggestion_commit_message"": null,
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""user-project-test"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""user-project-test"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""description"": null,
  ""container_registry_enabled"": true,
  ""avatar"": ""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":11,""description"":null,""name"":""user-project-test"",""name_with_namespace"":""Administrator / user-project-test"",""path"":""user-project-test"",""path_with_namespace"":""root/user-project-test"",""created_at"":""2024-03-18T07:37:22.079Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/user-project-test.git"",""http_url_to_repo"":""http://gitlab.example.com/root/user-project-test.git"",""web_url"":""http://gitlab.example.com/root/user-project-test"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-18T07:37:22.079Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/11"",""issues"":""http://gitlab.example.com/api/v4/projects/11/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/11/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/11/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/11/labels"",""events"":""http://gitlab.example.com/api/v4/projects/11/events"",""members"":""http://gitlab.example.com/api/v4/projects/11/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/11/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-19T07:37:22.202Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-18T07:37:22.079Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941AZPz3asxs6r2LcTJtyBt"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the visibility attribute from the response
        visibility = latest_response.get(""visibility"")
        
        # Check if the visibility attribute exists in the response
        if visibility is None:
            return 0
        
        # Define the allowed visibility values
        allowed_values = [""private"", ""internal"", ""public""]
        
        # Verify if the visibility value is within the allowed values
        if visibility in allowed_values:
            return 1
        else:
            return -1
    except Exception as e:
        return -1
",private,1.0,1,0,0,0,1,"range of values, logic"
post-/projects/user/{user_id},BasicProjectDetails,tag_list,tag_list,63,,,parameters,tag_list,"The list of tags for a project; put array of tags, that should be finally assigned to a project",c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""user_id"": 1,
  ""tag_list"": [],
  ""suggestion_commit_message"": null,
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""user-project-test"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""user-project-test"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""description"": null,
  ""container_registry_enabled"": true,
  ""avatar"": ""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":11,""description"":null,""name"":""user-project-test"",""name_with_namespace"":""Administrator / user-project-test"",""path"":""user-project-test"",""path_with_namespace"":""root/user-project-test"",""created_at"":""2024-03-18T07:37:22.079Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/user-project-test.git"",""http_url_to_repo"":""http://gitlab.example.com/root/user-project-test.git"",""web_url"":""http://gitlab.example.com/root/user-project-test"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-18T07:37:22.079Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/11"",""issues"":""http://gitlab.example.com/api/v4/projects/11/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/11/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/11/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/11/labels"",""events"":""http://gitlab.example.com/api/v4/projects/11/events"",""members"":""http://gitlab.example.com/api/v4/projects/11/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/11/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-19T07:37:22.202Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-18T07:37:22.079Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941AZPz3asxs6r2LcTJtyBt"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the tag_list from the response
        response_tag_list = latest_response.get('tag_list', None)
        
        # Check if tag_list exists in the response
        if response_tag_list is None:
            return 0
        
        # Ensure tag_list is an array
        if not isinstance(response_tag_list, list):
            return -1
        
        # Ensure each item in tag_list is a string
        for tag in response_tag_list:
            if not isinstance(tag, string):
                return -1
        
        # Extract the tag_list from the request info
        request_tag_list = request_info.get('tag_list', None)
        
        # Check if tag_list exists in the request info
        if request_tag_list is None:
            return 0
        
        # Ensure the request tag_list is an array
        if not isinstance(request_tag_list, list):
            return -1
        
        # Ensure each item in request tag_list is a string
        for tag in request_tag_list:
            if not isinstance(tag, str):
                return -1
        
        # Compare the request and response tag_list
        if set(response_tag_list) == set(request_tag_list):
            return 1
        else:
            return -1
    except Exception as e:
        return -1
","['example', 'disapora client']",1.0,1,0,0,0,1,logic
post-/projects/user/{user_id},BasicProjectDetails,snippets_enabled,snippets_enabled,65,,,parameters,snippets_enabled,(Deprecated)Enable snippets for this project. Use snippets_access_level instead,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""user_id"": 1,
  ""tag_list"": [],
  ""suggestion_commit_message"": null,
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""user-project-test"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""user-project-test"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""description"": null,
  ""container_registry_enabled"": true,
  ""avatar"": ""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":11,""description"":null,""name"":""user-project-test"",""name_with_namespace"":""Administrator / user-project-test"",""path"":""user-project-test"",""path_with_namespace"":""root/user-project-test"",""created_at"":""2024-03-18T07:37:22.079Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/user-project-test.git"",""http_url_to_repo"":""http://gitlab.example.com/root/user-project-test.git"",""web_url"":""http://gitlab.example.com/root/user-project-test"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-18T07:37:22.079Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/11"",""issues"":""http://gitlab.example.com/api/v4/projects/11/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/11/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/11/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/11/labels"",""events"":""http://gitlab.example.com/api/v4/projects/11/events"",""members"":""http://gitlab.example.com/api/v4/projects/11/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/11/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-19T07:37:22.202Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-18T07:37:22.079Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941AZPz3asxs6r2LcTJtyBt"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'snippets_enabled' is in the response
        if 'snippets_enabled' not in latest_response:
            return 0
        
        # Ensure 'snippets_enabled' is a boolean
        if not isinstance(latest_response['snippets_enabled'], bool):
            return -1
        
        # If 'snippets_enabled' is present and is a boolean, the constraint is satisfied
        return 1
    except Exception as e:
        # In case of any unexpected error, return -1
        return -1
",False,1.0,1,0,0,0,1,"range of values, logic"
post-/projects/user/{user_id},BasicProjectDetails,shared_runners_enabled,shared_runners_enabled,66,,,parameters,shared_runners_enabled,Enable shared runners for this project,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""user_id"": 1,
  ""tag_list"": [],
  ""suggestion_commit_message"": null,
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""user-project-test"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""user-project-test"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""description"": null,
  ""container_registry_enabled"": true,
  ""avatar"": ""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":11,""description"":null,""name"":""user-project-test"",""name_with_namespace"":""Administrator / user-project-test"",""path"":""user-project-test"",""path_with_namespace"":""root/user-project-test"",""created_at"":""2024-03-18T07:37:22.079Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/user-project-test.git"",""http_url_to_repo"":""http://gitlab.example.com/root/user-project-test.git"",""web_url"":""http://gitlab.example.com/root/user-project-test"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-18T07:37:22.079Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/11"",""issues"":""http://gitlab.example.com/api/v4/projects/11/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/11/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/11/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/11/labels"",""events"":""http://gitlab.example.com/api/v4/projects/11/events"",""members"":""http://gitlab.example.com/api/v4/projects/11/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/11/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-19T07:37:22.202Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-18T07:37:22.079Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941AZPz3asxs6r2LcTJtyBt"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'shared_runners_enabled' is in the response
        if 'shared_runners_enabled' not in latest_response:
            return 0  # Insufficient information to verify the constraint
        
        # Extract the value of 'shared_runners_enabled' from the response
        shared_runners_enabled_response = latest_response['shared_runners_enabled']
        
        # Check if the value is a boolean
        if not isinstance(shared_runners_enabled_response, bool):
            return -1  # Constraint not satisfied
        
        # Extract the value of 'shared_runners_enabled' from the request info
        shared_runners_enabled_request = request_info.get('shared_runners_enabled')
        
        # Check if the request parameter is provided and is a boolean
        if shared_runners_enabled_request is not None:
            if not isinstance(shared_runners_enabled_request, bool):
                return -1  # Constraint not satisfied
            
            # Verify if the request and response values match
            if shared_runners_enabled_response != shared_runners_enabled_request:
                return -1  # Constraint not satisfied
        
        return 1  # Constraint satisfied
    except Exception as e:
        return -1  # Constraint not satisfied due to an error
",True,1.0,1,0,0,0,1,"range of values, logic"
post-/projects/user/{user_id},BasicProjectDetails,resolve_outdated_diff_discussions,resolve_outdated_diff_discussions,67,,,parameters,resolve_outdated_diff_discussions,Automatically resolve merge request diffs discussions on lines changed with a push,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""user_id"": 1,
  ""tag_list"": [],
  ""suggestion_commit_message"": null,
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""user-project-test"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""user-project-test"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""description"": null,
  ""container_registry_enabled"": true,
  ""avatar"": ""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":11,""description"":null,""name"":""user-project-test"",""name_with_namespace"":""Administrator / user-project-test"",""path"":""user-project-test"",""path_with_namespace"":""root/user-project-test"",""created_at"":""2024-03-18T07:37:22.079Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/user-project-test.git"",""http_url_to_repo"":""http://gitlab.example.com/root/user-project-test.git"",""web_url"":""http://gitlab.example.com/root/user-project-test"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-18T07:37:22.079Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/11"",""issues"":""http://gitlab.example.com/api/v4/projects/11/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/11/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/11/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/11/labels"",""events"":""http://gitlab.example.com/api/v4/projects/11/events"",""members"":""http://gitlab.example.com/api/v4/projects/11/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/11/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-19T07:37:22.202Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-18T07:37:22.079Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941AZPz3asxs6r2LcTJtyBt"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if the 'resolve_outdated_diff_discussions' attribute exists in the response
        if 'resolve_outdated_diff_discussions' not in latest_response:
            return 0
        
        # Extract the value of 'resolve_outdated_diff_discussions' from the response
        response_value = latest_response['resolve_outdated_diff_discussions']
        
        # Ensure the value is of type boolean
        if isinstance(response_value, bool):
            return 1
        else:
            return -1
    except Exception as e:
        return -1
",False,1.0,1,0,0,0,1,logic
post-/projects/user/{user_id},BasicProjectDetails,request_access_enabled,request_access_enabled,68,,,parameters,request_access_enabled,Allow users to request member access,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""user_id"": 1,
  ""tag_list"": [],
  ""suggestion_commit_message"": null,
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""user-project-test"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""user-project-test"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""description"": null,
  ""container_registry_enabled"": true,
  ""avatar"": ""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":11,""description"":null,""name"":""user-project-test"",""name_with_namespace"":""Administrator / user-project-test"",""path"":""user-project-test"",""path_with_namespace"":""root/user-project-test"",""created_at"":""2024-03-18T07:37:22.079Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/user-project-test.git"",""http_url_to_repo"":""http://gitlab.example.com/root/user-project-test.git"",""web_url"":""http://gitlab.example.com/root/user-project-test"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-18T07:37:22.079Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/11"",""issues"":""http://gitlab.example.com/api/v4/projects/11/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/11/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/11/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/11/labels"",""events"":""http://gitlab.example.com/api/v4/projects/11/events"",""members"":""http://gitlab.example.com/api/v4/projects/11/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/11/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-19T07:37:22.202Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-18T07:37:22.079Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941AZPz3asxs6r2LcTJtyBt"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'request_access_enabled' exists in request_info and is a boolean
        if 'request_access_enabled' in request_info:
            if not isinstance(request_info['request_access_enabled'], bool):
                return -1  # Request info has the key but not boolean type

        # Check if 'request_access_enabled' exists in latest_response and is a boolean
        if 'request_access_enabled' in latest_response:
            if not isinstance(latest_response['request_access_enabled'], bool):
                return -1  # Response has the key but not boolean type
        else:
            return 0  # Key does not exist in the response

        # If both exist and are booleans, check if they match
        if 'request_access_enabled' in request_info and 'request_access_enabled' in latest_response:
            if request_info['request_access_enabled'] == latest_response['request_access_enabled']:
                return 1  # Both values match
            else:
                return -1  # Both values do not match

        return 1  # All checks passed, and constraints are satisfied
    except Exception as e:
        return -1  # Any exception implies a failure in constraint satisfaction
",False,1.0,1,0,0,0,1,logic
post-/projects/user/{user_id},BasicProjectDetails,repository_storage,repository_storage,69,,,parameters,repository_storage,Which storage shard the repository is on.(admins only),c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""user_id"": 1,
  ""tag_list"": [],
  ""suggestion_commit_message"": null,
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""user-project-test"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""user-project-test"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""description"": null,
  ""container_registry_enabled"": true,
  ""avatar"": ""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":11,""description"":null,""name"":""user-project-test"",""name_with_namespace"":""Administrator / user-project-test"",""path"":""user-project-test"",""path_with_namespace"":""root/user-project-test"",""created_at"":""2024-03-18T07:37:22.079Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/user-project-test.git"",""http_url_to_repo"":""http://gitlab.example.com/root/user-project-test.git"",""web_url"":""http://gitlab.example.com/root/user-project-test"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-18T07:37:22.079Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/11"",""issues"":""http://gitlab.example.com/api/v4/projects/11/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/11/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/11/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/11/labels"",""events"":""http://gitlab.example.com/api/v4/projects/11/events"",""members"":""http://gitlab.example.com/api/v4/projects/11/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/11/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-19T07:37:22.202Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-18T07:37:22.079Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941AZPz3asxs6r2LcTJtyBt"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the repository_storage from the request_info
        expected_repository_storage = request_info.get(""repository_storage"")
        
        # Check if the repository_storage exists in the latest_response
        if ""repository_storage"" not in latest_response:
            return 0
        
        # Extract the repository_storage from the latest_response
        actual_repository_storage = latest_response[""repository_storage""]
        
        # Verify if the actual repository_storage matches the expected repository_storage
        if actual_repository_storage == expected_repository_storage:
            return 1
        else:
            return -1
    except Exception as e:
        # In case of any exception, return -1 indicating the constraint is not satisfied
        return -1
",default,1.0,1,0,0,0,1,logic
post-/projects/user/{user_id},BasicProjectDetails,remove_source_branch_after_merge,remove_source_branch_after_merge,70,,,parameters,remove_source_branch_after_merge,Enable Delete source branch option by default for all new merge requests,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""user_id"": 1,
  ""tag_list"": [],
  ""suggestion_commit_message"": null,
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""user-project-test"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""user-project-test"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""description"": null,
  ""container_registry_enabled"": true,
  ""avatar"": ""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":11,""description"":null,""name"":""user-project-test"",""name_with_namespace"":""Administrator / user-project-test"",""path"":""user-project-test"",""path_with_namespace"":""root/user-project-test"",""created_at"":""2024-03-18T07:37:22.079Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/user-project-test.git"",""http_url_to_repo"":""http://gitlab.example.com/root/user-project-test.git"",""web_url"":""http://gitlab.example.com/root/user-project-test"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-18T07:37:22.079Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/11"",""issues"":""http://gitlab.example.com/api/v4/projects/11/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/11/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/11/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/11/labels"",""events"":""http://gitlab.example.com/api/v4/projects/11/events"",""members"":""http://gitlab.example.com/api/v4/projects/11/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/11/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-19T07:37:22.202Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-18T07:37:22.079Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941AZPz3asxs6r2LcTJtyBt"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if the attribute exists in the response
        if 'remove_source_branch_after_merge' not in latest_response:
            return 0
        
        # Check if the attribute is of type boolean
        if isinstance(latest_response['remove_source_branch_after_merge'], bool):
            return 1
        else:
            return -1
    except Exception as e:
        return -1
",False,1.0,1,0,0,0,1,"range of values, logic"
post-/projects/user/{user_id},BasicProjectDetails,path,path,71,,,parameters,path,"Repository name for new project. Either path or name is required, not both",x,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""user_id"": 1,
  ""tag_list"": [],
  ""suggestion_commit_message"": null,
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""user-project-test"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""user-project-test"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""description"": null,
  ""container_registry_enabled"": true,
  ""avatar"": ""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":11,""description"":null,""name"":""user-project-test"",""name_with_namespace"":""Administrator / user-project-test"",""path"":""user-project-test"",""path_with_namespace"":""root/user-project-test"",""created_at"":""2024-03-18T07:37:22.079Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/user-project-test.git"",""http_url_to_repo"":""http://gitlab.example.com/root/user-project-test.git"",""web_url"":""http://gitlab.example.com/root/user-project-test"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-18T07:37:22.079Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/11"",""issues"":""http://gitlab.example.com/api/v4/projects/11/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/11/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/11/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/11/labels"",""events"":""http://gitlab.example.com/api/v4/projects/11/events"",""members"":""http://gitlab.example.com/api/v4/projects/11/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/11/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-19T07:37:22.202Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-18T07:37:22.079Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941AZPz3asxs6r2LcTJtyBt"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'path' exists in the response
        if 'path' not in latest_response:
            return 0
        
        # Extract the 'path' from the response
        response_path = latest_response['path']
        
        # Ensure 'path' is a string
        if not isinstance(response_path, str):
            return -1
        
        # Check if 'path' is in the request_info
        if 'path' in request_info:
            request_path = request_info['path']
            
            # Ensure the request 'path' is a string
            if not isinstance(request_path, str):
                return -1
            
            # Verify that the response 'path' matches the request 'path'
            if response_path == request_path:
                return 1
            else:
                return -1
        else:
            return 0
    except Exception as e:
        return -1
",diaspora-client,1.0,1,0,0,0,1,inter-parameter dependency
post-/projects/user/{user_id},BasicProjectDetails,packages_enabled,packages_enabled,73,,,parameters,packages_enabled,Enable or disable packages repository feature,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""user_id"": 1,
  ""tag_list"": [],
  ""suggestion_commit_message"": null,
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""user-project-test"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""user-project-test"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""description"": null,
  ""container_registry_enabled"": true,
  ""avatar"": ""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":11,""description"":null,""name"":""user-project-test"",""name_with_namespace"":""Administrator / user-project-test"",""path"":""user-project-test"",""path_with_namespace"":""root/user-project-test"",""created_at"":""2024-03-18T07:37:22.079Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/user-project-test.git"",""http_url_to_repo"":""http://gitlab.example.com/root/user-project-test.git"",""web_url"":""http://gitlab.example.com/root/user-project-test"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-18T07:37:22.079Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/11"",""issues"":""http://gitlab.example.com/api/v4/projects/11/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/11/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/11/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/11/labels"",""events"":""http://gitlab.example.com/api/v4/projects/11/events"",""members"":""http://gitlab.example.com/api/v4/projects/11/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/11/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-19T07:37:22.202Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-18T07:37:22.079Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941AZPz3asxs6r2LcTJtyBt"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'packages_enabled' exists in request_info and is a boolean
        if 'packages_enabled' in request_info:
            if not isinstance(request_info['packages_enabled'], bool):
                return -1
        
        # Check if 'packages_enabled' exists in latest_response and is a boolean
        if 'packages_enabled' in latest_response:
            if not isinstance(latest_response['packages_enabled'], bool):
                return -1
        else:
            # 'packages_enabled' does not exist in the response
            return 0
        
        # If 'packages_enabled' exists in both request_info and latest_response, compare them
        if 'packages_enabled' in request_info:
            if request_info['packages_enabled'] != latest_response['packages_enabled']:
                return -1
        
        # If all checks pass, the constraint is satisfied
        return 1
    except Exception as e:
        # In case of any exception, consider the verification failed
        return -1
",True,1.0,1,0,0,0,1,range of values
post-/projects/user/{user_id},BasicProjectDetails,only_allow_merge_if_pipeline_succeeds,only_allow_merge_if_pipeline_succeeds,74,,,parameters,only_allow_merge_if_pipeline_succeeds,Set whether merge requests can only be merged with successful jobs,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""user_id"": 1,
  ""tag_list"": [],
  ""suggestion_commit_message"": null,
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""user-project-test"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""user-project-test"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""description"": null,
  ""container_registry_enabled"": true,
  ""avatar"": ""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":11,""description"":null,""name"":""user-project-test"",""name_with_namespace"":""Administrator / user-project-test"",""path"":""user-project-test"",""path_with_namespace"":""root/user-project-test"",""created_at"":""2024-03-18T07:37:22.079Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/user-project-test.git"",""http_url_to_repo"":""http://gitlab.example.com/root/user-project-test.git"",""web_url"":""http://gitlab.example.com/root/user-project-test"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-18T07:37:22.079Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/11"",""issues"":""http://gitlab.example.com/api/v4/projects/11/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/11/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/11/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/11/labels"",""events"":""http://gitlab.example.com/api/v4/projects/11/events"",""members"":""http://gitlab.example.com/api/v4/projects/11/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/11/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-19T07:37:22.202Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-18T07:37:22.079Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941AZPz3asxs6r2LcTJtyBt"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if the attribute exists in the response
        if 'only_allow_merge_if_pipeline_succeeds' not in latest_response:
            return 0
        
        # Extract the value from the response
        response_value = latest_response['only_allow_merge_if_pipeline_succeeds']
        
        # Check if the value is a boolean
        if not isinstance(response_value, bool):
            return -1
        
        # Extract the expected value from the request info
        if 'only_allow_merge_if_pipeline_succeeds' not in request_info:
            return 0
        
        expected_value = request_info['only_allow_merge_if_pipeline_succeeds']
        
        # Check if the expected value is a boolean
        if not isinstance(expected_value, bool):
            return -1
        
        # Verify if the response value matches the expected value
        if response_value == expected_value:
            return 1
        else:
            return -1
    except Exception as e:
        return -1
",False,1.0,1,0,0,0,1,"range of values, logic"
post-/projects/user/{user_id},BasicProjectDetails,only_allow_merge_if_all_discussions_are_resolved,only_allow_merge_if_all_discussions_are_resolved,75,,,parameters,only_allow_merge_if_all_discussions_are_resolved,Set whether merge requests can only be merged when all the discussions are resolved,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""user_id"": 1,
  ""tag_list"": [],
  ""suggestion_commit_message"": null,
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""user-project-test"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""user-project-test"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""description"": null,
  ""container_registry_enabled"": true,
  ""avatar"": ""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":11,""description"":null,""name"":""user-project-test"",""name_with_namespace"":""Administrator / user-project-test"",""path"":""user-project-test"",""path_with_namespace"":""root/user-project-test"",""created_at"":""2024-03-18T07:37:22.079Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/user-project-test.git"",""http_url_to_repo"":""http://gitlab.example.com/root/user-project-test.git"",""web_url"":""http://gitlab.example.com/root/user-project-test"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-18T07:37:22.079Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/11"",""issues"":""http://gitlab.example.com/api/v4/projects/11/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/11/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/11/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/11/labels"",""events"":""http://gitlab.example.com/api/v4/projects/11/events"",""members"":""http://gitlab.example.com/api/v4/projects/11/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/11/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-19T07:37:22.202Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-18T07:37:22.079Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941AZPz3asxs6r2LcTJtyBt"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if the attribute exists in the response
        if 'only_allow_merge_if_all_discussions_are_resolved' not in latest_response:
            return 0
        
        # Extract the value from the response
        response_value = latest_response['only_allow_merge_if_all_discussions_are_resolved']
        
        # Ensure the value is a boolean
        if not isinstance(response_value, bool):
            return -1
        
        # Extract the value from the request info
        request_value = request_info.get('only_allow_merge_if_all_discussions_are_resolved')
        
        # Ensure the request value is a boolean
        if request_value is not None and not isinstance(request_value, bool):
            return -1
        
        # Compare the values
        if request_value is not None and response_value != request_value:
            return -1
        
        return 1
    except Exception as e:
        return -1
",False,1.0,1,0,0,0,1,"range of values, logic"
post-/projects/user/{user_id},BasicProjectDetails,name,name,76,,,parameters,name,The name of the new project. Equals path if not provided,x,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""user_id"": 1,
  ""tag_list"": [],
  ""suggestion_commit_message"": null,
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""user-project-test"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""user-project-test"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""description"": null,
  ""container_registry_enabled"": true,
  ""avatar"": ""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":11,""description"":null,""name"":""user-project-test"",""name_with_namespace"":""Administrator / user-project-test"",""path"":""user-project-test"",""path_with_namespace"":""root/user-project-test"",""created_at"":""2024-03-18T07:37:22.079Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/user-project-test.git"",""http_url_to_repo"":""http://gitlab.example.com/root/user-project-test.git"",""web_url"":""http://gitlab.example.com/root/user-project-test"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-18T07:37:22.079Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/11"",""issues"":""http://gitlab.example.com/api/v4/projects/11/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/11/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/11/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/11/labels"",""events"":""http://gitlab.example.com/api/v4/projects/11/events"",""members"":""http://gitlab.example.com/api/v4/projects/11/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/11/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-19T07:37:22.202Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-18T07:37:22.079Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941AZPz3asxs6r2LcTJtyBt"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the 'name' from the response
        response_name = latest_response.get(""name"")
        
        # Check if 'name' exists in the response
        if response_name is None:
            return 0
        
        # Extract the 'name' from the request info
        request_name = request_info.get(""name"")
        
        # If 'name' is not provided in the request, it should equal the path (assuming 'path' is a key in request_info)
        if request_name is None:
            request_name = request_info.get(""path"")
        
        # Verify the constraint
        if response_name == request_name:
            return 1
        else:
            return -1
    except Exception as e:
        # If any error occurs during the verification process, return -1
        return -1
",Diaspora Client,1.0,1,0,0,0,1,logic
post-/projects/user/{user_id},BasicProjectDetails,merge_requests_enabled,merge_requests_enabled,77,,,parameters,merge_requests_enabled,(Deprecated)Enable merge requests for this project. Use merge_requests_access_level instead,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""user_id"": 1,
  ""tag_list"": [],
  ""suggestion_commit_message"": null,
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""user-project-test"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""user-project-test"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""description"": null,
  ""container_registry_enabled"": true,
  ""avatar"": ""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":11,""description"":null,""name"":""user-project-test"",""name_with_namespace"":""Administrator / user-project-test"",""path"":""user-project-test"",""path_with_namespace"":""root/user-project-test"",""created_at"":""2024-03-18T07:37:22.079Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/user-project-test.git"",""http_url_to_repo"":""http://gitlab.example.com/root/user-project-test.git"",""web_url"":""http://gitlab.example.com/root/user-project-test"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-18T07:37:22.079Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/11"",""issues"":""http://gitlab.example.com/api/v4/projects/11/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/11/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/11/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/11/labels"",""events"":""http://gitlab.example.com/api/v4/projects/11/events"",""members"":""http://gitlab.example.com/api/v4/projects/11/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/11/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-19T07:37:22.202Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-18T07:37:22.079Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941AZPz3asxs6r2LcTJtyBt"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'merge_requests_enabled' is in the response
        if 'merge_requests_enabled' not in latest_response:
            return 0
        
        # Check if 'merge_requests_enabled' is a boolean
        if not isinstance(latest_response['merge_requests_enabled'], bool):
            return -1
        
        # If the request_info contains 'merge_requests_enabled', verify it matches the response
        if 'merge_requests_enabled' in request_info:
            if latest_response['merge_requests_enabled'] != request_info['merge_requests_enabled']:
                return -1
        
        return 1
    except Exception as e:
        return -1
",True,1.0,1,0,0,0,1,"range of values, logic"
post-/projects/user/{user_id},BasicProjectDetails,merge_method,merge_method,78,,,parameters,merge_method,Set the merge method used,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""user_id"": 1,
  ""tag_list"": [],
  ""suggestion_commit_message"": null,
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""user-project-test"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""user-project-test"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""description"": null,
  ""container_registry_enabled"": true,
  ""avatar"": ""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":11,""description"":null,""name"":""user-project-test"",""name_with_namespace"":""Administrator / user-project-test"",""path"":""user-project-test"",""path_with_namespace"":""root/user-project-test"",""created_at"":""2024-03-18T07:37:22.079Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/user-project-test.git"",""http_url_to_repo"":""http://gitlab.example.com/root/user-project-test.git"",""web_url"":""http://gitlab.example.com/root/user-project-test"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-18T07:37:22.079Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/11"",""issues"":""http://gitlab.example.com/api/v4/projects/11/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/11/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/11/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/11/labels"",""events"":""http://gitlab.example.com/api/v4/projects/11/events"",""members"":""http://gitlab.example.com/api/v4/projects/11/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/11/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-19T07:37:22.202Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-18T07:37:22.079Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941AZPz3asxs6r2LcTJtyBt"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the merge_method from the response
        merge_method = latest_response.get(""merge_method"")
        
        # Check if merge_method exists in the response
        if merge_method is None:
            return 0
        
        # Define the allowed values for merge_method
        allowed_merge_methods = [""merge"", ""rebase_merge"", ""ff""]
        
        # Verify if the merge_method in the response is one of the allowed values
        if merge_method in allowed_merge_methods:
            return 1
        else:
            return -1
    except Exception as e:
        # Handle any unexpected errors
        return -1
",merge,1.0,1,0,0,0,1,"range of values, logic"
post-/projects/user/{user_id},BasicProjectDetails,jobs_enabled,jobs_enabled,79,,,parameters,jobs_enabled,(Deprecated)Enable jobs for this project. Use builds_access_level instead,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""user_id"": 1,
  ""tag_list"": [],
  ""suggestion_commit_message"": null,
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""user-project-test"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""user-project-test"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""description"": null,
  ""container_registry_enabled"": true,
  ""avatar"": ""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":11,""description"":null,""name"":""user-project-test"",""name_with_namespace"":""Administrator / user-project-test"",""path"":""user-project-test"",""path_with_namespace"":""root/user-project-test"",""created_at"":""2024-03-18T07:37:22.079Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/user-project-test.git"",""http_url_to_repo"":""http://gitlab.example.com/root/user-project-test.git"",""web_url"":""http://gitlab.example.com/root/user-project-test"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-18T07:37:22.079Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/11"",""issues"":""http://gitlab.example.com/api/v4/projects/11/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/11/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/11/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/11/labels"",""events"":""http://gitlab.example.com/api/v4/projects/11/events"",""members"":""http://gitlab.example.com/api/v4/projects/11/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/11/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-19T07:37:22.202Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-18T07:37:22.079Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941AZPz3asxs6r2LcTJtyBt"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'jobs_enabled' is in the response
        if 'jobs_enabled' not in latest_response:
            return 0  # Attribute does not exist in the response
        
        # Check if 'jobs_enabled' is of type boolean
        if not isinstance(latest_response['jobs_enabled'], bool):
            return -1  # Constraint not satisfied, type mismatch
        
        return 1  # Constraint satisfied
    except Exception as e:
        return -1  # Constraint not satisfied due to an exception
",True,1.0,1,0,0,0,1,"range of values, logic"
post-/projects/user/{user_id},BasicProjectDetails,issues_enabled,issues_enabled,80,,,parameters,issues_enabled,(Deprecated)Enable issues for this project. Use issues_access_level instead,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""user_id"": 1,
  ""tag_list"": [],
  ""suggestion_commit_message"": null,
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""user-project-test"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""user-project-test"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""description"": null,
  ""container_registry_enabled"": true,
  ""avatar"": ""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":11,""description"":null,""name"":""user-project-test"",""name_with_namespace"":""Administrator / user-project-test"",""path"":""user-project-test"",""path_with_namespace"":""root/user-project-test"",""created_at"":""2024-03-18T07:37:22.079Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/user-project-test.git"",""http_url_to_repo"":""http://gitlab.example.com/root/user-project-test.git"",""web_url"":""http://gitlab.example.com/root/user-project-test"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-18T07:37:22.079Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/11"",""issues"":""http://gitlab.example.com/api/v4/projects/11/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/11/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/11/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/11/labels"",""events"":""http://gitlab.example.com/api/v4/projects/11/events"",""members"":""http://gitlab.example.com/api/v4/projects/11/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/11/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-19T07:37:22.202Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-18T07:37:22.079Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941AZPz3asxs6r2LcTJtyBt"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'issues_enabled' is in the response
        if 'issues_enabled' not in latest_response:
            return 0
        
        # Check if 'issues_enabled' is a boolean
        if not isinstance(latest_response['issues_enabled'], bool):
            return -1
        
        # Check if the request_info contains 'issues_enabled' and compare it with the response
        if 'issues_enabled' in request_info:
            if latest_response['issues_enabled'] != request_info['issues_enabled']:
                return -1
        
        return 1
    except Exception as e:
        return -1
",True,1.0,1,0,0,0,1,"range of values, logic"
post-/projects/user/{user_id},BasicProjectDetails,description,description,81,,,parameters,description,Short project description,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""user_id"": 1,
  ""tag_list"": [],
  ""suggestion_commit_message"": null,
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""user-project-test"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""user-project-test"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""description"": null,
  ""container_registry_enabled"": true,
  ""avatar"": ""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":11,""description"":null,""name"":""user-project-test"",""name_with_namespace"":""Administrator / user-project-test"",""path"":""user-project-test"",""path_with_namespace"":""root/user-project-test"",""created_at"":""2024-03-18T07:37:22.079Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/user-project-test.git"",""http_url_to_repo"":""http://gitlab.example.com/root/user-project-test.git"",""web_url"":""http://gitlab.example.com/root/user-project-test"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-18T07:37:22.079Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/11"",""issues"":""http://gitlab.example.com/api/v4/projects/11/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/11/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/11/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/11/labels"",""events"":""http://gitlab.example.com/api/v4/projects/11/events"",""members"":""http://gitlab.example.com/api/v4/projects/11/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/11/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-19T07:37:22.202Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-18T07:37:22.079Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941AZPz3asxs6r2LcTJtyBt"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the description from the response
        response_description = latest_response.get(""description"", None)
        
        # Check if the description exists in the response
        if response_description is None:
            return 0
        
        # Extract the description from the request info
        request_description = request_info.get(""description"", None)
        
        # Check if the description exists in the request info
        if request_description is None:
            return 0
        
        # Verify the description matches the request description
        if response_description == request_description:
            return 1
        else:
            return -1
    except Exception as e:
        # Handle any unexpected errors
        return -1
",GitLab Community Edition,1.0,0,0,1,0,1,logic
post-/projects/user/{user_id},BasicProjectDetails,container_registry_enabled,container_registry_enabled,82,,,parameters,container_registry_enabled,Enable container registry for this project,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""user_id"": 1,
  ""tag_list"": [],
  ""suggestion_commit_message"": null,
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""user-project-test"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""user-project-test"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""description"": null,
  ""container_registry_enabled"": true,
  ""avatar"": ""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":11,""description"":null,""name"":""user-project-test"",""name_with_namespace"":""Administrator / user-project-test"",""path"":""user-project-test"",""path_with_namespace"":""root/user-project-test"",""created_at"":""2024-03-18T07:37:22.079Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/user-project-test.git"",""http_url_to_repo"":""http://gitlab.example.com/root/user-project-test.git"",""web_url"":""http://gitlab.example.com/root/user-project-test"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-18T07:37:22.079Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/11"",""issues"":""http://gitlab.example.com/api/v4/projects/11/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/11/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/11/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/11/labels"",""events"":""http://gitlab.example.com/api/v4/projects/11/events"",""members"":""http://gitlab.example.com/api/v4/projects/11/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/11/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-19T07:37:22.202Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-18T07:37:22.079Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941AZPz3asxs6r2LcTJtyBt"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'container_registry_enabled' exists in both request_info and latest_response
        request_value = request_info.get('container_registry_enabled', None)
        response_value = latest_response.get('container_registry_enabled', None)

        # If the attribute does not exist in the response, return 0 indicating insufficient information
        if response_value is None:
            return 0

        # Ensure the type of the response value is boolean
        if not isinstance(response_value, bool):
            return -1

        # If the attribute exists in the request, check if it matches the response
        if request_value is not None:
            if isinstance(request_value, bool) and request_value == response_value:
                return 1
            else:
                return -1

        # If the attribute does not exist in the request, but exists in the response and is a valid boolean
        return 1

    except Exception as e:
        # In case of any error during verification, consider the constraints not satisfied
        return -1
",False,1.0,1,0,0,0,1,"range of values, logic"
post-/projects/user/{user_id},BasicProjectDetails,autoclose_referenced_issues,autoclose_referenced_issues,84,,,parameters,autoclose_referenced_issues,Set whether auto-closing referenced issues on default branch,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""user_id"": 1,
  ""tag_list"": [],
  ""suggestion_commit_message"": null,
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""user-project-test"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""user-project-test"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""description"": null,
  ""container_registry_enabled"": true,
  ""avatar"": ""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":11,""description"":null,""name"":""user-project-test"",""name_with_namespace"":""Administrator / user-project-test"",""path"":""user-project-test"",""path_with_namespace"":""root/user-project-test"",""created_at"":""2024-03-18T07:37:22.079Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/user-project-test.git"",""http_url_to_repo"":""http://gitlab.example.com/root/user-project-test.git"",""web_url"":""http://gitlab.example.com/root/user-project-test"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-18T07:37:22.079Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/11"",""issues"":""http://gitlab.example.com/api/v4/projects/11/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/11/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/11/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/11/labels"",""events"":""http://gitlab.example.com/api/v4/projects/11/events"",""members"":""http://gitlab.example.com/api/v4/projects/11/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/11/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-19T07:37:22.202Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-18T07:37:22.079Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941AZPz3asxs6r2LcTJtyBt"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'autoclose_referenced_issues' exists in the response
        if 'autoclose_referenced_issues' not in latest_response:
            return 0
        
        # Extract the value from the response
        response_value = latest_response['autoclose_referenced_issues']
        
        # Check if the value is of boolean type
        if isinstance(response_value, bool):
            return 1
        else:
            return -1
    except Exception as e:
        return -1
",True,1.0,1,0,0,0,1,"range of values, logic"
post-/projects/user/{user_id},BasicProjectDetails,auto_devops_enabled,auto_devops_enabled,85,,,parameters,auto_devops_enabled,Enable Auto DevOps for this project,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""user_id"": 1,
  ""tag_list"": [],
  ""suggestion_commit_message"": null,
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""user-project-test"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""user-project-test"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""description"": null,
  ""container_registry_enabled"": true,
  ""avatar"": ""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":11,""description"":null,""name"":""user-project-test"",""name_with_namespace"":""Administrator / user-project-test"",""path"":""user-project-test"",""path_with_namespace"":""root/user-project-test"",""created_at"":""2024-03-18T07:37:22.079Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/user-project-test.git"",""http_url_to_repo"":""http://gitlab.example.com/root/user-project-test.git"",""web_url"":""http://gitlab.example.com/root/user-project-test"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-18T07:37:22.079Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/11"",""issues"":""http://gitlab.example.com/api/v4/projects/11/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/11/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/11/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/11/labels"",""events"":""http://gitlab.example.com/api/v4/projects/11/events"",""members"":""http://gitlab.example.com/api/v4/projects/11/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/11/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-19T07:37:22.202Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-18T07:37:22.079Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941AZPz3asxs6r2LcTJtyBt"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'auto_devops_enabled' is in the response
        if 'auto_devops_enabled' not in latest_response:
            return 0
        
        # Extract the value of 'auto_devops_enabled' from the response
        response_value = latest_response['auto_devops_enabled']
        
        # Check if the value is a boolean
        if not isinstance(response_value, bool):
            return -1
        
        # Extract the value of 'auto_devops_enabled' from the request info
        request_value = request_info.get('auto_devops_enabled')
        
        # Convert request_value to boolean if it's a string
        if isinstance(request_value, str):
            request_value = request_value.lower() == 'true'
        
        # Check if the request value matches the response value
        if response_value == request_value:
            return 1
        else:
            return -1
    except Exception as e:
        return -1
",True,1.0,1,0,0,0,1,"range of values, logic"
post-/projects/user/{user_id},BasicProjectDetails,auto_devops_deploy_strategy,auto_devops_deploy_strategy,86,,,parameters,auto_devops_deploy_strategy,Auto Deploy strategy,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""user_id"": 1,
  ""tag_list"": [],
  ""suggestion_commit_message"": null,
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""user-project-test"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""user-project-test"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""description"": null,
  ""container_registry_enabled"": true,
  ""avatar"": ""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":11,""description"":null,""name"":""user-project-test"",""name_with_namespace"":""Administrator / user-project-test"",""path"":""user-project-test"",""path_with_namespace"":""root/user-project-test"",""created_at"":""2024-03-18T07:37:22.079Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/user-project-test.git"",""http_url_to_repo"":""http://gitlab.example.com/root/user-project-test.git"",""web_url"":""http://gitlab.example.com/root/user-project-test"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-18T07:37:22.079Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/11"",""issues"":""http://gitlab.example.com/api/v4/projects/11/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/11/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/11/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/11/labels"",""events"":""http://gitlab.example.com/api/v4/projects/11/events"",""members"":""http://gitlab.example.com/api/v4/projects/11/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/11/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-19T07:37:22.202Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-18T07:37:22.079Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941AZPz3asxs6r2LcTJtyBt"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the auto_devops_deploy_strategy from the response
        auto_devops_deploy_strategy = latest_response.get(""auto_devops_deploy_strategy"")
        
        # Check if the attribute exists in the response
        if auto_devops_deploy_strategy is None:
            return 0
        
        # Define the allowed values for auto_devops_deploy_strategy
        allowed_values = [""continuous"", ""manual"", ""timed_incremental""]
        
        # Verify if the value of auto_devops_deploy_strategy is within the allowed values
        if auto_devops_deploy_strategy in allowed_values:
            return 1
        else:
            return -1
    except Exception as e:
        # In case of any exception, return -1 indicating the constraint is not satisfied
        return -1
",continuous,1.0,1,0,0,0,1,logic
post-/projects/user/{user_id},BasicProjectDetails,allow_merge_on_skipped_pipeline,allow_merge_on_skipped_pipeline,87,,,parameters,allow_merge_on_skipped_pipeline,Set whether or not merge requests can be merged with skipped jobs,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""user_id"": 1,
  ""tag_list"": [],
  ""suggestion_commit_message"": null,
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""user-project-test"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""user-project-test"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""description"": null,
  ""container_registry_enabled"": true,
  ""avatar"": ""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":11,""description"":null,""name"":""user-project-test"",""name_with_namespace"":""Administrator / user-project-test"",""path"":""user-project-test"",""path_with_namespace"":""root/user-project-test"",""created_at"":""2024-03-18T07:37:22.079Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/user-project-test.git"",""http_url_to_repo"":""http://gitlab.example.com/root/user-project-test.git"",""web_url"":""http://gitlab.example.com/root/user-project-test"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-18T07:37:22.079Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/11"",""issues"":""http://gitlab.example.com/api/v4/projects/11/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/11/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/11/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/11/labels"",""events"":""http://gitlab.example.com/api/v4/projects/11/events"",""members"":""http://gitlab.example.com/api/v4/projects/11/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/11/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-19T07:37:22.202Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-18T07:37:22.079Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941AZPz3asxs6r2LcTJtyBt"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true}",TP,unknown,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'allow_merge_on_skipped_pipeline' exists in the response
        if 'allow_merge_on_skipped_pipeline' not in latest_response:
            return 0
        
        # Extract the value from the response
        response_value = latest_response['allow_merge_on_skipped_pipeline']
        
        # Check if the value is a boolean
        if not isinstance(response_value, bool):
            return -1
        
        # Extract the value from the request info
        request_value = request_info.get('allow_merge_on_skipped_pipeline')
        
        # Check if the request value is a boolean
        if request_value is not None and not isinstance(request_value, bool):
            return -1
        
        # Compare the response value with the request value if provided
        if request_value is not None and response_value != request_value:
            return -1
        
        return 1
    except Exception as e:
        return -1
",False,1.0,1,0,0,0,1,"range of values, logic"
put-/projects/{id},BasicProjectDetails,wiki_enabled,wiki_enabled,88,,,parameters,wiki_enabled,(Deprecated)Enable wiki for this project. Use wiki_access_levelinstead,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""tag_list"": [],
  ""suggestion_commit_message"": null,
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""service_desk_enabled"": false,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""test_project_5"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""test_project_5"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""id"": 5,
  ""description"": null,
  ""default_branch"": ""main"",
  ""container_registry_enabled"": true,
  ""ci_forward_deployment_enabled"": true,
  ""ci_default_git_depth"": 20,
  ""avatar"": ""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":5,""description"":null,""name"":""test_project_5"",""name_with_namespace"":""Administrator / test_project_5"",""path"":""test_project_5"",""path_with_namespace"":""root/test_project_5"",""created_at"":""2024-03-04T09:07:53.324Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/test_project_5.git"",""http_url_to_repo"":""http://gitlab.example.com/root/test_project_5.git"",""web_url"":""http://gitlab.example.com/root/test_project_5"",""readme_url"":null,""forks_count"":1,""avatar_url"":null,""star_count"":1,""last_activity_at"":""2024-03-04T09:07:53.324Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/5"",""issues"":""http://gitlab.example.com/api/v4/projects/5/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/5/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/5/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/5/labels"",""events"":""http://gitlab.example.com/api/v4/projects/5/events"",""members"":""http://gitlab.example.com/api/v4/projects/5/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/5/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-05T09:07:53.350Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-04T09:07:53.324Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941ymtrSxowSdg86ipmkzJL"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[{""group_id"":8,""group_name"":""test"",""group_full_path"":""test"",""group_access_level"":10,""expires_at"":null},{""group_id"":9,""group_name"":""test-1"",""group_full_path"":""test-1"",""group_access_level"":20,""expires_at"":null}],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'wiki_enabled' is present in the response
        if 'wiki_enabled' not in latest_response:
            return 0
        
        # Ensure 'wiki_enabled' is a boolean
        if not isinstance(latest_response['wiki_enabled'], bool):
            return -1
        
        # Check if the request_info contains 'wiki_enabled' and validate it
        if 'wiki_enabled' in request_info:
            if latest_response['wiki_enabled'] != request_info['wiki_enabled']:
                return -1
        
        return 1
    except Exception as e:
        return -1
",True,1.0,1,0,0,0,1,"range of values, logic"
put-/projects/{id},BasicProjectDetails,visibility,visibility,89,,,parameters,visibility,See project visibility level,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""tag_list"": [],
  ""suggestion_commit_message"": null,
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""service_desk_enabled"": false,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""test_project_5"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""test_project_5"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""id"": 5,
  ""description"": null,
  ""default_branch"": ""main"",
  ""container_registry_enabled"": true,
  ""ci_forward_deployment_enabled"": true,
  ""ci_default_git_depth"": 20,
  ""avatar"": ""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":5,""description"":null,""name"":""test_project_5"",""name_with_namespace"":""Administrator / test_project_5"",""path"":""test_project_5"",""path_with_namespace"":""root/test_project_5"",""created_at"":""2024-03-04T09:07:53.324Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/test_project_5.git"",""http_url_to_repo"":""http://gitlab.example.com/root/test_project_5.git"",""web_url"":""http://gitlab.example.com/root/test_project_5"",""readme_url"":null,""forks_count"":1,""avatar_url"":null,""star_count"":1,""last_activity_at"":""2024-03-04T09:07:53.324Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/5"",""issues"":""http://gitlab.example.com/api/v4/projects/5/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/5/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/5/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/5/labels"",""events"":""http://gitlab.example.com/api/v4/projects/5/events"",""members"":""http://gitlab.example.com/api/v4/projects/5/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/5/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-05T09:07:53.350Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-04T09:07:53.324Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941ymtrSxowSdg86ipmkzJL"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[{""group_id"":8,""group_name"":""test"",""group_full_path"":""test"",""group_access_level"":10,""expires_at"":null},{""group_id"":9,""group_name"":""test-1"",""group_full_path"":""test-1"",""group_access_level"":20,""expires_at"":null}],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the visibility attribute from the response
        visibility = latest_response.get(""visibility"")
        
        # Check if the visibility attribute exists in the response
        if visibility is None:
            return 0
        
        # Define the allowed visibility values
        allowed_values = [""private"", ""internal"", ""public""]
        
        # Verify if the visibility value is within the allowed values
        if visibility in allowed_values:
            return 1
        else:
            return -1
    except Exception as e:
        return -1
",private,1.0,1,0,0,0,1,"range of values, logic"
put-/projects/{id},BasicProjectDetails,tag_list,tag_list,90,,,parameters,tag_list,"The list of tags for a project; put array of tags, that should be finally assigned to a project",c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""tag_list"": [],
  ""suggestion_commit_message"": null,
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""service_desk_enabled"": false,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""test_project_5"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""test_project_5"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""id"": 5,
  ""description"": null,
  ""default_branch"": ""main"",
  ""container_registry_enabled"": true,
  ""ci_forward_deployment_enabled"": true,
  ""ci_default_git_depth"": 20,
  ""avatar"": ""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":5,""description"":null,""name"":""test_project_5"",""name_with_namespace"":""Administrator / test_project_5"",""path"":""test_project_5"",""path_with_namespace"":""root/test_project_5"",""created_at"":""2024-03-04T09:07:53.324Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/test_project_5.git"",""http_url_to_repo"":""http://gitlab.example.com/root/test_project_5.git"",""web_url"":""http://gitlab.example.com/root/test_project_5"",""readme_url"":null,""forks_count"":1,""avatar_url"":null,""star_count"":1,""last_activity_at"":""2024-03-04T09:07:53.324Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/5"",""issues"":""http://gitlab.example.com/api/v4/projects/5/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/5/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/5/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/5/labels"",""events"":""http://gitlab.example.com/api/v4/projects/5/events"",""members"":""http://gitlab.example.com/api/v4/projects/5/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/5/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-05T09:07:53.350Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-04T09:07:53.324Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941ymtrSxowSdg86ipmkzJL"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[{""group_id"":8,""group_name"":""test"",""group_full_path"":""test"",""group_access_level"":10,""expires_at"":null},{""group_id"":9,""group_name"":""test-1"",""group_full_path"":""test-1"",""group_access_level"":20,""expires_at"":null}],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the tag_list from the response
        response_tag_list = latest_response.get('tag_list', None)
        
        # Check if tag_list exists in the response
        if response_tag_list is None:
            return 0
        
        # Ensure tag_list is an array
        if not isinstance(response_tag_list, list):
            return -1
        
        # Ensure each item in tag_list is a string
        for tag in response_tag_list:
            if not isinstance(tag, string):
                return -1
        
        # Extract the tag_list from the request info
        request_tag_list = request_info.get('tag_list', None)
        
        # Check if tag_list exists in the request info
        if request_tag_list is None:
            return 0
        
        # Ensure the request tag_list is an array
        if not isinstance(request_tag_list, list):
            return -1
        
        # Ensure each item in request tag_list is a string
        for tag in request_tag_list:
            if not isinstance(tag, str):
                return -1
        
        # Compare the request and response tag_list
        if set(response_tag_list) == set(request_tag_list):
            return 1
        else:
            return -1
    except Exception as e:
        return -1
","['example', 'disapora client']",1.0,1,0,0,0,1,logic
put-/projects/{id},BasicProjectDetails,snippets_enabled,snippets_enabled,92,,,parameters,snippets_enabled,(Deprecated)Enable snippets for this project. Use snippets_access_level instead,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""tag_list"": [],
  ""suggestion_commit_message"": null,
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""service_desk_enabled"": false,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""test_project_5"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""test_project_5"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""id"": 5,
  ""description"": null,
  ""default_branch"": ""main"",
  ""container_registry_enabled"": true,
  ""ci_forward_deployment_enabled"": true,
  ""ci_default_git_depth"": 20,
  ""avatar"": ""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":5,""description"":null,""name"":""test_project_5"",""name_with_namespace"":""Administrator / test_project_5"",""path"":""test_project_5"",""path_with_namespace"":""root/test_project_5"",""created_at"":""2024-03-04T09:07:53.324Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/test_project_5.git"",""http_url_to_repo"":""http://gitlab.example.com/root/test_project_5.git"",""web_url"":""http://gitlab.example.com/root/test_project_5"",""readme_url"":null,""forks_count"":1,""avatar_url"":null,""star_count"":1,""last_activity_at"":""2024-03-04T09:07:53.324Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/5"",""issues"":""http://gitlab.example.com/api/v4/projects/5/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/5/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/5/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/5/labels"",""events"":""http://gitlab.example.com/api/v4/projects/5/events"",""members"":""http://gitlab.example.com/api/v4/projects/5/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/5/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-05T09:07:53.350Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-04T09:07:53.324Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941ymtrSxowSdg86ipmkzJL"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[{""group_id"":8,""group_name"":""test"",""group_full_path"":""test"",""group_access_level"":10,""expires_at"":null},{""group_id"":9,""group_name"":""test-1"",""group_full_path"":""test-1"",""group_access_level"":20,""expires_at"":null}],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'snippets_enabled' is in the response
        if 'snippets_enabled' not in latest_response:
            return 0
        
        # Ensure 'snippets_enabled' is a boolean
        if not isinstance(latest_response['snippets_enabled'], bool):
            return -1
        
        # If 'snippets_enabled' is present and is a boolean, the constraint is satisfied
        return 1
    except Exception as e:
        # In case of any unexpected error, return -1
        return -1
",False,1.0,1,0,0,0,1,"range of values, logic"
put-/projects/{id},BasicProjectDetails,shared_runners_enabled,shared_runners_enabled,93,,,parameters,shared_runners_enabled,Enable shared runners for this project,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""tag_list"": [],
  ""suggestion_commit_message"": null,
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""service_desk_enabled"": false,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""test_project_5"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""test_project_5"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""id"": 5,
  ""description"": null,
  ""default_branch"": ""main"",
  ""container_registry_enabled"": true,
  ""ci_forward_deployment_enabled"": true,
  ""ci_default_git_depth"": 20,
  ""avatar"": ""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":5,""description"":null,""name"":""test_project_5"",""name_with_namespace"":""Administrator / test_project_5"",""path"":""test_project_5"",""path_with_namespace"":""root/test_project_5"",""created_at"":""2024-03-04T09:07:53.324Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/test_project_5.git"",""http_url_to_repo"":""http://gitlab.example.com/root/test_project_5.git"",""web_url"":""http://gitlab.example.com/root/test_project_5"",""readme_url"":null,""forks_count"":1,""avatar_url"":null,""star_count"":1,""last_activity_at"":""2024-03-04T09:07:53.324Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/5"",""issues"":""http://gitlab.example.com/api/v4/projects/5/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/5/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/5/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/5/labels"",""events"":""http://gitlab.example.com/api/v4/projects/5/events"",""members"":""http://gitlab.example.com/api/v4/projects/5/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/5/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-05T09:07:53.350Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-04T09:07:53.324Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941ymtrSxowSdg86ipmkzJL"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[{""group_id"":8,""group_name"":""test"",""group_full_path"":""test"",""group_access_level"":10,""expires_at"":null},{""group_id"":9,""group_name"":""test-1"",""group_full_path"":""test-1"",""group_access_level"":20,""expires_at"":null}],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'shared_runners_enabled' is in the response
        if 'shared_runners_enabled' not in latest_response:
            return 0  # Insufficient information to verify the constraint
        
        # Extract the value of 'shared_runners_enabled' from the response
        shared_runners_enabled_response = latest_response['shared_runners_enabled']
        
        # Check if the value is a boolean
        if not isinstance(shared_runners_enabled_response, bool):
            return -1  # Constraint not satisfied
        
        # Extract the value of 'shared_runners_enabled' from the request info
        shared_runners_enabled_request = request_info.get('shared_runners_enabled')
        
        # Check if the request parameter is provided and is a boolean
        if shared_runners_enabled_request is not None:
            if not isinstance(shared_runners_enabled_request, bool):
                return -1  # Constraint not satisfied
            
            # Verify if the request and response values match
            if shared_runners_enabled_response != shared_runners_enabled_request:
                return -1  # Constraint not satisfied
        
        return 1  # Constraint satisfied
    except Exception as e:
        return -1  # Constraint not satisfied due to an error
",True,1.0,1,0,0,0,1,"range of values, logic"
put-/projects/{id},BasicProjectDetails,service_desk_enabled,service_desk_enabled,94,,,parameters,service_desk_enabled,Enable or disable Service Desk feature,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""tag_list"": [],
  ""suggestion_commit_message"": null,
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""service_desk_enabled"": false,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""test_project_5"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""test_project_5"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""id"": 5,
  ""description"": null,
  ""default_branch"": ""main"",
  ""container_registry_enabled"": true,
  ""ci_forward_deployment_enabled"": true,
  ""ci_default_git_depth"": 20,
  ""avatar"": ""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":5,""description"":null,""name"":""test_project_5"",""name_with_namespace"":""Administrator / test_project_5"",""path"":""test_project_5"",""path_with_namespace"":""root/test_project_5"",""created_at"":""2024-03-04T09:07:53.324Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/test_project_5.git"",""http_url_to_repo"":""http://gitlab.example.com/root/test_project_5.git"",""web_url"":""http://gitlab.example.com/root/test_project_5"",""readme_url"":null,""forks_count"":1,""avatar_url"":null,""star_count"":1,""last_activity_at"":""2024-03-04T09:07:53.324Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/5"",""issues"":""http://gitlab.example.com/api/v4/projects/5/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/5/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/5/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/5/labels"",""events"":""http://gitlab.example.com/api/v4/projects/5/events"",""members"":""http://gitlab.example.com/api/v4/projects/5/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/5/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-05T09:07:53.350Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-04T09:07:53.324Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941ymtrSxowSdg86ipmkzJL"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[{""group_id"":8,""group_name"":""test"",""group_full_path"":""test"",""group_access_level"":10,""expires_at"":null},{""group_id"":9,""group_name"":""test-1"",""group_full_path"":""test-1"",""group_access_level"":20,""expires_at"":null}],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'service_desk_enabled' exists in both request_info and latest_response
        if 'service_desk_enabled' in request_info and 'service_desk_enabled' in latest_response:
            request_value = request_info['service_desk_enabled']
            response_value = latest_response['service_desk_enabled']

            # Ensure both values are of type boolean
            if isinstance(request_value, bool) and isinstance(response_value, bool):
                # Verify that the response matches the request
                if request_value == response_value:
                    return 1
                else:
                    return -1
            else:
                return -1
        else:
            # If the attribute does not exist in either the request or response, return 0
            return 0
    except Exception as e:
        # In case of any error during verification, consider it as not satisfied
        return -1
",False,1.0,1,0,0,0,1,"range of values, logic"
put-/projects/{id},BasicProjectDetails,resolve_outdated_diff_discussions,resolve_outdated_diff_discussions,95,,,parameters,resolve_outdated_diff_discussions,Automatically resolve merge request diffs discussions on lines changed with a push,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""tag_list"": [],
  ""suggestion_commit_message"": null,
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""service_desk_enabled"": false,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""test_project_5"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""test_project_5"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""id"": 5,
  ""description"": null,
  ""default_branch"": ""main"",
  ""container_registry_enabled"": true,
  ""ci_forward_deployment_enabled"": true,
  ""ci_default_git_depth"": 20,
  ""avatar"": ""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":5,""description"":null,""name"":""test_project_5"",""name_with_namespace"":""Administrator / test_project_5"",""path"":""test_project_5"",""path_with_namespace"":""root/test_project_5"",""created_at"":""2024-03-04T09:07:53.324Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/test_project_5.git"",""http_url_to_repo"":""http://gitlab.example.com/root/test_project_5.git"",""web_url"":""http://gitlab.example.com/root/test_project_5"",""readme_url"":null,""forks_count"":1,""avatar_url"":null,""star_count"":1,""last_activity_at"":""2024-03-04T09:07:53.324Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/5"",""issues"":""http://gitlab.example.com/api/v4/projects/5/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/5/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/5/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/5/labels"",""events"":""http://gitlab.example.com/api/v4/projects/5/events"",""members"":""http://gitlab.example.com/api/v4/projects/5/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/5/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-05T09:07:53.350Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-04T09:07:53.324Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941ymtrSxowSdg86ipmkzJL"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[{""group_id"":8,""group_name"":""test"",""group_full_path"":""test"",""group_access_level"":10,""expires_at"":null},{""group_id"":9,""group_name"":""test-1"",""group_full_path"":""test-1"",""group_access_level"":20,""expires_at"":null}],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if the 'resolve_outdated_diff_discussions' attribute exists in the response
        if 'resolve_outdated_diff_discussions' not in latest_response:
            return 0
        
        # Extract the value of 'resolve_outdated_diff_discussions' from the response
        response_value = latest_response['resolve_outdated_diff_discussions']
        
        # Ensure the value is of type boolean
        if isinstance(response_value, bool):
            return 1
        else:
            return -1
    except Exception as e:
        return -1
",False,1.0,1,0,0,0,1,logic
put-/projects/{id},BasicProjectDetails,request_access_enabled,request_access_enabled,96,,,parameters,request_access_enabled,Allow users to request member access,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""tag_list"": [],
  ""suggestion_commit_message"": null,
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""service_desk_enabled"": false,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""test_project_5"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""test_project_5"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""id"": 5,
  ""description"": null,
  ""default_branch"": ""main"",
  ""container_registry_enabled"": true,
  ""ci_forward_deployment_enabled"": true,
  ""ci_default_git_depth"": 20,
  ""avatar"": ""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":5,""description"":null,""name"":""test_project_5"",""name_with_namespace"":""Administrator / test_project_5"",""path"":""test_project_5"",""path_with_namespace"":""root/test_project_5"",""created_at"":""2024-03-04T09:07:53.324Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/test_project_5.git"",""http_url_to_repo"":""http://gitlab.example.com/root/test_project_5.git"",""web_url"":""http://gitlab.example.com/root/test_project_5"",""readme_url"":null,""forks_count"":1,""avatar_url"":null,""star_count"":1,""last_activity_at"":""2024-03-04T09:07:53.324Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/5"",""issues"":""http://gitlab.example.com/api/v4/projects/5/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/5/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/5/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/5/labels"",""events"":""http://gitlab.example.com/api/v4/projects/5/events"",""members"":""http://gitlab.example.com/api/v4/projects/5/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/5/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-05T09:07:53.350Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-04T09:07:53.324Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941ymtrSxowSdg86ipmkzJL"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[{""group_id"":8,""group_name"":""test"",""group_full_path"":""test"",""group_access_level"":10,""expires_at"":null},{""group_id"":9,""group_name"":""test-1"",""group_full_path"":""test-1"",""group_access_level"":20,""expires_at"":null}],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'request_access_enabled' exists in request_info and is a boolean
        if 'request_access_enabled' in request_info:
            if not isinstance(request_info['request_access_enabled'], bool):
                return -1  # Request info has the key but not boolean type

        # Check if 'request_access_enabled' exists in latest_response and is a boolean
        if 'request_access_enabled' in latest_response:
            if not isinstance(latest_response['request_access_enabled'], bool):
                return -1  # Response has the key but not boolean type
        else:
            return 0  # Key does not exist in the response

        # If both exist and are booleans, check if they match
        if 'request_access_enabled' in request_info and 'request_access_enabled' in latest_response:
            if request_info['request_access_enabled'] == latest_response['request_access_enabled']:
                return 1  # Both values match
            else:
                return -1  # Both values do not match

        return 1  # All checks passed, and constraints are satisfied
    except Exception as e:
        return -1  # Any exception implies a failure in constraint satisfaction
",False,1.0,1,0,0,0,1,logic
put-/projects/{id},BasicProjectDetails,repository_storage,repository_storage,97,,,parameters,repository_storage,Which storage shard the repository is on.(admins only),c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""tag_list"": [],
  ""suggestion_commit_message"": null,
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""service_desk_enabled"": false,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""test_project_5"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""test_project_5"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""id"": 5,
  ""description"": null,
  ""default_branch"": ""main"",
  ""container_registry_enabled"": true,
  ""ci_forward_deployment_enabled"": true,
  ""ci_default_git_depth"": 20,
  ""avatar"": ""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":5,""description"":null,""name"":""test_project_5"",""name_with_namespace"":""Administrator / test_project_5"",""path"":""test_project_5"",""path_with_namespace"":""root/test_project_5"",""created_at"":""2024-03-04T09:07:53.324Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/test_project_5.git"",""http_url_to_repo"":""http://gitlab.example.com/root/test_project_5.git"",""web_url"":""http://gitlab.example.com/root/test_project_5"",""readme_url"":null,""forks_count"":1,""avatar_url"":null,""star_count"":1,""last_activity_at"":""2024-03-04T09:07:53.324Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/5"",""issues"":""http://gitlab.example.com/api/v4/projects/5/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/5/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/5/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/5/labels"",""events"":""http://gitlab.example.com/api/v4/projects/5/events"",""members"":""http://gitlab.example.com/api/v4/projects/5/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/5/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-05T09:07:53.350Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-04T09:07:53.324Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941ymtrSxowSdg86ipmkzJL"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[{""group_id"":8,""group_name"":""test"",""group_full_path"":""test"",""group_access_level"":10,""expires_at"":null},{""group_id"":9,""group_name"":""test-1"",""group_full_path"":""test-1"",""group_access_level"":20,""expires_at"":null}],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the repository_storage from the request_info
        expected_repository_storage = request_info.get(""repository_storage"")
        
        # Check if the repository_storage exists in the latest_response
        if ""repository_storage"" not in latest_response:
            return 0
        
        # Extract the repository_storage from the latest_response
        actual_repository_storage = latest_response[""repository_storage""]
        
        # Verify if the actual repository_storage matches the expected repository_storage
        if actual_repository_storage == expected_repository_storage:
            return 1
        else:
            return -1
    except Exception as e:
        # In case of any exception, return -1 indicating the constraint is not satisfied
        return -1
",default,1.0,1,0,0,0,1,logic
put-/projects/{id},BasicProjectDetails,remove_source_branch_after_merge,remove_source_branch_after_merge,98,,,parameters,remove_source_branch_after_merge,Enable Delete source branch option by default for all new merge requests,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""tag_list"": [],
  ""suggestion_commit_message"": null,
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""service_desk_enabled"": false,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""test_project_5"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""test_project_5"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""id"": 5,
  ""description"": null,
  ""default_branch"": ""main"",
  ""container_registry_enabled"": true,
  ""ci_forward_deployment_enabled"": true,
  ""ci_default_git_depth"": 20,
  ""avatar"": ""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":5,""description"":null,""name"":""test_project_5"",""name_with_namespace"":""Administrator / test_project_5"",""path"":""test_project_5"",""path_with_namespace"":""root/test_project_5"",""created_at"":""2024-03-04T09:07:53.324Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/test_project_5.git"",""http_url_to_repo"":""http://gitlab.example.com/root/test_project_5.git"",""web_url"":""http://gitlab.example.com/root/test_project_5"",""readme_url"":null,""forks_count"":1,""avatar_url"":null,""star_count"":1,""last_activity_at"":""2024-03-04T09:07:53.324Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/5"",""issues"":""http://gitlab.example.com/api/v4/projects/5/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/5/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/5/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/5/labels"",""events"":""http://gitlab.example.com/api/v4/projects/5/events"",""members"":""http://gitlab.example.com/api/v4/projects/5/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/5/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-05T09:07:53.350Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-04T09:07:53.324Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941ymtrSxowSdg86ipmkzJL"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[{""group_id"":8,""group_name"":""test"",""group_full_path"":""test"",""group_access_level"":10,""expires_at"":null},{""group_id"":9,""group_name"":""test-1"",""group_full_path"":""test-1"",""group_access_level"":20,""expires_at"":null}],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if the attribute exists in the response
        if 'remove_source_branch_after_merge' not in latest_response:
            return 0
        
        # Check if the attribute is of type boolean
        if isinstance(latest_response['remove_source_branch_after_merge'], bool):
            return 1
        else:
            return -1
    except Exception as e:
        return -1
",False,1.0,1,0,0,0,1,"range of values, logic"
put-/projects/{id},BasicProjectDetails,path,path,99,,,parameters,path,"Repository name for new project.Either path or name is required, not both. Generated based on name if not provided (generated as lowercase with dashes)",c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""tag_list"": [],
  ""suggestion_commit_message"": null,
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""service_desk_enabled"": false,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""test_project_5"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""test_project_5"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""id"": 5,
  ""description"": null,
  ""default_branch"": ""main"",
  ""container_registry_enabled"": true,
  ""ci_forward_deployment_enabled"": true,
  ""ci_default_git_depth"": 20,
  ""avatar"": ""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":5,""description"":null,""name"":""test_project_5"",""name_with_namespace"":""Administrator / test_project_5"",""path"":""test_project_5"",""path_with_namespace"":""root/test_project_5"",""created_at"":""2024-03-04T09:07:53.324Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/test_project_5.git"",""http_url_to_repo"":""http://gitlab.example.com/root/test_project_5.git"",""web_url"":""http://gitlab.example.com/root/test_project_5"",""readme_url"":null,""forks_count"":1,""avatar_url"":null,""star_count"":1,""last_activity_at"":""2024-03-04T09:07:53.324Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/5"",""issues"":""http://gitlab.example.com/api/v4/projects/5/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/5/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/5/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/5/labels"",""events"":""http://gitlab.example.com/api/v4/projects/5/events"",""members"":""http://gitlab.example.com/api/v4/projects/5/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/5/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-05T09:07:53.350Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-04T09:07:53.324Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941ymtrSxowSdg86ipmkzJL"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[{""group_id"":8,""group_name"":""test"",""group_full_path"":""test"",""group_access_level"":10,""expires_at"":null},{""group_id"":9,""group_name"":""test-1"",""group_full_path"":""test-1"",""group_access_level"":20,""expires_at"":null}],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'path' exists in the response
        if 'path' not in latest_response:
            return 0
        
        response_path = latest_response['path']
        
        # Check if 'path' is a string
        if not isinstance(response_path, str):
            return -1
        
        # Check if 'path' is provided in the request_info
        if 'path' in request_info:
            request_path = request_info['path']
            if request_path != response_path:
                return -1
        else:
            # If 'path' is not provided, it should be generated based on 'name'
            if 'name' in request_info:
                generated_path = request_info['name'].lower().replace(' ', '-')
                if generated_path != response_path:
                    return -1
            else:
                return 0
        
        return 1
    except Exception as e:
        return -1
",diaspora-client,1.0,1,0,0,0,1,inter-parameter dependency
put-/projects/{id},BasicProjectDetails,packages_enabled,packages_enabled,101,,,parameters,packages_enabled,Enable or disable packages repository feature,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""tag_list"": [],
  ""suggestion_commit_message"": null,
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""service_desk_enabled"": false,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""test_project_5"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""test_project_5"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""id"": 5,
  ""description"": null,
  ""default_branch"": ""main"",
  ""container_registry_enabled"": true,
  ""ci_forward_deployment_enabled"": true,
  ""ci_default_git_depth"": 20,
  ""avatar"": ""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":5,""description"":null,""name"":""test_project_5"",""name_with_namespace"":""Administrator / test_project_5"",""path"":""test_project_5"",""path_with_namespace"":""root/test_project_5"",""created_at"":""2024-03-04T09:07:53.324Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/test_project_5.git"",""http_url_to_repo"":""http://gitlab.example.com/root/test_project_5.git"",""web_url"":""http://gitlab.example.com/root/test_project_5"",""readme_url"":null,""forks_count"":1,""avatar_url"":null,""star_count"":1,""last_activity_at"":""2024-03-04T09:07:53.324Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/5"",""issues"":""http://gitlab.example.com/api/v4/projects/5/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/5/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/5/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/5/labels"",""events"":""http://gitlab.example.com/api/v4/projects/5/events"",""members"":""http://gitlab.example.com/api/v4/projects/5/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/5/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-05T09:07:53.350Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-04T09:07:53.324Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941ymtrSxowSdg86ipmkzJL"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[{""group_id"":8,""group_name"":""test"",""group_full_path"":""test"",""group_access_level"":10,""expires_at"":null},{""group_id"":9,""group_name"":""test-1"",""group_full_path"":""test-1"",""group_access_level"":20,""expires_at"":null}],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'packages_enabled' exists in request_info and is a boolean
        if 'packages_enabled' in request_info:
            if not isinstance(request_info['packages_enabled'], bool):
                return -1
        
        # Check if 'packages_enabled' exists in latest_response and is a boolean
        if 'packages_enabled' in latest_response:
            if not isinstance(latest_response['packages_enabled'], bool):
                return -1
        else:
            # 'packages_enabled' does not exist in the response
            return 0
        
        # If 'packages_enabled' exists in both request_info and latest_response, compare them
        if 'packages_enabled' in request_info:
            if request_info['packages_enabled'] != latest_response['packages_enabled']:
                return -1
        
        # If all checks pass, the constraint is satisfied
        return 1
    except Exception as e:
        # In case of any exception, consider the verification failed
        return -1
",True,1.0,1,0,0,0,1,range of values
put-/projects/{id},BasicProjectDetails,only_allow_merge_if_pipeline_succeeds,only_allow_merge_if_pipeline_succeeds,102,,,parameters,only_allow_merge_if_pipeline_succeeds,Set whether merge requests can only be merged with successful jobs,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""tag_list"": [],
  ""suggestion_commit_message"": null,
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""service_desk_enabled"": false,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""test_project_5"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""test_project_5"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""id"": 5,
  ""description"": null,
  ""default_branch"": ""main"",
  ""container_registry_enabled"": true,
  ""ci_forward_deployment_enabled"": true,
  ""ci_default_git_depth"": 20,
  ""avatar"": ""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":5,""description"":null,""name"":""test_project_5"",""name_with_namespace"":""Administrator / test_project_5"",""path"":""test_project_5"",""path_with_namespace"":""root/test_project_5"",""created_at"":""2024-03-04T09:07:53.324Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/test_project_5.git"",""http_url_to_repo"":""http://gitlab.example.com/root/test_project_5.git"",""web_url"":""http://gitlab.example.com/root/test_project_5"",""readme_url"":null,""forks_count"":1,""avatar_url"":null,""star_count"":1,""last_activity_at"":""2024-03-04T09:07:53.324Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/5"",""issues"":""http://gitlab.example.com/api/v4/projects/5/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/5/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/5/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/5/labels"",""events"":""http://gitlab.example.com/api/v4/projects/5/events"",""members"":""http://gitlab.example.com/api/v4/projects/5/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/5/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-05T09:07:53.350Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-04T09:07:53.324Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941ymtrSxowSdg86ipmkzJL"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[{""group_id"":8,""group_name"":""test"",""group_full_path"":""test"",""group_access_level"":10,""expires_at"":null},{""group_id"":9,""group_name"":""test-1"",""group_full_path"":""test-1"",""group_access_level"":20,""expires_at"":null}],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if the attribute exists in the response
        if 'only_allow_merge_if_pipeline_succeeds' not in latest_response:
            return 0
        
        # Extract the value from the response
        response_value = latest_response['only_allow_merge_if_pipeline_succeeds']
        
        # Check if the value is a boolean
        if not isinstance(response_value, bool):
            return -1
        
        # Extract the expected value from the request info
        if 'only_allow_merge_if_pipeline_succeeds' not in request_info:
            return 0
        
        expected_value = request_info['only_allow_merge_if_pipeline_succeeds']
        
        # Check if the expected value is a boolean
        if not isinstance(expected_value, bool):
            return -1
        
        # Verify if the response value matches the expected value
        if response_value == expected_value:
            return 1
        else:
            return -1
    except Exception as e:
        return -1
",False,1.0,1,0,0,0,1,"range of values, logic"
put-/projects/{id},BasicProjectDetails,only_allow_merge_if_all_discussions_are_resolved,only_allow_merge_if_all_discussions_are_resolved,103,,,parameters,only_allow_merge_if_all_discussions_are_resolved,Set whether merge requests can only be merged when all the discussions are resolved,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""tag_list"": [],
  ""suggestion_commit_message"": null,
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""service_desk_enabled"": false,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""test_project_5"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""test_project_5"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""id"": 5,
  ""description"": null,
  ""default_branch"": ""main"",
  ""container_registry_enabled"": true,
  ""ci_forward_deployment_enabled"": true,
  ""ci_default_git_depth"": 20,
  ""avatar"": ""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":5,""description"":null,""name"":""test_project_5"",""name_with_namespace"":""Administrator / test_project_5"",""path"":""test_project_5"",""path_with_namespace"":""root/test_project_5"",""created_at"":""2024-03-04T09:07:53.324Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/test_project_5.git"",""http_url_to_repo"":""http://gitlab.example.com/root/test_project_5.git"",""web_url"":""http://gitlab.example.com/root/test_project_5"",""readme_url"":null,""forks_count"":1,""avatar_url"":null,""star_count"":1,""last_activity_at"":""2024-03-04T09:07:53.324Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/5"",""issues"":""http://gitlab.example.com/api/v4/projects/5/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/5/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/5/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/5/labels"",""events"":""http://gitlab.example.com/api/v4/projects/5/events"",""members"":""http://gitlab.example.com/api/v4/projects/5/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/5/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-05T09:07:53.350Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-04T09:07:53.324Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941ymtrSxowSdg86ipmkzJL"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[{""group_id"":8,""group_name"":""test"",""group_full_path"":""test"",""group_access_level"":10,""expires_at"":null},{""group_id"":9,""group_name"":""test-1"",""group_full_path"":""test-1"",""group_access_level"":20,""expires_at"":null}],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if the attribute exists in the response
        if 'only_allow_merge_if_all_discussions_are_resolved' not in latest_response:
            return 0
        
        # Extract the value from the response
        response_value = latest_response['only_allow_merge_if_all_discussions_are_resolved']
        
        # Ensure the value is a boolean
        if not isinstance(response_value, bool):
            return -1
        
        # Extract the value from the request info
        request_value = request_info.get('only_allow_merge_if_all_discussions_are_resolved')
        
        # Ensure the request value is a boolean
        if request_value is not None and not isinstance(request_value, bool):
            return -1
        
        # Compare the values
        if request_value is not None and response_value != request_value:
            return -1
        
        return 1
    except Exception as e:
        return -1
",False,1.0,1,0,0,0,1,"range of values, logic"
put-/projects/{id},BasicProjectDetails,name,name,104,,,parameters,name,The name of the new project. Equals path if not provided,x,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""tag_list"": [],
  ""suggestion_commit_message"": null,
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""service_desk_enabled"": false,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""test_project_5"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""test_project_5"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""id"": 5,
  ""description"": null,
  ""default_branch"": ""main"",
  ""container_registry_enabled"": true,
  ""ci_forward_deployment_enabled"": true,
  ""ci_default_git_depth"": 20,
  ""avatar"": ""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":5,""description"":null,""name"":""test_project_5"",""name_with_namespace"":""Administrator / test_project_5"",""path"":""test_project_5"",""path_with_namespace"":""root/test_project_5"",""created_at"":""2024-03-04T09:07:53.324Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/test_project_5.git"",""http_url_to_repo"":""http://gitlab.example.com/root/test_project_5.git"",""web_url"":""http://gitlab.example.com/root/test_project_5"",""readme_url"":null,""forks_count"":1,""avatar_url"":null,""star_count"":1,""last_activity_at"":""2024-03-04T09:07:53.324Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/5"",""issues"":""http://gitlab.example.com/api/v4/projects/5/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/5/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/5/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/5/labels"",""events"":""http://gitlab.example.com/api/v4/projects/5/events"",""members"":""http://gitlab.example.com/api/v4/projects/5/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/5/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-05T09:07:53.350Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-04T09:07:53.324Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941ymtrSxowSdg86ipmkzJL"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[{""group_id"":8,""group_name"":""test"",""group_full_path"":""test"",""group_access_level"":10,""expires_at"":null},{""group_id"":9,""group_name"":""test-1"",""group_full_path"":""test-1"",""group_access_level"":20,""expires_at"":null}],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the 'name' from the response
        response_name = latest_response.get(""name"")
        
        # Check if 'name' exists in the response
        if response_name is None:
            return 0
        
        # Extract the 'name' from the request info
        request_name = request_info.get(""name"")
        
        # If 'name' is not provided in the request, it should equal the path (assuming 'path' is a key in request_info)
        if request_name is None:
            request_name = request_info.get(""path"")
        
        # Verify the constraint
        if response_name == request_name:
            return 1
        else:
            return -1
    except Exception as e:
        # If any error occurs during the verification process, return -1
        return -1
",Diaspora Client,1.0,1,0,0,0,1,logic
put-/projects/{id},BasicProjectDetails,merge_requests_enabled,merge_requests_enabled,105,,,parameters,merge_requests_enabled,(Deprecated)Enable merge requests for this project. Use merge_requests_access_level instead,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""tag_list"": [],
  ""suggestion_commit_message"": null,
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""service_desk_enabled"": false,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""test_project_5"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""test_project_5"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""id"": 5,
  ""description"": null,
  ""default_branch"": ""main"",
  ""container_registry_enabled"": true,
  ""ci_forward_deployment_enabled"": true,
  ""ci_default_git_depth"": 20,
  ""avatar"": ""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":5,""description"":null,""name"":""test_project_5"",""name_with_namespace"":""Administrator / test_project_5"",""path"":""test_project_5"",""path_with_namespace"":""root/test_project_5"",""created_at"":""2024-03-04T09:07:53.324Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/test_project_5.git"",""http_url_to_repo"":""http://gitlab.example.com/root/test_project_5.git"",""web_url"":""http://gitlab.example.com/root/test_project_5"",""readme_url"":null,""forks_count"":1,""avatar_url"":null,""star_count"":1,""last_activity_at"":""2024-03-04T09:07:53.324Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/5"",""issues"":""http://gitlab.example.com/api/v4/projects/5/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/5/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/5/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/5/labels"",""events"":""http://gitlab.example.com/api/v4/projects/5/events"",""members"":""http://gitlab.example.com/api/v4/projects/5/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/5/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-05T09:07:53.350Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-04T09:07:53.324Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941ymtrSxowSdg86ipmkzJL"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[{""group_id"":8,""group_name"":""test"",""group_full_path"":""test"",""group_access_level"":10,""expires_at"":null},{""group_id"":9,""group_name"":""test-1"",""group_full_path"":""test-1"",""group_access_level"":20,""expires_at"":null}],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'merge_requests_enabled' is in the response
        if 'merge_requests_enabled' not in latest_response:
            return 0
        
        # Check if 'merge_requests_enabled' is a boolean
        if not isinstance(latest_response['merge_requests_enabled'], bool):
            return -1
        
        # If the request_info contains 'merge_requests_enabled', verify it matches the response
        if 'merge_requests_enabled' in request_info:
            if latest_response['merge_requests_enabled'] != request_info['merge_requests_enabled']:
                return -1
        
        return 1
    except Exception as e:
        return -1
",True,1.0,1,0,0,0,1,"range of values, logic"
put-/projects/{id},BasicProjectDetails,merge_method,merge_method,106,,,parameters,merge_method,Set the merge method used,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""tag_list"": [],
  ""suggestion_commit_message"": null,
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""service_desk_enabled"": false,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""test_project_5"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""test_project_5"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""id"": 5,
  ""description"": null,
  ""default_branch"": ""main"",
  ""container_registry_enabled"": true,
  ""ci_forward_deployment_enabled"": true,
  ""ci_default_git_depth"": 20,
  ""avatar"": ""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":5,""description"":null,""name"":""test_project_5"",""name_with_namespace"":""Administrator / test_project_5"",""path"":""test_project_5"",""path_with_namespace"":""root/test_project_5"",""created_at"":""2024-03-04T09:07:53.324Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/test_project_5.git"",""http_url_to_repo"":""http://gitlab.example.com/root/test_project_5.git"",""web_url"":""http://gitlab.example.com/root/test_project_5"",""readme_url"":null,""forks_count"":1,""avatar_url"":null,""star_count"":1,""last_activity_at"":""2024-03-04T09:07:53.324Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/5"",""issues"":""http://gitlab.example.com/api/v4/projects/5/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/5/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/5/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/5/labels"",""events"":""http://gitlab.example.com/api/v4/projects/5/events"",""members"":""http://gitlab.example.com/api/v4/projects/5/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/5/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-05T09:07:53.350Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-04T09:07:53.324Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941ymtrSxowSdg86ipmkzJL"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[{""group_id"":8,""group_name"":""test"",""group_full_path"":""test"",""group_access_level"":10,""expires_at"":null},{""group_id"":9,""group_name"":""test-1"",""group_full_path"":""test-1"",""group_access_level"":20,""expires_at"":null}],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the merge_method from the response
        merge_method = latest_response.get(""merge_method"")
        
        # Check if merge_method exists in the response
        if merge_method is None:
            return 0
        
        # Define the allowed values for merge_method
        allowed_merge_methods = [""merge"", ""rebase_merge"", ""ff""]
        
        # Verify if the merge_method in the response is one of the allowed values
        if merge_method in allowed_merge_methods:
            return 1
        else:
            return -1
    except Exception as e:
        # Handle any unexpected errors
        return -1
",merge,1.0,1,0,0,0,1,"range of values, logic"
put-/projects/{id},BasicProjectDetails,jobs_enabled,jobs_enabled,107,,,parameters,jobs_enabled,(Deprecated)Enable jobs for this project. Use builds_access_level instead,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""tag_list"": [],
  ""suggestion_commit_message"": null,
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""service_desk_enabled"": false,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""test_project_5"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""test_project_5"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""id"": 5,
  ""description"": null,
  ""default_branch"": ""main"",
  ""container_registry_enabled"": true,
  ""ci_forward_deployment_enabled"": true,
  ""ci_default_git_depth"": 20,
  ""avatar"": ""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":5,""description"":null,""name"":""test_project_5"",""name_with_namespace"":""Administrator / test_project_5"",""path"":""test_project_5"",""path_with_namespace"":""root/test_project_5"",""created_at"":""2024-03-04T09:07:53.324Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/test_project_5.git"",""http_url_to_repo"":""http://gitlab.example.com/root/test_project_5.git"",""web_url"":""http://gitlab.example.com/root/test_project_5"",""readme_url"":null,""forks_count"":1,""avatar_url"":null,""star_count"":1,""last_activity_at"":""2024-03-04T09:07:53.324Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/5"",""issues"":""http://gitlab.example.com/api/v4/projects/5/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/5/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/5/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/5/labels"",""events"":""http://gitlab.example.com/api/v4/projects/5/events"",""members"":""http://gitlab.example.com/api/v4/projects/5/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/5/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-05T09:07:53.350Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-04T09:07:53.324Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941ymtrSxowSdg86ipmkzJL"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[{""group_id"":8,""group_name"":""test"",""group_full_path"":""test"",""group_access_level"":10,""expires_at"":null},{""group_id"":9,""group_name"":""test-1"",""group_full_path"":""test-1"",""group_access_level"":20,""expires_at"":null}],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'jobs_enabled' is in the response
        if 'jobs_enabled' not in latest_response:
            return 0  # Attribute does not exist in the response
        
        # Check if 'jobs_enabled' is of type boolean
        if not isinstance(latest_response['jobs_enabled'], bool):
            return -1  # Constraint not satisfied, type mismatch
        
        return 1  # Constraint satisfied
    except Exception as e:
        return -1  # Constraint not satisfied due to an exception
",True,1.0,1,0,0,0,1,"range of values, logic"
put-/projects/{id},BasicProjectDetails,issues_enabled,issues_enabled,108,,,parameters,issues_enabled,(Deprecated)Enable issues for this project. Use issues_access_level instead,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""tag_list"": [],
  ""suggestion_commit_message"": null,
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""service_desk_enabled"": false,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""test_project_5"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""test_project_5"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""id"": 5,
  ""description"": null,
  ""default_branch"": ""main"",
  ""container_registry_enabled"": true,
  ""ci_forward_deployment_enabled"": true,
  ""ci_default_git_depth"": 20,
  ""avatar"": ""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":5,""description"":null,""name"":""test_project_5"",""name_with_namespace"":""Administrator / test_project_5"",""path"":""test_project_5"",""path_with_namespace"":""root/test_project_5"",""created_at"":""2024-03-04T09:07:53.324Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/test_project_5.git"",""http_url_to_repo"":""http://gitlab.example.com/root/test_project_5.git"",""web_url"":""http://gitlab.example.com/root/test_project_5"",""readme_url"":null,""forks_count"":1,""avatar_url"":null,""star_count"":1,""last_activity_at"":""2024-03-04T09:07:53.324Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/5"",""issues"":""http://gitlab.example.com/api/v4/projects/5/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/5/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/5/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/5/labels"",""events"":""http://gitlab.example.com/api/v4/projects/5/events"",""members"":""http://gitlab.example.com/api/v4/projects/5/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/5/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-05T09:07:53.350Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-04T09:07:53.324Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941ymtrSxowSdg86ipmkzJL"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[{""group_id"":8,""group_name"":""test"",""group_full_path"":""test"",""group_access_level"":10,""expires_at"":null},{""group_id"":9,""group_name"":""test-1"",""group_full_path"":""test-1"",""group_access_level"":20,""expires_at"":null}],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'issues_enabled' is in the response
        if 'issues_enabled' not in latest_response:
            return 0
        
        # Check if 'issues_enabled' is a boolean
        if not isinstance(latest_response['issues_enabled'], bool):
            return -1
        
        # Check if the request_info contains 'issues_enabled' and compare it with the response
        if 'issues_enabled' in request_info:
            if latest_response['issues_enabled'] != request_info['issues_enabled']:
                return -1
        
        return 1
    except Exception as e:
        return -1
",True,1.0,1,0,0,0,1,"range of values, logic"
put-/projects/{id},BasicProjectDetails,id,id,109,,,parameters,id,The ID or URL-encoded path of the project,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""tag_list"": [],
  ""suggestion_commit_message"": null,
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""service_desk_enabled"": false,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""test_project_5"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""test_project_5"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""id"": 5,
  ""description"": null,
  ""default_branch"": ""main"",
  ""container_registry_enabled"": true,
  ""ci_forward_deployment_enabled"": true,
  ""ci_default_git_depth"": 20,
  ""avatar"": ""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":5,""description"":null,""name"":""test_project_5"",""name_with_namespace"":""Administrator / test_project_5"",""path"":""test_project_5"",""path_with_namespace"":""root/test_project_5"",""created_at"":""2024-03-04T09:07:53.324Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/test_project_5.git"",""http_url_to_repo"":""http://gitlab.example.com/root/test_project_5.git"",""web_url"":""http://gitlab.example.com/root/test_project_5"",""readme_url"":null,""forks_count"":1,""avatar_url"":null,""star_count"":1,""last_activity_at"":""2024-03-04T09:07:53.324Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/5"",""issues"":""http://gitlab.example.com/api/v4/projects/5/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/5/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/5/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/5/labels"",""events"":""http://gitlab.example.com/api/v4/projects/5/events"",""members"":""http://gitlab.example.com/api/v4/projects/5/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/5/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-05T09:07:53.350Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-04T09:07:53.324Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941ymtrSxowSdg86ipmkzJL"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[{""group_id"":8,""group_name"":""test"",""group_full_path"":""test"",""group_access_level"":10,""expires_at"":null},{""group_id"":9,""group_name"":""test-1"",""group_full_path"":""test-1"",""group_access_level"":20,""expires_at"":null}],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'id' exists in the response
        if 'id' not in latest_response:
            return 0
        
        # Check if 'id' is an integer
        if not isinstance(latest_response['id'], int):
            return -1
        
        # Check if 'id' matches the input parameter 'id' in the request_info
        if 'id' in request_info and latest_response['id'] != int(request_info['id']):
            return -1
        
        return 1
    except Exception as e:
        return -1
",4,1.0,1,0,0,0,1,logic
put-/projects/{id},BasicProjectDetails,description,description,110,,,parameters,description,Short project description,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""tag_list"": [],
  ""suggestion_commit_message"": null,
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""service_desk_enabled"": false,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""test_project_5"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""test_project_5"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""id"": 5,
  ""description"": null,
  ""default_branch"": ""main"",
  ""container_registry_enabled"": true,
  ""ci_forward_deployment_enabled"": true,
  ""ci_default_git_depth"": 20,
  ""avatar"": ""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":5,""description"":null,""name"":""test_project_5"",""name_with_namespace"":""Administrator / test_project_5"",""path"":""test_project_5"",""path_with_namespace"":""root/test_project_5"",""created_at"":""2024-03-04T09:07:53.324Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/test_project_5.git"",""http_url_to_repo"":""http://gitlab.example.com/root/test_project_5.git"",""web_url"":""http://gitlab.example.com/root/test_project_5"",""readme_url"":null,""forks_count"":1,""avatar_url"":null,""star_count"":1,""last_activity_at"":""2024-03-04T09:07:53.324Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/5"",""issues"":""http://gitlab.example.com/api/v4/projects/5/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/5/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/5/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/5/labels"",""events"":""http://gitlab.example.com/api/v4/projects/5/events"",""members"":""http://gitlab.example.com/api/v4/projects/5/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/5/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-05T09:07:53.350Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-04T09:07:53.324Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941ymtrSxowSdg86ipmkzJL"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[{""group_id"":8,""group_name"":""test"",""group_full_path"":""test"",""group_access_level"":10,""expires_at"":null},{""group_id"":9,""group_name"":""test-1"",""group_full_path"":""test-1"",""group_access_level"":20,""expires_at"":null}],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the description from the response
        response_description = latest_response.get(""description"", None)
        
        # Check if the description exists in the response
        if response_description is None:
            return 0
        
        # Extract the description from the request info
        request_description = request_info.get(""description"", None)
        
        # Check if the description exists in the request info
        if request_description is None:
            return 0
        
        # Verify the description matches the request description
        if response_description == request_description:
            return 1
        else:
            return -1
    except Exception as e:
        # Handle any unexpected errors
        return -1
",GitLab Community Edition,1.0,0,0,1,0,1,logic
put-/projects/{id},BasicProjectDetails,default_branch,default_branch,111,,,parameters,default_branch,master by default,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""tag_list"": [],
  ""suggestion_commit_message"": null,
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""service_desk_enabled"": false,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""test_project_5"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""test_project_5"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""id"": 5,
  ""description"": null,
  ""default_branch"": ""main"",
  ""container_registry_enabled"": true,
  ""ci_forward_deployment_enabled"": true,
  ""ci_default_git_depth"": 20,
  ""avatar"": ""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":5,""description"":null,""name"":""test_project_5"",""name_with_namespace"":""Administrator / test_project_5"",""path"":""test_project_5"",""path_with_namespace"":""root/test_project_5"",""created_at"":""2024-03-04T09:07:53.324Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/test_project_5.git"",""http_url_to_repo"":""http://gitlab.example.com/root/test_project_5.git"",""web_url"":""http://gitlab.example.com/root/test_project_5"",""readme_url"":null,""forks_count"":1,""avatar_url"":null,""star_count"":1,""last_activity_at"":""2024-03-04T09:07:53.324Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/5"",""issues"":""http://gitlab.example.com/api/v4/projects/5/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/5/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/5/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/5/labels"",""events"":""http://gitlab.example.com/api/v4/projects/5/events"",""members"":""http://gitlab.example.com/api/v4/projects/5/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/5/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-05T09:07:53.350Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-04T09:07:53.324Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941ymtrSxowSdg86ipmkzJL"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[{""group_id"":8,""group_name"":""test"",""group_full_path"":""test"",""group_access_level"":10,""expires_at"":null},{""group_id"":9,""group_name"":""test-1"",""group_full_path"":""test-1"",""group_access_level"":20,""expires_at"":null}],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true}",TP,mismatched,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the default_branch from the response
        default_branch_response = latest_response.get(""default_branch"")
        
        # Check if the default_branch exists in the response
        if default_branch_response is None:
            return 0
        
        # Extract the default_branch from the request info, if provided
        default_branch_request = request_info.get(""default_branch"", ""master"")
        
        # Verify the constraint
        if isinstance(default_branch_response, str) and default_branch_response == default_branch_request:
            return 1
        else:
            return -1
    except Exception as e:
        return -1
",master,1.0,1,0,0,0,1,logic
put-/projects/{id},BasicProjectDetails,container_registry_enabled,container_registry_enabled,112,,,parameters,container_registry_enabled,Enable container registry for this project,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""tag_list"": [],
  ""suggestion_commit_message"": null,
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""service_desk_enabled"": false,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""test_project_5"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""test_project_5"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""id"": 5,
  ""description"": null,
  ""default_branch"": ""main"",
  ""container_registry_enabled"": true,
  ""ci_forward_deployment_enabled"": true,
  ""ci_default_git_depth"": 20,
  ""avatar"": ""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":5,""description"":null,""name"":""test_project_5"",""name_with_namespace"":""Administrator / test_project_5"",""path"":""test_project_5"",""path_with_namespace"":""root/test_project_5"",""created_at"":""2024-03-04T09:07:53.324Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/test_project_5.git"",""http_url_to_repo"":""http://gitlab.example.com/root/test_project_5.git"",""web_url"":""http://gitlab.example.com/root/test_project_5"",""readme_url"":null,""forks_count"":1,""avatar_url"":null,""star_count"":1,""last_activity_at"":""2024-03-04T09:07:53.324Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/5"",""issues"":""http://gitlab.example.com/api/v4/projects/5/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/5/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/5/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/5/labels"",""events"":""http://gitlab.example.com/api/v4/projects/5/events"",""members"":""http://gitlab.example.com/api/v4/projects/5/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/5/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-05T09:07:53.350Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-04T09:07:53.324Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941ymtrSxowSdg86ipmkzJL"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[{""group_id"":8,""group_name"":""test"",""group_full_path"":""test"",""group_access_level"":10,""expires_at"":null},{""group_id"":9,""group_name"":""test-1"",""group_full_path"":""test-1"",""group_access_level"":20,""expires_at"":null}],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'container_registry_enabled' exists in both request_info and latest_response
        request_value = request_info.get('container_registry_enabled', None)
        response_value = latest_response.get('container_registry_enabled', None)

        # If the attribute does not exist in the response, return 0 indicating insufficient information
        if response_value is None:
            return 0

        # Ensure the type of the response value is boolean
        if not isinstance(response_value, bool):
            return -1

        # If the attribute exists in the request, check if it matches the response
        if request_value is not None:
            if isinstance(request_value, bool) and request_value == response_value:
                return 1
            else:
                return -1

        # If the attribute does not exist in the request, but exists in the response and is a valid boolean
        return 1

    except Exception as e:
        # In case of any error during verification, consider the constraints not satisfied
        return -1
",False,1.0,1,0,0,0,1,"range of values, logic"
put-/projects/{id},BasicProjectDetails,ci_forward_deployment_enabled,ci_forward_deployment_enabled,113,,,parameters,ci_forward_deployment_enabled,"When a new deployment job starts,skip older deployment jobsthat are still pending",c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""tag_list"": [],
  ""suggestion_commit_message"": null,
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""service_desk_enabled"": false,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""test_project_5"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""test_project_5"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""id"": 5,
  ""description"": null,
  ""default_branch"": ""main"",
  ""container_registry_enabled"": true,
  ""ci_forward_deployment_enabled"": true,
  ""ci_default_git_depth"": 20,
  ""avatar"": ""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":5,""description"":null,""name"":""test_project_5"",""name_with_namespace"":""Administrator / test_project_5"",""path"":""test_project_5"",""path_with_namespace"":""root/test_project_5"",""created_at"":""2024-03-04T09:07:53.324Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/test_project_5.git"",""http_url_to_repo"":""http://gitlab.example.com/root/test_project_5.git"",""web_url"":""http://gitlab.example.com/root/test_project_5"",""readme_url"":null,""forks_count"":1,""avatar_url"":null,""star_count"":1,""last_activity_at"":""2024-03-04T09:07:53.324Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/5"",""issues"":""http://gitlab.example.com/api/v4/projects/5/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/5/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/5/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/5/labels"",""events"":""http://gitlab.example.com/api/v4/projects/5/events"",""members"":""http://gitlab.example.com/api/v4/projects/5/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/5/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-05T09:07:53.350Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-04T09:07:53.324Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941ymtrSxowSdg86ipmkzJL"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[{""group_id"":8,""group_name"":""test"",""group_full_path"":""test"",""group_access_level"":10,""expires_at"":null},{""group_id"":9,""group_name"":""test-1"",""group_full_path"":""test-1"",""group_access_level"":20,""expires_at"":null}],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'ci_forward_deployment_enabled' exists in both request_info and latest_response
        request_value = request_info.get('ci_forward_deployment_enabled', None)
        response_value = latest_response.get('ci_forward_deployment_enabled', None)

        # If the attribute does not exist in the response, return 0 (insufficient information)
        if response_value is None:
            return 0

        # If the attribute exists in the response, check if it matches the type boolean
        if isinstance(response_value, bool):
            # If the request does not specify 'ci_forward_deployment_enabled', any boolean value in the response is valid
            if request_value is None:
                return 1
            # If the request specifies 'ci_forward_deployment_enabled', check if it matches the response
            elif isinstance(request_value, bool) and request_value == response_value:
                return 1
            else:
                return -1
        else:
            # The response value is not a boolean, which violates the schema constraint
            return -1
    except Exception as e:
        # Handle unexpected errors gracefully
        return -1
",True,1.0,1,0,0,0,1,logic
put-/projects/{id},BasicProjectDetails,ci_default_git_depth,ci_default_git_depth,114,,,parameters,ci_default_git_depth,Default number of revisions forshallow cloning,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""tag_list"": [],
  ""suggestion_commit_message"": null,
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""service_desk_enabled"": false,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""test_project_5"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""test_project_5"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""id"": 5,
  ""description"": null,
  ""default_branch"": ""main"",
  ""container_registry_enabled"": true,
  ""ci_forward_deployment_enabled"": true,
  ""ci_default_git_depth"": 20,
  ""avatar"": ""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":5,""description"":null,""name"":""test_project_5"",""name_with_namespace"":""Administrator / test_project_5"",""path"":""test_project_5"",""path_with_namespace"":""root/test_project_5"",""created_at"":""2024-03-04T09:07:53.324Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/test_project_5.git"",""http_url_to_repo"":""http://gitlab.example.com/root/test_project_5.git"",""web_url"":""http://gitlab.example.com/root/test_project_5"",""readme_url"":null,""forks_count"":1,""avatar_url"":null,""star_count"":1,""last_activity_at"":""2024-03-04T09:07:53.324Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/5"",""issues"":""http://gitlab.example.com/api/v4/projects/5/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/5/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/5/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/5/labels"",""events"":""http://gitlab.example.com/api/v4/projects/5/events"",""members"":""http://gitlab.example.com/api/v4/projects/5/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/5/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-05T09:07:53.350Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-04T09:07:53.324Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941ymtrSxowSdg86ipmkzJL"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[{""group_id"":8,""group_name"":""test"",""group_full_path"":""test"",""group_access_level"":10,""expires_at"":null},{""group_id"":9,""group_name"":""test-1"",""group_full_path"":""test-1"",""group_access_level"":20,""expires_at"":null}],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the ci_default_git_depth from the response
        ci_default_git_depth = latest_response.get(""ci_default_git_depth"")
        
        # Check if the ci_default_git_depth exists in the response
        if ci_default_git_depth is None:
            return 0
        
        # Verify the type of ci_default_git_depth
        if not isinstance(ci_default_git_depth, int):
            return -1
        
        # Verify the constraints
        if ci_default_git_depth > 1000:
            return -1
        
        return 1
    except Exception as e:
        return -1
",50,1.0,1,0,0,0,1,logic
put-/projects/{id},BasicProjectDetails,autoclose_referenced_issues,autoclose_referenced_issues,116,,,parameters,autoclose_referenced_issues,Set whether auto-closing referenced issues on default branch,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""tag_list"": [],
  ""suggestion_commit_message"": null,
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""service_desk_enabled"": false,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""test_project_5"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""test_project_5"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""id"": 5,
  ""description"": null,
  ""default_branch"": ""main"",
  ""container_registry_enabled"": true,
  ""ci_forward_deployment_enabled"": true,
  ""ci_default_git_depth"": 20,
  ""avatar"": ""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":5,""description"":null,""name"":""test_project_5"",""name_with_namespace"":""Administrator / test_project_5"",""path"":""test_project_5"",""path_with_namespace"":""root/test_project_5"",""created_at"":""2024-03-04T09:07:53.324Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/test_project_5.git"",""http_url_to_repo"":""http://gitlab.example.com/root/test_project_5.git"",""web_url"":""http://gitlab.example.com/root/test_project_5"",""readme_url"":null,""forks_count"":1,""avatar_url"":null,""star_count"":1,""last_activity_at"":""2024-03-04T09:07:53.324Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/5"",""issues"":""http://gitlab.example.com/api/v4/projects/5/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/5/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/5/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/5/labels"",""events"":""http://gitlab.example.com/api/v4/projects/5/events"",""members"":""http://gitlab.example.com/api/v4/projects/5/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/5/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-05T09:07:53.350Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-04T09:07:53.324Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941ymtrSxowSdg86ipmkzJL"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[{""group_id"":8,""group_name"":""test"",""group_full_path"":""test"",""group_access_level"":10,""expires_at"":null},{""group_id"":9,""group_name"":""test-1"",""group_full_path"":""test-1"",""group_access_level"":20,""expires_at"":null}],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'autoclose_referenced_issues' exists in the response
        if 'autoclose_referenced_issues' not in latest_response:
            return 0
        
        # Extract the value from the response
        response_value = latest_response['autoclose_referenced_issues']
        
        # Check if the value is of boolean type
        if isinstance(response_value, bool):
            return 1
        else:
            return -1
    except Exception as e:
        return -1
",True,1.0,1,0,0,0,1,"range of values, logic"
put-/projects/{id},BasicProjectDetails,auto_devops_enabled,auto_devops_enabled,117,,,parameters,auto_devops_enabled,Enable Auto DevOps for this project,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""tag_list"": [],
  ""suggestion_commit_message"": null,
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""service_desk_enabled"": false,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""test_project_5"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""test_project_5"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""id"": 5,
  ""description"": null,
  ""default_branch"": ""main"",
  ""container_registry_enabled"": true,
  ""ci_forward_deployment_enabled"": true,
  ""ci_default_git_depth"": 20,
  ""avatar"": ""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":5,""description"":null,""name"":""test_project_5"",""name_with_namespace"":""Administrator / test_project_5"",""path"":""test_project_5"",""path_with_namespace"":""root/test_project_5"",""created_at"":""2024-03-04T09:07:53.324Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/test_project_5.git"",""http_url_to_repo"":""http://gitlab.example.com/root/test_project_5.git"",""web_url"":""http://gitlab.example.com/root/test_project_5"",""readme_url"":null,""forks_count"":1,""avatar_url"":null,""star_count"":1,""last_activity_at"":""2024-03-04T09:07:53.324Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/5"",""issues"":""http://gitlab.example.com/api/v4/projects/5/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/5/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/5/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/5/labels"",""events"":""http://gitlab.example.com/api/v4/projects/5/events"",""members"":""http://gitlab.example.com/api/v4/projects/5/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/5/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-05T09:07:53.350Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-04T09:07:53.324Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941ymtrSxowSdg86ipmkzJL"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[{""group_id"":8,""group_name"":""test"",""group_full_path"":""test"",""group_access_level"":10,""expires_at"":null},{""group_id"":9,""group_name"":""test-1"",""group_full_path"":""test-1"",""group_access_level"":20,""expires_at"":null}],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'auto_devops_enabled' is in the response
        if 'auto_devops_enabled' not in latest_response:
            return 0
        
        # Extract the value of 'auto_devops_enabled' from the response
        response_value = latest_response['auto_devops_enabled']
        
        # Check if the value is a boolean
        if not isinstance(response_value, bool):
            return -1
        
        # Extract the value of 'auto_devops_enabled' from the request info
        request_value = request_info.get('auto_devops_enabled')
        
        # Convert request_value to boolean if it's a string
        if isinstance(request_value, str):
            request_value = request_value.lower() == 'true'
        
        # Check if the request value matches the response value
        if response_value == request_value:
            return 1
        else:
            return -1
    except Exception as e:
        return -1
",True,1.0,1,0,0,0,1,"range of values, logic"
put-/projects/{id},BasicProjectDetails,auto_devops_deploy_strategy,auto_devops_deploy_strategy,118,,,parameters,auto_devops_deploy_strategy,Auto Deploy strategy,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""tag_list"": [],
  ""suggestion_commit_message"": null,
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""service_desk_enabled"": false,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""test_project_5"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""test_project_5"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""id"": 5,
  ""description"": null,
  ""default_branch"": ""main"",
  ""container_registry_enabled"": true,
  ""ci_forward_deployment_enabled"": true,
  ""ci_default_git_depth"": 20,
  ""avatar"": ""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":5,""description"":null,""name"":""test_project_5"",""name_with_namespace"":""Administrator / test_project_5"",""path"":""test_project_5"",""path_with_namespace"":""root/test_project_5"",""created_at"":""2024-03-04T09:07:53.324Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/test_project_5.git"",""http_url_to_repo"":""http://gitlab.example.com/root/test_project_5.git"",""web_url"":""http://gitlab.example.com/root/test_project_5"",""readme_url"":null,""forks_count"":1,""avatar_url"":null,""star_count"":1,""last_activity_at"":""2024-03-04T09:07:53.324Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/5"",""issues"":""http://gitlab.example.com/api/v4/projects/5/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/5/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/5/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/5/labels"",""events"":""http://gitlab.example.com/api/v4/projects/5/events"",""members"":""http://gitlab.example.com/api/v4/projects/5/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/5/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-05T09:07:53.350Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-04T09:07:53.324Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941ymtrSxowSdg86ipmkzJL"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[{""group_id"":8,""group_name"":""test"",""group_full_path"":""test"",""group_access_level"":10,""expires_at"":null},{""group_id"":9,""group_name"":""test-1"",""group_full_path"":""test-1"",""group_access_level"":20,""expires_at"":null}],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the auto_devops_deploy_strategy from the response
        auto_devops_deploy_strategy = latest_response.get(""auto_devops_deploy_strategy"")
        
        # Check if the attribute exists in the response
        if auto_devops_deploy_strategy is None:
            return 0
        
        # Define the allowed values for auto_devops_deploy_strategy
        allowed_values = [""continuous"", ""manual"", ""timed_incremental""]
        
        # Verify if the value of auto_devops_deploy_strategy is within the allowed values
        if auto_devops_deploy_strategy in allowed_values:
            return 1
        else:
            return -1
    except Exception as e:
        # In case of any exception, return -1 indicating the constraint is not satisfied
        return -1
",continuous,1.0,1,0,0,0,1,logic
put-/projects/{id},BasicProjectDetails,allow_merge_on_skipped_pipeline,allow_merge_on_skipped_pipeline,119,,,parameters,allow_merge_on_skipped_pipeline,Set whether or not merge requests can be merged with skipped jobs,c,False,"{
  ""wiki_enabled"": true,
  ""visibility"": ""private"",
  ""tag_list"": [],
  ""suggestion_commit_message"": null,
  ""snippets_enabled"": true,
  ""shared_runners_enabled"": true,
  ""service_desk_enabled"": false,
  ""resolve_outdated_diff_discussions"": false,
  ""request_access_enabled"": true,
  ""repository_storage"": ""default"",
  ""remove_source_branch_after_merge"": true,
  ""path"": ""test_project_5"",
  ""pages_access_level"": ""private"",
  ""packages_enabled"": true,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""name"": ""test_project_5"",
  ""merge_requests_enabled"": true,
  ""merge_method"": ""merge"",
  ""jobs_enabled"": true,
  ""issues_enabled"": true,
  ""id"": 5,
  ""description"": null,
  ""default_branch"": ""main"",
  ""container_registry_enabled"": true,
  ""ci_forward_deployment_enabled"": true,
  ""ci_default_git_depth"": 20,
  ""avatar"": ""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",
  ""autoclose_referenced_issues"": true,
  ""auto_devops_enabled"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""allow_merge_on_skipped_pipeline"": true
}","{""id"":5,""description"":null,""name"":""test_project_5"",""name_with_namespace"":""Administrator / test_project_5"",""path"":""test_project_5"",""path_with_namespace"":""root/test_project_5"",""created_at"":""2024-03-04T09:07:53.324Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/test_project_5.git"",""http_url_to_repo"":""http://gitlab.example.com/root/test_project_5.git"",""web_url"":""http://gitlab.example.com/root/test_project_5"",""readme_url"":null,""forks_count"":1,""avatar_url"":null,""star_count"":1,""last_activity_at"":""2024-03-04T09:07:53.324Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/5"",""issues"":""http://gitlab.example.com/api/v4/projects/5/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/5/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/5/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/5/labels"",""events"":""http://gitlab.example.com/api/v4/projects/5/events"",""members"":""http://gitlab.example.com/api/v4/projects/5/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/5/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-05T09:07:53.350Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-04T09:07:53.324Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941ymtrSxowSdg86ipmkzJL"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[{""group_id"":8,""group_name"":""test"",""group_full_path"":""test"",""group_access_level"":10,""expires_at"":null},{""group_id"":9,""group_name"":""test-1"",""group_full_path"":""test-1"",""group_access_level"":20,""expires_at"":null}],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true}",TP,satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'allow_merge_on_skipped_pipeline' exists in the response
        if 'allow_merge_on_skipped_pipeline' not in latest_response:
            return 0
        
        # Extract the value from the response
        response_value = latest_response['allow_merge_on_skipped_pipeline']
        
        # Check if the value is a boolean
        if not isinstance(response_value, bool):
            return -1
        
        # Extract the value from the request info
        request_value = request_info.get('allow_merge_on_skipped_pipeline')
        
        # Check if the request value is a boolean
        if request_value is not None and not isinstance(request_value, bool):
            return -1
        
        # Compare the response value with the request value if provided
        if request_value is not None and response_value != request_value:
            return -1
        
        return 1
    except Exception as e:
        return -1
",False,1.0,1,0,0,0,1,"range of values, logic"
