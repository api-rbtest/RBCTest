attribute inferred from operation,response resource,attribute,group,kio,description,x,part,corresponding attribute,corresponding attribute description,x.1,name-identical,request information,API response,verification script,Example_value,verify_result,satisfied,mismatched,unknown,tp,code error,constraint_correctness,category
get-/projects,BasicProjectDetails,archived,archived,0,,,parameters,archived,Limit by archived status,c,False,"{""id_before"": 5, ""id_after"": 3, ""last_activity_before"": ""2024-03-10T00:00:00Z"", ""last_activity_after"": ""2024-03-01T00:00:00Z"",  ""archived"": false,
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""with_issues_enabled"": true,
  ""with_merge_requests_enabled"": true}","[{""id"":4,""description"":null,""name"":""test_project_4"",""name_with_namespace"":""Administrator / test_project_4"",""path"":""test_project_4"",""path_with_namespace"":""root/test_project_4"",""created_at"":""2024-03-04T09:07:50.094Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/test_project_4.git"",""http_url_to_repo"":""http://gitlab.example.com/root/test_project_4.git"",""web_url"":""http://gitlab.example.com/root/test_project_4"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-04T09:07:50.094Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/4"",""issues"":""http://gitlab.example.com/api/v4/projects/4/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/4/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/4/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/4/labels"",""events"":""http://gitlab.example.com/api/v4/projects/4/events"",""members"":""http://gitlab.example.com/api/v4/projects/4/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/4/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-05T09:07:50.163Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-04T09:07:50.094Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941-VrHsy7ofk3EnQ6N9jsG"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":null,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":null}}]","def verify_latest_response(latest_response, request_info):
    try:
        # Extract the 'archived' parameter from request_info
        archived_param = request_info.get('archived')
        
        # If 'archived' parameter is not provided, we cannot verify the constraint
        if archived_param is None:
            return 0
        
        # Convert the 'archived' parameter to boolean
        archived_param = bool(archived_param)
        
        # Check if the response is a list of BasicProjectDetails objects
        if not isinstance(latest_response, list):
            return -1
        
        # Verify each object in the response
        for project in latest_response:
            if 'archived' not in project:
                return 0
            if not isinstance(project['archived'], bool):
                return -1
            if project['archived'] != archived_param:
                return -1
        
        # If all checks pass, return 1
        return 1
    except Exception as e:
        # If any error occurs, return -1
        return -1
",False,1.0,1,0,0,1,0,TP,"range of values, logic"
get-/projects,BasicProjectDetails,id,id,1,,,parameters,id_after,Limit results to projects with IDs greater than the specified ID,c,True,"{""id_before"": 5, ""id_after"": 3, ""last_activity_before"": ""2024-03-10T00:00:00Z"", ""last_activity_after"": ""2024-03-01T00:00:00Z"",  ""archived"": false,
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""with_issues_enabled"": true,
  ""with_merge_requests_enabled"": true}","[{""id"":4,""description"":null,""name"":""test_project_4"",""name_with_namespace"":""Administrator / test_project_4"",""path"":""test_project_4"",""path_with_namespace"":""root/test_project_4"",""created_at"":""2024-03-04T09:07:50.094Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/test_project_4.git"",""http_url_to_repo"":""http://gitlab.example.com/root/test_project_4.git"",""web_url"":""http://gitlab.example.com/root/test_project_4"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-04T09:07:50.094Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/4"",""issues"":""http://gitlab.example.com/api/v4/projects/4/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/4/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/4/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/4/labels"",""events"":""http://gitlab.example.com/api/v4/projects/4/events"",""members"":""http://gitlab.example.com/api/v4/projects/4/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/4/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-05T09:07:50.163Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-04T09:07:50.094Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941-VrHsy7ofk3EnQ6N9jsG"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":null,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":null}}]","def verify_latest_response(latest_response, request_info):
    try:
        # Extract the id_after value from request_info
        id_after = int(request_info.get(""id_after"", -1))
        
        # Check if the response is a list
        if not isinstance(latest_response, list):
            return 0
        
        # Verify each project's id in the response
        for project in latest_response:
            if 'id' not in project:
                return 0
            if not isinstance(project['id'], int):
                return 0
            if project['id'] <= id_after:
                return -1
        
        return 1
    except Exception as e:
        return -1
",4,1.0,1,0,0,1,0,TP,logic
get-/projects,BasicProjectDetails,last_activity_at,last_activity_at,2,,,parameters,last_activity_after,Limit results to projects with last_activity after specified time.ISO 8601 YYYY-MM-DDTHH:MM:SSZ,c,True,"{""id_before"": 5, ""id_after"": 3, ""last_activity_before"": ""2024-03-10T00:00:00Z"", ""last_activity_after"": ""2024-03-01T00:00:00Z"",  ""archived"": false,
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""with_issues_enabled"": true,
  ""with_merge_requests_enabled"": true}","[{""id"":4,""description"":null,""name"":""test_project_4"",""name_with_namespace"":""Administrator / test_project_4"",""path"":""test_project_4"",""path_with_namespace"":""root/test_project_4"",""created_at"":""2024-03-04T09:07:50.094Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/test_project_4.git"",""http_url_to_repo"":""http://gitlab.example.com/root/test_project_4.git"",""web_url"":""http://gitlab.example.com/root/test_project_4"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-04T09:07:50.094Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/4"",""issues"":""http://gitlab.example.com/api/v4/projects/4/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/4/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/4/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/4/labels"",""events"":""http://gitlab.example.com/api/v4/projects/4/events"",""members"":""http://gitlab.example.com/api/v4/projects/4/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/4/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-05T09:07:50.163Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-04T09:07:50.094Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941-VrHsy7ofk3EnQ6N9jsG"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":null,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":null}}]","from datetime import datetime
import json

def verify_latest_response(latest_response, request_info):
    try:
        # Extract the 'last_activity_after' parameter from request_info
        last_activity_after = request_info.get(""last_activity_after"")
        if not last_activity_after:
            return 0  # No constraint to verify
        
        # Parse the 'last_activity_after' parameter to a datetime object
        last_activity_after_dt = datetime.strptime(last_activity_after, ""%Y-%m-%dT%H:%M:%SZ"")
        
        # Iterate through the response to verify each 'last_activity_at' attribute
        for project in latest_response:
            last_activity_at = project.get(""last_activity_at"")
            if not last_activity_at:
                return 0  # Missing 'last_activity_at' attribute
            
            # Parse the 'last_activity_at' attribute to a datetime object
            last_activity_at_dt = datetime.strptime(last_activity_at, ""%Y-%m-%dT%H:%M:%SZ"")
            
            # Check if 'last_activity_at' is after 'last_activity_after'
            if last_activity_at_dt <= last_activity_after_dt:
                return -1  # Constraint not satisfied
        
        return 1  # All constraints satisfied
    except Exception as e:
        return -1  # An error occurred during verification
",2013-09-30T13:46:02Z,1.0,0,1,0,1,0,TP,"logic, format"
get-/projects,BasicProjectDetails,last_activity_at,last_activity_at,3,,,parameters,last_activity_before,Limit results to projects with last_activity before specified time. ISO 8601 YYYY-MM-DDTHH:MM:SSZ,c,True,"{""id_before"": 5, ""id_after"": 3, ""last_activity_before"": ""2024-03-10T00:00:00Z"", ""last_activity_after"": ""2024-03-01T00:00:00Z"",  ""archived"": false,
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""with_issues_enabled"": true,
  ""with_merge_requests_enabled"": true}","[{""id"":4,""description"":null,""name"":""test_project_4"",""name_with_namespace"":""Administrator / test_project_4"",""path"":""test_project_4"",""path_with_namespace"":""root/test_project_4"",""created_at"":""2024-03-04T09:07:50.094Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/test_project_4.git"",""http_url_to_repo"":""http://gitlab.example.com/root/test_project_4.git"",""web_url"":""http://gitlab.example.com/root/test_project_4"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-04T09:07:50.094Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/4"",""issues"":""http://gitlab.example.com/api/v4/projects/4/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/4/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/4/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/4/labels"",""events"":""http://gitlab.example.com/api/v4/projects/4/events"",""members"":""http://gitlab.example.com/api/v4/projects/4/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/4/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-05T09:07:50.163Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-04T09:07:50.094Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941-VrHsy7ofk3EnQ6N9jsG"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":null,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":null}}]","from datetime import datetime
import json

def verify_latest_response(latest_response, request_info):
    try:
        # Extract the 'last_activity_before' parameter from request_info
        last_activity_before = request_info.get(""last_activity_before"")
        if not last_activity_before:
            return 0  # No constraint to verify
        
        # Parse the 'last_activity_before' parameter to a datetime object
        last_activity_before_dt = datetime.strptime(last_activity_before, ""%Y-%m-%dT%H:%M:%SZ"")
        
        # Iterate through the response to verify each 'last_activity_at' attribute
        for project in latest_response:
            last_activity_at = project.get(""last_activity_at"")
            if not last_activity_at:
                return 0  # Missing 'last_activity_at' attribute in the response
            
            # Parse the 'last_activity_at' attribute to a datetime object
            last_activity_at_dt = datetime.strptime(last_activity_at, ""%Y-%m-%dT%H:%M:%SZ"")
            
            # Check if 'last_activity_at' is before 'last_activity_before'
            if last_activity_at_dt >= last_activity_before_dt:
                return -1  # Constraint not satisfied
        
        return 1  # All constraints satisfied
    except Exception as e:
        return -1  # An error occurred, constraint not satisfied
",2013-09-30T13:46:02Z,1.0,0,1,0,1,0,TP,"logic, format"
get-/projects,BasicProjectDetails,last_activity_at,last_activity_at,2,,,parameters,last_activity_after,Limit results to projects with last_activity after specified time.ISO 8601 YYYY-MM-DDTHH:MM:SSZ,c,True,"{""id_before"": 5, ""id_after"": 3, ""last_activity_before"": ""2024-03-10T00:00:00Z"", ""last_activity_after"": ""2024-03-01T00:00:00Z"",  ""archived"": false,
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""with_issues_enabled"": true,
  ""with_merge_requests_enabled"": true}","[{""id"":4,""description"":null,""name"":""test_project_4"",""name_with_namespace"":""Administrator / test_project_4"",""path"":""test_project_4"",""path_with_namespace"":""root/test_project_4"",""created_at"":""2024-03-04T09:07:50.094Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/test_project_4.git"",""http_url_to_repo"":""http://gitlab.example.com/root/test_project_4.git"",""web_url"":""http://gitlab.example.com/root/test_project_4"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-04T09:07:50.094Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/4"",""issues"":""http://gitlab.example.com/api/v4/projects/4/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/4/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/4/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/4/labels"",""events"":""http://gitlab.example.com/api/v4/projects/4/events"",""members"":""http://gitlab.example.com/api/v4/projects/4/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/4/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-05T09:07:50.163Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-04T09:07:50.094Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941-VrHsy7ofk3EnQ6N9jsG"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":null,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":null}}]","from datetime import datetime
import json

def verify_latest_response(latest_response, request_info):
    try:
        # Extract the 'last_activity_after' parameter from request_info
        last_activity_after = request_info.get(""last_activity_after"")
        if not last_activity_after:
            return 0  # No constraint to verify
        
        # Parse the 'last_activity_after' parameter to a datetime object
        last_activity_after_dt = datetime.strptime(last_activity_after, ""%Y-%m-%dT%H:%M:%SZ"")
        
        # Iterate through the response to verify each 'last_activity_at' attribute
        for project in latest_response:
            last_activity_at = project.get(""last_activity_at"")
            if not last_activity_at:
                return 0  # Missing 'last_activity_at' attribute
            
            # Parse the 'last_activity_at' attribute to a datetime object
            last_activity_at_dt = datetime.strptime(last_activity_at, ""%Y-%m-%dT%H:%M:%SZ"")
            
            # Check if 'last_activity_at' is after 'last_activity_after'
            if last_activity_at_dt <= last_activity_after_dt:
                return -1  # Constraint not satisfied
        
        return 1  # All constraints satisfied
    except Exception as e:
        return -1  # An error occurred during verification
",2013-09-30T13:46:02Z,1.0,0,1,0,1,0,TP,"logic, format"
get-/projects,BasicProjectDetails,last_activity_at,last_activity_at,3,,,parameters,last_activity_before,Limit results to projects with last_activity before specified time. ISO 8601 YYYY-MM-DDTHH:MM:SSZ,c,True,"{""id_before"": 5, ""id_after"": 3, ""last_activity_before"": ""2024-03-10T00:00:00Z"", ""last_activity_after"": ""2024-03-01T00:00:00Z"",  ""archived"": false,
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""with_issues_enabled"": true,
  ""with_merge_requests_enabled"": true}","[{""id"":4,""description"":null,""name"":""test_project_4"",""name_with_namespace"":""Administrator / test_project_4"",""path"":""test_project_4"",""path_with_namespace"":""root/test_project_4"",""created_at"":""2024-03-04T09:07:50.094Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/test_project_4.git"",""http_url_to_repo"":""http://gitlab.example.com/root/test_project_4.git"",""web_url"":""http://gitlab.example.com/root/test_project_4"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-04T09:07:50.094Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/4"",""issues"":""http://gitlab.example.com/api/v4/projects/4/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/4/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/4/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/4/labels"",""events"":""http://gitlab.example.com/api/v4/projects/4/events"",""members"":""http://gitlab.example.com/api/v4/projects/4/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/4/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-05T09:07:50.163Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-04T09:07:50.094Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941-VrHsy7ofk3EnQ6N9jsG"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":null,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":null}}]","from datetime import datetime
import json

def verify_latest_response(latest_response, request_info):
    try:
        # Extract the 'last_activity_before' parameter from request_info
        last_activity_before = request_info.get(""last_activity_before"")
        if not last_activity_before:
            return 0  # No constraint to verify
        
        # Parse the 'last_activity_before' parameter to a datetime object
        last_activity_before_dt = datetime.strptime(last_activity_before, ""%Y-%m-%dT%H:%M:%SZ"")
        
        # Iterate through the response to verify each 'last_activity_at' attribute
        for project in latest_response:
            last_activity_at = project.get(""last_activity_at"")
            if not last_activity_at:
                return 0  # Missing 'last_activity_at' attribute in the response
            
            # Parse the 'last_activity_at' attribute to a datetime object
            last_activity_at_dt = datetime.strptime(last_activity_at, ""%Y-%m-%dT%H:%M:%SZ"")
            
            # Check if 'last_activity_at' is before 'last_activity_before'
            if last_activity_at_dt >= last_activity_before_dt:
                return -1  # Constraint not satisfied
        
        return 1  # All constraints satisfied
    except Exception as e:
        return -1  # An error occurred, constraint not satisfied
",2013-09-30T13:46:02Z,1.0,0,1,0,1,0,TP,"logic, format"
get-/projects,BasicProjectDetails,repository_storage,repository_storage,4,,,parameters,repository_storage,Limit results to projects stored on repository_storage. (admins only),c,False,"{""id_before"": 5, ""id_after"": 3, ""last_activity_before"": ""2024-03-10T00:00:00Z"", ""last_activity_after"": ""2024-03-01T00:00:00Z"",  ""archived"": false,
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""with_issues_enabled"": true,
  ""with_merge_requests_enabled"": true}","[{""id"":4,""description"":null,""name"":""test_project_4"",""name_with_namespace"":""Administrator / test_project_4"",""path"":""test_project_4"",""path_with_namespace"":""root/test_project_4"",""created_at"":""2024-03-04T09:07:50.094Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/test_project_4.git"",""http_url_to_repo"":""http://gitlab.example.com/root/test_project_4.git"",""web_url"":""http://gitlab.example.com/root/test_project_4"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-04T09:07:50.094Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/4"",""issues"":""http://gitlab.example.com/api/v4/projects/4/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/4/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/4/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/4/labels"",""events"":""http://gitlab.example.com/api/v4/projects/4/events"",""members"":""http://gitlab.example.com/api/v4/projects/4/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/4/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-05T09:07:50.163Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-04T09:07:50.094Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941-VrHsy7ofk3EnQ6N9jsG"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":null,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":null}}]","def verify_latest_response(latest_response, request_info):
    try:
        # Extract the repository_storage value from the request_info
        repository_storage_param = request_info.get(""repository_storage"")

        # If repository_storage_param is not provided, no need to verify
        if repository_storage_param is None:
            return 1

        # Check if the response is a list of BasicProjectDetails objects
        if not isinstance(latest_response, list):
            return -1

        # Iterate through each project in the response
        for project in latest_response:
            # Check if the project has the repository_storage attribute
            if ""repository_storage"" not in project:
                return 0

            # Verify the repository_storage value matches the request parameter
            if project[""repository_storage""] != repository_storage_param:
                return -1

        # If all projects match the repository_storage parameter, return 1
        return 1
    except Exception as e:
        # In case of any exception, return -1
        return -1
",default,1.0,1,0,0,1,0,TP,logic
get-/projects,BasicProjectDetails,visibility,visibility,5,,,parameters,visibility,Limit by visibility,c,False,"{""id_before"": 5, ""id_after"": 3, ""last_activity_before"": ""2024-03-10T00:00:00Z"", ""last_activity_after"": ""2024-03-01T00:00:00Z"",  ""archived"": false,
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""with_issues_enabled"": true,
  ""with_merge_requests_enabled"": true}","[{""id"":4,""description"":null,""name"":""test_project_4"",""name_with_namespace"":""Administrator / test_project_4"",""path"":""test_project_4"",""path_with_namespace"":""root/test_project_4"",""created_at"":""2024-03-04T09:07:50.094Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/test_project_4.git"",""http_url_to_repo"":""http://gitlab.example.com/root/test_project_4.git"",""web_url"":""http://gitlab.example.com/root/test_project_4"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-04T09:07:50.094Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/4"",""issues"":""http://gitlab.example.com/api/v4/projects/4/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/4/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/4/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/4/labels"",""events"":""http://gitlab.example.com/api/v4/projects/4/events"",""members"":""http://gitlab.example.com/api/v4/projects/4/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/4/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-05T09:07:50.163Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-04T09:07:50.094Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941-VrHsy7ofk3EnQ6N9jsG"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":null,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":null}}]","def verify_latest_response(latest_response, request_info):
    try:
        valid_visibilities = {""public"", ""internal"", ""private""}
        if 'visibility' in request_info:
            requested_visibility = request_info['visibility']
            if requested_visibility not in valid_visibilities:
                return -1

            for project in latest_response:
                if 'visibility' not in project:
                    return 0
                if project['visibility'] != requested_visibility:
                    return -1
        else:
            for project in latest_response:
                if 'visibility' not in project:
                    return 0
                if project['visibility'] not in valid_visibilities:
                    return -1
        return 1
    except Exception as e:
        return -1
",private,1.0,1,0,0,1,0,TP,"range of values, logic"
get-/projects,BasicProjectDetails,issues_enabled,issues_enabled,6,,,parameters,with_issues_enabled,Limit by enabled issues feature,c,True,"{""id_before"": 5, ""id_after"": 3, ""last_activity_before"": ""2024-03-10T00:00:00Z"", ""last_activity_after"": ""2024-03-01T00:00:00Z"",  ""archived"": false,
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""with_issues_enabled"": true,
  ""with_merge_requests_enabled"": true}","[{""id"":4,""description"":null,""name"":""test_project_4"",""name_with_namespace"":""Administrator / test_project_4"",""path"":""test_project_4"",""path_with_namespace"":""root/test_project_4"",""created_at"":""2024-03-04T09:07:50.094Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/test_project_4.git"",""http_url_to_repo"":""http://gitlab.example.com/root/test_project_4.git"",""web_url"":""http://gitlab.example.com/root/test_project_4"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-04T09:07:50.094Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/4"",""issues"":""http://gitlab.example.com/api/v4/projects/4/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/4/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/4/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/4/labels"",""events"":""http://gitlab.example.com/api/v4/projects/4/events"",""members"":""http://gitlab.example.com/api/v4/projects/4/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/4/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-05T09:07:50.163Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-04T09:07:50.094Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941-VrHsy7ofk3EnQ6N9jsG"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":null,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":null}}]","def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'with_issues_enabled' is in request_info
        if 'with_issues_enabled' in request_info:
            with_issues_enabled = request_info['with_issues_enabled']
            
            # Verify the response body
            for project in latest_response:
                if 'issues_enabled' not in project:
                    return 0  # Attribute does not exist in the response
                if project['issues_enabled'] != with_issues_enabled:
                    return -1  # Constraint not satisfied
            
            return 1  # Constraint satisfied
        else:
            return 1  # No constraint to verify if 'with_issues_enabled' is not in request_info
    except Exception as e:
        return -1  # Return -1 in case of any exception
",True,1.0,1,0,0,1,0,TP,"range of values, logic"
get-/projects,BasicProjectDetails,merge_requests_enabled,merge_requests_enabled,7,,,parameters,with_merge_requests_enabled,Limit by enabled merge requests feature,c,True,"{""id_before"": 5, ""id_after"": 3, ""last_activity_before"": ""2024-03-10T00:00:00Z"", ""last_activity_after"": ""2024-03-01T00:00:00Z"",  ""archived"": false,
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""with_issues_enabled"": true,
  ""with_merge_requests_enabled"": true}","[{""id"":4,""description"":null,""name"":""test_project_4"",""name_with_namespace"":""Administrator / test_project_4"",""path"":""test_project_4"",""path_with_namespace"":""root/test_project_4"",""created_at"":""2024-03-04T09:07:50.094Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/test_project_4.git"",""http_url_to_repo"":""http://gitlab.example.com/root/test_project_4.git"",""web_url"":""http://gitlab.example.com/root/test_project_4"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-04T09:07:50.094Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/4"",""issues"":""http://gitlab.example.com/api/v4/projects/4/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/4/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/4/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/4/labels"",""events"":""http://gitlab.example.com/api/v4/projects/4/events"",""members"":""http://gitlab.example.com/api/v4/projects/4/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/4/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-05T09:07:50.163Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-04T09:07:50.094Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941-VrHsy7ofk3EnQ6N9jsG"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":null,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":null}}]","def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'with_merge_requests_enabled' is in the request_info
        if 'with_merge_requests_enabled' in request_info:
            expected_value = request_info['with_merge_requests_enabled']
            
            # Iterate through each project in the response
            for project in latest_response:
                # Check if 'merge_requests_enabled' attribute exists
                if 'merge_requests_enabled' not in project:
                    return 0  # Attribute does not exist
                
                # Verify the 'merge_requests_enabled' attribute against the expected value
                if project['merge_requests_enabled'] != expected_value:
                    return -1  # Constraint is not satisfied
            
            return 1  # All constraints are satisfied
        else:
            return 1  # No constraint to verify if 'with_merge_requests_enabled' is not in request_info
    except Exception as e:
        return -1  # Return -1 in case of any exception

# Example usage:
# latest_response = [{""merge_requests_enabled"": True}, {""merge_requests_enabled"": True}]
# request_info = {""with_merge_requests_enabled"": True}
# print(verify_latest_response(latest_response, request_info))
",True,1.0,1,0,0,1,0,TP,"range of values, logic"
post-/projects,BasicProjectDetails,repository_storage,repository_storage,9,,,parameters,repository_storage,Which storage shard the repository is on.(admins only),c,False,"{
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""issues_enabled"": true,
  ""merge_requests_enabled"": true,
  ""allow_merge_on_skipped_pipeline"": null,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""auto_devops_enabled"": true,
  ""autoclose_referenced_issues"": true,
  ""container_registry_enabled"": true,
  ""default_branch"": ""main"",
  ""description"": null,
  ""jobs_enabled"": true,
  ""merge_method"": ""merge"",
  ""name"": ""test_project_1"",
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""packages_enabled"": true,
  ""path"": ""test_project_1"",
  ""remove_source_branch_after_merge"": true,
  ""request_access_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""shared_runners_enabled"": true,
  ""snippets_enabled"": true,
  ""tag_list"": [],
  ""wiki_enabled"": true
}","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":null,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}","def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'repository_storage' is in the response
        if 'repository_storage' not in latest_response:
            return 0  # Attribute does not exist in the response
        
        # Check if 'repository_storage' is a string
        if not isinstance(latest_response['repository_storage'], str):
            return -1  # Constraint not satisfied
        
        return 1  # Constraint satisfied
    except Exception as e:
        return -1  # Constraint not satisfied due to an exception
",default,1.0,1,0,0,1,0,TP,logic
post-/projects,BasicProjectDetails,visibility,visibility,10,,,parameters,visibility,See project visibility level,c,False,"{
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""issues_enabled"": true,
  ""merge_requests_enabled"": true,
  ""allow_merge_on_skipped_pipeline"": null,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""auto_devops_enabled"": true,
  ""autoclose_referenced_issues"": true,
  ""container_registry_enabled"": true,
  ""default_branch"": ""main"",
  ""description"": null,
  ""jobs_enabled"": true,
  ""merge_method"": ""merge"",
  ""name"": ""test_project_1"",
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""packages_enabled"": true,
  ""path"": ""test_project_1"",
  ""remove_source_branch_after_merge"": true,
  ""request_access_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""shared_runners_enabled"": true,
  ""snippets_enabled"": true,
  ""tag_list"": [],
  ""wiki_enabled"": true
}","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":null,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}","def verify_latest_response(latest_response, request_info):
    try:
        # Extract the visibility attribute from the response
        visibility = latest_response.get(""visibility"")
        
        # Check if visibility is present in the response
        if visibility is None:
            return 0
        
        # Define the allowed visibility values
        allowed_values = [""private"", ""internal"", ""public""]
        
        # Verify if the visibility value is within the allowed values
        if visibility in allowed_values:
            return 1
        else:
            return -1
    except Exception as e:
        # In case of any exception, return -1 indicating failure
        return -1
",private,1.0,1,0,0,1,0,TP,"range of values, logic"
post-/projects,BasicProjectDetails,issues_enabled,issues_enabled,11,,,parameters,issues_enabled,(Deprecated)Enable issues for this project. Use issues_access_level instead,c,False,"{
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""issues_enabled"": true,
  ""merge_requests_enabled"": true,
  ""allow_merge_on_skipped_pipeline"": null,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""auto_devops_enabled"": true,
  ""autoclose_referenced_issues"": true,
  ""container_registry_enabled"": true,
  ""default_branch"": ""main"",
  ""description"": null,
  ""jobs_enabled"": true,
  ""merge_method"": ""merge"",
  ""name"": ""test_project_1"",
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""packages_enabled"": true,
  ""path"": ""test_project_1"",
  ""remove_source_branch_after_merge"": true,
  ""request_access_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""shared_runners_enabled"": true,
  ""snippets_enabled"": true,
  ""tag_list"": [],
  ""wiki_enabled"": true
}","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":null,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}","def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'issues_enabled' is in the response
        if 'issues_enabled' not in latest_response:
            return 0
        
        # Check if 'issues_enabled' is a boolean
        if not isinstance(latest_response['issues_enabled'], bool):
            return -1
        
        return 1
    except Exception as e:
        return -1
",True,1.0,1,0,0,1,0,TP,"range of values, logic"
post-/projects,BasicProjectDetails,merge_requests_enabled,merge_requests_enabled,12,,,parameters,merge_requests_enabled,(Deprecated)Enable merge requests for this project. Use merge_requests_access_level instead,c,False,"{
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""issues_enabled"": true,
  ""merge_requests_enabled"": true,
  ""allow_merge_on_skipped_pipeline"": null,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""auto_devops_enabled"": true,
  ""autoclose_referenced_issues"": true,
  ""container_registry_enabled"": true,
  ""default_branch"": ""main"",
  ""description"": null,
  ""jobs_enabled"": true,
  ""merge_method"": ""merge"",
  ""name"": ""test_project_1"",
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""packages_enabled"": true,
  ""path"": ""test_project_1"",
  ""remove_source_branch_after_merge"": true,
  ""request_access_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""shared_runners_enabled"": true,
  ""snippets_enabled"": true,
  ""tag_list"": [],
  ""wiki_enabled"": true
}","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":null,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}","def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'merge_requests_enabled' is in the response
        if 'merge_requests_enabled' not in latest_response:
            return 0
        
        # Check if 'merge_requests_enabled' is a boolean
        if not isinstance(latest_response['merge_requests_enabled'], bool):
            return -1
        
        # If 'merge_requests_enabled' is provided in request_info, validate its value
        if 'merge_requests_enabled' in request_info:
            request_value = request_info['merge_requests_enabled']
            if isinstance(request_value, str):
                if request_value.lower() == 'true':
                    request_value = True
                elif request_value.lower() == 'false':
                    request_value = False
                else:
                    return -1
            elif not isinstance(request_value, bool):
                return -1
            
            if latest_response['merge_requests_enabled'] != request_value:
                return -1
        
        return 1
    except Exception as e:
        return -1
",True,1.0,1,0,0,1,0,TP,"range of values, logic"
post-/projects,BasicProjectDetails,allow_merge_on_skipped_pipeline,allow_merge_on_skipped_pipeline,13,,,parameters,allow_merge_on_skipped_pipeline,Set whether or not merge requests can be merged with skipped jobs,,False,"{
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""issues_enabled"": true,
  ""merge_requests_enabled"": true,
  ""allow_merge_on_skipped_pipeline"": null,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""auto_devops_enabled"": true,
  ""autoclose_referenced_issues"": true,
  ""container_registry_enabled"": true,
  ""default_branch"": ""main"",
  ""description"": null,
  ""jobs_enabled"": true,
  ""merge_method"": ""merge"",
  ""name"": ""test_project_1"",
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""packages_enabled"": true,
  ""path"": ""test_project_1"",
  ""remove_source_branch_after_merge"": true,
  ""request_access_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""shared_runners_enabled"": true,
  ""snippets_enabled"": true,
  ""tag_list"": [],
  ""wiki_enabled"": true
}","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":null,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}","def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'allow_merge_on_skipped_pipeline' is present in the request_info
        if 'allow_merge_on_skipped_pipeline' in request_info:
            request_value = request_info['allow_merge_on_skipped_pipeline']
            if not isinstance(request_value, bool):
                return -1  # Invalid type in request_info

        # Check if 'allow_merge_on_skipped_pipeline' is present in the latest_response
        if 'allow_merge_on_skipped_pipeline' in latest_response:
            response_value = latest_response['allow_merge_on_skipped_pipeline']
            if not isinstance(response_value, bool):
                return -1  # Invalid type in latest_response

            # If both request and response have the attribute, they must match
            if 'allow_merge_on_skipped_pipeline' in request_info:
                if request_value != response_value:
                    return -1  # Mismatch between request and response values
            return 1  # All checks passed, and values are consistent if present in both
        else:
            return 0  # Attribute does not exist in the response
    except Exception as e:
        return -1  # Any exception results in a failure to verify

    return 0  # Default case if no conditions are met
",False,1.0,0,1,0,0,0,TP,
post-/projects,BasicProjectDetails,auto_devops_deploy_strategy,auto_devops_deploy_strategy,14,,,parameters,auto_devops_deploy_strategy,Auto Deploy strategy,c,False,"{
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""issues_enabled"": true,
  ""merge_requests_enabled"": true,
  ""allow_merge_on_skipped_pipeline"": null,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""auto_devops_enabled"": true,
  ""autoclose_referenced_issues"": true,
  ""container_registry_enabled"": true,
  ""default_branch"": ""main"",
  ""description"": null,
  ""jobs_enabled"": true,
  ""merge_method"": ""merge"",
  ""name"": ""test_project_1"",
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""packages_enabled"": true,
  ""path"": ""test_project_1"",
  ""remove_source_branch_after_merge"": true,
  ""request_access_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""shared_runners_enabled"": true,
  ""snippets_enabled"": true,
  ""tag_list"": [],
  ""wiki_enabled"": true
}","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":null,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}","def verify_latest_response(latest_response, request_info):
    try:
        # Extract the auto_devops_deploy_strategy from the response
        deploy_strategy = latest_response.get(""auto_devops_deploy_strategy"", None)
        
        # If the attribute does not exist in the response
        if deploy_strategy is None:
            return 0
        
        # Define the allowed values for auto_devops_deploy_strategy
        allowed_values = [""continuous"", ""manual"", ""timed_incremental""]
        
        # Check if the deploy strategy is one of the allowed values
        if deploy_strategy in allowed_values:
            return 1
        else:
            return -1
    except Exception as e:
        # In case of any unexpected error
        return -1
",continuous,1.0,1,0,0,1,0,TP,logic
post-/projects,BasicProjectDetails,auto_devops_enabled,auto_devops_enabled,15,,,parameters,auto_devops_enabled,Enable Auto DevOps for this project,c,False,"{
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""issues_enabled"": true,
  ""merge_requests_enabled"": true,
  ""allow_merge_on_skipped_pipeline"": null,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""auto_devops_enabled"": true,
  ""autoclose_referenced_issues"": true,
  ""container_registry_enabled"": true,
  ""default_branch"": ""main"",
  ""description"": null,
  ""jobs_enabled"": true,
  ""merge_method"": ""merge"",
  ""name"": ""test_project_1"",
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""packages_enabled"": true,
  ""path"": ""test_project_1"",
  ""remove_source_branch_after_merge"": true,
  ""request_access_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""shared_runners_enabled"": true,
  ""snippets_enabled"": true,
  ""tag_list"": [],
  ""wiki_enabled"": true
}","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":null,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}","def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'auto_devops_enabled' is in the response
        if 'auto_devops_enabled' not in latest_response:
            return 0
        
        # Check if the type of 'auto_devops_enabled' is boolean
        if not isinstance(latest_response['auto_devops_enabled'], bool):
            return -1
        
        # If 'auto_devops_enabled' is provided in the request, check if it matches the response
        if 'auto_devops_enabled' in request_info:
            request_value = request_info['auto_devops_enabled']
            if isinstance(request_value, str):
                request_value = request_value.lower() == 'true'
            if latest_response['auto_devops_enabled'] != request_value:
                return -1
        
        return 1
    except Exception as e:
        return -1
",True,1.0,1,0,0,1,0,TP,"range of values, logic"
post-/projects,BasicProjectDetails,autoclose_referenced_issues,autoclose_referenced_issues,16,,,parameters,autoclose_referenced_issues,Set whether auto-closing referenced issues on default branch,c,False,"{
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""issues_enabled"": true,
  ""merge_requests_enabled"": true,
  ""allow_merge_on_skipped_pipeline"": null,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""auto_devops_enabled"": true,
  ""autoclose_referenced_issues"": true,
  ""container_registry_enabled"": true,
  ""default_branch"": ""main"",
  ""description"": null,
  ""jobs_enabled"": true,
  ""merge_method"": ""merge"",
  ""name"": ""test_project_1"",
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""packages_enabled"": true,
  ""path"": ""test_project_1"",
  ""remove_source_branch_after_merge"": true,
  ""request_access_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""shared_runners_enabled"": true,
  ""snippets_enabled"": true,
  ""tag_list"": [],
  ""wiki_enabled"": true
}","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":null,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}","def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'autoclose_referenced_issues' is in the response
        if 'autoclose_referenced_issues' not in latest_response:
            return 0
        
        # Check if 'autoclose_referenced_issues' is a boolean
        if not isinstance(latest_response['autoclose_referenced_issues'], bool):
            return -1
        
        # If 'autoclose_referenced_issues' is in the request_info, verify it matches the response
        if 'autoclose_referenced_issues' in request_info:
            request_value = request_info['autoclose_referenced_issues']
            if isinstance(request_value, str):
                request_value = request_value.lower() == 'true'
            if latest_response['autoclose_referenced_issues'] != request_value:
                return -1
        
        return 1
    except Exception as e:
        return -1
",True,1.0,1,0,0,1,0,TP,"range of values, logic"
post-/projects,BasicProjectDetails,container_registry_enabled,container_registry_enabled,18,,,parameters,container_registry_enabled,Enable container registry for this project,c,False,"{
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""issues_enabled"": true,
  ""merge_requests_enabled"": true,
  ""allow_merge_on_skipped_pipeline"": null,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""auto_devops_enabled"": true,
  ""autoclose_referenced_issues"": true,
  ""container_registry_enabled"": true,
  ""default_branch"": ""main"",
  ""description"": null,
  ""jobs_enabled"": true,
  ""merge_method"": ""merge"",
  ""name"": ""test_project_1"",
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""packages_enabled"": true,
  ""path"": ""test_project_1"",
  ""remove_source_branch_after_merge"": true,
  ""request_access_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""shared_runners_enabled"": true,
  ""snippets_enabled"": true,
  ""tag_list"": [],
  ""wiki_enabled"": true
}","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":null,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}","def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'container_registry_enabled' is present in request_info
        if 'container_registry_enabled' in request_info:
            request_value = request_info['container_registry_enabled']
            if not isinstance(request_value, bool):
                return -1  # Invalid type in request_info

        # Check if 'container_registry_enabled' is present in latest_response
        if 'container_registry_enabled' in latest_response:
            response_value = latest_response['container_registry_enabled']
            if not isinstance(response_value, bool):
                return -1  # Invalid type in latest_response

            # If both request and response have 'container_registry_enabled', they must match
            if 'container_registry_enabled' in request_info:
                if request_value != response_value:
                    return -1  # Mismatch between request and response
            return 1  # Valid response and matches request if present
        else:
            return 0  # Attribute not present in response
    except Exception as e:
        return -1  # Handle any unexpected exception during verification

    return 0  # Default case if no conditions are met
",False,1.0,1,0,0,1,0,TP,"range of values, logic"
post-/projects,BasicProjectDetails,default_branch,default_branch,19,,,parameters,default_branch,master by default,c,False,"{
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""issues_enabled"": true,
  ""merge_requests_enabled"": true,
  ""allow_merge_on_skipped_pipeline"": null,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""auto_devops_enabled"": true,
  ""autoclose_referenced_issues"": true,
  ""container_registry_enabled"": true,
  ""default_branch"": ""main"",
  ""description"": null,
  ""jobs_enabled"": true,
  ""merge_method"": ""merge"",
  ""name"": ""test_project_1"",
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""packages_enabled"": true,
  ""path"": ""test_project_1"",
  ""remove_source_branch_after_merge"": true,
  ""request_access_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""shared_runners_enabled"": true,
  ""snippets_enabled"": true,
  ""tag_list"": [],
  ""wiki_enabled"": true
}","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":null,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}","def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'default_branch' is in the response
        if 'default_branch' not in latest_response:
            return 0  # Attribute does not exist in the response
        
        # Extract the 'default_branch' from the response
        response_default_branch = latest_response['default_branch']
        
        # Ensure the 'default_branch' is of type string
        if not isinstance(response_default_branch, str):
            return -1  # Constraint not satisfied
        
        # Check if 'default_branch' is provided in the request_info
        if 'default_branch' in request_info:
            request_default_branch = request_info['default_branch']
        else:
            request_default_branch = 'master'  # Default value
        
        # Verify the 'default_branch' in the response matches the expected value
        if response_default_branch == request_default_branch:
            return 1  # Constraint satisfied
        else:
            return -1  # Constraint not satisfied
    except Exception as e:
        return -1  # Constraint not satisfied due to an error
",master,1.0,1,0,0,1,0,TP,logic
post-/projects,BasicProjectDetails,description,description,20,,,parameters,description,Short project description,c,False,"{
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""issues_enabled"": true,
  ""merge_requests_enabled"": true,
  ""allow_merge_on_skipped_pipeline"": null,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""auto_devops_enabled"": true,
  ""autoclose_referenced_issues"": true,
  ""container_registry_enabled"": true,
  ""default_branch"": ""main"",
  ""description"": null,
  ""jobs_enabled"": true,
  ""merge_method"": ""merge"",
  ""name"": ""test_project_1"",
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""packages_enabled"": true,
  ""path"": ""test_project_1"",
  ""remove_source_branch_after_merge"": true,
  ""request_access_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""shared_runners_enabled"": true,
  ""snippets_enabled"": true,
  ""tag_list"": [],
  ""wiki_enabled"": true
}","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":null,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}","def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'description' exists in request_info and if it is a string or None
        if 'description' in request_info:
            if not (isinstance(request_info['description'], str) or request_info['description'] is None):
                return -1
        
        # Check if 'description' exists in latest_response and if it is a string or None
        if 'description' in latest_response:
            if not (isinstance(latest_response['description'], str) or latest_response['description'] is None):
                return -1
        else:
            # 'description' does not exist in the response
            return 0
        
        # If all checks pass, the constraints are satisfied
        return 1
    except Exception as e:
        # In case of any exception, assume verification failed
        return -1
",GitLab Community Edition,1.0,1,0,0,1,0,TP,logic
post-/projects,BasicProjectDetails,jobs_enabled,jobs_enabled,21,,,parameters,jobs_enabled,(Deprecated)Enable jobs for this project. Use builds_access_level instead,c,False,"{
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""issues_enabled"": true,
  ""merge_requests_enabled"": true,
  ""allow_merge_on_skipped_pipeline"": null,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""auto_devops_enabled"": true,
  ""autoclose_referenced_issues"": true,
  ""container_registry_enabled"": true,
  ""default_branch"": ""main"",
  ""description"": null,
  ""jobs_enabled"": true,
  ""merge_method"": ""merge"",
  ""name"": ""test_project_1"",
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""packages_enabled"": true,
  ""path"": ""test_project_1"",
  ""remove_source_branch_after_merge"": true,
  ""request_access_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""shared_runners_enabled"": true,
  ""snippets_enabled"": true,
  ""tag_list"": [],
  ""wiki_enabled"": true
}","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":null,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}","def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'jobs_enabled' is in the response
        if 'jobs_enabled' not in latest_response:
            return 0
        
        # Check if 'jobs_enabled' is a boolean
        if not isinstance(latest_response['jobs_enabled'], bool):
            return -1
        
        # If 'jobs_enabled' is present and is a boolean, return 1
        return 1
    except Exception as e:
        # In case of any unexpected error, return -1
        return -1
",True,1.0,1,0,0,1,0,TP,"range of values, logic"
post-/projects,BasicProjectDetails,merge_method,merge_method,22,,,parameters,merge_method,Set the merge method used,c,False,"{
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""issues_enabled"": true,
  ""merge_requests_enabled"": true,
  ""allow_merge_on_skipped_pipeline"": null,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""auto_devops_enabled"": true,
  ""autoclose_referenced_issues"": true,
  ""container_registry_enabled"": true,
  ""default_branch"": ""main"",
  ""description"": null,
  ""jobs_enabled"": true,
  ""merge_method"": ""merge"",
  ""name"": ""test_project_1"",
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""packages_enabled"": true,
  ""path"": ""test_project_1"",
  ""remove_source_branch_after_merge"": true,
  ""request_access_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""shared_runners_enabled"": true,
  ""snippets_enabled"": true,
  ""tag_list"": [],
  ""wiki_enabled"": true
}","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":null,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}","def verify_latest_response(latest_response, request_info):
    try:
        # Extract the merge_method from the response
        merge_method = latest_response.get(""merge_method"")
        
        # Check if merge_method is present in the response
        if merge_method is None:
            return 0
        
        # Define the allowed values for merge_method
        allowed_values = [""merge"", ""rebase_merge"", ""ff""]
        
        # Verify if the merge_method in the response is one of the allowed values
        if merge_method in allowed_values:
            return 1
        else:
            return -1
    except Exception as e:
        # Handle any unexpected errors
        return -1
",merge,1.0,1,0,0,1,0,TP,"range of values, logic"
post-/projects,BasicProjectDetails,name,name,23,,,parameters,name,"The name of the new project. Either path or name is required, not both",x,False,"{
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""issues_enabled"": true,
  ""merge_requests_enabled"": true,
  ""allow_merge_on_skipped_pipeline"": null,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""auto_devops_enabled"": true,
  ""autoclose_referenced_issues"": true,
  ""container_registry_enabled"": true,
  ""default_branch"": ""main"",
  ""description"": null,
  ""jobs_enabled"": true,
  ""merge_method"": ""merge"",
  ""name"": ""test_project_1"",
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""packages_enabled"": true,
  ""path"": ""test_project_1"",
  ""remove_source_branch_after_merge"": true,
  ""request_access_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""shared_runners_enabled"": true,
  ""snippets_enabled"": true,
  ""tag_list"": [],
  ""wiki_enabled"": true
}","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":null,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}","def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'name' is in request_info and not None
        if 'name' in request_info and request_info['name'] is not None:
            # Check if 'name' is also in latest_response and not None
            if 'name' in latest_response and latest_response['name'] is not None:
                # Verify that the type of 'name' in latest_response is string
                if isinstance(latest_response['name'], str):
                    return 1  # Constraint is satisfied
                else:
                    return -1  # Constraint is not satisfied because it's not a string
            else:
                return 0  # Insufficient information to verify the constraint
        else:
            # 'name' is not in request_info or is None, check if 'name' in latest_response is also None or not present
            if 'name' not in latest_response or latest_response['name'] is None:
                return 1  # Constraint is satisfied as both are None or not present
            else:
                return -1  # Constraint is not satisfied as 'name' should not be in response
    except Exception as e:
        print(f""An error occurred: {e}"")
        return -1  # Return -1 in case of any exception, indicating the constraint is not satisfied
",Diaspora Client,1.0,1,0,0,1,0,TP,inter-parameter dependency
post-/projects,BasicProjectDetails,only_allow_merge_if_all_discussions_are_resolved,only_allow_merge_if_all_discussions_are_resolved,24,,,parameters,only_allow_merge_if_all_discussions_are_resolved,Set whether merge requests can only be merged when all the discussions are resolved,c,False,"{
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""issues_enabled"": true,
  ""merge_requests_enabled"": true,
  ""allow_merge_on_skipped_pipeline"": null,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""auto_devops_enabled"": true,
  ""autoclose_referenced_issues"": true,
  ""container_registry_enabled"": true,
  ""default_branch"": ""main"",
  ""description"": null,
  ""jobs_enabled"": true,
  ""merge_method"": ""merge"",
  ""name"": ""test_project_1"",
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""packages_enabled"": true,
  ""path"": ""test_project_1"",
  ""remove_source_branch_after_merge"": true,
  ""request_access_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""shared_runners_enabled"": true,
  ""snippets_enabled"": true,
  ""tag_list"": [],
  ""wiki_enabled"": true
}","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":null,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}","def verify_latest_response(latest_response, request_info):
    try:
        # Check if the attribute exists in the response
        if 'only_allow_merge_if_all_discussions_are_resolved' not in latest_response:
            return 0
        
        # Extract the value from the response
        response_value = latest_response['only_allow_merge_if_all_discussions_are_resolved']
        
        # Ensure the value is a boolean
        if not isinstance(response_value, bool):
            return -1
        
        # Check if the request parameter exists and is a boolean
        if 'only_allow_merge_if_all_discussions_are_resolved' in request_info:
            request_value = request_info['only_allow_merge_if_all_discussions_are_resolved']
            if not isinstance(request_value, bool):
                return -1
            
            # Verify the constraint
            if response_value == request_value:
                return 1
            else:
                return -1
        else:
            return 1  # If the parameter is not in the request, the response is valid as long as it's a boolean

    except Exception as e:
        return -1
",False,1.0,1,0,0,1,0,TP,"range of values, logic"
post-/projects,BasicProjectDetails,only_allow_merge_if_pipeline_succeeds,only_allow_merge_if_pipeline_succeeds,25,,,parameters,only_allow_merge_if_pipeline_succeeds,Set whether merge requests can only be merged with successful jobs,c,False,"{
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""issues_enabled"": true,
  ""merge_requests_enabled"": true,
  ""allow_merge_on_skipped_pipeline"": null,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""auto_devops_enabled"": true,
  ""autoclose_referenced_issues"": true,
  ""container_registry_enabled"": true,
  ""default_branch"": ""main"",
  ""description"": null,
  ""jobs_enabled"": true,
  ""merge_method"": ""merge"",
  ""name"": ""test_project_1"",
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""packages_enabled"": true,
  ""path"": ""test_project_1"",
  ""remove_source_branch_after_merge"": true,
  ""request_access_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""shared_runners_enabled"": true,
  ""snippets_enabled"": true,
  ""tag_list"": [],
  ""wiki_enabled"": true
}","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":null,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}","def verify_latest_response(latest_response, request_info):
    try:
        # Check if the 'only_allow_merge_if_pipeline_succeeds' attribute is present in the response
        if 'only_allow_merge_if_pipeline_succeeds' not in latest_response:
            return 0
        
        # Extract the value of 'only_allow_merge_if_pipeline_succeeds' from the response
        response_value = latest_response['only_allow_merge_if_pipeline_succeeds']
        
        # Check if the request_info contains the 'only_allow_merge_if_pipeline_succeeds' parameter
        if 'only_allow_merge_if_pipeline_succeeds' in request_info:
            request_value = request_info['only_allow_merge_if_pipeline_succeeds']
            
            # Assert that the response value matches the request value
            if response_value == request_value:
                return 1
            else:
                return -1
        else:
            # If the parameter is not in the request_info, we assume no specific constraint to check
            return 1
    except Exception as e:
        # In case of any unexpected error, return -1
        return -1
",False,1.0,1,0,0,1,0,TP,"range of values, logic"
post-/projects,BasicProjectDetails,packages_enabled,packages_enabled,26,,,parameters,packages_enabled,Enable or disable packages repository feature,c,False,"{
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""issues_enabled"": true,
  ""merge_requests_enabled"": true,
  ""allow_merge_on_skipped_pipeline"": null,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""auto_devops_enabled"": true,
  ""autoclose_referenced_issues"": true,
  ""container_registry_enabled"": true,
  ""default_branch"": ""main"",
  ""description"": null,
  ""jobs_enabled"": true,
  ""merge_method"": ""merge"",
  ""name"": ""test_project_1"",
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""packages_enabled"": true,
  ""path"": ""test_project_1"",
  ""remove_source_branch_after_merge"": true,
  ""request_access_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""shared_runners_enabled"": true,
  ""snippets_enabled"": true,
  ""tag_list"": [],
  ""wiki_enabled"": true
}","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":null,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}","def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'packages_enabled' exists in the response
        if 'packages_enabled' not in latest_response:
            return 0  # Attribute does not exist in the response

        # Check if 'packages_enabled' is of type boolean
        if not isinstance(latest_response['packages_enabled'], bool):
            return -1  # Constraint not satisfied

        return 1  # Constraint satisfied
    except Exception as e:
        return -1  # Constraint not satisfied due to an error
",True,1.0,1,0,0,1,0,TP,range of values
post-/projects,BasicProjectDetails,path,path,27,,,parameters,path,Repository name for new project. Generated based on name if not provided (generated as lowercase with dashes),c,False,"{
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""issues_enabled"": true,
  ""merge_requests_enabled"": true,
  ""allow_merge_on_skipped_pipeline"": null,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""auto_devops_enabled"": true,
  ""autoclose_referenced_issues"": true,
  ""container_registry_enabled"": true,
  ""default_branch"": ""main"",
  ""description"": null,
  ""jobs_enabled"": true,
  ""merge_method"": ""merge"",
  ""name"": ""test_project_1"",
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""packages_enabled"": true,
  ""path"": ""test_project_1"",
  ""remove_source_branch_after_merge"": true,
  ""request_access_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""shared_runners_enabled"": true,
  ""snippets_enabled"": true,
  ""tag_list"": [],
  ""wiki_enabled"": true
}","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":null,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}","def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'path' is provided in the request_info
        if 'path' in request_info:
            requested_path = request_info['path']
            # Check if the requested path matches the constraints (lowercase with dashes)
            if requested_path != requested_path.lower().replace("" "", ""-""):
                return -1
        else:
            requested_path = None

        # Check if 'path' exists in the latest_response
        if 'path' in latest_response:
            response_path = latest_response['path']
            if response_path is None:
                return 0  # Insufficient information to verify the constraint
            # If a path was requested, check if the response matches it
            if requested_path is not None and requested_path != response_path:
                return -1
            # If no specific path was requested, check if the response path is lowercase with dashes
            elif requested_path is None and response_path != response_path.lower().replace("" "", ""-""):
                return -1
        else:
            return 0  # Path attribute does not exist in the response

        return 1  # All constraints are satisfied
    except Exception as e:
        print(f""An error occurred: {e}"")
        return -1  # Return -1 in case of any exception, indicating that constraints are not satisfied
",diaspora-client,1.0,1,0,0,1,0,TP,format
post-/projects,BasicProjectDetails,remove_source_branch_after_merge,remove_source_branch_after_merge,28,,,parameters,remove_source_branch_after_merge,Enable Delete source branch option by default for all new merge requests,c,False,"{
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""issues_enabled"": true,
  ""merge_requests_enabled"": true,
  ""allow_merge_on_skipped_pipeline"": null,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""auto_devops_enabled"": true,
  ""autoclose_referenced_issues"": true,
  ""container_registry_enabled"": true,
  ""default_branch"": ""main"",
  ""description"": null,
  ""jobs_enabled"": true,
  ""merge_method"": ""merge"",
  ""name"": ""test_project_1"",
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""packages_enabled"": true,
  ""path"": ""test_project_1"",
  ""remove_source_branch_after_merge"": true,
  ""request_access_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""shared_runners_enabled"": true,
  ""snippets_enabled"": true,
  ""tag_list"": [],
  ""wiki_enabled"": true
}","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":null,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}","def verify_latest_response(latest_response, request_info):
    try:
        # Check if the 'remove_source_branch_after_merge' attribute exists in the response
        if 'remove_source_branch_after_merge' not in latest_response:
            return 0
        
        # Check if the attribute is of type boolean
        if isinstance(latest_response['remove_source_branch_after_merge'], bool):
            return 1
        else:
            return -1
    except Exception as e:
        return -1
",False,1.0,1,0,0,1,0,TP,"range of values, logic"
post-/projects,BasicProjectDetails,request_access_enabled,request_access_enabled,29,,,parameters,request_access_enabled,Allow users to request member access,c,False,"{
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""issues_enabled"": true,
  ""merge_requests_enabled"": true,
  ""allow_merge_on_skipped_pipeline"": null,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""auto_devops_enabled"": true,
  ""autoclose_referenced_issues"": true,
  ""container_registry_enabled"": true,
  ""default_branch"": ""main"",
  ""description"": null,
  ""jobs_enabled"": true,
  ""merge_method"": ""merge"",
  ""name"": ""test_project_1"",
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""packages_enabled"": true,
  ""path"": ""test_project_1"",
  ""remove_source_branch_after_merge"": true,
  ""request_access_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""shared_runners_enabled"": true,
  ""snippets_enabled"": true,
  ""tag_list"": [],
  ""wiki_enabled"": true
}","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":null,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}","def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'request_access_enabled' is in the response
        if 'request_access_enabled' not in latest_response:
            return 0  # Attribute does not exist in the response
        
        # Check if the type of 'request_access_enabled' is boolean
        if not isinstance(latest_response['request_access_enabled'], bool):
            return -1  # Constraint not satisfied
        
        return 1  # Constraint satisfied
    except Exception as e:
        return -1  # Constraint not satisfied due to an exception
",False,1.0,1,0,0,1,0,TP,logic
post-/projects,BasicProjectDetails,resolve_outdated_diff_discussions,resolve_outdated_diff_discussions,30,,,parameters,resolve_outdated_diff_discussions,Automatically resolve merge request diffs discussions on lines changed with a push,c,False,"{
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""issues_enabled"": true,
  ""merge_requests_enabled"": true,
  ""allow_merge_on_skipped_pipeline"": null,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""auto_devops_enabled"": true,
  ""autoclose_referenced_issues"": true,
  ""container_registry_enabled"": true,
  ""default_branch"": ""main"",
  ""description"": null,
  ""jobs_enabled"": true,
  ""merge_method"": ""merge"",
  ""name"": ""test_project_1"",
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""packages_enabled"": true,
  ""path"": ""test_project_1"",
  ""remove_source_branch_after_merge"": true,
  ""request_access_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""shared_runners_enabled"": true,
  ""snippets_enabled"": true,
  ""tag_list"": [],
  ""wiki_enabled"": true
}","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":null,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}","def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'resolve_outdated_diff_discussions' exists in the response
        if 'resolve_outdated_diff_discussions' not in latest_response:
            return 0
        
        # Check if the value of 'resolve_outdated_diff_discussions' is a boolean
        if isinstance(latest_response['resolve_outdated_diff_discussions'], bool):
            return 1
        else:
            return -1
    except Exception as e:
        return -1
",False,1.0,1,0,0,1,0,TP,logic
post-/projects,BasicProjectDetails,shared_runners_enabled,shared_runners_enabled,31,,,parameters,shared_runners_enabled,Enable shared runners for this project,c,False,"{
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""issues_enabled"": true,
  ""merge_requests_enabled"": true,
  ""allow_merge_on_skipped_pipeline"": null,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""auto_devops_enabled"": true,
  ""autoclose_referenced_issues"": true,
  ""container_registry_enabled"": true,
  ""default_branch"": ""main"",
  ""description"": null,
  ""jobs_enabled"": true,
  ""merge_method"": ""merge"",
  ""name"": ""test_project_1"",
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""packages_enabled"": true,
  ""path"": ""test_project_1"",
  ""remove_source_branch_after_merge"": true,
  ""request_access_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""shared_runners_enabled"": true,
  ""snippets_enabled"": true,
  ""tag_list"": [],
  ""wiki_enabled"": true
}","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":null,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}","def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'shared_runners_enabled' is present in request_info and is a boolean
        if 'shared_runners_enabled' in request_info:
            if not isinstance(request_info['shared_runners_enabled'], bool):
                return -1
        
        # Check if 'shared_runners_enabled' is present in latest_response and is a boolean
        if 'shared_runners_enabled' in latest_response:
            if not isinstance(latest_response['shared_runners_enabled'], bool):
                return -1
        else:
            # 'shared_runners_enabled' not present in the response
            return 0
        
        # If all checks pass, the constraints are satisfied
        return 1
    except Exception as e:
        # In case of any exception, return -1 indicating failure to satisfy the constraints
        return -1
",True,1.0,1,0,0,1,0,TP,"range of values, logic"
post-/projects,BasicProjectDetails,snippets_enabled,snippets_enabled,32,,,parameters,snippets_enabled,(Deprecated)Enable snippets for this project. Use snippets_access_level instead,c,False,"{
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""issues_enabled"": true,
  ""merge_requests_enabled"": true,
  ""allow_merge_on_skipped_pipeline"": null,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""auto_devops_enabled"": true,
  ""autoclose_referenced_issues"": true,
  ""container_registry_enabled"": true,
  ""default_branch"": ""main"",
  ""description"": null,
  ""jobs_enabled"": true,
  ""merge_method"": ""merge"",
  ""name"": ""test_project_1"",
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""packages_enabled"": true,
  ""path"": ""test_project_1"",
  ""remove_source_branch_after_merge"": true,
  ""request_access_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""shared_runners_enabled"": true,
  ""snippets_enabled"": true,
  ""tag_list"": [],
  ""wiki_enabled"": true
}","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":null,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}","def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'snippets_enabled' is in the response
        if 'snippets_enabled' not in latest_response:
            return 0
        
        # Check if 'snippets_enabled' is a boolean
        if not isinstance(latest_response['snippets_enabled'], bool):
            return -1
        
        # If the request_info contains 'snippets_enabled', verify it matches the response
        if 'snippets_enabled' in request_info:
            if latest_response['snippets_enabled'] != request_info['snippets_enabled']:
                return -1
        
        return 1
    except Exception as e:
        return -1
",False,1.0,1,0,0,1,0,TP,"range of values, logic"
post-/projects,BasicProjectDetails,tag_list,tag_list,33,,,parameters,tag_list,"The list of tags for a project; put array of tags, that should be finally assigned to a project",c,False,"{
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""issues_enabled"": true,
  ""merge_requests_enabled"": true,
  ""allow_merge_on_skipped_pipeline"": null,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""auto_devops_enabled"": true,
  ""autoclose_referenced_issues"": true,
  ""container_registry_enabled"": true,
  ""default_branch"": ""main"",
  ""description"": null,
  ""jobs_enabled"": true,
  ""merge_method"": ""merge"",
  ""name"": ""test_project_1"",
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""packages_enabled"": true,
  ""path"": ""test_project_1"",
  ""remove_source_branch_after_merge"": true,
  ""request_access_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""shared_runners_enabled"": true,
  ""snippets_enabled"": true,
  ""tag_list"": [],
  ""wiki_enabled"": true
}","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":null,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}","def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'tag_list' exists in the response
        if 'tag_list' not in latest_response:
            return 0
        
        # Check if 'tag_list' is an array
        if not isinstance(latest_response['tag_list'], list):
            return -1
        
        # Check if all items in 'tag_list' are strings
        for item in latest_response['tag_list']:
            if not isinstance(item, str):
                return -1
        
        return 1
    except Exception as e:
        return -1
","['example', 'disapora client']",1.0,1,0,0,1,0,TP,logic
post-/projects,BasicProjectDetails,wiki_enabled,wiki_enabled,34,,,parameters,wiki_enabled,(Deprecated)Enable wiki for this project. Use wiki_access_levelinstead,c,False,"{
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""issues_enabled"": true,
  ""merge_requests_enabled"": true,
  ""allow_merge_on_skipped_pipeline"": null,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""auto_devops_enabled"": true,
  ""autoclose_referenced_issues"": true,
  ""container_registry_enabled"": true,
  ""default_branch"": ""main"",
  ""description"": null,
  ""jobs_enabled"": true,
  ""merge_method"": ""merge"",
  ""name"": ""test_project_1"",
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""packages_enabled"": true,
  ""path"": ""test_project_1"",
  ""remove_source_branch_after_merge"": true,
  ""request_access_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""shared_runners_enabled"": true,
  ""snippets_enabled"": true,
  ""tag_list"": [],
  ""wiki_enabled"": true
}","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":null,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}","def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'wiki_enabled' exists in both request_info and latest_response
        request_wiki_enabled = request_info.get('wiki_enabled')
        response_wiki_enabled = latest_response.get('wiki_enabled')

        # If 'wiki_enabled' is not required and not provided in the request, it's valid
        if request_wiki_enabled is None:
            return 1

        # If 'wiki_enabled' is provided in the request, check type and existence in response
        if isinstance(request_wiki_enabled, bool):
            if response_wiki_enabled is None:
                # Attribute does not exist in response
                return 0
            elif isinstance(response_wiki_enabled, bool):
                # Correct type and exists in response
                return 1
            else:
                # Incorrect type in response
                return -1
        else:
            # Incorrect type in request
            return -1
    except Exception as e:
        # Handle any unexpected exception during verification
        return -1
",True,1.0,1,0,0,1,0,TP,"range of values, logic"
post-/projects/{id}/protected_branches,ProtectedBranch,name,name,35,,,parameters,name,The name of the branch or wildcard,c,False,"{
  ""name"": ""*-stable"",
  ""allow_force_push"": false,
  ""branch"": ""*-stable""
}","{
  ""id"": 1,
  ""name"": ""*-stable"",
  ""push_access_levels"": [
    {
      ""id"":  1,
      ""access_level"": 30,
      ""access_level_description"": ""Developers + Maintainers""
    }
  ],
  ""merge_access_levels"": [
    {
      ""id"":  1,
      ""access_level"": 30,
      ""access_level_description"": ""Developers + Maintainers""
    }
  ],
  ""unprotect_access_levels"": [
    {
      ""id"":  1,
      ""access_level"": 40,
      ""access_level_description"": ""Maintainers""
    }
  ],
  ""allow_force_push"":false,
  ""code_owner_approval_required"": false
}","def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'name' is in the request_info and is required
        if 'name' not in request_info or not request_info['name']:
            return -1
        
        # Extract the 'name' from the request_info
        input_name = request_info['name']
        
        # Check if 'name' is in the latest_response
        if 'name' not in latest_response:
            return 0
        
        # Extract the 'name' from the latest_response
        response_name = latest_response['name']
        
        # Verify that the 'name' in the response matches the 'name' in the request
        if response_name == input_name:
            return 1
        else:
            return -1
    except Exception as e:
        # In case of any exception, return -1 indicating the constraint is not satisfied
        return -1
",Example User,1.0,1,0,0,1,0,TP,logic
post-/projects/{id}/protected_branches,ProtectedBranch,allow_force_push,allow_force_push,36,,,parameters,allow_force_push,Allow force push for all users with push access,c,False,"{
  ""name"": ""*-stable"",
  ""allow_force_push"": false,
  ""branch"": ""*-stable""
}","{
  ""id"": 1,
  ""name"": ""*-stable"",
  ""push_access_levels"": [
    {
      ""id"":  1,
      ""access_level"": 30,
      ""access_level_description"": ""Developers + Maintainers""
    }
  ],
  ""merge_access_levels"": [
    {
      ""id"":  1,
      ""access_level"": 30,
      ""access_level_description"": ""Developers + Maintainers""
    }
  ],
  ""unprotect_access_levels"": [
    {
      ""id"":  1,
      ""access_level"": 40,
      ""access_level_description"": ""Maintainers""
    }
  ],
  ""allow_force_push"":false,
  ""code_owner_approval_required"": false
}","def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'allow_force_push' is present in request_info and its type
        if 'allow_force_push' in request_info:
            if not isinstance(request_info['allow_force_push'], bool):
                return -1  # The type in request_info does not match the expected boolean type

        # Check if 'allow_force_push' is present in latest_response and its type
        if 'allow_force_push' in latest_response:
            if not isinstance(latest_response['allow_force_push'], bool):
                return -1  # The type in latest_response does not match the expected boolean type
        else:
            return 0  # 'allow_force_push' does not exist in latest_response

        # If 'allow_force_push' exists in both request_info and latest_response, compare their values
        if 'allow_force_push' in request_info and 'allow_force_push' in latest_response:
            if latest_response['allow_force_push'] == request_info['allow_force_push']:
                return 1  # The constraint is satisfied
            else:
                return -1  # The values do not match

        return 1  # If 'allow_force_push' is not in request_info but is correct in latest_response, consider it verified
    except Exception as e:
        return -1  # Any exception implies the constraint verification failed
",,,1,0,0,1,0,TP,logic
post-/projects/{id}/repository/branches,Branch,name,name,37,,,parameters,branch,The name of the branch,c,True,"{
  ""name"": ""*-stable"",
  ""allow_force_push"": false,
  ""branch"": ""*-stable""
}","{
  ""id"": 1,
  ""name"": ""*-stable"",
  ""push_access_levels"": [
    {
      ""id"":  1,
      ""access_level"": 30,
      ""access_level_description"": ""Developers + Maintainers""
    }
  ],
  ""merge_access_levels"": [
    {
      ""id"":  1,
      ""access_level"": 30,
      ""access_level_description"": ""Developers + Maintainers""
    }
  ],
  ""unprotect_access_levels"": [
    {
      ""id"":  1,
      ""access_level"": 40,
      ""access_level_description"": ""Maintainers""
    }
  ],
  ""allow_force_push"":false,
  ""code_owner_approval_required"": false
}","def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'branch' is in request_info and is a string
        if 'branch' not in request_info or not isinstance(request_info['branch'], str):
            return -1
        
        # Check if 'name' is in the latest_response and is a string
        if 'name' not in latest_response or not isinstance(latest_response['name'], str):
            return 0
        
        # Verify that the 'name' attribute in the response matches the 'branch' parameter in the request
        if latest_response['name'] == request_info['branch']:
            return 1
        else:
            return -1
    except Exception as e:
        return -1
",Example User,1.0,1,0,0,1,0,TP,logic
