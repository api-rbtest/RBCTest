kio,response resource,attribute,description,attribute inferred from operation,part,corresponding attribute,corresponding attribute description,x,name-identical,constraint_correctness,request information,API response,expected_test_outcome,verification script,Example_value,verify_result,satisfied,mismatched,unknown,tp,code error,category
1,BasicProjectDetails,archived,,get-/projects,parameters,archived,Limit by archived status,c,False,TP,"{""id_before"": 5, ""id_after"": 3, ""last_activity_before"": ""2024-03-10T00:00:00Z"", ""last_activity_after"": ""2024-03-01T00:00:00Z"",  ""archived"": false,
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""with_issues_enabled"": true,
  ""with_merge_requests_enabled"": true}","[{""id"":4,""description"":null,""name"":""test_project_4"",""name_with_namespace"":""Administrator / test_project_4"",""path"":""test_project_4"",""path_with_namespace"":""root/test_project_4"",""created_at"":""2024-03-04T09:07:50.094Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/test_project_4.git"",""http_url_to_repo"":""http://gitlab.example.com/root/test_project_4.git"",""web_url"":""http://gitlab.example.com/root/test_project_4"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-04T09:07:50.094Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/4"",""issues"":""http://gitlab.example.com/api/v4/projects/4/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/4/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/4/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/4/labels"",""events"":""http://gitlab.example.com/api/v4/projects/4/events"",""members"":""http://gitlab.example.com/api/v4/projects/4/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/4/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-05T09:07:50.163Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-04T09:07:50.094Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941-VrHsy7ofk3EnQ6N9jsG"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":null,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":null}}]",unknown,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the 'archived' parameter from the request_info
        archived_param = request_info.get('archived')
        
        # If 'archived' parameter is not provided in the request_info, return 0
        if archived_param is None:
            return 0
        
        # Convert the 'archived' parameter to a boolean
        archived_param = bool(archived_param)
        
        # Iterate through each project in the response
        for project in latest_response:
            # Check if the 'archived' attribute exists in the project
            if 'archived' not in project:
                return 0
            
            # Verify that the 'archived' attribute matches the 'archived' parameter
            if project['archived'] != archived_param:
                return -1
        
        # If all projects satisfy the constraint, return 1
        return 1
    except Exception as e:
        # If any exception occurs, return -1
        return -1
",False,1,1,0,0,1,0,"range of values, logic"
2,BasicProjectDetails,id,,get-/projects,parameters,id_after,Limit results to projects with IDs greater than the specified ID,c,True,TP,"{""id_before"": 5, ""id_after"": 3, ""last_activity_before"": ""2024-03-10T00:00:00Z"", ""last_activity_after"": ""2024-03-01T00:00:00Z"",  ""archived"": false,
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""with_issues_enabled"": true,
  ""with_merge_requests_enabled"": true}","[{""id"":4,""description"":null,""name"":""test_project_4"",""name_with_namespace"":""Administrator / test_project_4"",""path"":""test_project_4"",""path_with_namespace"":""root/test_project_4"",""created_at"":""2024-03-04T09:07:50.094Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/test_project_4.git"",""http_url_to_repo"":""http://gitlab.example.com/root/test_project_4.git"",""web_url"":""http://gitlab.example.com/root/test_project_4"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-04T09:07:50.094Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/4"",""issues"":""http://gitlab.example.com/api/v4/projects/4/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/4/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/4/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/4/labels"",""events"":""http://gitlab.example.com/api/v4/projects/4/events"",""members"":""http://gitlab.example.com/api/v4/projects/4/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/4/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-05T09:07:50.163Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-04T09:07:50.094Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941-VrHsy7ofk3EnQ6N9jsG"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":null,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":null}}]",satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        id_after = int(request_info.get(""id_after"", 0))
        for project in latest_response:
            if ""id"" not in project:
                return 0
            if not isinstance(project[""id""], int):
                return -1
            if project[""id""] <= id_after:
                return -1
        return 1
    except Exception as e:
        return -1
",4,1,1,0,0,1,0,logic
3,BasicProjectDetails,id,,get-/projects,parameters,id_before,Limit results to projects with IDs less than the specified ID,c,True,TP,"{""id_before"": 5, ""id_after"": 3, ""last_activity_before"": ""2024-03-10T00:00:00Z"", ""last_activity_after"": ""2024-03-01T00:00:00Z"",  ""archived"": false,
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""with_issues_enabled"": true,
  ""with_merge_requests_enabled"": true}","[{""id"":4,""description"":null,""name"":""test_project_4"",""name_with_namespace"":""Administrator / test_project_4"",""path"":""test_project_4"",""path_with_namespace"":""root/test_project_4"",""created_at"":""2024-03-04T09:07:50.094Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/test_project_4.git"",""http_url_to_repo"":""http://gitlab.example.com/root/test_project_4.git"",""web_url"":""http://gitlab.example.com/root/test_project_4"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-04T09:07:50.094Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/4"",""issues"":""http://gitlab.example.com/api/v4/projects/4/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/4/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/4/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/4/labels"",""events"":""http://gitlab.example.com/api/v4/projects/4/events"",""members"":""http://gitlab.example.com/api/v4/projects/4/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/4/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-05T09:07:50.163Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-04T09:07:50.094Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941-VrHsy7ofk3EnQ6N9jsG"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":null,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":null}}]",satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        id_before = int(request_info.get(""id_before"", None))
        if id_before is None:
            return 0
        
        for project in latest_response:
            if ""id"" not in project:
                return 0
            if not isinstance(project[""id""], int):
                return 0
            if project[""id""] >= id_before:
                return -1
        
        return 1
    except Exception as e:
        return -1
",4,1,1,0,0,1,0,logic
4,BasicProjectDetails,last_activity_at,,get-/projects,parameters,last_activity_after,Limit results to projects with last_activity after specified time.ISO 8601 YYYY-MM-DDTHH:MM:SSZ,c,True,TP,"{""id_before"": 5, ""id_after"": 3, ""last_activity_before"": ""2024-03-10T00:00:00Z"", ""last_activity_after"": ""2024-03-01T00:00:00Z"",  ""archived"": false,
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""with_issues_enabled"": true,
  ""with_merge_requests_enabled"": true}","[{""id"":4,""description"":null,""name"":""test_project_4"",""name_with_namespace"":""Administrator / test_project_4"",""path"":""test_project_4"",""path_with_namespace"":""root/test_project_4"",""created_at"":""2024-03-04T09:07:50.094Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/test_project_4.git"",""http_url_to_repo"":""http://gitlab.example.com/root/test_project_4.git"",""web_url"":""http://gitlab.example.com/root/test_project_4"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-04T09:07:50.094Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/4"",""issues"":""http://gitlab.example.com/api/v4/projects/4/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/4/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/4/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/4/labels"",""events"":""http://gitlab.example.com/api/v4/projects/4/events"",""members"":""http://gitlab.example.com/api/v4/projects/4/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/4/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-05T09:07:50.163Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-04T09:07:50.094Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941-VrHsy7ofk3EnQ6N9jsG"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":null,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":null}}]",mismatched,"from datetime import datetime
import json

def verify_latest_response(latest_response, request_info):
    try:
        last_activity_after = request_info.get(""last_activity_after"")
        if not last_activity_after:
            return 0
        
        last_activity_after_dt = datetime.strptime(last_activity_after, ""%Y-%m-%dT%H:%M:%SZ"")
        
        for project in latest_response:
            last_activity_at = project.get(""last_activity_at"")
            if not last_activity_at:
                return 0
            
            last_activity_at_dt = datetime.strptime(last_activity_at, ""%Y-%m-%dT%H:%M:%SZ"")
            if last_activity_at_dt <= last_activity_after_dt:
                return -1
        
        return 1
    except Exception as e:
        return -1
",2013-09-30T13:46:02Z,1,0,1,0,1,0,"logic, format"
5,BasicProjectDetails,last_activity_at,,get-/projects,parameters,last_activity_before,Limit results to projects with last_activity before specified time. ISO 8601 YYYY-MM-DDTHH:MM:SSZ,c,True,TP,"{""id_before"": 5, ""id_after"": 3, ""last_activity_before"": ""2024-03-10T00:00:00Z"", ""last_activity_after"": ""2024-03-01T00:00:00Z"",  ""archived"": false,
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""with_issues_enabled"": true,
  ""with_merge_requests_enabled"": true}","[{""id"":4,""description"":null,""name"":""test_project_4"",""name_with_namespace"":""Administrator / test_project_4"",""path"":""test_project_4"",""path_with_namespace"":""root/test_project_4"",""created_at"":""2024-03-04T09:07:50.094Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/test_project_4.git"",""http_url_to_repo"":""http://gitlab.example.com/root/test_project_4.git"",""web_url"":""http://gitlab.example.com/root/test_project_4"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-04T09:07:50.094Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/4"",""issues"":""http://gitlab.example.com/api/v4/projects/4/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/4/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/4/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/4/labels"",""events"":""http://gitlab.example.com/api/v4/projects/4/events"",""members"":""http://gitlab.example.com/api/v4/projects/4/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/4/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-05T09:07:50.163Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-04T09:07:50.094Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941-VrHsy7ofk3EnQ6N9jsG"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":null,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":null}}]",mismatched,"from datetime import datetime
import json

def verify_latest_response(latest_response, request_info):
    try:
        last_activity_before = request_info.get(""last_activity_before"")
        if not last_activity_before:
            return 0
        
        last_activity_before_dt = datetime.strptime(last_activity_before, ""%Y-%m-%dT%H:%M:%SZ"")
        
        for project in latest_response:
            last_activity_at = project.get(""last_activity_at"")
            if not last_activity_at:
                return 0
            
            last_activity_at_dt = datetime.strptime(last_activity_at, ""%Y-%m-%dT%H:%M:%SZ"")
            if last_activity_at_dt >= last_activity_before_dt:
                return -1
        
        return 1
    except Exception as e:
        return -1
",2013-09-30T13:46:02Z,1,0,1,0,1,0,"logic, format"
6,BasicProjectDetails,repository_storage,,post-/projects,parameters,repository_storage,Which storage shard the repository is on.(admins only),c,False,TP,"{
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""pages_access_level"": ""private"",
  ""repository_access_level"": ""enabled"",
  ""merge_requests_enabled"": true,
  ""allow_merge_on_skipped_pipeline"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""auto_devops_enabled"": true,
  ""autoclose_referenced_issues"": true,
  ""container_registry_enabled"": true,
  ""default_branch"": ""main"",
  ""description"": """",
  ""jobs_enabled"": true,
  ""merge_method"": ""merge"",
  ""name"": ""test_project_1"",
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""packages_enabled"": true,
  ""path"": ""test_project_1"",
  ""public_builds"": true,
  ""remove_source_branch_after_merge"": true,
  ""request_access_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""shared_runners_enabled"": true,
  ""snippets_enabled"": true,
  ""tag_list"": [],
  ""wiki_enabled"": true
}




","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}",satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the repository_storage from the request_info
        expected_repository_storage = request_info.get(""repository_storage"")
        
        # Check if the repository_storage exists in the latest_response
        if ""repository_storage"" not in latest_response:
            return 0
        
        # Extract the repository_storage from the latest_response
        actual_repository_storage = latest_response[""repository_storage""]
        
        # Verify if the actual repository_storage matches the expected repository_storage
        if actual_repository_storage == expected_repository_storage:
            return 1
        else:
            return -1
    except Exception as e:
        # In case of any exception, return -1 indicating the constraint is not satisfied
        return -1
",default,1,1,0,0,1,0,logic
7,BasicProjectDetails,repository_storage,,get-/projects,parameters,repository_storage,Limit results to projects stored on repository_storage. (admins only),c,False,TP,"{""id_before"": 5, ""id_after"": 3, ""last_activity_before"": ""2024-03-10T00:00:00Z"", ""last_activity_after"": ""2024-03-01T00:00:00Z"",  ""archived"": false,
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""with_issues_enabled"": true,
  ""with_merge_requests_enabled"": true}","[{""id"":4,""description"":null,""name"":""test_project_4"",""name_with_namespace"":""Administrator / test_project_4"",""path"":""test_project_4"",""path_with_namespace"":""root/test_project_4"",""created_at"":""2024-03-04T09:07:50.094Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/test_project_4.git"",""http_url_to_repo"":""http://gitlab.example.com/root/test_project_4.git"",""web_url"":""http://gitlab.example.com/root/test_project_4"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-04T09:07:50.094Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/4"",""issues"":""http://gitlab.example.com/api/v4/projects/4/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/4/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/4/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/4/labels"",""events"":""http://gitlab.example.com/api/v4/projects/4/events"",""members"":""http://gitlab.example.com/api/v4/projects/4/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/4/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-05T09:07:50.163Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-04T09:07:50.094Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941-VrHsy7ofk3EnQ6N9jsG"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":null,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":null}}]",unknown,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the repository_storage value from the request_info
        requested_repository_storage = request_info.get(""repository_storage"")
        
        # Check if the requested repository_storage is provided
        if not requested_repository_storage:
            return 0
        
        # Iterate through the response to verify the constraint
        for project in latest_response:
            if ""repository_storage"" not in project:
                return 0
            if project[""repository_storage""] != requested_repository_storage:
                return -1
        
        return 1
    except Exception as e:
        return -1
",default,1,1,0,0,1,0,logic
8,BasicProjectDetails,visibility,,post-/projects,parameters,visibility,See project visibility level,c,False,TP,"{
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""pages_access_level"": ""private"",
  ""repository_access_level"": ""enabled"",
  ""merge_requests_enabled"": true,
  ""allow_merge_on_skipped_pipeline"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""auto_devops_enabled"": true,
  ""autoclose_referenced_issues"": true,
  ""container_registry_enabled"": true,
  ""default_branch"": ""main"",
  ""description"": """",
  ""jobs_enabled"": true,
  ""merge_method"": ""merge"",
  ""name"": ""test_project_1"",
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""packages_enabled"": true,
  ""path"": ""test_project_1"",
  ""public_builds"": true,
  ""remove_source_branch_after_merge"": true,
  ""request_access_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""shared_runners_enabled"": true,
  ""snippets_enabled"": true,
  ""tag_list"": [],
  ""wiki_enabled"": true
}




","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}",satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the visibility attribute from the response
        visibility = latest_response.get(""visibility"")
        
        # Check if the visibility attribute exists in the response
        if visibility is None:
            return 0
        
        # Define the allowed visibility values
        allowed_values = [""private"", ""internal"", ""public""]
        
        # Verify if the visibility value is within the allowed values
        if visibility in allowed_values:
            return 1
        else:
            return -1
    except Exception as e:
        return -1
",private,1,1,0,0,1,0,"range of values, logic"
10,BasicProjectDetails,visibility,,post-/projects,parameters,repository_access_level,"One of disabled, private, or enabled",x,True,TP,"{
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""pages_access_level"": ""private"",
  ""repository_access_level"": ""enabled"",
  ""merge_requests_enabled"": true,
  ""allow_merge_on_skipped_pipeline"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""auto_devops_enabled"": true,
  ""autoclose_referenced_issues"": true,
  ""container_registry_enabled"": true,
  ""default_branch"": ""main"",
  ""description"": """",
  ""jobs_enabled"": true,
  ""merge_method"": ""merge"",
  ""name"": ""test_project_1"",
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""packages_enabled"": true,
  ""path"": ""test_project_1"",
  ""public_builds"": true,
  ""remove_source_branch_after_merge"": true,
  ""request_access_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""shared_runners_enabled"": true,
  ""snippets_enabled"": true,
  ""tag_list"": [],
  ""wiki_enabled"": true
}




","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}",satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'repository_access_level' is in request_info and if it's one of the valid options
        valid_levels = {'disabled', 'private', 'enabled'}
        request_level = request_info.get('repository_access_level')
        if request_level is not None and request_level not in valid_levels:
            return -1  # Invalid request level

        # Check if 'visibility' is in latest_response and matches the request
        response_visibility = latest_response.get('visibility')
        if response_visibility is None:
            return 0  # Insufficient information in response

        # Map 'repository_access_level' to expected 'visibility' values
        # Assuming a direct mapping for simplicity; this might need adjustment based on actual API behavior
        if request_level is None:
            # If no specific level was requested, any valid response is acceptable
            if response_visibility in valid_levels:
                return 1
            else:
                return -1
        else:
            # Check if the response visibility matches the requested access level
            if response_visibility == request_level:
                return 1
            else:
                return -1
    except Exception as e:
        # Handle unexpected errors
        print(f""An error occurred: {e}"")
        return -1
",private,1,0,1,0,0,0,
11,BasicProjectDetails,visibility,,get-/projects,parameters,visibility,Limit by visibility,c,False,TP,"{""id_before"": 5, ""id_after"": 3, ""last_activity_before"": ""2024-03-10T00:00:00Z"", ""last_activity_after"": ""2024-03-01T00:00:00Z"",  ""archived"": false,
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""with_issues_enabled"": true,
  ""with_merge_requests_enabled"": true}","[{""id"":4,""description"":null,""name"":""test_project_4"",""name_with_namespace"":""Administrator / test_project_4"",""path"":""test_project_4"",""path_with_namespace"":""root/test_project_4"",""created_at"":""2024-03-04T09:07:50.094Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/test_project_4.git"",""http_url_to_repo"":""http://gitlab.example.com/root/test_project_4.git"",""web_url"":""http://gitlab.example.com/root/test_project_4"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-04T09:07:50.094Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/4"",""issues"":""http://gitlab.example.com/api/v4/projects/4/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/4/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/4/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/4/labels"",""events"":""http://gitlab.example.com/api/v4/projects/4/events"",""members"":""http://gitlab.example.com/api/v4/projects/4/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/4/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-05T09:07:50.163Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-04T09:07:50.094Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941-VrHsy7ofk3EnQ6N9jsG"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":null,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":null}}]",unknown,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the visibility constraint from the request_info
        visibility_constraint = request_info.get(""visibility"")
        
        # Check if the visibility constraint is provided
        if visibility_constraint is None:
            return 0
        
        # Define the allowed visibility values
        allowed_visibility_values = [""public"", ""internal"", ""private""]
        
        # Check if the provided visibility constraint is valid
        if visibility_constraint not in allowed_visibility_values:
            return -1
        
        # Verify the visibility attribute in each BasicProjectDetails object in the response
        for project in latest_response:
            if ""visibility"" not in project:
                return 0
            if project[""visibility""] != visibility_constraint:
                return -1
        
        # If all checks pass, return 1
        return 1
    except Exception as e:
        # In case of any exception, return -1
        return -1
",private,1,1,0,0,1,0,"range of values, logic"
12,BasicProjectDetails,issues_enabled,,get-/projects,parameters,with_issues_enabled,Limit by enabled issues feature,c,True,TP,"{""id_before"": 5, ""id_after"": 3, ""last_activity_before"": ""2024-03-10T00:00:00Z"", ""last_activity_after"": ""2024-03-01T00:00:00Z"",  ""archived"": false,
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""with_issues_enabled"": true,
  ""with_merge_requests_enabled"": true}","[{""id"":4,""description"":null,""name"":""test_project_4"",""name_with_namespace"":""Administrator / test_project_4"",""path"":""test_project_4"",""path_with_namespace"":""root/test_project_4"",""created_at"":""2024-03-04T09:07:50.094Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/test_project_4.git"",""http_url_to_repo"":""http://gitlab.example.com/root/test_project_4.git"",""web_url"":""http://gitlab.example.com/root/test_project_4"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-04T09:07:50.094Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/4"",""issues"":""http://gitlab.example.com/api/v4/projects/4/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/4/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/4/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/4/labels"",""events"":""http://gitlab.example.com/api/v4/projects/4/events"",""members"":""http://gitlab.example.com/api/v4/projects/4/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/4/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-05T09:07:50.163Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-04T09:07:50.094Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941-VrHsy7ofk3EnQ6N9jsG"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":null,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":null}}]",unknown,"def verify_latest_response(latest_response, request_info):
    try:
        with_issues_enabled = request_info.get(""with_issues_enabled"")
        if with_issues_enabled is None:
            return 0  # No constraint to verify

        for project in latest_response:
            if 'issues_enabled' not in project:
                return 0  # Insufficient information to verify the constraint
            if project['issues_enabled'] != with_issues_enabled:
                return -1  # Constraint not satisfied

        return 1  # Constraint satisfied
    except Exception as e:
        return -1  # In case of any error, return -1
",True,1,1,0,0,1,0,"range of values, logic"
13,BasicProjectDetails,merge_requests_enabled,,post-/projects,parameters,merge_requests_enabled,(Deprecated)Enable merge requests for this project. Use merge_requests_access_level instead,c,False,TP,"{
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""pages_access_level"": ""private"",
  ""repository_access_level"": ""enabled"",
  ""merge_requests_enabled"": true,
  ""allow_merge_on_skipped_pipeline"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""auto_devops_enabled"": true,
  ""autoclose_referenced_issues"": true,
  ""container_registry_enabled"": true,
  ""default_branch"": ""main"",
  ""description"": """",
  ""jobs_enabled"": true,
  ""merge_method"": ""merge"",
  ""name"": ""test_project_1"",
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""packages_enabled"": true,
  ""path"": ""test_project_1"",
  ""public_builds"": true,
  ""remove_source_branch_after_merge"": true,
  ""request_access_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""shared_runners_enabled"": true,
  ""snippets_enabled"": true,
  ""tag_list"": [],
  ""wiki_enabled"": true
}




","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}",satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'merge_requests_enabled' is in the response
        if 'merge_requests_enabled' not in latest_response:
            return 0
        
        # Check if 'merge_requests_enabled' is a boolean
        if not isinstance(latest_response['merge_requests_enabled'], bool):
            return -1
        
        # If the request_info contains 'merge_requests_enabled', verify it matches the response
        if 'merge_requests_enabled' in request_info:
            if latest_response['merge_requests_enabled'] != request_info['merge_requests_enabled']:
                return -1
        
        return 1
    except Exception as e:
        return -1
",True,1,1,0,0,1,0,"range of values, logic"
14,BasicProjectDetails,merge_requests_enabled,,get-/projects,parameters,with_merge_requests_enabled,Limit by enabled merge requests feature,c,True,TP,"{""id_before"": 5, ""id_after"": 3, ""last_activity_before"": ""2024-03-10T00:00:00Z"", ""last_activity_after"": ""2024-03-01T00:00:00Z"",  ""archived"": false,
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""with_issues_enabled"": true,
  ""with_merge_requests_enabled"": true}","[{""id"":4,""description"":null,""name"":""test_project_4"",""name_with_namespace"":""Administrator / test_project_4"",""path"":""test_project_4"",""path_with_namespace"":""root/test_project_4"",""created_at"":""2024-03-04T09:07:50.094Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:root/test_project_4.git"",""http_url_to_repo"":""http://gitlab.example.com/root/test_project_4.git"",""web_url"":""http://gitlab.example.com/root/test_project_4"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-04T09:07:50.094Z"",""namespace"":{""id"":1,""name"":""Administrator"",""path"":""root"",""kind"":""user"",""full_path"":""root"",""parent_id"":null,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/4"",""issues"":""http://gitlab.example.com/api/v4/projects/4/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/4/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/4/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/4/labels"",""events"":""http://gitlab.example.com/api/v4/projects/4/events"",""members"":""http://gitlab.example.com/api/v4/projects/4/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/4/cluster_agents""},""packages_enabled"":true,""empty_repo"":true,""archived"":false,""visibility"":""private"",""owner"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-05T09:07:50.163Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-04T09:07:50.094Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR1348941-VrHsy7ofk3EnQ6N9jsG"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":null,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":null}}]",unknown,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the 'with_merge_requests_enabled' parameter from request_info
        with_merge_requests_enabled = request_info.get(""with_merge_requests_enabled"")
        
        # Check if the parameter is provided
        if with_merge_requests_enabled is None:
            return 0
        
        # Iterate through each project in the response
        for project in latest_response:
            # Check if 'merge_requests_enabled' attribute exists in the project
            if 'merge_requests_enabled' not in project:
                return 0
            
            # Verify the 'merge_requests_enabled' attribute against the input parameter
            if project['merge_requests_enabled'] != with_merge_requests_enabled:
                return -1
        
        # If all projects satisfy the constraint
        return 1
    except Exception as e:
        # In case of any unexpected error
        return -1
",True,1,1,0,0,1,0,"range of values, logic"
15,BasicProjectDetails,allow_merge_on_skipped_pipeline,,post-/projects,parameters,allow_merge_on_skipped_pipeline,Set whether or not merge requests can be merged with skipped jobs,c,False,TP,"{
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""pages_access_level"": ""private"",
  ""repository_access_level"": ""enabled"",
  ""merge_requests_enabled"": true,
  ""allow_merge_on_skipped_pipeline"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""auto_devops_enabled"": true,
  ""autoclose_referenced_issues"": true,
  ""container_registry_enabled"": true,
  ""default_branch"": ""main"",
  ""description"": """",
  ""jobs_enabled"": true,
  ""merge_method"": ""merge"",
  ""name"": ""test_project_1"",
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""packages_enabled"": true,
  ""path"": ""test_project_1"",
  ""public_builds"": true,
  ""remove_source_branch_after_merge"": true,
  ""request_access_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""shared_runners_enabled"": true,
  ""snippets_enabled"": true,
  ""tag_list"": [],
  ""wiki_enabled"": true
}




","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}",unknown,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'allow_merge_on_skipped_pipeline' exists in the response
        if 'allow_merge_on_skipped_pipeline' not in latest_response:
            return 0
        
        # Extract the value from the response
        response_value = latest_response['allow_merge_on_skipped_pipeline']
        
        # Check if the value is a boolean
        if not isinstance(response_value, bool):
            return -1
        
        # Extract the value from the request info
        request_value = request_info.get('allow_merge_on_skipped_pipeline')
        
        # Check if the request value is a boolean
        if request_value is not None and not isinstance(request_value, bool):
            return -1
        
        # Compare the response value with the request value if provided
        if request_value is not None and response_value != request_value:
            return -1
        
        return 1
    except Exception as e:
        return -1
",False,1,1,0,0,1,0,"range of values, logic"
16,BasicProjectDetails,auto_devops_deploy_strategy,,post-/projects,parameters,auto_devops_deploy_strategy,Auto Deploy strategy,c,False,TP,"{
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""pages_access_level"": ""private"",
  ""repository_access_level"": ""enabled"",
  ""merge_requests_enabled"": true,
  ""allow_merge_on_skipped_pipeline"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""auto_devops_enabled"": true,
  ""autoclose_referenced_issues"": true,
  ""container_registry_enabled"": true,
  ""default_branch"": ""main"",
  ""description"": """",
  ""jobs_enabled"": true,
  ""merge_method"": ""merge"",
  ""name"": ""test_project_1"",
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""packages_enabled"": true,
  ""path"": ""test_project_1"",
  ""public_builds"": true,
  ""remove_source_branch_after_merge"": true,
  ""request_access_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""shared_runners_enabled"": true,
  ""snippets_enabled"": true,
  ""tag_list"": [],
  ""wiki_enabled"": true
}




","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}",satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the auto_devops_deploy_strategy from the response
        auto_devops_deploy_strategy = latest_response.get(""auto_devops_deploy_strategy"")
        
        # Check if the attribute exists in the response
        if auto_devops_deploy_strategy is None:
            return 0
        
        # Define the allowed values for auto_devops_deploy_strategy
        allowed_values = [""continuous"", ""manual"", ""timed_incremental""]
        
        # Verify if the value of auto_devops_deploy_strategy is within the allowed values
        if auto_devops_deploy_strategy in allowed_values:
            return 1
        else:
            return -1
    except Exception as e:
        # In case of any exception, return -1 indicating the constraint is not satisfied
        return -1
",continuous,1,1,0,0,1,0,logic
17,BasicProjectDetails,auto_devops_enabled,,post-/projects,parameters,auto_devops_enabled,Enable Auto DevOps for this project,c,False,TP,"{
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""pages_access_level"": ""private"",
  ""repository_access_level"": ""enabled"",
  ""merge_requests_enabled"": true,
  ""allow_merge_on_skipped_pipeline"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""auto_devops_enabled"": true,
  ""autoclose_referenced_issues"": true,
  ""container_registry_enabled"": true,
  ""default_branch"": ""main"",
  ""description"": """",
  ""jobs_enabled"": true,
  ""merge_method"": ""merge"",
  ""name"": ""test_project_1"",
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""packages_enabled"": true,
  ""path"": ""test_project_1"",
  ""public_builds"": true,
  ""remove_source_branch_after_merge"": true,
  ""request_access_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""shared_runners_enabled"": true,
  ""snippets_enabled"": true,
  ""tag_list"": [],
  ""wiki_enabled"": true
}




","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}",satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'auto_devops_enabled' is in the response
        if 'auto_devops_enabled' not in latest_response:
            return 0
        
        # Extract the value of 'auto_devops_enabled' from the response
        response_value = latest_response['auto_devops_enabled']
        
        # Check if the value is a boolean
        if not isinstance(response_value, bool):
            return -1
        
        # Extract the value of 'auto_devops_enabled' from the request info
        request_value = request_info.get('auto_devops_enabled')
        
        # Convert request_value to boolean if it's a string
        if isinstance(request_value, str):
            request_value = request_value.lower() == 'true'
        
        # Check if the request value matches the response value
        if response_value == request_value:
            return 1
        else:
            return -1
    except Exception as e:
        return -1
",True,1,1,0,0,1,0,"range of values, logic"
18,BasicProjectDetails,autoclose_referenced_issues,,post-/projects,parameters,autoclose_referenced_issues,Set whether auto-closing referenced issues on default branch,c,False,TP,"{
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""pages_access_level"": ""private"",
  ""repository_access_level"": ""enabled"",
  ""merge_requests_enabled"": true,
  ""allow_merge_on_skipped_pipeline"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""auto_devops_enabled"": true,
  ""autoclose_referenced_issues"": true,
  ""container_registry_enabled"": true,
  ""default_branch"": ""main"",
  ""description"": """",
  ""jobs_enabled"": true,
  ""merge_method"": ""merge"",
  ""name"": ""test_project_1"",
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""packages_enabled"": true,
  ""path"": ""test_project_1"",
  ""public_builds"": true,
  ""remove_source_branch_after_merge"": true,
  ""request_access_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""shared_runners_enabled"": true,
  ""snippets_enabled"": true,
  ""tag_list"": [],
  ""wiki_enabled"": true
}




","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}",satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'autoclose_referenced_issues' exists in the response
        if 'autoclose_referenced_issues' not in latest_response:
            return 0
        
        # Extract the value from the response
        response_value = latest_response['autoclose_referenced_issues']
        
        # Check if the value is of boolean type
        if isinstance(response_value, bool):
            return 1
        else:
            return -1
    except Exception as e:
        return -1
",True,1,1,0,0,1,0,"range of values, logic"
19,BasicProjectDetails,container_registry_enabled,,post-/projects,parameters,container_registry_enabled,Enable container registry for this project,c,False,TP,"{
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""pages_access_level"": ""private"",
  ""repository_access_level"": ""enabled"",
  ""merge_requests_enabled"": true,
  ""allow_merge_on_skipped_pipeline"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""auto_devops_enabled"": true,
  ""autoclose_referenced_issues"": true,
  ""container_registry_enabled"": true,
  ""default_branch"": ""main"",
  ""description"": """",
  ""jobs_enabled"": true,
  ""merge_method"": ""merge"",
  ""name"": ""test_project_1"",
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""packages_enabled"": true,
  ""path"": ""test_project_1"",
  ""public_builds"": true,
  ""remove_source_branch_after_merge"": true,
  ""request_access_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""shared_runners_enabled"": true,
  ""snippets_enabled"": true,
  ""tag_list"": [],
  ""wiki_enabled"": true
}




","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}",satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'container_registry_enabled' exists in both request_info and latest_response
        request_value = request_info.get('container_registry_enabled', None)
        response_value = latest_response.get('container_registry_enabled', None)

        # If the attribute does not exist in the response, return 0 indicating insufficient information
        if response_value is None:
            return 0

        # Ensure the type of the response value is boolean
        if not isinstance(response_value, bool):
            return -1

        # If the attribute exists in the request, check if it matches the response
        if request_value is not None:
            if isinstance(request_value, bool) and request_value == response_value:
                return 1
            else:
                return -1

        # If the attribute does not exist in the request, but exists in the response and is a valid boolean
        return 1

    except Exception as e:
        # In case of any error during verification, consider the constraints not satisfied
        return -1
",False,1,1,0,0,1,0,"range of values, logic"
20,BasicProjectDetails,default_branch,,post-/projects,parameters,default_branch,master by default,c,False,TP,"{
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""pages_access_level"": ""private"",
  ""repository_access_level"": ""enabled"",
  ""merge_requests_enabled"": true,
  ""allow_merge_on_skipped_pipeline"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""auto_devops_enabled"": true,
  ""autoclose_referenced_issues"": true,
  ""container_registry_enabled"": true,
  ""default_branch"": ""main"",
  ""description"": """",
  ""jobs_enabled"": true,
  ""merge_method"": ""merge"",
  ""name"": ""test_project_1"",
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""packages_enabled"": true,
  ""path"": ""test_project_1"",
  ""public_builds"": true,
  ""remove_source_branch_after_merge"": true,
  ""request_access_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""shared_runners_enabled"": true,
  ""snippets_enabled"": true,
  ""tag_list"": [],
  ""wiki_enabled"": true
}




","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}",mismatched,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the default_branch from the response
        default_branch_response = latest_response.get(""default_branch"")
        
        # Check if the default_branch exists in the response
        if default_branch_response is None:
            return 0
        
        # Extract the default_branch from the request info, if provided
        default_branch_request = request_info.get(""default_branch"", ""master"")
        
        # Verify the constraint
        if isinstance(default_branch_response, str) and default_branch_response == default_branch_request:
            return 1
        else:
            return -1
    except Exception as e:
        return -1
",master,1,1,0,0,1,0,logic
21,BasicProjectDetails,description,,post-/projects,parameters,description,Short project description,c,False,TP,"{
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""pages_access_level"": ""private"",
  ""repository_access_level"": ""enabled"",
  ""merge_requests_enabled"": true,
  ""allow_merge_on_skipped_pipeline"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""auto_devops_enabled"": true,
  ""autoclose_referenced_issues"": true,
  ""container_registry_enabled"": true,
  ""default_branch"": ""main"",
  ""description"": """",
  ""jobs_enabled"": true,
  ""merge_method"": ""merge"",
  ""name"": ""test_project_1"",
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""packages_enabled"": true,
  ""path"": ""test_project_1"",
  ""public_builds"": true,
  ""remove_source_branch_after_merge"": true,
  ""request_access_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""shared_runners_enabled"": true,
  ""snippets_enabled"": true,
  ""tag_list"": [],
  ""wiki_enabled"": true
}




","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}",unknown,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the description from the response
        response_description = latest_response.get(""description"", None)
        
        # Check if the description exists in the response
        if response_description is None:
            return 0
        
        # Extract the description from the request info
        request_description = request_info.get(""description"", None)
        
        # Check if the description exists in the request info
        if request_description is None:
            return 0
        
        # Verify the description matches the request description
        if response_description == request_description:
            return 1
        else:
            return -1
    except Exception as e:
        # Handle any unexpected errors
        return -1
",GitLab Community Edition,1,0,0,1,1,0,logic
22,BasicProjectDetails,jobs_enabled,,post-/projects,parameters,jobs_enabled,(Deprecated)Enable jobs for this project. Use builds_access_level instead,c,False,TP,"{
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""pages_access_level"": ""private"",
  ""repository_access_level"": ""enabled"",
  ""merge_requests_enabled"": true,
  ""allow_merge_on_skipped_pipeline"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""auto_devops_enabled"": true,
  ""autoclose_referenced_issues"": true,
  ""container_registry_enabled"": true,
  ""default_branch"": ""main"",
  ""description"": """",
  ""jobs_enabled"": true,
  ""merge_method"": ""merge"",
  ""name"": ""test_project_1"",
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""packages_enabled"": true,
  ""path"": ""test_project_1"",
  ""public_builds"": true,
  ""remove_source_branch_after_merge"": true,
  ""request_access_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""shared_runners_enabled"": true,
  ""snippets_enabled"": true,
  ""tag_list"": [],
  ""wiki_enabled"": true
}




","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}",satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'jobs_enabled' is in the response
        if 'jobs_enabled' not in latest_response:
            return 0  # Attribute does not exist in the response
        
        # Check if 'jobs_enabled' is of type boolean
        if not isinstance(latest_response['jobs_enabled'], bool):
            return -1  # Constraint not satisfied, type mismatch
        
        return 1  # Constraint satisfied
    except Exception as e:
        return -1  # Constraint not satisfied due to an exception
",True,1,1,0,0,1,0,"range of values, logic"
23,BasicProjectDetails,merge_method,,post-/projects,parameters,merge_method,Set the merge method used,c,False,TP,"{
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""pages_access_level"": ""private"",
  ""repository_access_level"": ""enabled"",
  ""merge_requests_enabled"": true,
  ""allow_merge_on_skipped_pipeline"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""auto_devops_enabled"": true,
  ""autoclose_referenced_issues"": true,
  ""container_registry_enabled"": true,
  ""default_branch"": ""main"",
  ""description"": """",
  ""jobs_enabled"": true,
  ""merge_method"": ""merge"",
  ""name"": ""test_project_1"",
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""packages_enabled"": true,
  ""path"": ""test_project_1"",
  ""public_builds"": true,
  ""remove_source_branch_after_merge"": true,
  ""request_access_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""shared_runners_enabled"": true,
  ""snippets_enabled"": true,
  ""tag_list"": [],
  ""wiki_enabled"": true
}




","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}",satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the merge_method from the response
        merge_method = latest_response.get(""merge_method"")
        
        # Check if merge_method exists in the response
        if merge_method is None:
            return 0
        
        # Define the allowed values for merge_method
        allowed_merge_methods = [""merge"", ""rebase_merge"", ""ff""]
        
        # Verify if the merge_method in the response is one of the allowed values
        if merge_method in allowed_merge_methods:
            return 1
        else:
            return -1
    except Exception as e:
        # Handle any unexpected errors
        return -1
",merge,1,1,0,0,1,0,"range of values, logic"
24,BasicProjectDetails,name,,post-/projects,parameters,name,"The name of the new project. Either path or name is required, not both",c,False,TP,"{
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""pages_access_level"": ""private"",
  ""repository_access_level"": ""enabled"",
  ""merge_requests_enabled"": true,
  ""allow_merge_on_skipped_pipeline"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""auto_devops_enabled"": true,
  ""autoclose_referenced_issues"": true,
  ""container_registry_enabled"": true,
  ""default_branch"": ""main"",
  ""description"": """",
  ""jobs_enabled"": true,
  ""merge_method"": ""merge"",
  ""name"": ""test_project_1"",
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""packages_enabled"": true,
  ""path"": ""test_project_1"",
  ""public_builds"": true,
  ""remove_source_branch_after_merge"": true,
  ""request_access_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""shared_runners_enabled"": true,
  ""snippets_enabled"": true,
  ""tag_list"": [],
  ""wiki_enabled"": true
}




","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}",satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'name' is in the request_info
        if 'name' in request_info:
            # Ensure 'name' is in the response
            if 'name' not in latest_response:
                return 0  # Insufficient information to verify the constraint
            
            # Verify the 'name' attribute in the response
            if isinstance(latest_response['name'], str):
                return 1  # Constraint is satisfied
            else:
                return -1  # Constraint is not satisfied
        else:
            return 0  # Insufficient information to verify the constraint
    except Exception as e:
        return -1  # Constraint is not satisfied due to an error
",Diaspora Client,1,1,0,0,1,0,inter-parameter dependency
25,BasicProjectDetails,only_allow_merge_if_all_discussions_are_resolved,,post-/projects,parameters,only_allow_merge_if_all_discussions_are_resolved,Set whether merge requests can only be merged when all the discussions are resolved,c,False,TP,"{
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""pages_access_level"": ""private"",
  ""repository_access_level"": ""enabled"",
  ""merge_requests_enabled"": true,
  ""allow_merge_on_skipped_pipeline"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""auto_devops_enabled"": true,
  ""autoclose_referenced_issues"": true,
  ""container_registry_enabled"": true,
  ""default_branch"": ""main"",
  ""description"": """",
  ""jobs_enabled"": true,
  ""merge_method"": ""merge"",
  ""name"": ""test_project_1"",
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""packages_enabled"": true,
  ""path"": ""test_project_1"",
  ""public_builds"": true,
  ""remove_source_branch_after_merge"": true,
  ""request_access_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""shared_runners_enabled"": true,
  ""snippets_enabled"": true,
  ""tag_list"": [],
  ""wiki_enabled"": true
}




","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}",satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if the attribute exists in the response
        if 'only_allow_merge_if_all_discussions_are_resolved' not in latest_response:
            return 0
        
        # Extract the value from the response
        response_value = latest_response['only_allow_merge_if_all_discussions_are_resolved']
        
        # Ensure the value is a boolean
        if not isinstance(response_value, bool):
            return -1
        
        # Extract the value from the request info
        request_value = request_info.get('only_allow_merge_if_all_discussions_are_resolved')
        
        # Ensure the request value is a boolean
        if request_value is not None and not isinstance(request_value, bool):
            return -1
        
        # Compare the values
        if request_value is not None and response_value != request_value:
            return -1
        
        return 1
    except Exception as e:
        return -1
",False,1,1,0,0,1,0,"range of values, logic"
26,BasicProjectDetails,only_allow_merge_if_pipeline_succeeds,,post-/projects,parameters,only_allow_merge_if_pipeline_succeeds,Set whether merge requests can only be merged with successful jobs,c,False,TP,"{
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""pages_access_level"": ""private"",
  ""repository_access_level"": ""enabled"",
  ""merge_requests_enabled"": true,
  ""allow_merge_on_skipped_pipeline"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""auto_devops_enabled"": true,
  ""autoclose_referenced_issues"": true,
  ""container_registry_enabled"": true,
  ""default_branch"": ""main"",
  ""description"": """",
  ""jobs_enabled"": true,
  ""merge_method"": ""merge"",
  ""name"": ""test_project_1"",
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""packages_enabled"": true,
  ""path"": ""test_project_1"",
  ""public_builds"": true,
  ""remove_source_branch_after_merge"": true,
  ""request_access_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""shared_runners_enabled"": true,
  ""snippets_enabled"": true,
  ""tag_list"": [],
  ""wiki_enabled"": true
}




","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}",satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if the attribute exists in the response
        if 'only_allow_merge_if_pipeline_succeeds' not in latest_response:
            return 0
        
        # Extract the value from the response
        response_value = latest_response['only_allow_merge_if_pipeline_succeeds']
        
        # Check if the value is a boolean
        if not isinstance(response_value, bool):
            return -1
        
        # Extract the expected value from the request info
        if 'only_allow_merge_if_pipeline_succeeds' not in request_info:
            return 0
        
        expected_value = request_info['only_allow_merge_if_pipeline_succeeds']
        
        # Check if the expected value is a boolean
        if not isinstance(expected_value, bool):
            return -1
        
        # Verify if the response value matches the expected value
        if response_value == expected_value:
            return 1
        else:
            return -1
    except Exception as e:
        return -1
",False,1,1,0,0,1,0,"range of values, logic"
27,BasicProjectDetails,packages_enabled,,post-/projects,parameters,packages_enabled,Enable or disable packages repository feature,c,False,TP,"{
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""pages_access_level"": ""private"",
  ""repository_access_level"": ""enabled"",
  ""merge_requests_enabled"": true,
  ""allow_merge_on_skipped_pipeline"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""auto_devops_enabled"": true,
  ""autoclose_referenced_issues"": true,
  ""container_registry_enabled"": true,
  ""default_branch"": ""main"",
  ""description"": """",
  ""jobs_enabled"": true,
  ""merge_method"": ""merge"",
  ""name"": ""test_project_1"",
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""packages_enabled"": true,
  ""path"": ""test_project_1"",
  ""public_builds"": true,
  ""remove_source_branch_after_merge"": true,
  ""request_access_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""shared_runners_enabled"": true,
  ""snippets_enabled"": true,
  ""tag_list"": [],
  ""wiki_enabled"": true
}




","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}",satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'packages_enabled' exists in request_info and is a boolean
        if 'packages_enabled' in request_info:
            if not isinstance(request_info['packages_enabled'], bool):
                return -1
        
        # Check if 'packages_enabled' exists in latest_response and is a boolean
        if 'packages_enabled' in latest_response:
            if not isinstance(latest_response['packages_enabled'], bool):
                return -1
        else:
            # 'packages_enabled' does not exist in the response
            return 0
        
        # If 'packages_enabled' exists in both request_info and latest_response, compare them
        if 'packages_enabled' in request_info:
            if request_info['packages_enabled'] != latest_response['packages_enabled']:
                return -1
        
        # If all checks pass, the constraint is satisfied
        return 1
    except Exception as e:
        # In case of any exception, consider the verification failed
        return -1
",True,1,1,0,0,1,0,range of values
28,BasicProjectDetails,path,,post-/projects,parameters,path,Repository name for new project. Generated based on name if not provided (generated as lowercase with dashes),c,False,TP,"{
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""pages_access_level"": ""private"",
  ""repository_access_level"": ""enabled"",
  ""merge_requests_enabled"": true,
  ""allow_merge_on_skipped_pipeline"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""auto_devops_enabled"": true,
  ""autoclose_referenced_issues"": true,
  ""container_registry_enabled"": true,
  ""default_branch"": ""main"",
  ""description"": """",
  ""jobs_enabled"": true,
  ""merge_method"": ""merge"",
  ""name"": ""test_project_1"",
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""packages_enabled"": true,
  ""path"": ""test_project_1"",
  ""public_builds"": true,
  ""remove_source_branch_after_merge"": true,
  ""request_access_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""shared_runners_enabled"": true,
  ""snippets_enabled"": true,
  ""tag_list"": [],
  ""wiki_enabled"": true
}




","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}",satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the 'path' from the response
        response_path = latest_response.get('path')
        
        # Check if 'path' exists in the response
        if response_path is None:
            return 0
        
        # Extract the 'path' from the request info
        request_path = request_info.get('path')
        
        # If 'path' is provided in the request, it should match the response 'path'
        if request_path:
            if response_path == request_path:
                return 1
            else:
                return -1
        else:
            # If 'path' is not provided, it should be generated as lowercase with dashes
            generated_path = request_info.get('name', '').lower().replace(' ', '-')
            if response_path == generated_path:
                return 1
            else:
                return -1
    except Exception as e:
        return -1
",diaspora-client,1,1,0,0,1,0,format
29,BasicProjectDetails,public_jobs,,post-/projects,parameters,public_builds,"If true, jobs can be viewed by non-project members",c,True,TP,"{
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""pages_access_level"": ""private"",
  ""repository_access_level"": ""enabled"",
  ""merge_requests_enabled"": true,
  ""allow_merge_on_skipped_pipeline"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""auto_devops_enabled"": true,
  ""autoclose_referenced_issues"": true,
  ""container_registry_enabled"": true,
  ""default_branch"": ""main"",
  ""description"": """",
  ""jobs_enabled"": true,
  ""merge_method"": ""merge"",
  ""name"": ""test_project_1"",
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""packages_enabled"": true,
  ""path"": ""test_project_1"",
  ""public_builds"": true,
  ""remove_source_branch_after_merge"": true,
  ""request_access_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""shared_runners_enabled"": true,
  ""snippets_enabled"": true,
  ""tag_list"": [],
  ""wiki_enabled"": true
}




","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}",satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the 'public_builds' parameter from the request info
        public_builds = request_info.get('public_builds', None)
        
        # Check if 'public_builds' is provided and is a boolean
        if public_builds is None or not isinstance(public_builds, bool):
            return 0
        
        # Extract the 'public_jobs' attribute from the response
        public_jobs = latest_response.get('public_jobs', None)
        
        # Check if 'public_jobs' exists and is a boolean
        if public_jobs is None or not isinstance(public_jobs, bool):
            return 0
        
        # Verify the constraint
        if public_builds == public_jobs:
            return 1
        else:
            return -1
    except Exception as e:
        return -1
",True,1,1,0,0,1,0,"range of values, logic"
30,BasicProjectDetails,remove_source_branch_after_merge,,post-/projects,parameters,remove_source_branch_after_merge,Enable Delete source branch option by default for all new merge requests,c,False,TP,"{
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""pages_access_level"": ""private"",
  ""repository_access_level"": ""enabled"",
  ""merge_requests_enabled"": true,
  ""allow_merge_on_skipped_pipeline"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""auto_devops_enabled"": true,
  ""autoclose_referenced_issues"": true,
  ""container_registry_enabled"": true,
  ""default_branch"": ""main"",
  ""description"": """",
  ""jobs_enabled"": true,
  ""merge_method"": ""merge"",
  ""name"": ""test_project_1"",
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""packages_enabled"": true,
  ""path"": ""test_project_1"",
  ""public_builds"": true,
  ""remove_source_branch_after_merge"": true,
  ""request_access_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""shared_runners_enabled"": true,
  ""snippets_enabled"": true,
  ""tag_list"": [],
  ""wiki_enabled"": true
}




","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}",satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if the attribute exists in the response
        if 'remove_source_branch_after_merge' not in latest_response:
            return 0
        
        # Check if the attribute is of type boolean
        if isinstance(latest_response['remove_source_branch_after_merge'], bool):
            return 1
        else:
            return -1
    except Exception as e:
        return -1
",False,1,1,0,0,1,0,"range of values, logic"
31,BasicProjectDetails,request_access_enabled,,post-/projects,parameters,request_access_enabled,Allow users to request member access,c,False,TP,"{
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""pages_access_level"": ""private"",
  ""repository_access_level"": ""enabled"",
  ""merge_requests_enabled"": true,
  ""allow_merge_on_skipped_pipeline"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""auto_devops_enabled"": true,
  ""autoclose_referenced_issues"": true,
  ""container_registry_enabled"": true,
  ""default_branch"": ""main"",
  ""description"": """",
  ""jobs_enabled"": true,
  ""merge_method"": ""merge"",
  ""name"": ""test_project_1"",
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""packages_enabled"": true,
  ""path"": ""test_project_1"",
  ""public_builds"": true,
  ""remove_source_branch_after_merge"": true,
  ""request_access_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""shared_runners_enabled"": true,
  ""snippets_enabled"": true,
  ""tag_list"": [],
  ""wiki_enabled"": true
}




","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}",satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'request_access_enabled' exists in request_info and is a boolean
        if 'request_access_enabled' in request_info:
            if not isinstance(request_info['request_access_enabled'], bool):
                return -1  # Request info has the key but not boolean type

        # Check if 'request_access_enabled' exists in latest_response and is a boolean
        if 'request_access_enabled' in latest_response:
            if not isinstance(latest_response['request_access_enabled'], bool):
                return -1  # Response has the key but not boolean type
        else:
            return 0  # Key does not exist in the response

        # If both exist and are booleans, check if they match
        if 'request_access_enabled' in request_info and 'request_access_enabled' in latest_response:
            if request_info['request_access_enabled'] == latest_response['request_access_enabled']:
                return 1  # Both values match
            else:
                return -1  # Both values do not match

        return 1  # All checks passed, and constraints are satisfied
    except Exception as e:
        return -1  # Any exception implies a failure in constraint satisfaction
",False,1,1,0,0,1,0,logic
32,BasicProjectDetails,resolve_outdated_diff_discussions,,post-/projects,parameters,resolve_outdated_diff_discussions,Automatically resolve merge request diffs discussions on lines changed with a push,c,False,TP,"{
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""pages_access_level"": ""private"",
  ""repository_access_level"": ""enabled"",
  ""merge_requests_enabled"": true,
  ""allow_merge_on_skipped_pipeline"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""auto_devops_enabled"": true,
  ""autoclose_referenced_issues"": true,
  ""container_registry_enabled"": true,
  ""default_branch"": ""main"",
  ""description"": """",
  ""jobs_enabled"": true,
  ""merge_method"": ""merge"",
  ""name"": ""test_project_1"",
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""packages_enabled"": true,
  ""path"": ""test_project_1"",
  ""public_builds"": true,
  ""remove_source_branch_after_merge"": true,
  ""request_access_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""shared_runners_enabled"": true,
  ""snippets_enabled"": true,
  ""tag_list"": [],
  ""wiki_enabled"": true
}




","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}",satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if the 'resolve_outdated_diff_discussions' attribute exists in the response
        if 'resolve_outdated_diff_discussions' not in latest_response:
            return 0
        
        # Extract the value of 'resolve_outdated_diff_discussions' from the response
        response_value = latest_response['resolve_outdated_diff_discussions']
        
        # Ensure the value is of type boolean
        if isinstance(response_value, bool):
            return 1
        else:
            return -1
    except Exception as e:
        return -1
",False,1,1,0,0,1,0,logic
33,BasicProjectDetails,shared_runners_enabled,,post-/projects,parameters,shared_runners_enabled,Enable shared runners for this project,c,False,TP,"{
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""pages_access_level"": ""private"",
  ""repository_access_level"": ""enabled"",
  ""merge_requests_enabled"": true,
  ""allow_merge_on_skipped_pipeline"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""auto_devops_enabled"": true,
  ""autoclose_referenced_issues"": true,
  ""container_registry_enabled"": true,
  ""default_branch"": ""main"",
  ""description"": """",
  ""jobs_enabled"": true,
  ""merge_method"": ""merge"",
  ""name"": ""test_project_1"",
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""packages_enabled"": true,
  ""path"": ""test_project_1"",
  ""public_builds"": true,
  ""remove_source_branch_after_merge"": true,
  ""request_access_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""shared_runners_enabled"": true,
  ""snippets_enabled"": true,
  ""tag_list"": [],
  ""wiki_enabled"": true
}




","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}",satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'shared_runners_enabled' is in the response
        if 'shared_runners_enabled' not in latest_response:
            return 0  # Insufficient information to verify the constraint
        
        # Extract the value of 'shared_runners_enabled' from the response
        shared_runners_enabled_response = latest_response['shared_runners_enabled']
        
        # Check if the value is a boolean
        if not isinstance(shared_runners_enabled_response, bool):
            return -1  # Constraint not satisfied
        
        # Extract the value of 'shared_runners_enabled' from the request info
        shared_runners_enabled_request = request_info.get('shared_runners_enabled')
        
        # Check if the request parameter is provided and is a boolean
        if shared_runners_enabled_request is not None:
            if not isinstance(shared_runners_enabled_request, bool):
                return -1  # Constraint not satisfied
            
            # Verify if the request and response values match
            if shared_runners_enabled_response != shared_runners_enabled_request:
                return -1  # Constraint not satisfied
        
        return 1  # Constraint satisfied
    except Exception as e:
        return -1  # Constraint not satisfied due to an error
",True,1,1,0,0,1,0,"range of values, logic"
34,BasicProjectDetails,snippets_enabled,,post-/projects,parameters,snippets_enabled,(Deprecated)Enable snippets for this project. Use snippets_access_level instead,c,False,TP,"{
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""pages_access_level"": ""private"",
  ""repository_access_level"": ""enabled"",
  ""merge_requests_enabled"": true,
  ""allow_merge_on_skipped_pipeline"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""auto_devops_enabled"": true,
  ""autoclose_referenced_issues"": true,
  ""container_registry_enabled"": true,
  ""default_branch"": ""main"",
  ""description"": """",
  ""jobs_enabled"": true,
  ""merge_method"": ""merge"",
  ""name"": ""test_project_1"",
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""packages_enabled"": true,
  ""path"": ""test_project_1"",
  ""public_builds"": true,
  ""remove_source_branch_after_merge"": true,
  ""request_access_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""shared_runners_enabled"": true,
  ""snippets_enabled"": true,
  ""tag_list"": [],
  ""wiki_enabled"": true
}




","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}",satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'snippets_enabled' is in the response
        if 'snippets_enabled' not in latest_response:
            return 0
        
        # Ensure 'snippets_enabled' is a boolean
        if not isinstance(latest_response['snippets_enabled'], bool):
            return -1
        
        # If 'snippets_enabled' is present and is a boolean, the constraint is satisfied
        return 1
    except Exception as e:
        # In case of any unexpected error, return -1
        return -1
",False,1,1,0,0,1,0,"range of values, logic"
35,BasicProjectDetails,tag_list,,post-/projects,parameters,tag_list,"The list of tags for a project; put array of tags, that should be finally assigned to a project",c,False,TP,"{
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""pages_access_level"": ""private"",
  ""repository_access_level"": ""enabled"",
  ""merge_requests_enabled"": true,
  ""allow_merge_on_skipped_pipeline"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""auto_devops_enabled"": true,
  ""autoclose_referenced_issues"": true,
  ""container_registry_enabled"": true,
  ""default_branch"": ""main"",
  ""description"": """",
  ""jobs_enabled"": true,
  ""merge_method"": ""merge"",
  ""name"": ""test_project_1"",
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""packages_enabled"": true,
  ""path"": ""test_project_1"",
  ""public_builds"": true,
  ""remove_source_branch_after_merge"": true,
  ""request_access_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""shared_runners_enabled"": true,
  ""snippets_enabled"": true,
  ""tag_list"": [],
  ""wiki_enabled"": true
}




","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}",satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the tag_list from the response
        response_tag_list = latest_response.get('tag_list', None)
        
        # Check if tag_list exists in the response
        if response_tag_list is None:
            return 0
        
        # Ensure tag_list is an array
        if not isinstance(response_tag_list, list):
            return -1
        
        # Ensure each item in tag_list is a string
        for tag in response_tag_list:
            if not isinstance(tag, str):
                return -1
        
        # Extract the tag_list from the request info
        request_tag_list = request_info.get('tag_list', None)
        
        # Check if tag_list exists in the request info
        if request_tag_list is None:
            return 0
        
        # Ensure the request tag_list is an array
        if not isinstance(request_tag_list, list):
            return -1
        
        # Ensure each item in request tag_list is a string
        for tag in request_tag_list:
            if not isinstance(tag, str):
                return -1
        
        # Compare the request and response tag_list
        if set(response_tag_list) == set(request_tag_list):
            return 1
        else:
            return -1
    except Exception as e:
        return -1
","['example', 'disapora client']",1,1,0,0,1,0,logic
36,BasicProjectDetails,wiki_enabled,,post-/projects,parameters,wiki_enabled,(Deprecated)Enable wiki for this project. Use wiki_access_levelinstead,c,False,TP,"{
  ""repository_storage"": ""default"",
  ""visibility"": ""private"",
  ""pages_access_level"": ""private"",
  ""repository_access_level"": ""enabled"",
  ""merge_requests_enabled"": true,
  ""allow_merge_on_skipped_pipeline"": true,
  ""auto_devops_deploy_strategy"": ""continuous"",
  ""auto_devops_enabled"": true,
  ""autoclose_referenced_issues"": true,
  ""container_registry_enabled"": true,
  ""default_branch"": ""main"",
  ""description"": """",
  ""jobs_enabled"": true,
  ""merge_method"": ""merge"",
  ""name"": ""test_project_1"",
  ""only_allow_merge_if_all_discussions_are_resolved"": false,
  ""only_allow_merge_if_pipeline_succeeds"": false,
  ""packages_enabled"": true,
  ""path"": ""test_project_1"",
  ""public_builds"": true,
  ""remove_source_branch_after_merge"": true,
  ""request_access_enabled"": true,
  ""resolve_outdated_diff_discussions"": false,
  ""shared_runners_enabled"": true,
  ""snippets_enabled"": true,
  ""tag_list"": [],
  ""wiki_enabled"": true
}




","{""id"":1,""description"":null,""name"":""test_project_1"",""name_with_namespace"":""test / test_project_1"",""path"":""test_project_1"",""path_with_namespace"":""test/test_project_1"",""created_at"":""2024-02-29T12:07:00.562Z"",""default_branch"":""main"",""tag_list"":[],""topics"":[],""ssh_url_to_repo"":""git@gitlab.example.com:test/test_project_1.git"",""http_url_to_repo"":""http://gitlab.example.com/test/test_project_1.git"",""web_url"":""http://gitlab.example.com/test/test_project_1"",""readme_url"":null,""forks_count"":0,""avatar_url"":null,""star_count"":0,""last_activity_at"":""2024-03-10T10:00:40.330Z"",""namespace"":{""id"":8,""name"":""test"",""path"":""test"",""kind"":""group"",""full_path"":""test"",""parent_id"":null,""avatar_url"":null,""web_url"":""http://gitlab.example.com/groups/test""},""repository_storage"":""default"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/1"",""issues"":""http://gitlab.example.com/api/v4/projects/1/issues"",""merge_requests"":""http://gitlab.example.com/api/v4/projects/1/merge_requests"",""repo_branches"":""http://gitlab.example.com/api/v4/projects/1/repository/branches"",""labels"":""http://gitlab.example.com/api/v4/projects/1/labels"",""events"":""http://gitlab.example.com/api/v4/projects/1/events"",""members"":""http://gitlab.example.com/api/v4/projects/1/members"",""cluster_agents"":""http://gitlab.example.com/api/v4/projects/1/cluster_agents""},""packages_enabled"":true,""empty_repo"":false,""archived"":false,""visibility"":""private"",""resolve_outdated_diff_discussions"":false,""container_expiration_policy"":{""cadence"":""1d"",""enabled"":false,""keep_n"":10,""older_than"":""90d"",""name_regex"":"".*"",""name_regex_keep"":null,""next_run_at"":""2024-03-01T12:07:00.736Z""},""issues_enabled"":true,""merge_requests_enabled"":true,""wiki_enabled"":true,""jobs_enabled"":true,""snippets_enabled"":true,""container_registry_enabled"":true,""service_desk_enabled"":false,""service_desk_address"":null,""can_create_merge_request_in"":true,""issues_access_level"":""enabled"",""repository_access_level"":""enabled"",""merge_requests_access_level"":""enabled"",""forking_access_level"":""enabled"",""wiki_access_level"":""enabled"",""builds_access_level"":""enabled"",""snippets_access_level"":""enabled"",""pages_access_level"":""private"",""analytics_access_level"":""enabled"",""container_registry_access_level"":""enabled"",""security_and_compliance_access_level"":""private"",""releases_access_level"":""enabled"",""environments_access_level"":""enabled"",""feature_flags_access_level"":""enabled"",""infrastructure_access_level"":""enabled"",""monitor_access_level"":""enabled"",""model_experiments_access_level"":""enabled"",""emails_disabled"":false,""emails_enabled"":true,""shared_runners_enabled"":true,""lfs_enabled"":true,""creator_id"":1,""import_url"":null,""import_type"":null,""import_status"":""none"",""import_error"":null,""open_issues_count"":0,""description_html"":"""",""updated_at"":""2024-03-10T14:19:34.750Z"",""ci_default_git_depth"":20,""ci_forward_deployment_enabled"":true,""ci_forward_deployment_rollback_allowed"":true,""ci_job_token_scope_enabled"":false,""ci_separated_caches"":true,""ci_allow_fork_pipelines_to_run_in_parent_project"":true,""build_git_strategy"":""fetch"",""keep_latest_artifact"":true,""restrict_user_defined_variables"":false,""runners_token"":""GR13489417rNYoRAs8xBMqnVRfbNg"",""runner_token_expiration_interval"":null,""group_runners_enabled"":true,""auto_cancel_pending_pipelines"":""enabled"",""build_timeout"":3600,""auto_devops_enabled"":true,""auto_devops_deploy_strategy"":""continuous"",""ci_config_path"":null,""public_jobs"":true,""shared_with_groups"":[],""only_allow_merge_if_pipeline_succeeds"":false,""allow_merge_on_skipped_pipeline"":true,""request_access_enabled"":true,""only_allow_merge_if_all_discussions_are_resolved"":false,""remove_source_branch_after_merge"":true,""printing_merge_request_link_enabled"":true,""merge_method"":""merge"",""squash_option"":""default_off"",""enforce_auth_checks_on_uploads"":true,""suggestion_commit_message"":null,""merge_commit_template"":null,""squash_commit_template"":null,""issue_branch_template"":null,""autoclose_referenced_issues"":true,""permissions"":{""project_access"":{""access_level"":50,""notification_level"":3},""group_access"":{""access_level"":50,""notification_level"":3}}}",satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'wiki_enabled' is present in the response
        if 'wiki_enabled' not in latest_response:
            return 0
        
        # Ensure 'wiki_enabled' is a boolean
        if not isinstance(latest_response['wiki_enabled'], bool):
            return -1
        
        # Check if the request_info contains 'wiki_enabled' and validate it
        if 'wiki_enabled' in request_info:
            if latest_response['wiki_enabled'] != request_info['wiki_enabled']:
                return -1
        
        return 1
    except Exception as e:
        return -1
",True,1,1,0,0,1,0,"range of values, logic"
37,Issue,confidential,,post-/projects/{id}/issues,parameters,confidential,Set an issue to be confidential. Default is false,c,False,TP,"{
  ""confidential"": false,
  ""due_date"": ""2024-03-27"",
  ""id"": 9,
  ""created_at"": ""2024-03-25T11:00:53.535Z"",
  ""description"": ""help to fix this fix this issue as soon as possible"",
  ""title"": ""this is the first issue of this project""
}




","{""id"":5,""iid"":1,""project_id"":9,""title"":""this is the first issue of this project"",""description"":""help to fix this fix this issue as soon as possible"",""state"":""opened"",""created_at"":""2024-03-25T11:00:53.535Z"",""updated_at"":""2024-03-25T11:00:53.535Z"",""closed_at"":null,""closed_by"":null,""labels"":[""error1""],""milestone"":null,""assignees"":[],""author"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""type"":""ISSUE"",""assignee"":null,""user_notes_count"":0,""merge_requests_count"":0,""upvotes"":0,""downvotes"":0,""due_date"":""2024-03-27"",""confidential"":false,""discussion_locked"":null,""issue_type"":""issue"",""web_url"":""http://gitlab.example.com/test-1/test_project_created_by_user_2/-/issues/1"",""time_stats"":{""time_estimate"":0,""total_time_spent"":0,""human_time_estimate"":null,""human_total_time_spent"":null},""task_completion_status"":{""count"":0,""completed_count"":0},""has_tasks"":true,""task_status"":""0 of 0 checklist items completed"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/9/issues/1"",""notes"":""http://gitlab.example.com/api/v4/projects/9/issues/1/notes"",""award_emoji"":""http://gitlab.example.com/api/v4/projects/9/issues/1/award_emoji"",""project"":""http://gitlab.example.com/api/v4/projects/9"",""closed_as_duplicate_of"":null},""references"":{""short"":""#1"",""relative"":""#1"",""full"":""test-1/test_project_created_by_user_2#1""},""severity"":""UNKNOWN"",""subscribed"":true,""moved_to_id"":null,""service_desk_reply_to"":null}",satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'confidential' attribute exists in the response
        if 'confidential' not in latest_response:
            return 0
        
        # Extract the 'confidential' value from the response
        response_confidential = latest_response['confidential']
        
        # Ensure the 'confidential' attribute is of type boolean
        if not isinstance(response_confidential, bool):
            return -1
        
        # Extract the 'confidential' value from the request info, default is False
        request_confidential = request_info.get('confidential', False)
        
        # Ensure the 'confidential' value from the request is of type boolean
        if not isinstance(request_confidential, bool):
            return -1
        
        # Check if the response 'confidential' matches the request 'confidential'
        if response_confidential == request_confidential:
            return 1
        else:
            return -1
    except Exception as e:
        return -1
",False,1,1,0,0,1,0,"range of values, logic"
38,Issue,confidential,,get-/projects/{id}/issues,parameters,confidential,Filter confidential or public issues,c,False,TP,"{
  ""confidential"": false,
  ""due_date"": null,
  ""state"": ""opened"",
  ""updated_after"": ""2024-03-24T00:00:00Z"",
  ""updated_before"": ""2024-03-26T00:00:00Z"",
  ""id"": 10
}","[{""id"":4,""iid"":2,""project_id"":10,""title"":""This is a new issue"",""description"":null,""state"":""opened"",""created_at"":""2024-03-25T07:56:16.760Z"",""updated_at"":""2024-03-25T07:56:16.760Z"",""closed_at"":null,""closed_by"":null,""labels"":[],""milestone"":null,""assignees"":[],""author"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""type"":""ISSUE"",""assignee"":null,""user_notes_count"":0,""merge_requests_count"":0,""upvotes"":0,""downvotes"":0,""due_date"":null,""confidential"":false,""discussion_locked"":null,""issue_type"":""issue"",""web_url"":""http://gitlab.example.com/root/test_project_2/-/issues/2"",""time_stats"":{""time_estimate"":0,""total_time_spent"":0,""human_time_estimate"":null,""human_total_time_spent"":null},""task_completion_status"":{""count"":0,""completed_count"":0},""has_tasks"":true,""task_status"":"""",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/10/issues/2"",""notes"":""http://gitlab.example.com/api/v4/projects/10/issues/2/notes"",""award_emoji"":""http://gitlab.example.com/api/v4/projects/10/issues/2/award_emoji"",""project"":""http://gitlab.example.com/api/v4/projects/10"",""closed_as_duplicate_of"":null},""references"":{""short"":""#2"",""relative"":""#2"",""full"":""root/test_project_2#2""},""severity"":""UNKNOWN"",""moved_to_id"":null,""service_desk_reply_to"":null}]",unknown,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'confidential' parameter was specified in the request
        if 'confidential' in request_info:
            requested_confidentiality = request_info['confidential']
            if not isinstance(requested_confidentiality, bool):
                return -1  # Invalid type for 'confidential' in request_info

            # Verify each issue in the response matches the requested confidentiality
            for issue in latest_response:
                if 'confidential' not in issue or issue['confidential'] is None:
                    return 0  # Insufficient information to verify the constraint
                if issue['confidential'] != requested_confidentiality:
                    return -1  # Constraint not satisfied
        else:
            # 'confidential' not specified, verify if all issues have the 'confidential' attribute
            for issue in latest_response:
                if 'confidential' not in issue or issue['confidential'] is None:
                    return 0  # Insufficient information to verify the constraint

        return 1  # All constraints are satisfied
    except Exception as e:
        return -1  # An error occurred, assume constraints are not satisfied
",False,1,1,0,0,1,0,"range of values, logic"
39,Issue,confidential,,get-/groups/{id}/issues,parameters,confidential,Filter confidential or public issues,c,False,TP,"{
  ""confidential"": false,
  ""due_date"": null,
  ""state"": ""closed"",
  ""updated_after"": ""2016-01-01T00:00:00Z"",
  ""updated_before"": ""2016-01-05T00:00:00Z""
}","[
   {
      ""project_id"" : 4,
      ""milestone"" : {
         ""due_date"" : null,
         ""project_id"" : 4,
         ""state"" : ""closed"",
         ""description"" : ""Rerum est voluptatem provident consequuntur molestias similique ipsum dolor."",
         ""iid"" : 3,
         ""id"" : 11,
         ""title"" : ""v3.0"",
         ""created_at"" : ""2016-01-04T15:31:39.788Z"",
         ""updated_at"" : ""2016-01-04T15:31:39.788Z""
      },
      ""author"" : {
         ""state"" : ""active"",
         ""web_url"" : ""https://gitlab.example.com/root"",
         ""avatar_url"" : null,
         ""username"" : ""root"",
         ""id"" : 1,
         ""name"" : ""Administrator""
      },
      ""description"" : ""Omnis vero earum sunt corporis dolor et placeat."",
      ""state"" : ""closed"",
      ""iid"" : 1,
      ""assignees"" : [{
         ""avatar_url"" : null,
         ""web_url"" : ""https://gitlab.example.com/lennie"",
         ""state"" : ""active"",
         ""username"" : ""lennie"",
         ""id"" : 9,
         ""name"" : ""Dr. Luella Kovacek""
      }],
      ""assignee"" : {
         ""avatar_url"" : null,
         ""web_url"" : ""https://gitlab.example.com/lennie"",
         ""state"" : ""active"",
         ""username"" : ""lennie"",
         ""id"" : 9,
         ""name"" : ""Dr. Luella Kovacek""
      },
      ""type"" : ""ISSUE"",
      ""labels"" : [""foo"", ""bar""],
      ""upvotes"": 4,
      ""downvotes"": 0,
      ""merge_requests_count"": 0,
      ""id"" : 41,
      ""title"" : ""Ut commodi ullam eos dolores perferendis nihil sunt."",
      ""updated_at"" : ""2016-01-04T15:31:46.176Z"",
      ""created_at"" : ""2016-01-04T15:31:46.176Z"",
      ""closed_at"" : null,
      ""closed_by"" : null,
      ""user_notes_count"": 1,
      ""due_date"": null,
      ""imported"": false,
      ""imported_from"": ""none"",
      ""web_url"": ""http://gitlab.example.com/my-group/my-project/issues/1"",
      ""references"": {
        ""short"": ""#1"",
        ""relative"": ""my-project#1"",
        ""full"": ""my-group/my-project#1""
      },
      ""time_stats"": {
         ""time_estimate"": 0,
         ""total_time_spent"": 0,
         ""human_time_estimate"": null,
         ""human_total_time_spent"": null
      },
      ""has_tasks"": true,
      ""task_status"": ""10 of 15 tasks completed"",
      ""confidential"": false,
      ""discussion_locked"": false,
      ""issue_type"": ""issue"",
      ""severity"": ""UNKNOWN"",
      ""_links"":{
         ""self"":""http://gitlab.example.com/api/v4/projects/4/issues/41"",
         ""notes"":""http://gitlab.example.com/api/v4/projects/4/issues/41/notes"",
         ""award_emoji"":""http://gitlab.example.com/api/v4/projects/4/issues/41/award_emoji"",
         ""project"":""http://gitlab.example.com/api/v4/projects/4"",
         ""closed_as_duplicate_of"": ""http://gitlab.example.com/api/v4/projects/1/issues/75""
      },
      ""task_completion_status"":{
         ""count"":0,
         ""completed_count"":0
      }
   }
]
",unknown,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'confidential' parameter was specified in the request
        if 'confidential' in request_info:
            requested_confidentiality = request_info['confidential']
            if not isinstance(requested_confidentiality, bool):
                return -1  # Invalid type for 'confidential' in request_info

            # Verify each issue in the response matches the requested confidentiality
            for issue in latest_response:
                if 'confidential' not in issue or issue['confidential'] is None:
                    return 0  # Insufficient information to verify the constraint
                if issue['confidential'] != requested_confidentiality:
                    return -1  # Constraint not satisfied
        else:
            # 'confidential' not specified, verify if all issues have the 'confidential' attribute
            for issue in latest_response:
                if 'confidential' not in issue or issue['confidential'] is None:
                    return 0  # Insufficient information to verify the constraint

        return 1  # All constraints are satisfied
    except Exception as e:
        return -1  # An error occurred, assume constraints are not satisfied
",False,1,1,0,0,1,0,"range of values, logic"
40,Issue,confidential,,put-/projects/{id}/issues/{issue_iid},parameters,confidential,"Updates an issue to be confidential. At least one of the following parameters is required for the request to be successful: assignee_id, assignee_ids, confidential, created_at, description, discussion_locked, due_date, labels, milestone_id, state_event, title",c,False,TP,"{
  ""confidential"": false,
  ""due_date"": ""2016-07-22"",
  ""updated_at"": ""2016-01-07T12:55:16.213Z"",
  ""id"": 4,
  ""description"": null,
  ""title"": ""Issues with auth"",
  ""issue_iid"": 15,
  ""discussion_locked"": false
}","{
   ""created_at"" : ""2016-01-07T12:46:01.410Z"",
   ""author"" : {
      ""name"" : ""Alexandra Bashirian"",
      ""avatar_url"" : null,
      ""username"" : ""eileen.lowe"",
      ""id"" : 18,
      ""state"" : ""active"",
      ""web_url"" : ""https://gitlab.example.com/eileen.lowe""
   },
   ""state"" : ""closed"",
   ""title"" : ""Issues with auth"",
   ""project_id"" : 4,
   ""description"" : null,
   ""updated_at"" : ""2016-01-07T12:55:16.213Z"",
   ""closed_at"" : ""2016-01-08T12:55:16.213Z"",
   ""closed_by"" : {
      ""state"" : ""active"",
      ""web_url"" : ""https://gitlab.example.com/root"",
      ""avatar_url"" : null,
      ""username"" : ""root"",
      ""id"" : 1,
      ""name"" : ""Administrator""
    },
   ""iid"" : 15,
   ""labels"" : [
      ""bug""
   ],
   ""upvotes"": 4,
   ""downvotes"": 0,
   ""merge_requests_count"": 0,
   ""id"" : 85,
   ""assignees"" : [],
   ""assignee"" : null,
   ""milestone"" : null,
   ""subscribed"" : true,
   ""user_notes_count"": 0,
   ""due_date"": ""2016-07-22"",
   ""web_url"": ""http://gitlab.example.com/my-group/my-project/issues/15"",
   ""references"": {
     ""short"": ""#15"",
     ""relative"": ""#15"",
     ""full"": ""my-group/my-project#15""
   },
   ""time_stats"": {
      ""time_estimate"": 0,
      ""total_time_spent"": 0,
      ""human_time_estimate"": null,
      ""human_total_time_spent"": null
   },
   ""confidential"": false,
   ""discussion_locked"": false,
   ""issue_type"": ""issue"",
   ""severity"": ""UNKNOWN"",
   ""_links"": {
      ""self"": ""http://gitlab.example.com/api/v4/projects/1/issues/2"",
      ""notes"": ""http://gitlab.example.com/api/v4/projects/1/issues/2/notes"",
      ""award_emoji"": ""http://gitlab.example.com/api/v4/projects/1/issues/2/award_emoji"",
      ""project"": ""http://gitlab.example.com/api/v4/projects/1"",
      ""closed_as_duplicate_of"": ""http://gitlab.example.com/api/v4/projects/1/issues/75""

   },
   ""task_completion_status"":{
      ""count"":0,
      ""completed_count"":0
   }
}",unknown,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'confidential' is in the response
        if 'confidential' not in latest_response:
            return 0
        
        # Check if 'confidential' is a boolean
        if not isinstance(latest_response['confidential'], bool):
            return -1
        
        # Check if the request contains 'confidential' parameter
        if 'confidential' in request_info:
            # Validate that the response matches the request
            if latest_response['confidential'] != request_info['confidential']:
                return -1
        
        return 1
    except Exception as e:
        return -1
",False,1,1,0,0,1,0,"range of values, logic"
41,Issue,confidential,,get-/issues,parameters,confidential,Filter confidential or public issues,c,False,TP,"{
  ""confidential"": false,
  ""due_date"": ""2016-07-22"",
  ""state"": ""opened"",
  ""updated_before"": ""2016-01-05T00:00:00Z"",
  ""updated_after"": ""2016-01-01T00:00:00Z""
}




","[
   {
      ""state"" : ""opened"",
      ""description"" : ""Ratione dolores corrupti mollitia soluta quia."",
      ""author"" : {
         ""state"" : ""active"",
         ""id"" : 18,
         ""web_url"" : ""https://gitlab.example.com/eileen.lowe"",
         ""name"" : ""Alexandra Bashirian"",
         ""avatar_url"" : null,
         ""username"" : ""eileen.lowe""
      },
      ""milestone"" : {
         ""project_id"" : 1,
         ""description"" : ""Ducimus nam enim ex consequatur cumque ratione."",
         ""state"" : ""closed"",
         ""due_date"" : null,
         ""iid"" : 2,
         ""created_at"" : ""2016-01-04T15:31:39.996Z"",
         ""title"" : ""v4.0"",
         ""id"" : 17,
         ""updated_at"" : ""2016-01-04T15:31:39.996Z""
      },
      ""project_id"" : 1,
      ""assignees"" : [{
         ""state"" : ""active"",
         ""id"" : 1,
         ""name"" : ""Administrator"",
         ""web_url"" : ""https://gitlab.example.com/root"",
         ""avatar_url"" : null,
         ""username"" : ""root""
      }],
      ""assignee"" : {
         ""state"" : ""active"",
         ""id"" : 1,
         ""name"" : ""Administrator"",
         ""web_url"" : ""https://gitlab.example.com/root"",
         ""avatar_url"" : null,
         ""username"" : ""root""
      },
      ""type"" : ""ISSUE"",
      ""updated_at"" : ""2016-01-04T15:31:51.081Z"",
      ""closed_at"" : null,
      ""closed_by"" : null,
      ""id"" : 76,
      ""title"" : ""Consequatur vero maxime deserunt laboriosam est voluptas dolorem."",
      ""created_at"" : ""2016-01-04T15:31:51.081Z"",
      ""moved_to_id"" : null,
      ""iid"" : 6,
      ""labels"" : [""foo"", ""bar""],
      ""upvotes"": 4,
      ""downvotes"": 0,
      ""merge_requests_count"": 0,
      ""user_notes_count"": 1,
      ""due_date"": ""2016-07-22"",
      ""imported"":false,
      ""imported_from"": ""none"",
      ""web_url"": ""http://gitlab.example.com/my-group/my-project/issues/6"",
      ""references"": {
        ""short"": ""#6"",
        ""relative"": ""my-group/my-project#6"",
        ""full"": ""my-group/my-project#6""
      },
      ""time_stats"": {
         ""time_estimate"": 0,
         ""total_time_spent"": 0,
         ""human_time_estimate"": null,
         ""human_total_time_spent"": null
      },
      ""has_tasks"": true,
      ""task_status"": ""10 of 15 tasks completed"",
      ""confidential"": false,
      ""discussion_locked"": false,
      ""issue_type"": ""issue"",
      ""severity"": ""UNKNOWN"",
      ""_links"":{
         ""self"":""http://gitlab.example.com/api/v4/projects/1/issues/76"",
         ""notes"":""http://gitlab.example.com/api/v4/projects/1/issues/76/notes"",
         ""award_emoji"":""http://gitlab.example.com/api/v4/projects/1/issues/76/award_emoji"",
         ""project"":""http://gitlab.example.com/api/v4/projects/1"",
         ""closed_as_duplicate_of"": ""http://gitlab.example.com/api/v4/projects/1/issues/75""
      },
      ""task_completion_status"":{
         ""count"":0,
         ""completed_count"":0
      }
   }
]",unknown,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'confidential' parameter was specified in the request
        if 'confidential' in request_info:
            requested_confidentiality = request_info['confidential']
            if not isinstance(requested_confidentiality, bool):
                return -1  # Invalid type for 'confidential' in request_info

            # Verify each issue in the response matches the requested confidentiality
            for issue in latest_response:
                if 'confidential' not in issue or issue['confidential'] is None:
                    return 0  # Insufficient information to verify the constraint
                if issue['confidential'] != requested_confidentiality:
                    return -1  # Constraint not satisfied
        else:
            # 'confidential' not specified, verify if all issues have the 'confidential' attribute
            for issue in latest_response:
                if 'confidential' not in issue or issue['confidential'] is None:
                    return 0  # Insufficient information to verify the constraint

        return 1  # All constraints are satisfied
    except Exception as e:
        return -1  # An error occurred, assume constraints are not satisfied
",False,1,1,0,0,1,0,"range of values, logic"
42,Issue,due_date,,get-/issues,parameters,due_date,"Return issues that have no due date, are overdue, or whose due date is this week, this month, or between two weeks ago and next month. Accepts: 0 (no due date), overdue , week , month , next_month_and_previous_two_weeks . (Introduced in GitLab 13.3 )",c,False,TP,"{
  ""confidential"": false,
  ""due_date"": ""2016-07-22"",
  ""state"": ""opened"",
  ""updated_before"": ""2016-01-05T00:00:00Z"",
  ""updated_after"": ""2016-01-01T00:00:00Z""
}




","[
   {
      ""state"" : ""opened"",
      ""description"" : ""Ratione dolores corrupti mollitia soluta quia."",
      ""author"" : {
         ""state"" : ""active"",
         ""id"" : 18,
         ""web_url"" : ""https://gitlab.example.com/eileen.lowe"",
         ""name"" : ""Alexandra Bashirian"",
         ""avatar_url"" : null,
         ""username"" : ""eileen.lowe""
      },
      ""milestone"" : {
         ""project_id"" : 1,
         ""description"" : ""Ducimus nam enim ex consequatur cumque ratione."",
         ""state"" : ""closed"",
         ""due_date"" : null,
         ""iid"" : 2,
         ""created_at"" : ""2016-01-04T15:31:39.996Z"",
         ""title"" : ""v4.0"",
         ""id"" : 17,
         ""updated_at"" : ""2016-01-04T15:31:39.996Z""
      },
      ""project_id"" : 1,
      ""assignees"" : [{
         ""state"" : ""active"",
         ""id"" : 1,
         ""name"" : ""Administrator"",
         ""web_url"" : ""https://gitlab.example.com/root"",
         ""avatar_url"" : null,
         ""username"" : ""root""
      }],
      ""assignee"" : {
         ""state"" : ""active"",
         ""id"" : 1,
         ""name"" : ""Administrator"",
         ""web_url"" : ""https://gitlab.example.com/root"",
         ""avatar_url"" : null,
         ""username"" : ""root""
      },
      ""type"" : ""ISSUE"",
      ""updated_at"" : ""2016-01-04T15:31:51.081Z"",
      ""closed_at"" : null,
      ""closed_by"" : null,
      ""id"" : 76,
      ""title"" : ""Consequatur vero maxime deserunt laboriosam est voluptas dolorem."",
      ""created_at"" : ""2016-01-04T15:31:51.081Z"",
      ""moved_to_id"" : null,
      ""iid"" : 6,
      ""labels"" : [""foo"", ""bar""],
      ""upvotes"": 4,
      ""downvotes"": 0,
      ""merge_requests_count"": 0,
      ""user_notes_count"": 1,
      ""due_date"": ""2016-07-22"",
      ""imported"":false,
      ""imported_from"": ""none"",
      ""web_url"": ""http://gitlab.example.com/my-group/my-project/issues/6"",
      ""references"": {
        ""short"": ""#6"",
        ""relative"": ""my-group/my-project#6"",
        ""full"": ""my-group/my-project#6""
      },
      ""time_stats"": {
         ""time_estimate"": 0,
         ""total_time_spent"": 0,
         ""human_time_estimate"": null,
         ""human_total_time_spent"": null
      },
      ""has_tasks"": true,
      ""task_status"": ""10 of 15 tasks completed"",
      ""confidential"": false,
      ""discussion_locked"": false,
      ""issue_type"": ""issue"",
      ""severity"": ""UNKNOWN"",
      ""_links"":{
         ""self"":""http://gitlab.example.com/api/v4/projects/1/issues/76"",
         ""notes"":""http://gitlab.example.com/api/v4/projects/1/issues/76/notes"",
         ""award_emoji"":""http://gitlab.example.com/api/v4/projects/1/issues/76/award_emoji"",
         ""project"":""http://gitlab.example.com/api/v4/projects/1"",
         ""closed_as_duplicate_of"": ""http://gitlab.example.com/api/v4/projects/1/issues/75""
      },
      ""task_completion_status"":{
         ""count"":0,
         ""completed_count"":0
      }
   }
]",satisfied,"import datetime

def verify_latest_response(latest_response, request_info):
    try:
        due_date_param = request_info.get('due_date')
        if due_date_param not in ['0', 'overdue', 'week', 'month', 'next_month_and_previous_two_weeks']:
            return -1

        today = datetime.date.today()
        start_of_week = today - datetime.timedelta(days=today.weekday())
        end_of_week = start_of_week + datetime.timedelta(days=6)
        start_of_month = today.replace(day=1)
        end_of_month = (start_of_month + datetime.timedelta(days=32)).replace(day=1) - datetime.timedelta(days=1)
        start_of_next_month = (end_of_month + datetime.timedelta(days=1)).replace(day=1)
        end_of_next_month = (start_of_next_month + datetime.timedelta(days=32)).replace(day=1) - datetime.timedelta(days=1)
        start_of_two_weeks_ago = today - datetime.timedelta(weeks=2)

        for issue in latest_response:
            issue_due_date = issue.get('due_date')
            if issue_due_date is None:
                if due_date_param == '0':
                    continue
                else:
                    return -1

            issue_due_date = datetime.datetime.strptime(issue_due_date, '%Y-%m-%d').date()

            if due_date_param == 'overdue':
                if issue_due_date >= today:
                    return -1
            elif due_date_param == 'week':
                if not (start_of_week <= issue_due_date <= end_of_week):
                    return -1
            elif due_date_param == 'month':
                if not (start_of_month <= issue_due_date <= end_of_month):
                    return -1
            elif due_date_param == 'next_month_and_previous_two_weeks':
                if not (start_of_two_weeks_ago <= issue_due_date <= end_of_next_month):
                    return -1

        return 1
    except Exception as e:
        return -1
",2016-07-22,1,0,1,0,1,0,range of values
43,Issue,due_date,,post-/projects/{id}/issues,parameters,due_date,"The due date. Date time string in the format YYYY-MM-DD , for example 2016-03-11",c,False,TP,"{
  ""confidential"": false,
  ""due_date"": ""2024-03-27"",
  ""id"": 9,
  ""created_at"": ""2024-03-25T11:00:53.535Z"",
  ""description"": ""help to fix this fix this issue as soon as possible"",
  ""title"": ""this is the first issue of this project""
}




","{""id"":5,""iid"":1,""project_id"":9,""title"":""this is the first issue of this project"",""description"":""help to fix this fix this issue as soon as possible"",""state"":""opened"",""created_at"":""2024-03-25T11:00:53.535Z"",""updated_at"":""2024-03-25T11:00:53.535Z"",""closed_at"":null,""closed_by"":null,""labels"":[""error1""],""milestone"":null,""assignees"":[],""author"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""type"":""ISSUE"",""assignee"":null,""user_notes_count"":0,""merge_requests_count"":0,""upvotes"":0,""downvotes"":0,""due_date"":""2024-03-27"",""confidential"":false,""discussion_locked"":null,""issue_type"":""issue"",""web_url"":""http://gitlab.example.com/test-1/test_project_created_by_user_2/-/issues/1"",""time_stats"":{""time_estimate"":0,""total_time_spent"":0,""human_time_estimate"":null,""human_total_time_spent"":null},""task_completion_status"":{""count"":0,""completed_count"":0},""has_tasks"":true,""task_status"":""0 of 0 checklist items completed"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/9/issues/1"",""notes"":""http://gitlab.example.com/api/v4/projects/9/issues/1/notes"",""award_emoji"":""http://gitlab.example.com/api/v4/projects/9/issues/1/award_emoji"",""project"":""http://gitlab.example.com/api/v4/projects/9"",""closed_as_duplicate_of"":null},""references"":{""short"":""#1"",""relative"":""#1"",""full"":""test-1/test_project_created_by_user_2#1""},""severity"":""UNKNOWN"",""subscribed"":true,""moved_to_id"":null,""service_desk_reply_to"":null}",satisfied,"def verify_latest_response(latest_response, request_info):
    import re
    from datetime import datetime

    try:
        # Extract the due_date from the response
        due_date = latest_response.get(""due_date"", None)
        
        if due_date is None:
            return 0  # Attribute does not exist in the response
        
        # Check if the due_date matches the format YYYY-MM-DD
        date_format = ""%Y-%m-%d""
        try:
            datetime.strptime(due_date, date_format)
        except ValueError:
            return -1  # due_date does not match the required format
        
        return 1  # Constraint is satisfied
    except Exception as e:
        return -1  # Any other exception indicates failure to satisfy the constraint
",2016-07-22,1,1,0,0,1,0,range of values
44,Issue,due_date,,get-/projects/{id}/issues,parameters,due_date,"Return issues that have no due date, are overdue, or whose due date is this week, this month, or between two weeks ago and next month. Accepts: 0 (no due date), overdue , week , month , next_month_and_previous_two_weeks . (Introduced in GitLab 13.3 )",c,False,TP,"{
  ""confidential"": false,
  ""due_date"": null,
  ""state"": ""opened"",
  ""updated_after"": ""2024-03-24T00:00:00Z"",
  ""updated_before"": ""2024-03-26T00:00:00Z"",
  ""id"": 10
}","[{""id"":4,""iid"":2,""project_id"":10,""title"":""This is a new issue"",""description"":null,""state"":""opened"",""created_at"":""2024-03-25T07:56:16.760Z"",""updated_at"":""2024-03-25T07:56:16.760Z"",""closed_at"":null,""closed_by"":null,""labels"":[],""milestone"":null,""assignees"":[],""author"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""type"":""ISSUE"",""assignee"":null,""user_notes_count"":0,""merge_requests_count"":0,""upvotes"":0,""downvotes"":0,""due_date"":null,""confidential"":false,""discussion_locked"":null,""issue_type"":""issue"",""web_url"":""http://gitlab.example.com/root/test_project_2/-/issues/2"",""time_stats"":{""time_estimate"":0,""total_time_spent"":0,""human_time_estimate"":null,""human_total_time_spent"":null},""task_completion_status"":{""count"":0,""completed_count"":0},""has_tasks"":true,""task_status"":"""",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/10/issues/2"",""notes"":""http://gitlab.example.com/api/v4/projects/10/issues/2/notes"",""award_emoji"":""http://gitlab.example.com/api/v4/projects/10/issues/2/award_emoji"",""project"":""http://gitlab.example.com/api/v4/projects/10"",""closed_as_duplicate_of"":null},""references"":{""short"":""#2"",""relative"":""#2"",""full"":""root/test_project_2#2""},""severity"":""UNKNOWN"",""moved_to_id"":null,""service_desk_reply_to"":null}]",satisfied,"import datetime

def verify_latest_response(latest_response, request_info):
    try:
        due_date_param = request_info.get('due_date')
        if due_date_param not in ['0', 'overdue', 'week', 'month', 'next_month_and_previous_two_weeks']:
            return -1

        today = datetime.date.today()
        start_of_week = today - datetime.timedelta(days=today.weekday())
        end_of_week = start_of_week + datetime.timedelta(days=6)
        start_of_month = today.replace(day=1)
        end_of_month = (start_of_month + datetime.timedelta(days=32)).replace(day=1) - datetime.timedelta(days=1)
        start_of_next_month = (end_of_month + datetime.timedelta(days=1)).replace(day=1)
        end_of_next_month = (start_of_next_month + datetime.timedelta(days=32)).replace(day=1) - datetime.timedelta(days=1)
        start_of_two_weeks_ago = today - datetime.timedelta(weeks=2)

        for issue in latest_response:
            issue_due_date = issue.get('due_date')
            if issue_due_date is None:
                if due_date_param == '0':
                    continue
                else:
                    return -1

            issue_due_date = datetime.datetime.strptime(issue_due_date, '%Y-%m-%d').date()

            if due_date_param == 'overdue':
                if issue_due_date >= today:
                    return -1
            elif due_date_param == 'week':
                if not (start_of_week <= issue_due_date <= end_of_week):
                    return -1
            elif due_date_param == 'month':
                if not (start_of_month <= issue_due_date <= end_of_month):
                    return -1
            elif due_date_param == 'next_month_and_previous_two_weeks':
                if not (start_of_two_weeks_ago <= issue_due_date <= end_of_next_month):
                    return -1

        return 1
    except Exception as e:
        return -1
",2016-07-22,1,0,1,0,1,0,range of values
45,Issue,due_date,,get-/groups/{id}/issues,parameters,due_date,"Return issues that have no due date, are overdue, or whose due date is this week, this month, or between two weeks ago and next month. Accepts: 0 (no due date), overdue , week , month , next_month_and_previous_two_weeks . (Introduced in GitLab 13.3 )",c,False,TP,"{
  ""confidential"": false,
  ""due_date"": null,
  ""state"": ""closed"",
  ""updated_after"": ""2016-01-01T00:00:00Z"",
  ""updated_before"": ""2016-01-05T00:00:00Z""
}","[
   {
      ""project_id"" : 4,
      ""milestone"" : {
         ""due_date"" : null,
         ""project_id"" : 4,
         ""state"" : ""closed"",
         ""description"" : ""Rerum est voluptatem provident consequuntur molestias similique ipsum dolor."",
         ""iid"" : 3,
         ""id"" : 11,
         ""title"" : ""v3.0"",
         ""created_at"" : ""2016-01-04T15:31:39.788Z"",
         ""updated_at"" : ""2016-01-04T15:31:39.788Z""
      },
      ""author"" : {
         ""state"" : ""active"",
         ""web_url"" : ""https://gitlab.example.com/root"",
         ""avatar_url"" : null,
         ""username"" : ""root"",
         ""id"" : 1,
         ""name"" : ""Administrator""
      },
      ""description"" : ""Omnis vero earum sunt corporis dolor et placeat."",
      ""state"" : ""closed"",
      ""iid"" : 1,
      ""assignees"" : [{
         ""avatar_url"" : null,
         ""web_url"" : ""https://gitlab.example.com/lennie"",
         ""state"" : ""active"",
         ""username"" : ""lennie"",
         ""id"" : 9,
         ""name"" : ""Dr. Luella Kovacek""
      }],
      ""assignee"" : {
         ""avatar_url"" : null,
         ""web_url"" : ""https://gitlab.example.com/lennie"",
         ""state"" : ""active"",
         ""username"" : ""lennie"",
         ""id"" : 9,
         ""name"" : ""Dr. Luella Kovacek""
      },
      ""type"" : ""ISSUE"",
      ""labels"" : [""foo"", ""bar""],
      ""upvotes"": 4,
      ""downvotes"": 0,
      ""merge_requests_count"": 0,
      ""id"" : 41,
      ""title"" : ""Ut commodi ullam eos dolores perferendis nihil sunt."",
      ""updated_at"" : ""2016-01-04T15:31:46.176Z"",
      ""created_at"" : ""2016-01-04T15:31:46.176Z"",
      ""closed_at"" : null,
      ""closed_by"" : null,
      ""user_notes_count"": 1,
      ""due_date"": null,
      ""imported"": false,
      ""imported_from"": ""none"",
      ""web_url"": ""http://gitlab.example.com/my-group/my-project/issues/1"",
      ""references"": {
        ""short"": ""#1"",
        ""relative"": ""my-project#1"",
        ""full"": ""my-group/my-project#1""
      },
      ""time_stats"": {
         ""time_estimate"": 0,
         ""total_time_spent"": 0,
         ""human_time_estimate"": null,
         ""human_total_time_spent"": null
      },
      ""has_tasks"": true,
      ""task_status"": ""10 of 15 tasks completed"",
      ""confidential"": false,
      ""discussion_locked"": false,
      ""issue_type"": ""issue"",
      ""severity"": ""UNKNOWN"",
      ""_links"":{
         ""self"":""http://gitlab.example.com/api/v4/projects/4/issues/41"",
         ""notes"":""http://gitlab.example.com/api/v4/projects/4/issues/41/notes"",
         ""award_emoji"":""http://gitlab.example.com/api/v4/projects/4/issues/41/award_emoji"",
         ""project"":""http://gitlab.example.com/api/v4/projects/4"",
         ""closed_as_duplicate_of"": ""http://gitlab.example.com/api/v4/projects/1/issues/75""
      },
      ""task_completion_status"":{
         ""count"":0,
         ""completed_count"":0
      }
   }
]
",satisfied,"import datetime

def verify_latest_response(latest_response, request_info):
    try:
        due_date_param = request_info.get('due_date')
        if due_date_param not in ['0', 'overdue', 'week', 'month', 'next_month_and_previous_two_weeks']:
            return -1

        today = datetime.date.today()
        start_of_week = today - datetime.timedelta(days=today.weekday())
        end_of_week = start_of_week + datetime.timedelta(days=6)
        start_of_month = today.replace(day=1)
        end_of_month = (start_of_month + datetime.timedelta(days=32)).replace(day=1) - datetime.timedelta(days=1)
        start_of_next_month = (end_of_month + datetime.timedelta(days=1)).replace(day=1)
        end_of_next_month = (start_of_next_month + datetime.timedelta(days=32)).replace(day=1) - datetime.timedelta(days=1)
        start_of_two_weeks_ago = today - datetime.timedelta(weeks=2)

        for issue in latest_response:
            issue_due_date = issue.get('due_date')
            if issue_due_date is None:
                if due_date_param == '0':
                    continue
                else:
                    return -1

            issue_due_date = datetime.datetime.strptime(issue_due_date, '%Y-%m-%d').date()

            if due_date_param == 'overdue':
                if issue_due_date >= today:
                    return -1
            elif due_date_param == 'week':
                if not (start_of_week <= issue_due_date <= end_of_week):
                    return -1
            elif due_date_param == 'month':
                if not (start_of_month <= issue_due_date <= end_of_month):
                    return -1
            elif due_date_param == 'next_month_and_previous_two_weeks':
                if not (start_of_two_weeks_ago <= issue_due_date <= end_of_next_month):
                    return -1

        return 1
    except Exception as e:
        return -1
",2016-07-22,1,0,1,0,1,0,range of values
46,Issue,due_date,,put-/projects/{id}/issues/{issue_iid},parameters,due_date,"The due date. Date time string in the format YYYY-MM-DD , for example 2016-03-11",c,False,TP,"{
  ""confidential"": false,
  ""due_date"": ""2016-07-22"",
  ""updated_at"": ""2016-01-07T12:55:16.213Z"",
  ""id"": 4,
  ""description"": null,
  ""title"": ""Issues with auth"",
  ""issue_iid"": 15,
  ""discussion_locked"": false
}","{
   ""created_at"" : ""2016-01-07T12:46:01.410Z"",
   ""author"" : {
      ""name"" : ""Alexandra Bashirian"",
      ""avatar_url"" : null,
      ""username"" : ""eileen.lowe"",
      ""id"" : 18,
      ""state"" : ""active"",
      ""web_url"" : ""https://gitlab.example.com/eileen.lowe""
   },
   ""state"" : ""closed"",
   ""title"" : ""Issues with auth"",
   ""project_id"" : 4,
   ""description"" : null,
   ""updated_at"" : ""2016-01-07T12:55:16.213Z"",
   ""closed_at"" : ""2016-01-08T12:55:16.213Z"",
   ""closed_by"" : {
      ""state"" : ""active"",
      ""web_url"" : ""https://gitlab.example.com/root"",
      ""avatar_url"" : null,
      ""username"" : ""root"",
      ""id"" : 1,
      ""name"" : ""Administrator""
    },
   ""iid"" : 15,
   ""labels"" : [
      ""bug""
   ],
   ""upvotes"": 4,
   ""downvotes"": 0,
   ""merge_requests_count"": 0,
   ""id"" : 85,
   ""assignees"" : [],
   ""assignee"" : null,
   ""milestone"" : null,
   ""subscribed"" : true,
   ""user_notes_count"": 0,
   ""due_date"": ""2016-07-22"",
   ""web_url"": ""http://gitlab.example.com/my-group/my-project/issues/15"",
   ""references"": {
     ""short"": ""#15"",
     ""relative"": ""#15"",
     ""full"": ""my-group/my-project#15""
   },
   ""time_stats"": {
      ""time_estimate"": 0,
      ""total_time_spent"": 0,
      ""human_time_estimate"": null,
      ""human_total_time_spent"": null
   },
   ""confidential"": false,
   ""discussion_locked"": false,
   ""issue_type"": ""issue"",
   ""severity"": ""UNKNOWN"",
   ""_links"": {
      ""self"": ""http://gitlab.example.com/api/v4/projects/1/issues/2"",
      ""notes"": ""http://gitlab.example.com/api/v4/projects/1/issues/2/notes"",
      ""award_emoji"": ""http://gitlab.example.com/api/v4/projects/1/issues/2/award_emoji"",
      ""project"": ""http://gitlab.example.com/api/v4/projects/1"",
      ""closed_as_duplicate_of"": ""http://gitlab.example.com/api/v4/projects/1/issues/75""

   },
   ""task_completion_status"":{
      ""count"":0,
      ""completed_count"":0
   }
}",satisfied,"def verify_latest_response(latest_response, request_info):
    import re
    from datetime import datetime

    try:
        # Extract due_date from the response
        response_due_date = latest_response.get('due_date', None)
        if response_due_date is None:
            return 0  # Attribute does not exist in the response

        # Extract due_date from the request info
        request_due_date = request_info.get('due_date', None)
        if request_due_date is None:
            return 0  # Attribute does not exist in the request info

        # Define the date format
        date_format = ""%Y-%m-%d""

        # Check if the response due_date matches the required format
        try:
            datetime.strptime(response_due_date, date_format)
        except ValueError:
            return -1  # Response due_date does not match the required format

        # Check if the request due_date matches the required format
        try:
            datetime.strptime(request_due_date, date_format)
        except ValueError:
            return -1  # Request due_date does not match the required format

        # Check if the response due_date matches the request due_date
        if response_due_date != request_due_date:
            return -1  # Response due_date does not match the request due_date

        return 1  # All constraints are satisfied

    except Exception as e:
        return -1  # Any other exception indicates a failure to satisfy constraints
",2016-07-22,1,1,0,0,1,0,range of values
47,Issue,state,,get-/groups/{id}/issues,parameters,state,Return all issues or just those that are opened or closed,c,False,TP,"{
  ""confidential"": false,
  ""due_date"": null,
  ""state"": ""closed"",
  ""updated_after"": ""2016-01-01T00:00:00Z"",
  ""updated_before"": ""2016-01-05T00:00:00Z""
}","[
   {
      ""project_id"" : 4,
      ""milestone"" : {
         ""due_date"" : null,
         ""project_id"" : 4,
         ""state"" : ""closed"",
         ""description"" : ""Rerum est voluptatem provident consequuntur molestias similique ipsum dolor."",
         ""iid"" : 3,
         ""id"" : 11,
         ""title"" : ""v3.0"",
         ""created_at"" : ""2016-01-04T15:31:39.788Z"",
         ""updated_at"" : ""2016-01-04T15:31:39.788Z""
      },
      ""author"" : {
         ""state"" : ""active"",
         ""web_url"" : ""https://gitlab.example.com/root"",
         ""avatar_url"" : null,
         ""username"" : ""root"",
         ""id"" : 1,
         ""name"" : ""Administrator""
      },
      ""description"" : ""Omnis vero earum sunt corporis dolor et placeat."",
      ""state"" : ""closed"",
      ""iid"" : 1,
      ""assignees"" : [{
         ""avatar_url"" : null,
         ""web_url"" : ""https://gitlab.example.com/lennie"",
         ""state"" : ""active"",
         ""username"" : ""lennie"",
         ""id"" : 9,
         ""name"" : ""Dr. Luella Kovacek""
      }],
      ""assignee"" : {
         ""avatar_url"" : null,
         ""web_url"" : ""https://gitlab.example.com/lennie"",
         ""state"" : ""active"",
         ""username"" : ""lennie"",
         ""id"" : 9,
         ""name"" : ""Dr. Luella Kovacek""
      },
      ""type"" : ""ISSUE"",
      ""labels"" : [""foo"", ""bar""],
      ""upvotes"": 4,
      ""downvotes"": 0,
      ""merge_requests_count"": 0,
      ""id"" : 41,
      ""title"" : ""Ut commodi ullam eos dolores perferendis nihil sunt."",
      ""updated_at"" : ""2016-01-04T15:31:46.176Z"",
      ""created_at"" : ""2016-01-04T15:31:46.176Z"",
      ""closed_at"" : null,
      ""closed_by"" : null,
      ""user_notes_count"": 1,
      ""due_date"": null,
      ""imported"": false,
      ""imported_from"": ""none"",
      ""web_url"": ""http://gitlab.example.com/my-group/my-project/issues/1"",
      ""references"": {
        ""short"": ""#1"",
        ""relative"": ""my-project#1"",
        ""full"": ""my-group/my-project#1""
      },
      ""time_stats"": {
         ""time_estimate"": 0,
         ""total_time_spent"": 0,
         ""human_time_estimate"": null,
         ""human_total_time_spent"": null
      },
      ""has_tasks"": true,
      ""task_status"": ""10 of 15 tasks completed"",
      ""confidential"": false,
      ""discussion_locked"": false,
      ""issue_type"": ""issue"",
      ""severity"": ""UNKNOWN"",
      ""_links"":{
         ""self"":""http://gitlab.example.com/api/v4/projects/4/issues/41"",
         ""notes"":""http://gitlab.example.com/api/v4/projects/4/issues/41/notes"",
         ""award_emoji"":""http://gitlab.example.com/api/v4/projects/4/issues/41/award_emoji"",
         ""project"":""http://gitlab.example.com/api/v4/projects/4"",
         ""closed_as_duplicate_of"": ""http://gitlab.example.com/api/v4/projects/1/issues/75""
      },
      ""task_completion_status"":{
         ""count"":0,
         ""completed_count"":0
      }
   }
]
",unknown,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the 'state' parameter from the request info
        requested_state = request_info.get('state')
        
        # Check if the requested state is valid
        if requested_state not in ['opened', 'closed']:
            return -1
        
        # Iterate through each issue in the response
        for issue in latest_response:
            # Check if the 'state' attribute exists in the issue
            if 'state' not in issue:
                return 0
            
            # Verify if the state of the issue matches the requested state
            if issue['state'] != requested_state:
                return -1
        
        # If all issues match the requested state
        return 1
    except Exception as e:
        # In case of any unexpected error
        return -1
",closed,1,1,0,0,1,0,logic
48,Issue,state,,get-/projects/{id}/issues,parameters,state,Return all issues or just those that are opened or closed,c,False,TP,"{
  ""confidential"": false,
  ""due_date"": null,
  ""state"": ""opened"",
  ""updated_after"": ""2024-03-24T00:00:00Z"",
  ""updated_before"": ""2024-03-26T00:00:00Z"",
  ""id"": 10
}","[{""id"":4,""iid"":2,""project_id"":10,""title"":""This is a new issue"",""description"":null,""state"":""opened"",""created_at"":""2024-03-25T07:56:16.760Z"",""updated_at"":""2024-03-25T07:56:16.760Z"",""closed_at"":null,""closed_by"":null,""labels"":[],""milestone"":null,""assignees"":[],""author"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""type"":""ISSUE"",""assignee"":null,""user_notes_count"":0,""merge_requests_count"":0,""upvotes"":0,""downvotes"":0,""due_date"":null,""confidential"":false,""discussion_locked"":null,""issue_type"":""issue"",""web_url"":""http://gitlab.example.com/root/test_project_2/-/issues/2"",""time_stats"":{""time_estimate"":0,""total_time_spent"":0,""human_time_estimate"":null,""human_total_time_spent"":null},""task_completion_status"":{""count"":0,""completed_count"":0},""has_tasks"":true,""task_status"":"""",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/10/issues/2"",""notes"":""http://gitlab.example.com/api/v4/projects/10/issues/2/notes"",""award_emoji"":""http://gitlab.example.com/api/v4/projects/10/issues/2/award_emoji"",""project"":""http://gitlab.example.com/api/v4/projects/10"",""closed_as_duplicate_of"":null},""references"":{""short"":""#2"",""relative"":""#2"",""full"":""root/test_project_2#2""},""severity"":""UNKNOWN"",""moved_to_id"":null,""service_desk_reply_to"":null}]",unknown,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the 'state' parameter from the request info
        requested_state = request_info.get('state')
        
        # Check if the requested state is valid
        if requested_state not in ['opened', 'closed']:
            return -1
        
        # Iterate through each issue in the response
        for issue in latest_response:
            # Check if the 'state' attribute exists in the issue
            if 'state' not in issue:
                return 0
            
            # Verify if the state of the issue matches the requested state
            if issue['state'] != requested_state:
                return -1
        
        # If all issues match the requested state
        return 1
    except Exception as e:
        # In case of any unexpected error
        return -1
",closed,1,1,0,0,1,0,logic
49,Issue,state,,get-/issues,parameters,state,Return all issues or just those that are opened or closed,c,False,TP,"{
  ""confidential"": false,
  ""due_date"": ""2016-07-22"",
  ""state"": ""opened"",
  ""updated_before"": ""2016-01-05T00:00:00Z"",
  ""updated_after"": ""2016-01-01T00:00:00Z""
}




","[
   {
      ""state"" : ""opened"",
      ""description"" : ""Ratione dolores corrupti mollitia soluta quia."",
      ""author"" : {
         ""state"" : ""active"",
         ""id"" : 18,
         ""web_url"" : ""https://gitlab.example.com/eileen.lowe"",
         ""name"" : ""Alexandra Bashirian"",
         ""avatar_url"" : null,
         ""username"" : ""eileen.lowe""
      },
      ""milestone"" : {
         ""project_id"" : 1,
         ""description"" : ""Ducimus nam enim ex consequatur cumque ratione."",
         ""state"" : ""closed"",
         ""due_date"" : null,
         ""iid"" : 2,
         ""created_at"" : ""2016-01-04T15:31:39.996Z"",
         ""title"" : ""v4.0"",
         ""id"" : 17,
         ""updated_at"" : ""2016-01-04T15:31:39.996Z""
      },
      ""project_id"" : 1,
      ""assignees"" : [{
         ""state"" : ""active"",
         ""id"" : 1,
         ""name"" : ""Administrator"",
         ""web_url"" : ""https://gitlab.example.com/root"",
         ""avatar_url"" : null,
         ""username"" : ""root""
      }],
      ""assignee"" : {
         ""state"" : ""active"",
         ""id"" : 1,
         ""name"" : ""Administrator"",
         ""web_url"" : ""https://gitlab.example.com/root"",
         ""avatar_url"" : null,
         ""username"" : ""root""
      },
      ""type"" : ""ISSUE"",
      ""updated_at"" : ""2016-01-04T15:31:51.081Z"",
      ""closed_at"" : null,
      ""closed_by"" : null,
      ""id"" : 76,
      ""title"" : ""Consequatur vero maxime deserunt laboriosam est voluptas dolorem."",
      ""created_at"" : ""2016-01-04T15:31:51.081Z"",
      ""moved_to_id"" : null,
      ""iid"" : 6,
      ""labels"" : [""foo"", ""bar""],
      ""upvotes"": 4,
      ""downvotes"": 0,
      ""merge_requests_count"": 0,
      ""user_notes_count"": 1,
      ""due_date"": ""2016-07-22"",
      ""imported"":false,
      ""imported_from"": ""none"",
      ""web_url"": ""http://gitlab.example.com/my-group/my-project/issues/6"",
      ""references"": {
        ""short"": ""#6"",
        ""relative"": ""my-group/my-project#6"",
        ""full"": ""my-group/my-project#6""
      },
      ""time_stats"": {
         ""time_estimate"": 0,
         ""total_time_spent"": 0,
         ""human_time_estimate"": null,
         ""human_total_time_spent"": null
      },
      ""has_tasks"": true,
      ""task_status"": ""10 of 15 tasks completed"",
      ""confidential"": false,
      ""discussion_locked"": false,
      ""issue_type"": ""issue"",
      ""severity"": ""UNKNOWN"",
      ""_links"":{
         ""self"":""http://gitlab.example.com/api/v4/projects/1/issues/76"",
         ""notes"":""http://gitlab.example.com/api/v4/projects/1/issues/76/notes"",
         ""award_emoji"":""http://gitlab.example.com/api/v4/projects/1/issues/76/award_emoji"",
         ""project"":""http://gitlab.example.com/api/v4/projects/1"",
         ""closed_as_duplicate_of"": ""http://gitlab.example.com/api/v4/projects/1/issues/75""
      },
      ""task_completion_status"":{
         ""count"":0,
         ""completed_count"":0
      }
   }
]",unknown,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the state parameter from the request_info
        state_param = request_info.get(""state"", ""all"")
        
        # Check if the state parameter is valid
        if state_param not in [""all"", ""opened"", ""closed""]:
            return -1
        
        # If state_param is ""all"", no need to check further
        if state_param == ""all"":
            return 1
        
        # Verify the state of each issue in the response
        for issue in latest_response:
            if ""state"" not in issue:
                return 0
            if issue[""state""] != state_param:
                return -1
        
        return 1
    except Exception as e:
        return -1
",closed,1,1,0,0,1,0,logic
50,Issue,updated_at,,get-/projects/{id}/issues,parameters,updated_after,Return issues updated on or after the given time. Expected in ISO 8601 format ( 2019-03-15T08:00:00Z ),c,True,TP,"{
  ""confidential"": false,
  ""due_date"": null,
  ""state"": ""opened"",
  ""updated_after"": ""2024-03-24T00:00:00Z"",
  ""updated_before"": ""2024-03-26T00:00:00Z"",
  ""id"": 10
}","[{""id"":4,""iid"":2,""project_id"":10,""title"":""This is a new issue"",""description"":null,""state"":""opened"",""created_at"":""2024-03-25T07:56:16.760Z"",""updated_at"":""2024-03-25T07:56:16.760Z"",""closed_at"":null,""closed_by"":null,""labels"":[],""milestone"":null,""assignees"":[],""author"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""type"":""ISSUE"",""assignee"":null,""user_notes_count"":0,""merge_requests_count"":0,""upvotes"":0,""downvotes"":0,""due_date"":null,""confidential"":false,""discussion_locked"":null,""issue_type"":""issue"",""web_url"":""http://gitlab.example.com/root/test_project_2/-/issues/2"",""time_stats"":{""time_estimate"":0,""total_time_spent"":0,""human_time_estimate"":null,""human_total_time_spent"":null},""task_completion_status"":{""count"":0,""completed_count"":0},""has_tasks"":true,""task_status"":"""",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/10/issues/2"",""notes"":""http://gitlab.example.com/api/v4/projects/10/issues/2/notes"",""award_emoji"":""http://gitlab.example.com/api/v4/projects/10/issues/2/award_emoji"",""project"":""http://gitlab.example.com/api/v4/projects/10"",""closed_as_duplicate_of"":null},""references"":{""short"":""#2"",""relative"":""#2"",""full"":""root/test_project_2#2""},""severity"":""UNKNOWN"",""moved_to_id"":null,""service_desk_reply_to"":null}]",mismatched,"from datetime import datetime
import dateutil.parser

def verify_latest_response(latest_response, request_info):
    try:
        updated_after = request_info.get(""updated_after"")
        if not updated_after:
            return 0
        
        updated_after_dt = dateutil.parser.isoparse(updated_after)
        
        for issue in latest_response:
            updated_at = issue.get(""updated_at"")
            if not updated_at:
                return 0
            
            updated_at_dt = dateutil.parser.isoparse(updated_at)
            if updated_at_dt < updated_after_dt:
                return -1
        
        return 1
    except Exception as e:
        return -1
",2016-01-04T15:31:46Z,1,1,0,0,1,0,"logic, format"
51,Issue,updated_at,,put-/projects/{id}/issues/{issue_iid},parameters,updated_at,"When the issue was updated. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z (requires administrator or project owner rights). Empty string or null values are not accepted",c,False,TP,"{
  ""confidential"": false,
  ""due_date"": ""2016-07-22"",
  ""updated_at"": ""2016-01-07T12:55:16.213Z"",
  ""id"": 4,
  ""description"": null,
  ""title"": ""Issues with auth"",
  ""issue_iid"": 15,
  ""discussion_locked"": false
}","{
   ""created_at"" : ""2016-01-07T12:46:01.410Z"",
   ""author"" : {
      ""name"" : ""Alexandra Bashirian"",
      ""avatar_url"" : null,
      ""username"" : ""eileen.lowe"",
      ""id"" : 18,
      ""state"" : ""active"",
      ""web_url"" : ""https://gitlab.example.com/eileen.lowe""
   },
   ""state"" : ""closed"",
   ""title"" : ""Issues with auth"",
   ""project_id"" : 4,
   ""description"" : null,
   ""updated_at"" : ""2016-01-07T12:55:16.213Z"",
   ""closed_at"" : ""2016-01-08T12:55:16.213Z"",
   ""closed_by"" : {
      ""state"" : ""active"",
      ""web_url"" : ""https://gitlab.example.com/root"",
      ""avatar_url"" : null,
      ""username"" : ""root"",
      ""id"" : 1,
      ""name"" : ""Administrator""
    },
   ""iid"" : 15,
   ""labels"" : [
      ""bug""
   ],
   ""upvotes"": 4,
   ""downvotes"": 0,
   ""merge_requests_count"": 0,
   ""id"" : 85,
   ""assignees"" : [],
   ""assignee"" : null,
   ""milestone"" : null,
   ""subscribed"" : true,
   ""user_notes_count"": 0,
   ""due_date"": ""2016-07-22"",
   ""web_url"": ""http://gitlab.example.com/my-group/my-project/issues/15"",
   ""references"": {
     ""short"": ""#15"",
     ""relative"": ""#15"",
     ""full"": ""my-group/my-project#15""
   },
   ""time_stats"": {
      ""time_estimate"": 0,
      ""total_time_spent"": 0,
      ""human_time_estimate"": null,
      ""human_total_time_spent"": null
   },
   ""confidential"": false,
   ""discussion_locked"": false,
   ""issue_type"": ""issue"",
   ""severity"": ""UNKNOWN"",
   ""_links"": {
      ""self"": ""http://gitlab.example.com/api/v4/projects/1/issues/2"",
      ""notes"": ""http://gitlab.example.com/api/v4/projects/1/issues/2/notes"",
      ""award_emoji"": ""http://gitlab.example.com/api/v4/projects/1/issues/2/award_emoji"",
      ""project"": ""http://gitlab.example.com/api/v4/projects/1"",
      ""closed_as_duplicate_of"": ""http://gitlab.example.com/api/v4/projects/1/issues/75""

   },
   ""task_completion_status"":{
      ""count"":0,
      ""completed_count"":0
   }
}",unknown,"def verify_latest_response(latest_response, request_info):
    import re
    from datetime import datetime

    try:
        # Check if 'updated_at' is in the response
        if 'updated_at' not in latest_response:
            return 0
        
        updated_at = latest_response['updated_at']
        
        # Check if 'updated_at' is not an empty string or null
        if updated_at is None or updated_at == """":
            return -1
        
        # Check if 'updated_at' is a valid ISO 8601 formatted date-time string
        iso8601_regex = r""^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}Z$""
        if not re.match(iso8601_regex, updated_at):
            return -1
        
        # Check if 'updated_at' can be parsed to a datetime object
        try:
            datetime.strptime(updated_at, ""%Y-%m-%dT%H:%M:%SZ"")
        except ValueError:
            return -1
        
        return 1
    except Exception as e:
        return -1
",2016-01-04T15:31:46Z,1,0,1,0,1,0,format
52,Issue,updated_at,,get-/issues,parameters,updated_before,Return issues updated on or before the given time. Expected in ISO 8601 format ( 2019-03-15T08:00:00Z ),c,True,TP,"{
  ""confidential"": false,
  ""due_date"": ""2016-07-22"",
  ""state"": ""opened"",
  ""updated_before"": ""2016-01-05T00:00:00Z"",
  ""updated_after"": ""2016-01-01T00:00:00Z""
}




","[
   {
      ""state"" : ""opened"",
      ""description"" : ""Ratione dolores corrupti mollitia soluta quia."",
      ""author"" : {
         ""state"" : ""active"",
         ""id"" : 18,
         ""web_url"" : ""https://gitlab.example.com/eileen.lowe"",
         ""name"" : ""Alexandra Bashirian"",
         ""avatar_url"" : null,
         ""username"" : ""eileen.lowe""
      },
      ""milestone"" : {
         ""project_id"" : 1,
         ""description"" : ""Ducimus nam enim ex consequatur cumque ratione."",
         ""state"" : ""closed"",
         ""due_date"" : null,
         ""iid"" : 2,
         ""created_at"" : ""2016-01-04T15:31:39.996Z"",
         ""title"" : ""v4.0"",
         ""id"" : 17,
         ""updated_at"" : ""2016-01-04T15:31:39.996Z""
      },
      ""project_id"" : 1,
      ""assignees"" : [{
         ""state"" : ""active"",
         ""id"" : 1,
         ""name"" : ""Administrator"",
         ""web_url"" : ""https://gitlab.example.com/root"",
         ""avatar_url"" : null,
         ""username"" : ""root""
      }],
      ""assignee"" : {
         ""state"" : ""active"",
         ""id"" : 1,
         ""name"" : ""Administrator"",
         ""web_url"" : ""https://gitlab.example.com/root"",
         ""avatar_url"" : null,
         ""username"" : ""root""
      },
      ""type"" : ""ISSUE"",
      ""updated_at"" : ""2016-01-04T15:31:51.081Z"",
      ""closed_at"" : null,
      ""closed_by"" : null,
      ""id"" : 76,
      ""title"" : ""Consequatur vero maxime deserunt laboriosam est voluptas dolorem."",
      ""created_at"" : ""2016-01-04T15:31:51.081Z"",
      ""moved_to_id"" : null,
      ""iid"" : 6,
      ""labels"" : [""foo"", ""bar""],
      ""upvotes"": 4,
      ""downvotes"": 0,
      ""merge_requests_count"": 0,
      ""user_notes_count"": 1,
      ""due_date"": ""2016-07-22"",
      ""imported"":false,
      ""imported_from"": ""none"",
      ""web_url"": ""http://gitlab.example.com/my-group/my-project/issues/6"",
      ""references"": {
        ""short"": ""#6"",
        ""relative"": ""my-group/my-project#6"",
        ""full"": ""my-group/my-project#6""
      },
      ""time_stats"": {
         ""time_estimate"": 0,
         ""total_time_spent"": 0,
         ""human_time_estimate"": null,
         ""human_total_time_spent"": null
      },
      ""has_tasks"": true,
      ""task_status"": ""10 of 15 tasks completed"",
      ""confidential"": false,
      ""discussion_locked"": false,
      ""issue_type"": ""issue"",
      ""severity"": ""UNKNOWN"",
      ""_links"":{
         ""self"":""http://gitlab.example.com/api/v4/projects/1/issues/76"",
         ""notes"":""http://gitlab.example.com/api/v4/projects/1/issues/76/notes"",
         ""award_emoji"":""http://gitlab.example.com/api/v4/projects/1/issues/76/award_emoji"",
         ""project"":""http://gitlab.example.com/api/v4/projects/1"",
         ""closed_as_duplicate_of"": ""http://gitlab.example.com/api/v4/projects/1/issues/75""
      },
      ""task_completion_status"":{
         ""count"":0,
         ""completed_count"":0
      }
   }
]",mismatched,"from datetime import datetime
import json

def verify_latest_response(latest_response, request_info):
    try:
        updated_before_str = request_info.get(""updated_before"")
        if not updated_before_str:
            return 0
        
        updated_before = datetime.fromisoformat(updated_before_str.replace('Z', '+00:00'))
        
        for issue in latest_response:
            updated_at_str = issue.get(""updated_at"")
            if not updated_at_str:
                return 0
            
            updated_at = datetime.fromisoformat(updated_at_str.replace('Z', '+00:00'))
            if updated_at > updated_before:
                return -1
        
        return 1
    except Exception as e:
        return -1
",2016-01-04T15:31:46Z,1,1,0,0,1,0,"logic, format"
53,Issue,updated_at,,get-/groups/{id}/issues,parameters,updated_after,Return issues updated on or after the given time. Expected in ISO 8601 format ( 2019-03-15T08:00:00Z ),c,True,TP,"{
  ""confidential"": false,
  ""due_date"": null,
  ""state"": ""closed"",
  ""updated_after"": ""2016-01-01T00:00:00Z"",
  ""updated_before"": ""2016-01-05T00:00:00Z""
}","[
   {
      ""project_id"" : 4,
      ""milestone"" : {
         ""due_date"" : null,
         ""project_id"" : 4,
         ""state"" : ""closed"",
         ""description"" : ""Rerum est voluptatem provident consequuntur molestias similique ipsum dolor."",
         ""iid"" : 3,
         ""id"" : 11,
         ""title"" : ""v3.0"",
         ""created_at"" : ""2016-01-04T15:31:39.788Z"",
         ""updated_at"" : ""2016-01-04T15:31:39.788Z""
      },
      ""author"" : {
         ""state"" : ""active"",
         ""web_url"" : ""https://gitlab.example.com/root"",
         ""avatar_url"" : null,
         ""username"" : ""root"",
         ""id"" : 1,
         ""name"" : ""Administrator""
      },
      ""description"" : ""Omnis vero earum sunt corporis dolor et placeat."",
      ""state"" : ""closed"",
      ""iid"" : 1,
      ""assignees"" : [{
         ""avatar_url"" : null,
         ""web_url"" : ""https://gitlab.example.com/lennie"",
         ""state"" : ""active"",
         ""username"" : ""lennie"",
         ""id"" : 9,
         ""name"" : ""Dr. Luella Kovacek""
      }],
      ""assignee"" : {
         ""avatar_url"" : null,
         ""web_url"" : ""https://gitlab.example.com/lennie"",
         ""state"" : ""active"",
         ""username"" : ""lennie"",
         ""id"" : 9,
         ""name"" : ""Dr. Luella Kovacek""
      },
      ""type"" : ""ISSUE"",
      ""labels"" : [""foo"", ""bar""],
      ""upvotes"": 4,
      ""downvotes"": 0,
      ""merge_requests_count"": 0,
      ""id"" : 41,
      ""title"" : ""Ut commodi ullam eos dolores perferendis nihil sunt."",
      ""updated_at"" : ""2016-01-04T15:31:46.176Z"",
      ""created_at"" : ""2016-01-04T15:31:46.176Z"",
      ""closed_at"" : null,
      ""closed_by"" : null,
      ""user_notes_count"": 1,
      ""due_date"": null,
      ""imported"": false,
      ""imported_from"": ""none"",
      ""web_url"": ""http://gitlab.example.com/my-group/my-project/issues/1"",
      ""references"": {
        ""short"": ""#1"",
        ""relative"": ""my-project#1"",
        ""full"": ""my-group/my-project#1""
      },
      ""time_stats"": {
         ""time_estimate"": 0,
         ""total_time_spent"": 0,
         ""human_time_estimate"": null,
         ""human_total_time_spent"": null
      },
      ""has_tasks"": true,
      ""task_status"": ""10 of 15 tasks completed"",
      ""confidential"": false,
      ""discussion_locked"": false,
      ""issue_type"": ""issue"",
      ""severity"": ""UNKNOWN"",
      ""_links"":{
         ""self"":""http://gitlab.example.com/api/v4/projects/4/issues/41"",
         ""notes"":""http://gitlab.example.com/api/v4/projects/4/issues/41/notes"",
         ""award_emoji"":""http://gitlab.example.com/api/v4/projects/4/issues/41/award_emoji"",
         ""project"":""http://gitlab.example.com/api/v4/projects/4"",
         ""closed_as_duplicate_of"": ""http://gitlab.example.com/api/v4/projects/1/issues/75""
      },
      ""task_completion_status"":{
         ""count"":0,
         ""completed_count"":0
      }
   }
]
",mismatched,"from datetime import datetime
import dateutil.parser

def verify_latest_response(latest_response, request_info):
    try:
        updated_after = request_info.get(""updated_after"")
        if not updated_after:
            return 0
        
        updated_after_dt = dateutil.parser.isoparse(updated_after)
        
        for issue in latest_response:
            updated_at = issue.get(""updated_at"")
            if not updated_at:
                return 0
            
            updated_at_dt = dateutil.parser.isoparse(updated_at)
            if updated_at_dt < updated_after_dt:
                return -1
        
        return 1
    except Exception as e:
        return -1
",2016-01-04T15:31:46Z,1,1,0,0,1,0,"logic, format"
54,Issue,updated_at,,get-/projects/{id}/issues,parameters,updated_before,Return issues updated on or before the given time. Expected in ISO 8601 format ( 2019-03-15T08:00:00Z ),c,True,TP,"{
  ""confidential"": false,
  ""due_date"": null,
  ""state"": ""opened"",
  ""updated_after"": ""2024-03-24T00:00:00Z"",
  ""updated_before"": ""2024-03-26T00:00:00Z"",
  ""id"": 10
}","[{""id"":4,""iid"":2,""project_id"":10,""title"":""This is a new issue"",""description"":null,""state"":""opened"",""created_at"":""2024-03-25T07:56:16.760Z"",""updated_at"":""2024-03-25T07:56:16.760Z"",""closed_at"":null,""closed_by"":null,""labels"":[],""milestone"":null,""assignees"":[],""author"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""type"":""ISSUE"",""assignee"":null,""user_notes_count"":0,""merge_requests_count"":0,""upvotes"":0,""downvotes"":0,""due_date"":null,""confidential"":false,""discussion_locked"":null,""issue_type"":""issue"",""web_url"":""http://gitlab.example.com/root/test_project_2/-/issues/2"",""time_stats"":{""time_estimate"":0,""total_time_spent"":0,""human_time_estimate"":null,""human_total_time_spent"":null},""task_completion_status"":{""count"":0,""completed_count"":0},""has_tasks"":true,""task_status"":"""",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/10/issues/2"",""notes"":""http://gitlab.example.com/api/v4/projects/10/issues/2/notes"",""award_emoji"":""http://gitlab.example.com/api/v4/projects/10/issues/2/award_emoji"",""project"":""http://gitlab.example.com/api/v4/projects/10"",""closed_as_duplicate_of"":null},""references"":{""short"":""#2"",""relative"":""#2"",""full"":""root/test_project_2#2""},""severity"":""UNKNOWN"",""moved_to_id"":null,""service_desk_reply_to"":null}]",mismatched,"from datetime import datetime
import json

def verify_latest_response(latest_response, request_info):
    try:
        updated_before_str = request_info.get(""updated_before"")
        if not updated_before_str:
            return 0
        
        updated_before = datetime.fromisoformat(updated_before_str.replace('Z', '+00:00'))
        
        for issue in latest_response:
            updated_at_str = issue.get(""updated_at"")
            if not updated_at_str:
                return 0
            
            updated_at = datetime.fromisoformat(updated_at_str.replace('Z', '+00:00'))
            if updated_at > updated_before:
                return -1
        
        return 1
    except Exception as e:
        return -1
",2016-01-04T15:31:46Z,1,1,0,0,1,0,"logic, format"
55,Issue,updated_at,,get-/groups/{id}/issues,parameters,updated_before,Return issues updated on or before the given time. Expected in ISO 8601 format ( 2019-03-15T08:00:00Z ),c,True,TP,"{
  ""confidential"": false,
  ""due_date"": null,
  ""state"": ""closed"",
  ""updated_after"": ""2016-01-01T00:00:00Z"",
  ""updated_before"": ""2016-01-05T00:00:00Z""
}","[
   {
      ""project_id"" : 4,
      ""milestone"" : {
         ""due_date"" : null,
         ""project_id"" : 4,
         ""state"" : ""closed"",
         ""description"" : ""Rerum est voluptatem provident consequuntur molestias similique ipsum dolor."",
         ""iid"" : 3,
         ""id"" : 11,
         ""title"" : ""v3.0"",
         ""created_at"" : ""2016-01-04T15:31:39.788Z"",
         ""updated_at"" : ""2016-01-04T15:31:39.788Z""
      },
      ""author"" : {
         ""state"" : ""active"",
         ""web_url"" : ""https://gitlab.example.com/root"",
         ""avatar_url"" : null,
         ""username"" : ""root"",
         ""id"" : 1,
         ""name"" : ""Administrator""
      },
      ""description"" : ""Omnis vero earum sunt corporis dolor et placeat."",
      ""state"" : ""closed"",
      ""iid"" : 1,
      ""assignees"" : [{
         ""avatar_url"" : null,
         ""web_url"" : ""https://gitlab.example.com/lennie"",
         ""state"" : ""active"",
         ""username"" : ""lennie"",
         ""id"" : 9,
         ""name"" : ""Dr. Luella Kovacek""
      }],
      ""assignee"" : {
         ""avatar_url"" : null,
         ""web_url"" : ""https://gitlab.example.com/lennie"",
         ""state"" : ""active"",
         ""username"" : ""lennie"",
         ""id"" : 9,
         ""name"" : ""Dr. Luella Kovacek""
      },
      ""type"" : ""ISSUE"",
      ""labels"" : [""foo"", ""bar""],
      ""upvotes"": 4,
      ""downvotes"": 0,
      ""merge_requests_count"": 0,
      ""id"" : 41,
      ""title"" : ""Ut commodi ullam eos dolores perferendis nihil sunt."",
      ""updated_at"" : ""2016-01-04T15:31:46.176Z"",
      ""created_at"" : ""2016-01-04T15:31:46.176Z"",
      ""closed_at"" : null,
      ""closed_by"" : null,
      ""user_notes_count"": 1,
      ""due_date"": null,
      ""imported"": false,
      ""imported_from"": ""none"",
      ""web_url"": ""http://gitlab.example.com/my-group/my-project/issues/1"",
      ""references"": {
        ""short"": ""#1"",
        ""relative"": ""my-project#1"",
        ""full"": ""my-group/my-project#1""
      },
      ""time_stats"": {
         ""time_estimate"": 0,
         ""total_time_spent"": 0,
         ""human_time_estimate"": null,
         ""human_total_time_spent"": null
      },
      ""has_tasks"": true,
      ""task_status"": ""10 of 15 tasks completed"",
      ""confidential"": false,
      ""discussion_locked"": false,
      ""issue_type"": ""issue"",
      ""severity"": ""UNKNOWN"",
      ""_links"":{
         ""self"":""http://gitlab.example.com/api/v4/projects/4/issues/41"",
         ""notes"":""http://gitlab.example.com/api/v4/projects/4/issues/41/notes"",
         ""award_emoji"":""http://gitlab.example.com/api/v4/projects/4/issues/41/award_emoji"",
         ""project"":""http://gitlab.example.com/api/v4/projects/4"",
         ""closed_as_duplicate_of"": ""http://gitlab.example.com/api/v4/projects/1/issues/75""
      },
      ""task_completion_status"":{
         ""count"":0,
         ""completed_count"":0
      }
   }
]
",mismatched,"from datetime import datetime
import json

def verify_latest_response(latest_response, request_info):
    try:
        updated_before_str = request_info.get(""updated_before"")
        if not updated_before_str:
            return 0
        
        updated_before = datetime.fromisoformat(updated_before_str.replace('Z', '+00:00'))
        
        for issue in latest_response:
            updated_at_str = issue.get(""updated_at"")
            if not updated_at_str:
                return 0
            
            updated_at = datetime.fromisoformat(updated_at_str.replace('Z', '+00:00'))
            if updated_at > updated_before:
                return -1
        
        return 1
    except Exception as e:
        return -1
",2016-01-04T15:31:46Z,1,1,0,0,1,0,"logic, format"
56,Issue,updated_at,,get-/issues,parameters,updated_after,Return issues updated on or after the given time. Expected in ISO 8601 format ( 2019-03-15T08:00:00Z ),c,True,TP,"{
  ""confidential"": false,
  ""due_date"": ""2016-07-22"",
  ""state"": ""opened"",
  ""updated_before"": ""2016-01-05T00:00:00Z"",
  ""updated_after"": ""2016-01-01T00:00:00Z""
}




","[
   {
      ""state"" : ""opened"",
      ""description"" : ""Ratione dolores corrupti mollitia soluta quia."",
      ""author"" : {
         ""state"" : ""active"",
         ""id"" : 18,
         ""web_url"" : ""https://gitlab.example.com/eileen.lowe"",
         ""name"" : ""Alexandra Bashirian"",
         ""avatar_url"" : null,
         ""username"" : ""eileen.lowe""
      },
      ""milestone"" : {
         ""project_id"" : 1,
         ""description"" : ""Ducimus nam enim ex consequatur cumque ratione."",
         ""state"" : ""closed"",
         ""due_date"" : null,
         ""iid"" : 2,
         ""created_at"" : ""2016-01-04T15:31:39.996Z"",
         ""title"" : ""v4.0"",
         ""id"" : 17,
         ""updated_at"" : ""2016-01-04T15:31:39.996Z""
      },
      ""project_id"" : 1,
      ""assignees"" : [{
         ""state"" : ""active"",
         ""id"" : 1,
         ""name"" : ""Administrator"",
         ""web_url"" : ""https://gitlab.example.com/root"",
         ""avatar_url"" : null,
         ""username"" : ""root""
      }],
      ""assignee"" : {
         ""state"" : ""active"",
         ""id"" : 1,
         ""name"" : ""Administrator"",
         ""web_url"" : ""https://gitlab.example.com/root"",
         ""avatar_url"" : null,
         ""username"" : ""root""
      },
      ""type"" : ""ISSUE"",
      ""updated_at"" : ""2016-01-04T15:31:51.081Z"",
      ""closed_at"" : null,
      ""closed_by"" : null,
      ""id"" : 76,
      ""title"" : ""Consequatur vero maxime deserunt laboriosam est voluptas dolorem."",
      ""created_at"" : ""2016-01-04T15:31:51.081Z"",
      ""moved_to_id"" : null,
      ""iid"" : 6,
      ""labels"" : [""foo"", ""bar""],
      ""upvotes"": 4,
      ""downvotes"": 0,
      ""merge_requests_count"": 0,
      ""user_notes_count"": 1,
      ""due_date"": ""2016-07-22"",
      ""imported"":false,
      ""imported_from"": ""none"",
      ""web_url"": ""http://gitlab.example.com/my-group/my-project/issues/6"",
      ""references"": {
        ""short"": ""#6"",
        ""relative"": ""my-group/my-project#6"",
        ""full"": ""my-group/my-project#6""
      },
      ""time_stats"": {
         ""time_estimate"": 0,
         ""total_time_spent"": 0,
         ""human_time_estimate"": null,
         ""human_total_time_spent"": null
      },
      ""has_tasks"": true,
      ""task_status"": ""10 of 15 tasks completed"",
      ""confidential"": false,
      ""discussion_locked"": false,
      ""issue_type"": ""issue"",
      ""severity"": ""UNKNOWN"",
      ""_links"":{
         ""self"":""http://gitlab.example.com/api/v4/projects/1/issues/76"",
         ""notes"":""http://gitlab.example.com/api/v4/projects/1/issues/76/notes"",
         ""award_emoji"":""http://gitlab.example.com/api/v4/projects/1/issues/76/award_emoji"",
         ""project"":""http://gitlab.example.com/api/v4/projects/1"",
         ""closed_as_duplicate_of"": ""http://gitlab.example.com/api/v4/projects/1/issues/75""
      },
      ""task_completion_status"":{
         ""count"":0,
         ""completed_count"":0
      }
   }
]",mismatched,"from datetime import datetime
import dateutil.parser

def verify_latest_response(latest_response, request_info):
    try:
        updated_after = request_info.get(""updated_after"")
        if not updated_after:
            return 0
        
        updated_after_dt = dateutil.parser.isoparse(updated_after)
        
        for issue in latest_response:
            updated_at = issue.get(""updated_at"")
            if not updated_at:
                return 0
            
            updated_at_dt = dateutil.parser.isoparse(updated_at)
            if updated_at_dt < updated_after_dt:
                return -1
        
        return 1
    except Exception as e:
        return -1
",2016-01-04T15:31:46Z,1,1,0,0,1,0,"logic, format"
57,Issue,id,,get-/issues/{id},parameters,id,The ID of the issue,c,False,TP,"{""id"":1}","{
  ""id"": 1,
  ""milestone"": {
    ""due_date"": null,
    ""project_id"": 4,
    ""state"": ""closed"",
    ""description"": ""Rerum est voluptatem provident consequuntur molestias similique ipsum dolor."",
    ""iid"": 3,
    ""id"": 11,
    ""title"": ""v3.0"",
    ""created_at"": ""2016-01-04T15:31:39.788Z"",
    ""updated_at"": ""2016-01-04T15:31:39.788Z"",
    ""closed_at"": ""2016-01-05T15:31:46.176Z""
  },
  ""author"": {
    ""state"": ""active"",
    ""web_url"": ""https://gitlab.example.com/root"",
    ""avatar_url"": null,
    ""username"": ""root"",
    ""id"": 1,
    ""name"": ""Administrator""
  },
  ""description"": ""Omnis vero earum sunt corporis dolor et placeat."",
  ""state"": ""closed"",
  ""iid"": 1,
  ""assignees"": [
    {
      ""avatar_url"": null,
      ""web_url"": ""https://gitlab.example.com/lennie"",
      ""state"": ""active"",
      ""username"": ""lennie"",
      ""id"": 9,
      ""name"": ""Dr. Luella Kovacek""
    }
  ],
  ""assignee"": {
    ""avatar_url"": null,
    ""web_url"": ""https://gitlab.example.com/lennie"",
    ""state"": ""active"",
    ""username"": ""lennie"",
    ""id"": 9,
    ""name"": ""Dr. Luella Kovacek""
  },
  ""type"": ""ISSUE"",
  ""labels"": [],
  ""upvotes"": 4,
  ""downvotes"": 0,
  ""merge_requests_count"": 0,
  ""title"": ""Ut commodi ullam eos dolores perferendis nihil sunt."",
  ""updated_at"": ""2016-01-04T15:31:46.176Z"",
  ""created_at"": ""2016-01-04T15:31:46.176Z"",
  ""closed_at"": null,
  ""closed_by"": null,
  ""subscribed"": false,
  ""user_notes_count"": 1,
  ""due_date"": null,
  ""imported"": false,
  ""imported_from"": ""none"",
  ""web_url"": ""http://example.com/my-group/my-project/issues/1"",
  ""references"": {
    ""short"": ""#1"",
    ""relative"": ""#1"",
    ""full"": ""my-group/my-project#1""
  },
  ""time_stats"": {
    ""time_estimate"": 0,
    ""total_time_spent"": 0,
    ""human_time_estimate"": null,
    ""human_total_time_spent"": null
  },
  ""confidential"": false,
  ""discussion_locked"": false,
  ""issue_type"": ""issue"",
  ""severity"": ""UNKNOWN"",
  ""task_completion_status"": {
    ""count"": 0,
    ""completed_count"": 0
  },
  ""weight"": null,
  ""has_tasks"": false,
  ""_links"": {
    ""self"": ""http://gitlab.example:3000/api/v4/projects/1/issues/1"",
    ""notes"": ""http://gitlab.example:3000/api/v4/projects/1/issues/1/notes"",
    ""award_emoji"": ""http://gitlab.example:3000/api/v4/projects/1/issues/1/award_emoji"",
    ""project"": ""http://gitlab.example:3000/api/v4/projects/1"",
    ""closed_as_duplicate_of"": ""http://gitlab.example.com/api/v4/projects/1/issues/75""
  },
  ""moved_to_id"": null,
  ""service_desk_reply_to"": ""service.desk@gitlab.com""
}",unknown,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the 'id' from the request_info
        request_id = int(request_info.get('id'))
        
        # Extract the 'id' from the latest_response
        response_id = latest_response.get('id')
        
        # Check if 'id' exists in the response
        if response_id is None:
            return 0
        
        # Verify that the 'id' in the response is an integer and matches the request 'id'
        if isinstance(response_id, int) and response_id == request_id:
            return 1
        else:
            return -1
    except (ValueError, TypeError):
        return -1
",41,1,1,0,0,1,0,logic
58,Issue,project_id,,put-/projects/{id}/issues/{issue_iid},parameters,id,The ID or URL-encoded path of the project owned by the authenticated user,c,True,TP,"{
  ""confidential"": false,
  ""due_date"": ""2016-07-22"",
  ""updated_at"": ""2016-01-07T12:55:16.213Z"",
  ""id"": 4,
  ""description"": null,
  ""title"": ""Issues with auth"",
  ""issue_iid"": 15,
  ""discussion_locked"": false
}","{
   ""created_at"" : ""2016-01-07T12:46:01.410Z"",
   ""author"" : {
      ""name"" : ""Alexandra Bashirian"",
      ""avatar_url"" : null,
      ""username"" : ""eileen.lowe"",
      ""id"" : 18,
      ""state"" : ""active"",
      ""web_url"" : ""https://gitlab.example.com/eileen.lowe""
   },
   ""state"" : ""closed"",
   ""title"" : ""Issues with auth"",
   ""project_id"" : 4,
   ""description"" : null,
   ""updated_at"" : ""2016-01-07T12:55:16.213Z"",
   ""closed_at"" : ""2016-01-08T12:55:16.213Z"",
   ""closed_by"" : {
      ""state"" : ""active"",
      ""web_url"" : ""https://gitlab.example.com/root"",
      ""avatar_url"" : null,
      ""username"" : ""root"",
      ""id"" : 1,
      ""name"" : ""Administrator""
    },
   ""iid"" : 15,
   ""labels"" : [
      ""bug""
   ],
   ""upvotes"": 4,
   ""downvotes"": 0,
   ""merge_requests_count"": 0,
   ""id"" : 85,
   ""assignees"" : [],
   ""assignee"" : null,
   ""milestone"" : null,
   ""subscribed"" : true,
   ""user_notes_count"": 0,
   ""due_date"": ""2016-07-22"",
   ""web_url"": ""http://gitlab.example.com/my-group/my-project/issues/15"",
   ""references"": {
     ""short"": ""#15"",
     ""relative"": ""#15"",
     ""full"": ""my-group/my-project#15""
   },
   ""time_stats"": {
      ""time_estimate"": 0,
      ""total_time_spent"": 0,
      ""human_time_estimate"": null,
      ""human_total_time_spent"": null
   },
   ""confidential"": false,
   ""discussion_locked"": false,
   ""issue_type"": ""issue"",
   ""severity"": ""UNKNOWN"",
   ""_links"": {
      ""self"": ""http://gitlab.example.com/api/v4/projects/1/issues/2"",
      ""notes"": ""http://gitlab.example.com/api/v4/projects/1/issues/2/notes"",
      ""award_emoji"": ""http://gitlab.example.com/api/v4/projects/1/issues/2/award_emoji"",
      ""project"": ""http://gitlab.example.com/api/v4/projects/1"",
      ""closed_as_duplicate_of"": ""http://gitlab.example.com/api/v4/projects/1/issues/75""

   },
   ""task_completion_status"":{
      ""count"":0,
      ""completed_count"":0
   }
}",unknown,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the 'id' from request_info and ensure it is an integer
        project_id_from_request = int(request_info.get('id'))
        
        # Extract 'project_id' from the response
        project_id_from_response = latest_response.get('project_id')
        
        # Check if 'project_id' exists in the response
        if project_id_from_response is None:
            return 0
        
        # Verify that 'project_id' in the response matches 'id' from the request
        if project_id_from_response == project_id_from_request:
            return 1
        else:
            return -1
    except (ValueError, TypeError):
        # Handle cases where 'id' is not an integer or other type errors
        return -1
",4,1,1,0,0,1,0,logic
59,Issue,project_id,,post-/projects/{id}/issues/{issue_iid}/unsubscribe,parameters,id,The ID or URL-encoded path of the project owned by the authenticated user,c,True,TP,"{""milestone"": ""milestone1"", ""id"": 5, ""issue_iid"": 11}","{
  ""id"": 92,
  ""iid"": 11,
  ""project_id"": 5,
  ""title"": ""Sit voluptas tempora quisquam aut doloribus et."",
  ""description"": ""Repellat voluptas quibusdam voluptatem exercitationem."",
  ""state"": ""opened"",
  ""created_at"": ""2016-04-05T21:41:45.652Z"",
  ""updated_at"": ""2016-04-07T12:20:17.596Z"",
  ""closed_at"": null,
  ""closed_by"": null,
  ""labels"": [],
  ""upvotes"": 4,
  ""downvotes"": 0,
  ""merge_requests_count"": 0,
  ""milestone"": null,
  ""assignees"": [{
    ""name"": ""Miss Monserrate Beier"",
    ""username"": ""axel.block"",
    ""id"": 12,
    ""state"": ""active"",
    ""avatar_url"": ""http://www.gravatar.com/avatar/46f6f7dc858ada7be1853f7fb96e81da?s=80&d=identicon"",
    ""web_url"": ""https://gitlab.example.com/axel.block""
  }],
  ""assignee"": {
    ""name"": ""Miss Monserrate Beier"",
    ""username"": ""axel.block"",
    ""id"": 12,
    ""state"": ""active"",
    ""avatar_url"": ""http://www.gravatar.com/avatar/46f6f7dc858ada7be1853f7fb96e81da?s=80&d=identicon"",
    ""web_url"": ""https://gitlab.example.com/axel.block""
  },
  ""type"" : ""ISSUE"",
  ""author"": {
    ""name"": ""Kris Steuber"",
    ""username"": ""solon.cremin"",
    ""id"": 10,
    ""state"": ""active"",
    ""avatar_url"": ""http://www.gravatar.com/avatar/7a190fecbaa68212a4b68aeb6e3acd10?s=80&d=identicon"",
    ""web_url"": ""https://gitlab.example.com/solon.cremin""
  },
  ""due_date"": null,
  ""web_url"": ""http://gitlab.example.com/my-group/my-project/issues/11"",
  ""references"": {
    ""short"": ""#11"",
    ""relative"": ""#11"",
    ""full"": ""my-group/my-project#11""
  },
  ""time_stats"": {
    ""time_estimate"": 0,
    ""total_time_spent"": 0,
    ""human_time_estimate"": null,
    ""human_total_time_spent"": null
  },
  ""confidential"": false,
  ""discussion_locked"": false,
  ""issue_type"": ""issue"",
  ""severity"": ""UNKNOWN"",
  ""_links"": {
    ""self"": ""http://gitlab.example.com/api/v4/projects/1/issues/2"",
    ""notes"": ""http://gitlab.example.com/api/v4/projects/1/issues/2/notes"",
    ""award_emoji"": ""http://gitlab.example.com/api/v4/projects/1/issues/2/award_emoji"",
    ""project"": ""http://gitlab.example.com/api/v4/projects/1"",
    ""closed_as_duplicate_of"": ""http://gitlab.example.com/api/v4/projects/1/issues/75""
  },
  ""task_completion_status"":{
     ""count"":0,
     ""completed_count"":0
  }
}",unknown,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the 'id' from request_info and ensure it is an integer
        project_id_from_request = int(request_info.get('id'))
        
        # Extract 'project_id' from the response
        project_id_from_response = latest_response.get('project_id')
        
        # Check if 'project_id' exists in the response
        if project_id_from_response is None:
            return 0
        
        # Verify that 'project_id' in the response matches 'id' from the request
        if project_id_from_response == project_id_from_request:
            return 1
        else:
            return -1
    except (ValueError, TypeError):
        # Handle cases where 'id' is not an integer or other type errors
        return -1
",4,1,1,0,0,1,0,logic
60,Issue,project_id,,get-/projects/{id}/issues/{issue_iid},parameters,id,The ID or URL-encoded path of the project owned by the authenticated user,c,True,TP,"{""id"": 10, ""issue_iid"": 2}","{""id"":4,""iid"":2,""project_id"":10,""title"":""This is a new issue"",""description"":null,""state"":""opened"",""created_at"":""2024-03-25T07:56:16.760Z"",""updated_at"":""2024-03-25T10:00:32.976Z"",""closed_at"":null,""closed_by"":null,""labels"":[],""milestone"":null,""assignees"":[],""author"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""type"":""ISSUE"",""assignee"":null,""user_notes_count"":0,""merge_requests_count"":0,""upvotes"":0,""downvotes"":0,""due_date"":""2024-03-27"",""confidential"":false,""discussion_locked"":null,""issue_type"":""issue"",""web_url"":""http://gitlab.example.com/root/test_project_2/-/issues/2"",""time_stats"":{""time_estimate"":5400,""total_time_spent"":0,""human_time_estimate"":""1h 30m"",""human_total_time_spent"":null},""task_completion_status"":{""count"":0,""completed_count"":0},""has_tasks"":true,""task_status"":"""",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/10/issues/2"",""notes"":""http://gitlab.example.com/api/v4/projects/10/issues/2/notes"",""award_emoji"":""http://gitlab.example.com/api/v4/projects/10/issues/2/award_emoji"",""project"":""http://gitlab.example.com/api/v4/projects/10"",""closed_as_duplicate_of"":null},""references"":{""short"":""#2"",""relative"":""#2"",""full"":""root/test_project_2#2""},""severity"":""UNKNOWN"",""subscribed"":true,""moved_to_id"":null,""service_desk_reply_to"":null}",satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the 'id' from request_info and ensure it is an integer
        project_id_from_request = int(request_info.get('id'))
        
        # Extract 'project_id' from the response
        project_id_from_response = latest_response.get('project_id')
        
        # Check if 'project_id' exists in the response
        if project_id_from_response is None:
            return 0
        
        # Verify that 'project_id' in the response matches 'id' from the request
        if project_id_from_response == project_id_from_request:
            return 1
        else:
            return -1
    except (ValueError, TypeError):
        # Handle cases where 'id' is not an integer or other type errors
        return -1
",4,1,1,0,0,1,0,logic
61,Issue,project_id,,post-/projects/{id}/issues/{issue_iid}/move,parameters,id,The ID or URL-encoded path of the project owned by the authenticated user,c,True,TP,"{""order_by"": ""created_at"", ""author_id"": 1, ""labels"": ""none"", ""created_after"": ""2024-03-01T00:00:00Z"", ""created_before"": ""2024-03-30T00:00:00Z"", ""updated_after"": ""2024-03-01T00:00:00Z"", ""updated_before"": ""2024-03-30T00:00:00Z"", ""id"": 9, ""issue_iid"": 2, ""to_project_id"": 9}","{""id"":6,""iid"":2,""project_id"":9,""title"":""This is a new issue"",""description"":null,""state"":""opened"",""created_at"":""2024-03-25T07:56:16.760Z"",""updated_at"":""2024-03-25T11:10:58.364Z"",""closed_at"":null,""closed_by"":null,""labels"":[],""milestone"":null,""assignees"":[],""author"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""type"":""ISSUE"",""assignee"":null,""user_notes_count"":0,""merge_requests_count"":0,""upvotes"":0,""downvotes"":0,""due_date"":""2024-03-27"",""confidential"":false,""discussion_locked"":null,""issue_type"":""issue"",""web_url"":""http://gitlab.example.com/test-1/test_project_created_by_user_2/-/issues/2"",""time_stats"":{""time_estimate"":5400,""total_time_spent"":0,""human_time_estimate"":""1h 30m"",""human_total_time_spent"":null},""task_completion_status"":{""count"":0,""completed_count"":0},""has_tasks"":true,""task_status"":"""",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/9/issues/2"",""notes"":""http://gitlab.example.com/api/v4/projects/9/issues/2/notes"",""award_emoji"":""http://gitlab.example.com/api/v4/projects/9/issues/2/award_emoji"",""project"":""http://gitlab.example.com/api/v4/projects/9"",""closed_as_duplicate_of"":null},""references"":{""short"":""#2"",""relative"":""test-1/test_project_created_by_user_2#2"",""full"":""test-1/test_project_created_by_user_2#2""},""severity"":""UNKNOWN"",""subscribed"":true,""moved_to_id"":null,""service_desk_reply_to"":null}",satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the 'id' from request_info and ensure it is an integer
        project_id_from_request = int(request_info.get('id'))
        
        # Extract 'project_id' from the response
        project_id_from_response = latest_response.get('project_id')
        
        # Check if 'project_id' exists in the response
        if project_id_from_response is None:
            return 0
        
        # Verify that 'project_id' in the response matches 'id' from the request
        if project_id_from_response == project_id_from_request:
            return 1
        else:
            return -1
    except (ValueError, TypeError):
        # Handle cases where 'id' is not an integer or other type errors
        return -1
",4,1,1,0,0,1,0,logic
62,Issue,project_id,,post-/projects/{id}/issues,parameters,id,The ID or URL-encoded path of the project owned by the authenticated user,c,True,TP,"{
  ""confidential"": false,
  ""due_date"": ""2024-03-27"",
  ""id"": 9,
  ""created_at"": ""2024-03-25T11:00:53.535Z"",
  ""description"": ""help to fix this fix this issue as soon as possible"",
  ""title"": ""this is the first issue of this project""
}




","{""id"":5,""iid"":1,""project_id"":9,""title"":""this is the first issue of this project"",""description"":""help to fix this fix this issue as soon as possible"",""state"":""opened"",""created_at"":""2024-03-25T11:00:53.535Z"",""updated_at"":""2024-03-25T11:00:53.535Z"",""closed_at"":null,""closed_by"":null,""labels"":[""error1""],""milestone"":null,""assignees"":[],""author"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""type"":""ISSUE"",""assignee"":null,""user_notes_count"":0,""merge_requests_count"":0,""upvotes"":0,""downvotes"":0,""due_date"":""2024-03-27"",""confidential"":false,""discussion_locked"":null,""issue_type"":""issue"",""web_url"":""http://gitlab.example.com/test-1/test_project_created_by_user_2/-/issues/1"",""time_stats"":{""time_estimate"":0,""total_time_spent"":0,""human_time_estimate"":null,""human_total_time_spent"":null},""task_completion_status"":{""count"":0,""completed_count"":0},""has_tasks"":true,""task_status"":""0 of 0 checklist items completed"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/9/issues/1"",""notes"":""http://gitlab.example.com/api/v4/projects/9/issues/1/notes"",""award_emoji"":""http://gitlab.example.com/api/v4/projects/9/issues/1/award_emoji"",""project"":""http://gitlab.example.com/api/v4/projects/9"",""closed_as_duplicate_of"":null},""references"":{""short"":""#1"",""relative"":""#1"",""full"":""test-1/test_project_created_by_user_2#1""},""severity"":""UNKNOWN"",""subscribed"":true,""moved_to_id"":null,""service_desk_reply_to"":null}",satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the 'id' from request_info and ensure it is an integer
        project_id_from_request = int(request_info.get('id'))
        
        # Extract 'project_id' from the response
        project_id_from_response = latest_response.get('project_id')
        
        # Check if 'project_id' exists in the response
        if project_id_from_response is None:
            return 0
        
        # Verify that 'project_id' in the response matches 'id' from the request
        if project_id_from_response == project_id_from_request:
            return 1
        else:
            return -1
    except (ValueError, TypeError):
        # Handle cases where 'id' is not an integer or other type errors
        return -1
",4,1,1,0,0,1,0,logic
63,Issue,project_id,,get-/projects/{id}/issues,parameters,id,The ID or URL-encoded path of the project owned by the authenticated user user,c,True,TP,"{
  ""confidential"": false,
  ""due_date"": null,
  ""state"": ""opened"",
  ""updated_after"": ""2024-03-24T00:00:00Z"",
  ""updated_before"": ""2024-03-26T00:00:00Z"",
  ""id"": 10
}","[{""id"":4,""iid"":2,""project_id"":10,""title"":""This is a new issue"",""description"":null,""state"":""opened"",""created_at"":""2024-03-25T07:56:16.760Z"",""updated_at"":""2024-03-25T07:56:16.760Z"",""closed_at"":null,""closed_by"":null,""labels"":[],""milestone"":null,""assignees"":[],""author"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""type"":""ISSUE"",""assignee"":null,""user_notes_count"":0,""merge_requests_count"":0,""upvotes"":0,""downvotes"":0,""due_date"":null,""confidential"":false,""discussion_locked"":null,""issue_type"":""issue"",""web_url"":""http://gitlab.example.com/root/test_project_2/-/issues/2"",""time_stats"":{""time_estimate"":0,""total_time_spent"":0,""human_time_estimate"":null,""human_total_time_spent"":null},""task_completion_status"":{""count"":0,""completed_count"":0},""has_tasks"":true,""task_status"":"""",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/10/issues/2"",""notes"":""http://gitlab.example.com/api/v4/projects/10/issues/2/notes"",""award_emoji"":""http://gitlab.example.com/api/v4/projects/10/issues/2/award_emoji"",""project"":""http://gitlab.example.com/api/v4/projects/10"",""closed_as_duplicate_of"":null},""references"":{""short"":""#2"",""relative"":""#2"",""full"":""root/test_project_2#2""},""severity"":""UNKNOWN"",""moved_to_id"":null,""service_desk_reply_to"":null}]",satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the 'id' from the request_info
        project_id = int(request_info.get('id'))
        
        # Check if the response is a list of Issue objects
        if not isinstance(latest_response, list):
            return 0
        
        # Iterate through the list of Issue objects
        for issue in latest_response:
            # Check if 'project_id' exists in the Issue object
            if 'project_id' not in issue:
                return 0
            
            # Verify that 'project_id' matches the 'id' from the request_info
            if issue['project_id'] != project_id:
                return -1
        
        # If all 'project_id' values match the 'id', return 1
        return 1
    except (ValueError, TypeError):
        # Handle cases where 'id' is not an integer or other type errors
        return -1
",4,1,1,0,0,1,0,logic
64,Issue,project_id,,post-/projects/{id}/issues/{issue_iid}/subscribe,parameters,id,The ID or URL-encoded path of the project owned by the authenticated user,c,True,TP,"{""milestone"": ""milestone1"", ""id"": 5, ""issue_iid"": 11}","{
  ""id"": 92,
  ""iid"": 11,
  ""project_id"": 5,
  ""title"": ""Sit voluptas tempora quisquam aut doloribus et."",
  ""description"": ""Repellat voluptas quibusdam voluptatem exercitationem."",
  ""state"": ""opened"",
  ""created_at"": ""2016-04-05T21:41:45.652Z"",
  ""updated_at"": ""2016-04-07T12:20:17.596Z"",
  ""closed_at"": null,
  ""closed_by"": null,
  ""labels"": [],
  ""upvotes"": 4,
  ""downvotes"": 0,
  ""merge_requests_count"": 0,
  ""milestone"": null,
  ""assignees"": [{
    ""name"": ""Miss Monserrate Beier"",
    ""username"": ""axel.block"",
    ""id"": 12,
    ""state"": ""active"",
    ""avatar_url"": ""http://www.gravatar.com/avatar/46f6f7dc858ada7be1853f7fb96e81da?s=80&d=identicon"",
    ""web_url"": ""https://gitlab.example.com/axel.block""
  }],
  ""assignee"": {
    ""name"": ""Miss Monserrate Beier"",
    ""username"": ""axel.block"",
    ""id"": 12,
    ""state"": ""active"",
    ""avatar_url"": ""http://www.gravatar.com/avatar/46f6f7dc858ada7be1853f7fb96e81da?s=80&d=identicon"",
    ""web_url"": ""https://gitlab.example.com/axel.block""
  },
  ""type"" : ""ISSUE"",
  ""author"": {
    ""name"": ""Kris Steuber"",
    ""username"": ""solon.cremin"",
    ""id"": 10,
    ""state"": ""active"",
    ""avatar_url"": ""http://www.gravatar.com/avatar/7a190fecbaa68212a4b68aeb6e3acd10?s=80&d=identicon"",
    ""web_url"": ""https://gitlab.example.com/solon.cremin""
  },
  ""due_date"": null,
  ""web_url"": ""http://gitlab.example.com/my-group/my-project/issues/11"",
  ""references"": {
    ""short"": ""#11"",
    ""relative"": ""#11"",
    ""full"": ""my-group/my-project#11""
  },
  ""time_stats"": {
    ""time_estimate"": 0,
    ""total_time_spent"": 0,
    ""human_time_estimate"": null,
    ""human_total_time_spent"": null
  },
  ""confidential"": false,
  ""discussion_locked"": false,
  ""issue_type"": ""issue"",
  ""severity"": ""UNKNOWN"",
  ""_links"": {
    ""self"": ""http://gitlab.example.com/api/v4/projects/1/issues/2"",
    ""notes"": ""http://gitlab.example.com/api/v4/projects/1/issues/2/notes"",
    ""award_emoji"": ""http://gitlab.example.com/api/v4/projects/1/issues/2/award_emoji"",
    ""project"": ""http://gitlab.example.com/api/v4/projects/1"",
    ""closed_as_duplicate_of"": ""http://gitlab.example.com/api/v4/projects/1/issues/75""
  },
  ""task_completion_status"":{
     ""count"":0,
     ""completed_count"":0
  }
}",unknown,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the 'id' from request_info and ensure it is an integer
        project_id_from_request = int(request_info.get('id'))
        
        # Extract 'project_id' from the response
        project_id_from_response = latest_response.get('project_id')
        
        # Check if 'project_id' exists in the response
        if project_id_from_response is None:
            return 0
        
        # Verify that 'project_id' in the response matches 'id' from the request
        if project_id_from_response == project_id_from_request:
            return 1
        else:
            return -1
    except (ValueError, TypeError):
        # Handle cases where 'id' is not an integer or other type errors
        return -1
",4,1,1,0,0,1,0,logic
65,Issue,created_at,,post-/projects/{id}/issues,parameters,created_at,"When the issue was created. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z . Requires administrator or project/group owner rights",c,False,TP,"{
  ""confidential"": false,
  ""due_date"": ""2024-03-27"",
  ""id"": 9,
  ""created_at"": ""2024-03-25T11:00:53.535Z"",
  ""description"": ""help to fix this fix this issue as soon as possible"",
  ""title"": ""this is the first issue of this project""
}




","{""id"":5,""iid"":1,""project_id"":9,""title"":""this is the first issue of this project"",""description"":""help to fix this fix this issue as soon as possible"",""state"":""opened"",""created_at"":""2024-03-25T11:00:53.535Z"",""updated_at"":""2024-03-25T11:00:53.535Z"",""closed_at"":null,""closed_by"":null,""labels"":[""error1""],""milestone"":null,""assignees"":[],""author"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""type"":""ISSUE"",""assignee"":null,""user_notes_count"":0,""merge_requests_count"":0,""upvotes"":0,""downvotes"":0,""due_date"":""2024-03-27"",""confidential"":false,""discussion_locked"":null,""issue_type"":""issue"",""web_url"":""http://gitlab.example.com/test-1/test_project_created_by_user_2/-/issues/1"",""time_stats"":{""time_estimate"":0,""total_time_spent"":0,""human_time_estimate"":null,""human_total_time_spent"":null},""task_completion_status"":{""count"":0,""completed_count"":0},""has_tasks"":true,""task_status"":""0 of 0 checklist items completed"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/9/issues/1"",""notes"":""http://gitlab.example.com/api/v4/projects/9/issues/1/notes"",""award_emoji"":""http://gitlab.example.com/api/v4/projects/9/issues/1/award_emoji"",""project"":""http://gitlab.example.com/api/v4/projects/9"",""closed_as_duplicate_of"":null},""references"":{""short"":""#1"",""relative"":""#1"",""full"":""test-1/test_project_created_by_user_2#1""},""severity"":""UNKNOWN"",""subscribed"":true,""moved_to_id"":null,""service_desk_reply_to"":null}",mismatched,"from datetime import datetime

def verify_latest_response(latest_response, request_info):
    try:
        # Extract the 'created_at' value from the response
        created_at_response = latest_response.get('created_at')
        
        if created_at_response is None:
            return 0  # Attribute does not exist in the response
        
        # Check if the 'created_at' value is a valid ISO 8601 formatted string
        try:
            datetime.fromisoformat(created_at_response.replace('Z', '+00:00'))
        except ValueError:
            return -1  # Invalid date-time format
        
        # Extract the 'created_at' value from the request info
        created_at_request = request_info.get('created_at')
        
        if created_at_request is None:
            return 0  # Attribute does not exist in the request info
        
        # Check if the 'created_at' value in the request info is a valid ISO 8601 formatted string
        try:
            datetime.fromisoformat(created_at_request.replace('Z', '+00:00'))
        except ValueError:
            return -1  # Invalid date-time format in request info
        
        # Compare the 'created_at' values from the response and request info
        if created_at_response == created_at_request:
            return 1  # Constraint satisfied
        else:
            return -1  # Constraint not satisfied
    except Exception as e:
        return -1  # Any other exception indicates the constraint is not satisfied
",2016-01-04T15:31:46Z,1,1,0,0,1,0,format
66,Issue,description,,put-/projects/{id}/issues/{issue_iid},parameters,description,"The description of an issue. Limited to 1,048,576 characters",c,False,TP,"{
  ""confidential"": false,
  ""due_date"": ""2016-07-22"",
  ""updated_at"": ""2016-01-07T12:55:16.213Z"",
  ""id"": 4,
  ""description"": null,
  ""title"": ""Issues with auth"",
  ""issue_iid"": 15,
  ""discussion_locked"": false
}","{
   ""created_at"" : ""2016-01-07T12:46:01.410Z"",
   ""author"" : {
      ""name"" : ""Alexandra Bashirian"",
      ""avatar_url"" : null,
      ""username"" : ""eileen.lowe"",
      ""id"" : 18,
      ""state"" : ""active"",
      ""web_url"" : ""https://gitlab.example.com/eileen.lowe""
   },
   ""state"" : ""closed"",
   ""title"" : ""Issues with auth"",
   ""project_id"" : 4,
   ""description"" : null,
   ""updated_at"" : ""2016-01-07T12:55:16.213Z"",
   ""closed_at"" : ""2016-01-08T12:55:16.213Z"",
   ""closed_by"" : {
      ""state"" : ""active"",
      ""web_url"" : ""https://gitlab.example.com/root"",
      ""avatar_url"" : null,
      ""username"" : ""root"",
      ""id"" : 1,
      ""name"" : ""Administrator""
    },
   ""iid"" : 15,
   ""labels"" : [
      ""bug""
   ],
   ""upvotes"": 4,
   ""downvotes"": 0,
   ""merge_requests_count"": 0,
   ""id"" : 85,
   ""assignees"" : [],
   ""assignee"" : null,
   ""milestone"" : null,
   ""subscribed"" : true,
   ""user_notes_count"": 0,
   ""due_date"": ""2016-07-22"",
   ""web_url"": ""http://gitlab.example.com/my-group/my-project/issues/15"",
   ""references"": {
     ""short"": ""#15"",
     ""relative"": ""#15"",
     ""full"": ""my-group/my-project#15""
   },
   ""time_stats"": {
      ""time_estimate"": 0,
      ""total_time_spent"": 0,
      ""human_time_estimate"": null,
      ""human_total_time_spent"": null
   },
   ""confidential"": false,
   ""discussion_locked"": false,
   ""issue_type"": ""issue"",
   ""severity"": ""UNKNOWN"",
   ""_links"": {
      ""self"": ""http://gitlab.example.com/api/v4/projects/1/issues/2"",
      ""notes"": ""http://gitlab.example.com/api/v4/projects/1/issues/2/notes"",
      ""award_emoji"": ""http://gitlab.example.com/api/v4/projects/1/issues/2/award_emoji"",
      ""project"": ""http://gitlab.example.com/api/v4/projects/1"",
      ""closed_as_duplicate_of"": ""http://gitlab.example.com/api/v4/projects/1/issues/75""

   },
   ""task_completion_status"":{
      ""count"":0,
      ""completed_count"":0
   }
}",unknown,"def verify_latest_response(latest_response, request_info):
    try:
        description = latest_response.get(""description"")
        if description is None:
            return 0  # Attribute does not exist in the response
        if isinstance(description, str) and len(description) <= 1048576:
            return 1  # Constraint satisfied
        else:
            return -1  # Constraint not satisfied
    except Exception as e:
        return -1  # In case of any unexpected error
",Omnis vero earum sunt corporis dolor et placeat.,1,0,0,1,1,0,format
67,Issue,description,,post-/projects/{id}/issues,parameters,description,"The description of an issue. Limited to 1,048,576 characters",c,False,TP,"{
  ""confidential"": false,
  ""due_date"": ""2024-03-27"",
  ""id"": 9,
  ""created_at"": ""2024-03-25T11:00:53.535Z"",
  ""description"": ""help to fix this fix this issue as soon as possible"",
  ""title"": ""this is the first issue of this project""
}




","{""id"":5,""iid"":1,""project_id"":9,""title"":""this is the first issue of this project"",""description"":""help to fix this fix this issue as soon as possible"",""state"":""opened"",""created_at"":""2024-03-25T11:00:53.535Z"",""updated_at"":""2024-03-25T11:00:53.535Z"",""closed_at"":null,""closed_by"":null,""labels"":[""error1""],""milestone"":null,""assignees"":[],""author"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""type"":""ISSUE"",""assignee"":null,""user_notes_count"":0,""merge_requests_count"":0,""upvotes"":0,""downvotes"":0,""due_date"":""2024-03-27"",""confidential"":false,""discussion_locked"":null,""issue_type"":""issue"",""web_url"":""http://gitlab.example.com/test-1/test_project_created_by_user_2/-/issues/1"",""time_stats"":{""time_estimate"":0,""total_time_spent"":0,""human_time_estimate"":null,""human_total_time_spent"":null},""task_completion_status"":{""count"":0,""completed_count"":0},""has_tasks"":true,""task_status"":""0 of 0 checklist items completed"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/9/issues/1"",""notes"":""http://gitlab.example.com/api/v4/projects/9/issues/1/notes"",""award_emoji"":""http://gitlab.example.com/api/v4/projects/9/issues/1/award_emoji"",""project"":""http://gitlab.example.com/api/v4/projects/9"",""closed_as_duplicate_of"":null},""references"":{""short"":""#1"",""relative"":""#1"",""full"":""test-1/test_project_created_by_user_2#1""},""severity"":""UNKNOWN"",""subscribed"":true,""moved_to_id"":null,""service_desk_reply_to"":null}",satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        description = latest_response.get(""description"")
        if description is None:
            return 0  # Attribute does not exist in the response
        if isinstance(description, str) and len(description) <= 1048576:
            return 1  # Constraint satisfied
        else:
            return -1  # Constraint not satisfied
    except Exception as e:
        return -1  # In case of any unexpected error
",Omnis vero earum sunt corporis dolor et placeat.,1,1,0,0,1,0,format
68,Issue,title,,post-/projects/{id}/issues,parameters,title,The title of an issue,c,False,TP,"{
  ""confidential"": false,
  ""due_date"": ""2024-03-27"",
  ""id"": 9,
  ""created_at"": ""2024-03-25T11:00:53.535Z"",
  ""description"": ""help to fix this fix this issue as soon as possible"",
  ""title"": ""this is the first issue of this project""
}




","{""id"":5,""iid"":1,""project_id"":9,""title"":""this is the first issue of this project"",""description"":""help to fix this fix this issue as soon as possible"",""state"":""opened"",""created_at"":""2024-03-25T11:00:53.535Z"",""updated_at"":""2024-03-25T11:00:53.535Z"",""closed_at"":null,""closed_by"":null,""labels"":[""error1""],""milestone"":null,""assignees"":[],""author"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""type"":""ISSUE"",""assignee"":null,""user_notes_count"":0,""merge_requests_count"":0,""upvotes"":0,""downvotes"":0,""due_date"":""2024-03-27"",""confidential"":false,""discussion_locked"":null,""issue_type"":""issue"",""web_url"":""http://gitlab.example.com/test-1/test_project_created_by_user_2/-/issues/1"",""time_stats"":{""time_estimate"":0,""total_time_spent"":0,""human_time_estimate"":null,""human_total_time_spent"":null},""task_completion_status"":{""count"":0,""completed_count"":0},""has_tasks"":true,""task_status"":""0 of 0 checklist items completed"",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/9/issues/1"",""notes"":""http://gitlab.example.com/api/v4/projects/9/issues/1/notes"",""award_emoji"":""http://gitlab.example.com/api/v4/projects/9/issues/1/award_emoji"",""project"":""http://gitlab.example.com/api/v4/projects/9"",""closed_as_duplicate_of"":null},""references"":{""short"":""#1"",""relative"":""#1"",""full"":""test-1/test_project_created_by_user_2#1""},""severity"":""UNKNOWN"",""subscribed"":true,""moved_to_id"":null,""service_desk_reply_to"":null}",satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'title' is present in the request_info and is not empty
        if 'title' not in request_info or not request_info['title']:
            return -1
        
        # Check if 'title' is present in the latest_response and is of type string
        if 'title' not in latest_response:
            return 0
        if not isinstance(latest_response['title'], str):
            return -1
        
        # Check if the 'title' in the response matches the 'title' in the request_info
        if latest_response['title'] != request_info['title']:
            return -1
        
        return 1
    except Exception as e:
        return -1
",Ut commodi ullam eos dolores perferendis nihil sunt.,1,1,0,0,1,0,logic
69,Issue,title,,put-/projects/{id}/issues/{issue_iid},parameters,title,The title of an issue,c,False,TP,"{
  ""confidential"": false,
  ""due_date"": ""2016-07-22"",
  ""updated_at"": ""2016-01-07T12:55:16.213Z"",
  ""id"": 4,
  ""description"": null,
  ""title"": ""Issues with auth"",
  ""issue_iid"": 15,
  ""discussion_locked"": false
}","{
   ""created_at"" : ""2016-01-07T12:46:01.410Z"",
   ""author"" : {
      ""name"" : ""Alexandra Bashirian"",
      ""avatar_url"" : null,
      ""username"" : ""eileen.lowe"",
      ""id"" : 18,
      ""state"" : ""active"",
      ""web_url"" : ""https://gitlab.example.com/eileen.lowe""
   },
   ""state"" : ""closed"",
   ""title"" : ""Issues with auth"",
   ""project_id"" : 4,
   ""description"" : null,
   ""updated_at"" : ""2016-01-07T12:55:16.213Z"",
   ""closed_at"" : ""2016-01-08T12:55:16.213Z"",
   ""closed_by"" : {
      ""state"" : ""active"",
      ""web_url"" : ""https://gitlab.example.com/root"",
      ""avatar_url"" : null,
      ""username"" : ""root"",
      ""id"" : 1,
      ""name"" : ""Administrator""
    },
   ""iid"" : 15,
   ""labels"" : [
      ""bug""
   ],
   ""upvotes"": 4,
   ""downvotes"": 0,
   ""merge_requests_count"": 0,
   ""id"" : 85,
   ""assignees"" : [],
   ""assignee"" : null,
   ""milestone"" : null,
   ""subscribed"" : true,
   ""user_notes_count"": 0,
   ""due_date"": ""2016-07-22"",
   ""web_url"": ""http://gitlab.example.com/my-group/my-project/issues/15"",
   ""references"": {
     ""short"": ""#15"",
     ""relative"": ""#15"",
     ""full"": ""my-group/my-project#15""
   },
   ""time_stats"": {
      ""time_estimate"": 0,
      ""total_time_spent"": 0,
      ""human_time_estimate"": null,
      ""human_total_time_spent"": null
   },
   ""confidential"": false,
   ""discussion_locked"": false,
   ""issue_type"": ""issue"",
   ""severity"": ""UNKNOWN"",
   ""_links"": {
      ""self"": ""http://gitlab.example.com/api/v4/projects/1/issues/2"",
      ""notes"": ""http://gitlab.example.com/api/v4/projects/1/issues/2/notes"",
      ""award_emoji"": ""http://gitlab.example.com/api/v4/projects/1/issues/2/award_emoji"",
      ""project"": ""http://gitlab.example.com/api/v4/projects/1"",
      ""closed_as_duplicate_of"": ""http://gitlab.example.com/api/v4/projects/1/issues/75""

   },
   ""task_completion_status"":{
      ""count"":0,
      ""completed_count"":0
   }
}",unknown,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the title from the response
        response_title = latest_response.get(""title"")
        
        # Check if the title exists in the response
        if response_title is None:
            return 0
        
        # Check if the title is a string
        if not isinstance(response_title, str):
            return -1
        
        # If all checks pass
        return 1
    except Exception as e:
        # In case of any unexpected error
        return -1
",Ut commodi ullam eos dolores perferendis nihil sunt.,1,1,0,0,1,0,logic
70,Issue,iid,,post-/projects/{id}/issues/{issue_iid}/unsubscribe,parameters,issue_iid,The internal ID of the project's issue,c,True,TP,"{""milestone"": ""milestone1"", ""id"": 5, ""issue_iid"": 11}","{
  ""id"": 92,
  ""iid"": 11,
  ""project_id"": 5,
  ""title"": ""Sit voluptas tempora quisquam aut doloribus et."",
  ""description"": ""Repellat voluptas quibusdam voluptatem exercitationem."",
  ""state"": ""opened"",
  ""created_at"": ""2016-04-05T21:41:45.652Z"",
  ""updated_at"": ""2016-04-07T12:20:17.596Z"",
  ""closed_at"": null,
  ""closed_by"": null,
  ""labels"": [],
  ""upvotes"": 4,
  ""downvotes"": 0,
  ""merge_requests_count"": 0,
  ""milestone"": null,
  ""assignees"": [{
    ""name"": ""Miss Monserrate Beier"",
    ""username"": ""axel.block"",
    ""id"": 12,
    ""state"": ""active"",
    ""avatar_url"": ""http://www.gravatar.com/avatar/46f6f7dc858ada7be1853f7fb96e81da?s=80&d=identicon"",
    ""web_url"": ""https://gitlab.example.com/axel.block""
  }],
  ""assignee"": {
    ""name"": ""Miss Monserrate Beier"",
    ""username"": ""axel.block"",
    ""id"": 12,
    ""state"": ""active"",
    ""avatar_url"": ""http://www.gravatar.com/avatar/46f6f7dc858ada7be1853f7fb96e81da?s=80&d=identicon"",
    ""web_url"": ""https://gitlab.example.com/axel.block""
  },
  ""type"" : ""ISSUE"",
  ""author"": {
    ""name"": ""Kris Steuber"",
    ""username"": ""solon.cremin"",
    ""id"": 10,
    ""state"": ""active"",
    ""avatar_url"": ""http://www.gravatar.com/avatar/7a190fecbaa68212a4b68aeb6e3acd10?s=80&d=identicon"",
    ""web_url"": ""https://gitlab.example.com/solon.cremin""
  },
  ""due_date"": null,
  ""web_url"": ""http://gitlab.example.com/my-group/my-project/issues/11"",
  ""references"": {
    ""short"": ""#11"",
    ""relative"": ""#11"",
    ""full"": ""my-group/my-project#11""
  },
  ""time_stats"": {
    ""time_estimate"": 0,
    ""total_time_spent"": 0,
    ""human_time_estimate"": null,
    ""human_total_time_spent"": null
  },
  ""confidential"": false,
  ""discussion_locked"": false,
  ""issue_type"": ""issue"",
  ""severity"": ""UNKNOWN"",
  ""_links"": {
    ""self"": ""http://gitlab.example.com/api/v4/projects/1/issues/2"",
    ""notes"": ""http://gitlab.example.com/api/v4/projects/1/issues/2/notes"",
    ""award_emoji"": ""http://gitlab.example.com/api/v4/projects/1/issues/2/award_emoji"",
    ""project"": ""http://gitlab.example.com/api/v4/projects/1"",
    ""closed_as_duplicate_of"": ""http://gitlab.example.com/api/v4/projects/1/issues/75""
  },
  ""task_completion_status"":{
     ""count"":0,
     ""completed_count"":0
  }
}",unknown,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the issue_iid from the request_info
        issue_iid = int(request_info.get(""issue_iid""))
        
        # Extract the iid from the latest_response
        response_iid = latest_response.get(""iid"")
        
        # Check if the iid exists in the response
        if response_iid is None:
            return 0
        
        # Verify that the response_iid matches the issue_iid
        if response_iid == issue_iid:
            return 1
        else:
            return -1
    except (ValueError, TypeError):
        # Handle cases where conversion to integer fails or types are incorrect
        return -1
",1,1,1,0,0,1,0,logic
71,Issue,iid,,get-/projects/{id}/issues/{issue_iid},parameters,issue_iid,The internal ID of a project's issue,c,True,TP,"{""id"": 10, ""issue_iid"": 2}","{""id"":4,""iid"":2,""project_id"":10,""title"":""This is a new issue"",""description"":null,""state"":""opened"",""created_at"":""2024-03-25T07:56:16.760Z"",""updated_at"":""2024-03-25T10:00:32.976Z"",""closed_at"":null,""closed_by"":null,""labels"":[],""milestone"":null,""assignees"":[],""author"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""type"":""ISSUE"",""assignee"":null,""user_notes_count"":0,""merge_requests_count"":0,""upvotes"":0,""downvotes"":0,""due_date"":""2024-03-27"",""confidential"":false,""discussion_locked"":null,""issue_type"":""issue"",""web_url"":""http://gitlab.example.com/root/test_project_2/-/issues/2"",""time_stats"":{""time_estimate"":5400,""total_time_spent"":0,""human_time_estimate"":""1h 30m"",""human_total_time_spent"":null},""task_completion_status"":{""count"":0,""completed_count"":0},""has_tasks"":true,""task_status"":"""",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/10/issues/2"",""notes"":""http://gitlab.example.com/api/v4/projects/10/issues/2/notes"",""award_emoji"":""http://gitlab.example.com/api/v4/projects/10/issues/2/award_emoji"",""project"":""http://gitlab.example.com/api/v4/projects/10"",""closed_as_duplicate_of"":null},""references"":{""short"":""#2"",""relative"":""#2"",""full"":""root/test_project_2#2""},""severity"":""UNKNOWN"",""subscribed"":true,""moved_to_id"":null,""service_desk_reply_to"":null}",satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the issue_iid from request_info
        issue_iid = int(request_info.get(""issue_iid""))
        
        # Extract the iid from the latest_response
        response_iid = latest_response.get(""iid"")
        
        # Check if the response_iid exists and is an integer
        if response_iid is None:
            return 0
        if not isinstance(response_iid, int):
            return -1
        
        # Verify if the response_iid matches the issue_iid
        if response_iid == issue_iid:
            return 1
        else:
            return -1
    except (ValueError, TypeError):
        return -1
",1,1,1,0,0,1,0,logic
72,Issue,iid,,post-/projects/{id}/issues/{issue_iid}/move,parameters,issue_iid,The internal ID of the project's issue,c,True,TP,"{""order_by"": ""created_at"", ""author_id"": 1, ""labels"": ""none"", ""created_after"": ""2024-03-01T00:00:00Z"", ""created_before"": ""2024-03-30T00:00:00Z"", ""updated_after"": ""2024-03-01T00:00:00Z"", ""updated_before"": ""2024-03-30T00:00:00Z"", ""id"": 9, ""issue_iid"": 2, ""to_project_id"": 9}","{""id"":6,""iid"":2,""project_id"":9,""title"":""This is a new issue"",""description"":null,""state"":""opened"",""created_at"":""2024-03-25T07:56:16.760Z"",""updated_at"":""2024-03-25T11:10:58.364Z"",""closed_at"":null,""closed_by"":null,""labels"":[],""milestone"":null,""assignees"":[],""author"":{""id"":1,""username"":""root"",""name"":""Administrator"",""state"":""active"",""locked"":false,""avatar_url"":""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80\u0026d=identicon"",""web_url"":""http://gitlab.example.com/root""},""type"":""ISSUE"",""assignee"":null,""user_notes_count"":0,""merge_requests_count"":0,""upvotes"":0,""downvotes"":0,""due_date"":""2024-03-27"",""confidential"":false,""discussion_locked"":null,""issue_type"":""issue"",""web_url"":""http://gitlab.example.com/test-1/test_project_created_by_user_2/-/issues/2"",""time_stats"":{""time_estimate"":5400,""total_time_spent"":0,""human_time_estimate"":""1h 30m"",""human_total_time_spent"":null},""task_completion_status"":{""count"":0,""completed_count"":0},""has_tasks"":true,""task_status"":"""",""_links"":{""self"":""http://gitlab.example.com/api/v4/projects/9/issues/2"",""notes"":""http://gitlab.example.com/api/v4/projects/9/issues/2/notes"",""award_emoji"":""http://gitlab.example.com/api/v4/projects/9/issues/2/award_emoji"",""project"":""http://gitlab.example.com/api/v4/projects/9"",""closed_as_duplicate_of"":null},""references"":{""short"":""#2"",""relative"":""test-1/test_project_created_by_user_2#2"",""full"":""test-1/test_project_created_by_user_2#2""},""severity"":""UNKNOWN"",""subscribed"":true,""moved_to_id"":null,""service_desk_reply_to"":null}",satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the issue_iid from the request_info
        issue_iid = int(request_info.get(""issue_iid""))
        
        # Extract the iid from the latest_response
        response_iid = latest_response.get(""iid"")
        
        # Check if the iid exists in the response
        if response_iid is None:
            return 0
        
        # Verify that the response_iid matches the issue_iid
        if response_iid == issue_iid:
            return 1
        else:
            return -1
    except (ValueError, TypeError):
        # Handle cases where conversion to integer fails or types are incorrect
        return -1
",1,1,1,0,0,1,0,logic
73,Issue,iid,,post-/projects/{id}/issues/{issue_iid}/subscribe,parameters,issue_iid,The internal ID of the project's issue,c,True,TP,"{""milestone"": ""milestone1"", ""id"": 5, ""issue_iid"": 11}","{
  ""id"": 92,
  ""iid"": 11,
  ""project_id"": 5,
  ""title"": ""Sit voluptas tempora quisquam aut doloribus et."",
  ""description"": ""Repellat voluptas quibusdam voluptatem exercitationem."",
  ""state"": ""opened"",
  ""created_at"": ""2016-04-05T21:41:45.652Z"",
  ""updated_at"": ""2016-04-07T12:20:17.596Z"",
  ""closed_at"": null,
  ""closed_by"": null,
  ""labels"": [],
  ""upvotes"": 4,
  ""downvotes"": 0,
  ""merge_requests_count"": 0,
  ""milestone"": null,
  ""assignees"": [{
    ""name"": ""Miss Monserrate Beier"",
    ""username"": ""axel.block"",
    ""id"": 12,
    ""state"": ""active"",
    ""avatar_url"": ""http://www.gravatar.com/avatar/46f6f7dc858ada7be1853f7fb96e81da?s=80&d=identicon"",
    ""web_url"": ""https://gitlab.example.com/axel.block""
  }],
  ""assignee"": {
    ""name"": ""Miss Monserrate Beier"",
    ""username"": ""axel.block"",
    ""id"": 12,
    ""state"": ""active"",
    ""avatar_url"": ""http://www.gravatar.com/avatar/46f6f7dc858ada7be1853f7fb96e81da?s=80&d=identicon"",
    ""web_url"": ""https://gitlab.example.com/axel.block""
  },
  ""type"" : ""ISSUE"",
  ""author"": {
    ""name"": ""Kris Steuber"",
    ""username"": ""solon.cremin"",
    ""id"": 10,
    ""state"": ""active"",
    ""avatar_url"": ""http://www.gravatar.com/avatar/7a190fecbaa68212a4b68aeb6e3acd10?s=80&d=identicon"",
    ""web_url"": ""https://gitlab.example.com/solon.cremin""
  },
  ""due_date"": null,
  ""web_url"": ""http://gitlab.example.com/my-group/my-project/issues/11"",
  ""references"": {
    ""short"": ""#11"",
    ""relative"": ""#11"",
    ""full"": ""my-group/my-project#11""
  },
  ""time_stats"": {
    ""time_estimate"": 0,
    ""total_time_spent"": 0,
    ""human_time_estimate"": null,
    ""human_total_time_spent"": null
  },
  ""confidential"": false,
  ""discussion_locked"": false,
  ""issue_type"": ""issue"",
  ""severity"": ""UNKNOWN"",
  ""_links"": {
    ""self"": ""http://gitlab.example.com/api/v4/projects/1/issues/2"",
    ""notes"": ""http://gitlab.example.com/api/v4/projects/1/issues/2/notes"",
    ""award_emoji"": ""http://gitlab.example.com/api/v4/projects/1/issues/2/award_emoji"",
    ""project"": ""http://gitlab.example.com/api/v4/projects/1"",
    ""closed_as_duplicate_of"": ""http://gitlab.example.com/api/v4/projects/1/issues/75""
  },
  ""task_completion_status"":{
     ""count"":0,
     ""completed_count"":0
  }
}",unknown,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the issue_iid from the request_info
        issue_iid = int(request_info.get(""issue_iid""))
        
        # Extract the iid from the latest_response
        response_iid = latest_response.get(""iid"")
        
        # Check if the iid exists in the response
        if response_iid is None:
            return 0
        
        # Verify that the response_iid matches the issue_iid
        if response_iid == issue_iid:
            return 1
        else:
            return -1
    except (ValueError, TypeError):
        # Handle cases where conversion to integer fails or types are incorrect
        return -1
",1,1,1,0,0,1,0,logic
74,Issue,iid,,put-/projects/{id}/issues/{issue_iid},parameters,issue_iid,The internal ID of a project's issue,c,True,TP,"{
  ""confidential"": false,
  ""due_date"": ""2016-07-22"",
  ""updated_at"": ""2016-01-07T12:55:16.213Z"",
  ""id"": 4,
  ""description"": null,
  ""title"": ""Issues with auth"",
  ""issue_iid"": 15,
  ""discussion_locked"": false
}","{
   ""created_at"" : ""2016-01-07T12:46:01.410Z"",
   ""author"" : {
      ""name"" : ""Alexandra Bashirian"",
      ""avatar_url"" : null,
      ""username"" : ""eileen.lowe"",
      ""id"" : 18,
      ""state"" : ""active"",
      ""web_url"" : ""https://gitlab.example.com/eileen.lowe""
   },
   ""state"" : ""closed"",
   ""title"" : ""Issues with auth"",
   ""project_id"" : 4,
   ""description"" : null,
   ""updated_at"" : ""2016-01-07T12:55:16.213Z"",
   ""closed_at"" : ""2016-01-08T12:55:16.213Z"",
   ""closed_by"" : {
      ""state"" : ""active"",
      ""web_url"" : ""https://gitlab.example.com/root"",
      ""avatar_url"" : null,
      ""username"" : ""root"",
      ""id"" : 1,
      ""name"" : ""Administrator""
    },
   ""iid"" : 15,
   ""labels"" : [
      ""bug""
   ],
   ""upvotes"": 4,
   ""downvotes"": 0,
   ""merge_requests_count"": 0,
   ""id"" : 85,
   ""assignees"" : [],
   ""assignee"" : null,
   ""milestone"" : null,
   ""subscribed"" : true,
   ""user_notes_count"": 0,
   ""due_date"": ""2016-07-22"",
   ""web_url"": ""http://gitlab.example.com/my-group/my-project/issues/15"",
   ""references"": {
     ""short"": ""#15"",
     ""relative"": ""#15"",
     ""full"": ""my-group/my-project#15""
   },
   ""time_stats"": {
      ""time_estimate"": 0,
      ""total_time_spent"": 0,
      ""human_time_estimate"": null,
      ""human_total_time_spent"": null
   },
   ""confidential"": false,
   ""discussion_locked"": false,
   ""issue_type"": ""issue"",
   ""severity"": ""UNKNOWN"",
   ""_links"": {
      ""self"": ""http://gitlab.example.com/api/v4/projects/1/issues/2"",
      ""notes"": ""http://gitlab.example.com/api/v4/projects/1/issues/2/notes"",
      ""award_emoji"": ""http://gitlab.example.com/api/v4/projects/1/issues/2/award_emoji"",
      ""project"": ""http://gitlab.example.com/api/v4/projects/1"",
      ""closed_as_duplicate_of"": ""http://gitlab.example.com/api/v4/projects/1/issues/75""

   },
   ""task_completion_status"":{
      ""count"":0,
      ""completed_count"":0
   }
}",unknown,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the issue_iid from request_info
        issue_iid = int(request_info.get(""issue_iid""))
        
        # Extract the iid from the latest_response
        response_iid = latest_response.get(""iid"")
        
        # Check if the response_iid exists and is an integer
        if response_iid is None:
            return 0
        if not isinstance(response_iid, int):
            return -1
        
        # Verify if the response_iid matches the issue_iid
        if response_iid == issue_iid:
            return 1
        else:
            return -1
    except (ValueError, TypeError):
        return -1
",1,1,1,0,0,1,0,logic
75,Issue,discussion_locked,,put-/projects/{id}/issues/{issue_iid},parameters,discussion_locked,Flag indicating if the issue's discussion is locked. If the discussion is locked only project members can add or edit comments,c,False,TP,"{
  ""confidential"": false,
  ""due_date"": ""2016-07-22"",
  ""updated_at"": ""2016-01-07T12:55:16.213Z"",
  ""id"": 4,
  ""description"": null,
  ""title"": ""Issues with auth"",
  ""issue_iid"": 15,
  ""discussion_locked"": false
}","{
   ""created_at"" : ""2016-01-07T12:46:01.410Z"",
   ""author"" : {
      ""name"" : ""Alexandra Bashirian"",
      ""avatar_url"" : null,
      ""username"" : ""eileen.lowe"",
      ""id"" : 18,
      ""state"" : ""active"",
      ""web_url"" : ""https://gitlab.example.com/eileen.lowe""
   },
   ""state"" : ""closed"",
   ""title"" : ""Issues with auth"",
   ""project_id"" : 4,
   ""description"" : null,
   ""updated_at"" : ""2016-01-07T12:55:16.213Z"",
   ""closed_at"" : ""2016-01-08T12:55:16.213Z"",
   ""closed_by"" : {
      ""state"" : ""active"",
      ""web_url"" : ""https://gitlab.example.com/root"",
      ""avatar_url"" : null,
      ""username"" : ""root"",
      ""id"" : 1,
      ""name"" : ""Administrator""
    },
   ""iid"" : 15,
   ""labels"" : [
      ""bug""
   ],
   ""upvotes"": 4,
   ""downvotes"": 0,
   ""merge_requests_count"": 0,
   ""id"" : 85,
   ""assignees"" : [],
   ""assignee"" : null,
   ""milestone"" : null,
   ""subscribed"" : true,
   ""user_notes_count"": 0,
   ""due_date"": ""2016-07-22"",
   ""web_url"": ""http://gitlab.example.com/my-group/my-project/issues/15"",
   ""references"": {
     ""short"": ""#15"",
     ""relative"": ""#15"",
     ""full"": ""my-group/my-project#15""
   },
   ""time_stats"": {
      ""time_estimate"": 0,
      ""total_time_spent"": 0,
      ""human_time_estimate"": null,
      ""human_total_time_spent"": null
   },
   ""confidential"": false,
   ""discussion_locked"": false,
   ""issue_type"": ""issue"",
   ""severity"": ""UNKNOWN"",
   ""_links"": {
      ""self"": ""http://gitlab.example.com/api/v4/projects/1/issues/2"",
      ""notes"": ""http://gitlab.example.com/api/v4/projects/1/issues/2/notes"",
      ""award_emoji"": ""http://gitlab.example.com/api/v4/projects/1/issues/2/award_emoji"",
      ""project"": ""http://gitlab.example.com/api/v4/projects/1"",
      ""closed_as_duplicate_of"": ""http://gitlab.example.com/api/v4/projects/1/issues/75""

   },
   ""task_completion_status"":{
      ""count"":0,
      ""completed_count"":0
   }
}",unknown,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'discussion_locked' exists in the response
        if 'discussion_locked' not in latest_response:
            return 0
        
        # Check if 'discussion_locked' is a boolean
        if not isinstance(latest_response['discussion_locked'], bool):
            return -1
        
        # Check if the 'discussion_locked' value in the response matches the input parameter
        if 'discussion_locked' in request_info:
            input_value = request_info['discussion_locked']
            if isinstance(input_value, str):
                input_value = input_value.lower() == 'true'
            if latest_response['discussion_locked'] != input_value:
                return -1
        
        return 1
    except Exception as e:
        return -1
",False,1,1,0,0,1,0,"range of values, logic"
76,Group,visibility,,post-/groups,parameters,visibility,"The group's visibility. Can be private,internal, orpublic",c,False,TP,"{
  ""visibility"": ""private"",
  ""share_with_group_lock"": false,
  ""require_two_factor_authentication"": false,
  ""two_factor_grace_period"": 48,
  ""project_creation_level"": ""developer"",
  ""subgroup_creation_level"": ""maintainer"",
  ""lfs_enabled"": true,
  ""request_access_enabled"": true,
  ""default_branch_protection"": 2,
  ""name"": ""test-5"",
  ""path"": ""test-5"",
  ""description"": """",
  ""avatar"": null
}




","{""id"":18,""web_url"":""http://gitlab.example.com/groups/test-5"",""name"":""test-5"",""path"":""test-5"",""description"":"""",""visibility"":""private"",""share_with_group_lock"":false,""require_two_factor_authentication"":false,""two_factor_grace_period"":48,""project_creation_level"":""developer"",""auto_devops_enabled"":null,""subgroup_creation_level"":""maintainer"",""emails_disabled"":false,""emails_enabled"":true,""mentions_disabled"":null,""lfs_enabled"":true,""default_branch_protection"":2,""default_branch_protection_defaults"":{},""avatar_url"":null,""request_access_enabled"":true,""full_name"":""test-5"",""full_path"":""test-5"",""created_at"":""2024-03-18T03:42:22.608Z"",""parent_id"":null,""shared_runners_setting"":""enabled"",""shared_with_groups"":[],""prevent_sharing_groups_outside_hierarchy"":false}",satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the visibility attribute from the response
        visibility = latest_response.get(""visibility"", None)
        
        # Check if the visibility attribute exists in the response
        if visibility is None:
            return 0
        
        # Define the allowed values for visibility
        allowed_values = [""private"", ""internal"", ""public""]
        
        # Verify if the visibility value in the response is within the allowed values
        if visibility in allowed_values:
            return 1
        else:
            return -1
    except Exception as e:
        return -1
",public,1,1,0,0,1,0,range of values
77,Group,share_with_group_lock,,post-/groups,parameters,share_with_group_lock,Prevent sharing a project with another group within this group,c,False,TP,"{
  ""visibility"": ""private"",
  ""share_with_group_lock"": false,
  ""require_two_factor_authentication"": false,
  ""two_factor_grace_period"": 48,
  ""project_creation_level"": ""developer"",
  ""subgroup_creation_level"": ""maintainer"",
  ""lfs_enabled"": true,
  ""request_access_enabled"": true,
  ""default_branch_protection"": 2,
  ""name"": ""test-5"",
  ""path"": ""test-5"",
  ""description"": """",
  ""avatar"": null
}




","{""id"":18,""web_url"":""http://gitlab.example.com/groups/test-5"",""name"":""test-5"",""path"":""test-5"",""description"":"""",""visibility"":""private"",""share_with_group_lock"":false,""require_two_factor_authentication"":false,""two_factor_grace_period"":48,""project_creation_level"":""developer"",""auto_devops_enabled"":null,""subgroup_creation_level"":""maintainer"",""emails_disabled"":false,""emails_enabled"":true,""mentions_disabled"":null,""lfs_enabled"":true,""default_branch_protection"":2,""default_branch_protection_defaults"":{},""avatar_url"":null,""request_access_enabled"":true,""full_name"":""test-5"",""full_path"":""test-5"",""created_at"":""2024-03-18T03:42:22.608Z"",""parent_id"":null,""shared_runners_setting"":""enabled"",""shared_with_groups"":[],""prevent_sharing_groups_outside_hierarchy"":false}",satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'share_with_group_lock' is in the response
        if 'share_with_group_lock' not in latest_response:
            return 0
        
        # Extract the value from the response
        response_value = latest_response['share_with_group_lock']
        
        # Ensure the value is a boolean
        if not isinstance(response_value, bool):
            return -1
        
        # Extract the expected value from the request info
        if 'share_with_group_lock' not in request_info:
            return 0
        
        expected_value = request_info['share_with_group_lock']
        
        # Convert the expected value to boolean
        if isinstance(expected_value, str):
            expected_value = expected_value.lower() == 'true'
        
        # Compare the response value with the expected value
        if response_value == expected_value:
            return 1
        else:
            return -1
    except Exception as e:
        return -1
",False,1,1,0,0,1,0,logic
78,Group,require_two_factor_authentication,,post-/groups,parameters,require_two_factor_authentication,Require all users in this group to setup Two-factor authentication,c,False,TP,"{
  ""visibility"": ""private"",
  ""share_with_group_lock"": false,
  ""require_two_factor_authentication"": false,
  ""two_factor_grace_period"": 48,
  ""project_creation_level"": ""developer"",
  ""subgroup_creation_level"": ""maintainer"",
  ""lfs_enabled"": true,
  ""request_access_enabled"": true,
  ""default_branch_protection"": 2,
  ""name"": ""test-5"",
  ""path"": ""test-5"",
  ""description"": """",
  ""avatar"": null
}




","{""id"":18,""web_url"":""http://gitlab.example.com/groups/test-5"",""name"":""test-5"",""path"":""test-5"",""description"":"""",""visibility"":""private"",""share_with_group_lock"":false,""require_two_factor_authentication"":false,""two_factor_grace_period"":48,""project_creation_level"":""developer"",""auto_devops_enabled"":null,""subgroup_creation_level"":""maintainer"",""emails_disabled"":false,""emails_enabled"":true,""mentions_disabled"":null,""lfs_enabled"":true,""default_branch_protection"":2,""default_branch_protection_defaults"":{},""avatar_url"":null,""request_access_enabled"":true,""full_name"":""test-5"",""full_path"":""test-5"",""created_at"":""2024-03-18T03:42:22.608Z"",""parent_id"":null,""shared_runners_setting"":""enabled"",""shared_with_groups"":[],""prevent_sharing_groups_outside_hierarchy"":false}",satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'require_two_factor_authentication' is present in request_info
        if 'require_two_factor_authentication' in request_info:
            request_value = request_info['require_two_factor_authentication']
            if not isinstance(request_value, bool):
                return -1  # Invalid type in request_info

            # Check if 'require_two_factor_authentication' is present in latest_response
            if 'require_two_factor_authentication' in latest_response:
                response_value = latest_response['require_two_factor_authentication']
                if not isinstance(response_value, bool):
                    return -1  # Invalid type in latest_response

                # Compare request and response values
                if request_value == response_value:
                    return 1  # Constraint is satisfied
                else:
                    return -1  # Constraint is not satisfied
            else:
                return 0  # Attribute does not exist in the response
        else:
            # 'require_two_factor_authentication' not in request_info, check if it's in response
            if 'require_two_factor_authentication' in latest_response:
                response_value = latest_response['require_two_factor_authentication']
                if isinstance(response_value, bool):
                    return 1  # Default behavior is satisfied
                else:
                    return -1  # Invalid type in latest_response
            else:
                return 0  # Attribute does not exist in the response
    except Exception as e:
        return -1  # Handle any exception that might occur
",False,1,1,0,0,1,0,logic
79,Group,two_factor_grace_period,,post-/groups,parameters,two_factor_grace_period,Time before Two-factor authentication is enforced (in hours),c,False,TP,"{
  ""visibility"": ""private"",
  ""share_with_group_lock"": false,
  ""require_two_factor_authentication"": false,
  ""two_factor_grace_period"": 48,
  ""project_creation_level"": ""developer"",
  ""subgroup_creation_level"": ""maintainer"",
  ""lfs_enabled"": true,
  ""request_access_enabled"": true,
  ""default_branch_protection"": 2,
  ""name"": ""test-5"",
  ""path"": ""test-5"",
  ""description"": """",
  ""avatar"": null
}




","{""id"":18,""web_url"":""http://gitlab.example.com/groups/test-5"",""name"":""test-5"",""path"":""test-5"",""description"":"""",""visibility"":""private"",""share_with_group_lock"":false,""require_two_factor_authentication"":false,""two_factor_grace_period"":48,""project_creation_level"":""developer"",""auto_devops_enabled"":null,""subgroup_creation_level"":""maintainer"",""emails_disabled"":false,""emails_enabled"":true,""mentions_disabled"":null,""lfs_enabled"":true,""default_branch_protection"":2,""default_branch_protection_defaults"":{},""avatar_url"":null,""request_access_enabled"":true,""full_name"":""test-5"",""full_path"":""test-5"",""created_at"":""2024-03-18T03:42:22.608Z"",""parent_id"":null,""shared_runners_setting"":""enabled"",""shared_with_groups"":[],""prevent_sharing_groups_outside_hierarchy"":false}",satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the 'two_factor_grace_period' from the request info
        requested_grace_period = int(request_info.get('two_factor_grace_period', None))
        
        # Check if the 'two_factor_grace_period' exists in the response
        if 'two_factor_grace_period' not in latest_response:
            return 0
        
        # Extract the 'two_factor_grace_period' from the response
        response_grace_period = latest_response['two_factor_grace_period']
        
        # Verify the constraint
        if response_grace_period == requested_grace_period:
            return 1
        else:
            return -1
    except (ValueError, TypeError):
        # Handle cases where conversion to integer fails or the key is missing
        return -1
",48,1,1,0,0,1,0,range of values
80,Group,project_creation_level,,post-/groups,parameters,project_creation_level,"Determine if developers can create projects in the group. Can benoone(No one),maintainer(Maintainers), or developer(Developers + Maintainers)",c,False,TP,"{
  ""visibility"": ""private"",
  ""share_with_group_lock"": false,
  ""require_two_factor_authentication"": false,
  ""two_factor_grace_period"": 48,
  ""project_creation_level"": ""developer"",
  ""subgroup_creation_level"": ""maintainer"",
  ""lfs_enabled"": true,
  ""request_access_enabled"": true,
  ""default_branch_protection"": 2,
  ""name"": ""test-5"",
  ""path"": ""test-5"",
  ""description"": """",
  ""avatar"": null
}




","{""id"":18,""web_url"":""http://gitlab.example.com/groups/test-5"",""name"":""test-5"",""path"":""test-5"",""description"":"""",""visibility"":""private"",""share_with_group_lock"":false,""require_two_factor_authentication"":false,""two_factor_grace_period"":48,""project_creation_level"":""developer"",""auto_devops_enabled"":null,""subgroup_creation_level"":""maintainer"",""emails_disabled"":false,""emails_enabled"":true,""mentions_disabled"":null,""lfs_enabled"":true,""default_branch_protection"":2,""default_branch_protection_defaults"":{},""avatar_url"":null,""request_access_enabled"":true,""full_name"":""test-5"",""full_path"":""test-5"",""created_at"":""2024-03-18T03:42:22.608Z"",""parent_id"":null,""shared_runners_setting"":""enabled"",""shared_with_groups"":[],""prevent_sharing_groups_outside_hierarchy"":false}",satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the project_creation_level from the response
        response_project_creation_level = latest_response.get(""project_creation_level"")
        
        # Check if the attribute exists in the response
        if response_project_creation_level is None:
            return 0
        
        # Extract the project_creation_level from the request info
        request_project_creation_level = request_info.get(""project_creation_level"")
        
        # Check if the request parameter exists
        if request_project_creation_level is None:
            return 0
        
        # Define the allowed values
        allowed_values = [""noone"", ""maintainer"", ""developer""]
        
        # Verify if the response value is within the allowed values
        if response_project_creation_level not in allowed_values:
            return -1
        
        # Verify if the response value matches the request value
        if response_project_creation_level == request_project_creation_level:
            return 1
        else:
            return -1
    except Exception as e:
        return -1
",developer,1,1,0,0,1,0,range of values
81,Group,subgroup_creation_level,,post-/groups,parameters,subgroup_creation_level,"Allowed to create subgroups. Can be owner(Owners), or maintainer(Maintainers)",c,False,TP,"{
  ""visibility"": ""private"",
  ""share_with_group_lock"": false,
  ""require_two_factor_authentication"": false,
  ""two_factor_grace_period"": 48,
  ""project_creation_level"": ""developer"",
  ""subgroup_creation_level"": ""maintainer"",
  ""lfs_enabled"": true,
  ""request_access_enabled"": true,
  ""default_branch_protection"": 2,
  ""name"": ""test-5"",
  ""path"": ""test-5"",
  ""description"": """",
  ""avatar"": null
}




","{""id"":18,""web_url"":""http://gitlab.example.com/groups/test-5"",""name"":""test-5"",""path"":""test-5"",""description"":"""",""visibility"":""private"",""share_with_group_lock"":false,""require_two_factor_authentication"":false,""two_factor_grace_period"":48,""project_creation_level"":""developer"",""auto_devops_enabled"":null,""subgroup_creation_level"":""maintainer"",""emails_disabled"":false,""emails_enabled"":true,""mentions_disabled"":null,""lfs_enabled"":true,""default_branch_protection"":2,""default_branch_protection_defaults"":{},""avatar_url"":null,""request_access_enabled"":true,""full_name"":""test-5"",""full_path"":""test-5"",""created_at"":""2024-03-18T03:42:22.608Z"",""parent_id"":null,""shared_runners_setting"":""enabled"",""shared_with_groups"":[],""prevent_sharing_groups_outside_hierarchy"":false}",satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the subgroup_creation_level from the response
        subgroup_creation_level = latest_response.get(""subgroup_creation_level"", None)
        
        # Check if the subgroup_creation_level exists in the response
        if subgroup_creation_level is None:
            return 0
        
        # Define the allowed values for subgroup_creation_level
        allowed_values = [""owner"", ""maintainer""]
        
        # Verify if the subgroup_creation_level in the response is within the allowed values
        if subgroup_creation_level in allowed_values:
            return 1
        else:
            return -1
    except Exception as e:
        # In case of any unexpected error, return -1
        return -1
",owner,1,1,0,0,1,0,range of values
82,Group,lfs_enabled,,post-/groups,parameters,lfs_enabled,Enable/disable Large File Storage (LFS) for the projects in this group,c,False,TP,"{
  ""visibility"": ""private"",
  ""share_with_group_lock"": false,
  ""require_two_factor_authentication"": false,
  ""two_factor_grace_period"": 48,
  ""project_creation_level"": ""developer"",
  ""subgroup_creation_level"": ""maintainer"",
  ""lfs_enabled"": true,
  ""request_access_enabled"": true,
  ""default_branch_protection"": 2,
  ""name"": ""test-5"",
  ""path"": ""test-5"",
  ""description"": """",
  ""avatar"": null
}




","{""id"":18,""web_url"":""http://gitlab.example.com/groups/test-5"",""name"":""test-5"",""path"":""test-5"",""description"":"""",""visibility"":""private"",""share_with_group_lock"":false,""require_two_factor_authentication"":false,""two_factor_grace_period"":48,""project_creation_level"":""developer"",""auto_devops_enabled"":null,""subgroup_creation_level"":""maintainer"",""emails_disabled"":false,""emails_enabled"":true,""mentions_disabled"":null,""lfs_enabled"":true,""default_branch_protection"":2,""default_branch_protection_defaults"":{},""avatar_url"":null,""request_access_enabled"":true,""full_name"":""test-5"",""full_path"":""test-5"",""created_at"":""2024-03-18T03:42:22.608Z"",""parent_id"":null,""shared_runners_setting"":""enabled"",""shared_with_groups"":[],""prevent_sharing_groups_outside_hierarchy"":false}",satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'lfs_enabled' is in the response
        if 'lfs_enabled' not in latest_response:
            return 0
        
        # Check if 'lfs_enabled' in the response is a boolean
        if not isinstance(latest_response['lfs_enabled'], bool):
            return -1
        
        # Check if 'lfs_enabled' in the response matches the request parameter
        if 'lfs_enabled' in request_info:
            if latest_response['lfs_enabled'] != request_info['lfs_enabled']:
                return -1
        
        return 1
    except Exception as e:
        return -1
",True,1,1,0,0,1,0,"range of values, logic"
83,Group,request_access_enabled,,post-/groups,parameters,request_access_enabled,Allow users to request member access,c,False,TP,"{
  ""visibility"": ""private"",
  ""share_with_group_lock"": false,
  ""require_two_factor_authentication"": false,
  ""two_factor_grace_period"": 48,
  ""project_creation_level"": ""developer"",
  ""subgroup_creation_level"": ""maintainer"",
  ""lfs_enabled"": true,
  ""request_access_enabled"": true,
  ""default_branch_protection"": 2,
  ""name"": ""test-5"",
  ""path"": ""test-5"",
  ""description"": """",
  ""avatar"": null
}




",,,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'request_access_enabled' is in the response
        if 'request_access_enabled' not in latest_response:
            return 0
        
        # Check if the type of 'request_access_enabled' in the response is boolean
        if not isinstance(latest_response['request_access_enabled'], bool):
            return -1
        
        # Check if the 'request_access_enabled' in the response matches the request parameter
        if 'request_access_enabled' in request_info:
            request_value = request_info['request_access_enabled']
            # Convert request_value to boolean if it's a string representation
            if isinstance(request_value, str):
                request_value = request_value.lower() == 'true'
            if latest_response['request_access_enabled'] != request_value:
                return -1
        
        return 1
    except Exception as e:
        return -1
",False,1,1,0,0,1,0,logic
84,Group,default_branch_protection,,post-/groups,parameters,default_branch_protection,SeeOptions fordefault_branch_protection. Default to the global level default branch protection setting,c,False,TP,"{
  ""visibility"": ""private"",
  ""share_with_group_lock"": false,
  ""require_two_factor_authentication"": false,
  ""two_factor_grace_period"": 48,
  ""project_creation_level"": ""developer"",
  ""subgroup_creation_level"": ""maintainer"",
  ""lfs_enabled"": true,
  ""request_access_enabled"": true,
  ""default_branch_protection"": 2,
  ""name"": ""test-5"",
  ""path"": ""test-5"",
  ""description"": """",
  ""avatar"": null
}




","{""id"":18,""web_url"":""http://gitlab.example.com/groups/test-5"",""name"":""test-5"",""path"":""test-5"",""description"":"""",""visibility"":""private"",""share_with_group_lock"":false,""require_two_factor_authentication"":false,""two_factor_grace_period"":48,""project_creation_level"":""developer"",""auto_devops_enabled"":null,""subgroup_creation_level"":""maintainer"",""emails_disabled"":false,""emails_enabled"":true,""mentions_disabled"":null,""lfs_enabled"":true,""default_branch_protection"":2,""default_branch_protection_defaults"":{},""avatar_url"":null,""request_access_enabled"":true,""full_name"":""test-5"",""full_path"":""test-5"",""created_at"":""2024-03-18T03:42:22.608Z"",""parent_id"":null,""shared_runners_setting"":""enabled"",""shared_with_groups"":[],""prevent_sharing_groups_outside_hierarchy"":false}",satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the default_branch_protection value from the response
        response_value = latest_response.get(""default_branch_protection"", None)
        
        # Check if the value exists in the response
        if response_value is None:
            return 0
        
        # Verify the value is one of the allowed enum values
        if response_value in [0, 1, 2]:
            return 1
        else:
            return -1
    except Exception as e:
        # In case of any unexpected error, return -1
        return -1
",2,1,1,0,0,1,0,"range of values, logic"
85,Group,name,,post-/groups,requestBody,name,The name of the group,c,False,TP,"{
  ""visibility"": ""private"",
  ""share_with_group_lock"": false,
  ""require_two_factor_authentication"": false,
  ""two_factor_grace_period"": 48,
  ""project_creation_level"": ""developer"",
  ""subgroup_creation_level"": ""maintainer"",
  ""lfs_enabled"": true,
  ""request_access_enabled"": true,
  ""default_branch_protection"": 2,
  ""name"": ""test-5"",
  ""path"": ""test-5"",
  ""description"": """",
  ""avatar"": null
}




","{""id"":18,""web_url"":""http://gitlab.example.com/groups/test-5"",""name"":""test-5"",""path"":""test-5"",""description"":"""",""visibility"":""private"",""share_with_group_lock"":false,""require_two_factor_authentication"":false,""two_factor_grace_period"":48,""project_creation_level"":""developer"",""auto_devops_enabled"":null,""subgroup_creation_level"":""maintainer"",""emails_disabled"":false,""emails_enabled"":true,""mentions_disabled"":null,""lfs_enabled"":true,""default_branch_protection"":2,""default_branch_protection_defaults"":{},""avatar_url"":null,""request_access_enabled"":true,""full_name"":""test-5"",""full_path"":""test-5"",""created_at"":""2024-03-18T03:42:22.608Z"",""parent_id"":null,""shared_runners_setting"":""enabled"",""shared_with_groups"":[],""prevent_sharing_groups_outside_hierarchy"":false}",satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'name' exists in the response
        if 'name' not in latest_response:
            return 0
        
        # Check if 'name' is a string
        if not isinstance(latest_response['name'], str):
            return -1
        
        # If all checks pass
        return 1
    except Exception as e:
        # In case of any unexpected error
        return -1
",Foobar Group,1,1,0,0,1,0,logic
86,Group,path,,post-/groups,requestBody,path,The path of the group,c,False,TP,"{
  ""visibility"": ""private"",
  ""share_with_group_lock"": false,
  ""require_two_factor_authentication"": false,
  ""two_factor_grace_period"": 48,
  ""project_creation_level"": ""developer"",
  ""subgroup_creation_level"": ""maintainer"",
  ""lfs_enabled"": true,
  ""request_access_enabled"": true,
  ""default_branch_protection"": 2,
  ""name"": ""test-5"",
  ""path"": ""test-5"",
  ""description"": """",
  ""avatar"": null
}




","{""id"":18,""web_url"":""http://gitlab.example.com/groups/test-5"",""name"":""test-5"",""path"":""test-5"",""description"":"""",""visibility"":""private"",""share_with_group_lock"":false,""require_two_factor_authentication"":false,""two_factor_grace_period"":48,""project_creation_level"":""developer"",""auto_devops_enabled"":null,""subgroup_creation_level"":""maintainer"",""emails_disabled"":false,""emails_enabled"":true,""mentions_disabled"":null,""lfs_enabled"":true,""default_branch_protection"":2,""default_branch_protection_defaults"":{},""avatar_url"":null,""request_access_enabled"":true,""full_name"":""test-5"",""full_path"":""test-5"",""created_at"":""2024-03-18T03:42:22.608Z"",""parent_id"":null,""shared_runners_setting"":""enabled"",""shared_with_groups"":[],""prevent_sharing_groups_outside_hierarchy"":false}",satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'path' exists in the response
        if 'path' not in latest_response:
            return 0
        
        # Check if 'path' is a string
        if not isinstance(latest_response['path'], str):
            return -1
        
        # If all checks pass
        return 1
    except Exception as e:
        return -1
",foo-bar,1,1,0,0,1,0,logic
87,Group,description,,post-/groups,requestBody,description,The group's description,c,False,TP,"{
  ""visibility"": ""private"",
  ""share_with_group_lock"": false,
  ""require_two_factor_authentication"": false,
  ""two_factor_grace_period"": 48,
  ""project_creation_level"": ""developer"",
  ""subgroup_creation_level"": ""maintainer"",
  ""lfs_enabled"": true,
  ""request_access_enabled"": true,
  ""default_branch_protection"": 2,
  ""name"": ""test-5"",
  ""path"": ""test-5"",
  ""description"": """",
  ""avatar"": null
}




","{""id"":18,""web_url"":""http://gitlab.example.com/groups/test-5"",""name"":""test-5"",""path"":""test-5"",""description"":"""",""visibility"":""private"",""share_with_group_lock"":false,""require_two_factor_authentication"":false,""two_factor_grace_period"":48,""project_creation_level"":""developer"",""auto_devops_enabled"":null,""subgroup_creation_level"":""maintainer"",""emails_disabled"":false,""emails_enabled"":true,""mentions_disabled"":null,""lfs_enabled"":true,""default_branch_protection"":2,""default_branch_protection_defaults"":{},""avatar_url"":null,""request_access_enabled"":true,""full_name"":""test-5"",""full_path"":""test-5"",""created_at"":""2024-03-18T03:42:22.608Z"",""parent_id"":null,""shared_runners_setting"":""enabled"",""shared_with_groups"":[],""prevent_sharing_groups_outside_hierarchy"":false}",satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Check if 'description' exists in the response
        if 'description' not in latest_response:
            return 0
        
        # Check if 'description' is a string
        if not isinstance(latest_response['description'], str):
            return -1
        
        return 1
    except Exception as e:
        return -1
",An interesting group,1,1,0,0,1,0,logic
89,TimeEstimate,human_time_estimate,,post-/projects/{id}/issues/{issue_iid}/add_spent_time,parameters,duration,The duration in human format. e.g: 3h30m,c,True,TP,"{""duration"": ""1h30m"", ""id"": 9, ""issue_iid"": 1}","{""time_estimate"":0,""total_time_spent"":5400,""human_time_estimate"":null,""human_total_time_spent"":""1h 30m""}",mismatched,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the duration from the request_info
        duration = request_info.get(""duration"")
        if not duration:
            return -1  # duration is required but not provided in request_info

        # Extract the human_time_estimate from the latest_response
        human_time_estimate = latest_response.get(""human_time_estimate"")
        if human_time_estimate is None:
            return 0  # human_time_estimate is not present in the response

        # Verify that the human_time_estimate matches the duration
        if human_time_estimate == duration:
            return 1  # Constraint is satisfied
        else:
            return -1  # Constraint is not satisfied
    except Exception as e:
        return -1  # Any exception indicates the constraint is not satisfied
",3h30m,1,0,0,1,1,0,format
90,TimeEstimate,human_time_estimate,,post-/projects/{id}/issues/{issue_iid}/time_estimate,parameters,duration,The duration in human format. e.g: 3h30m,c,True,TP,"{""duration"": ""1h30m"", ""id"": 10, ""issue_iid"": 2}","{""time_estimate"":5400,""total_time_spent"":0,""human_time_estimate"":""1h 30m"",""human_total_time_spent"":null}",mismatched,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the duration from the request_info
        duration = request_info.get(""duration"")
        if not duration:
            return -1  # duration is required but not provided in request_info

        # Extract the human_time_estimate from the latest_response
        human_time_estimate = latest_response.get(""human_time_estimate"")
        if human_time_estimate is None:
            return 0  # human_time_estimate is not present in the response

        # Verify that the human_time_estimate matches the duration
        if human_time_estimate == duration:
            return 1  # Constraint is satisfied
        else:
            return -1  # Constraint is not satisfied
    except Exception as e:
        return -1  # Any exception indicates the constraint is not satisfied
",3h30m,1,0,1,0,1,0,format
91,MergeRequest,project_id,,get-/projects/{id}/issues/{issue_iid}/related_merge_requests,parameters,id,The ID or URL-encoded path of the project owned by the authenticated user,c,True,TP,"{""id"": 10, ""issue_iid"": 2}",[],satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the 'id' from the request_info
        project_id = int(request_info.get('id'))
        
        # Check if the response is a list of MergeRequest objects
        if not isinstance(latest_response, list):
            return 0
        
        # Verify the 'project_id' in each MergeRequest object
        for merge_request in latest_response:
            if 'project_id' not in merge_request:
                return 0
            if merge_request['project_id'] != project_id:
                return -1
        
        return 1
    except (ValueError, TypeError):
        return -1
",1,1,0,0,1,1,0,logic
92,MergeRequest,project_id,,get-/projects/{id}/issues/{issue_iid}/closed_by,parameters,id,The ID or URL-encoded path of the project owned by the authenticated user,c,True,TP,{},"[
  {
    ""id"": 6471,
    ""iid"": 6432,
    ""project_id"": 1,
    ""title"": ""add a test for cgi lexer options"",
    ""description"": ""closes #11"",
    ""state"": ""opened"",
    ""created_at"": ""2017-04-06T18:33:34.168Z"",
    ""updated_at"": ""2017-04-09T20:10:24.983Z"",
    ""target_branch"": ""main"",
    ""source_branch"": ""feature.custom-highlighting"",
    ""upvotes"": 0,
    ""downvotes"": 0,
    ""author"": {
      ""name"": ""Administrator"",
      ""username"": ""root"",
      ""id"": 1,
      ""state"": ""active"",
      ""avatar_url"": ""http://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80&d=identicon"",
      ""web_url"": ""https://gitlab.example.com/root""
    },
    ""assignee"": null,
    ""source_project_id"": 1,
    ""target_project_id"": 1,
    ""closed_at"": null,
    ""closed_by"": null,
    ""labels"": [],
    ""draft"": false,
    ""work_in_progress"": false,
    ""milestone"": null,
    ""merge_when_pipeline_succeeds"": false,
    ""merge_status"": ""unchecked"",
    ""sha"": ""5a62481d563af92b8e32d735f2fa63b94e806835"",
    ""merge_commit_sha"": null,
    ""squash_commit_sha"": null,
    ""user_notes_count"": 1,
    ""should_remove_source_branch"": null,
    ""force_remove_source_branch"": false,
    ""web_url"": ""https://gitlab.example.com/gitlab-org/gitlab-test/merge_requests/6432"",
    ""reference"": ""!6432"",
    ""references"": {
      ""short"": ""!6432"",
      ""relative"": ""!6432"",
      ""full"": ""gitlab-org/gitlab-test!6432""
    },
    ""time_stats"": {
      ""time_estimate"": 0,
      ""total_time_spent"": 0,
      ""human_time_estimate"": null,
      ""human_total_time_spent"": null
    }
  }
]
",satisfied,"def verify_latest_response(latest_response, request_info):
    try:
        # Extract the 'id' from the request_info
        project_id = int(request_info.get('id'))
        
        # Check if the response is a list of MergeRequest objects
        if not isinstance(latest_response, list):
            return 0
        
        # Verify the 'project_id' in each MergeRequest object
        for merge_request in latest_response:
            if 'project_id' not in merge_request:
                return 0
            if merge_request['project_id'] != project_id:
                return -1
        
        return 1
    except (ValueError, TypeError):
        return -1
",1,1,0,0,1,1,0,logic
