pptname,invariant,invariantType,variables,postmanAssertion,endpoint,tp,fp,enter,invariantDescription,Unnamed: 10,group,api
/groups&/groups&get&200%array():::EXIT,input.per_page >= size(return.array[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(input.per_page, size(return.array[..]))",pm.expect(input_per_page).to.be.at.least(return_array_size_array),get+groups,1,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,array,GitLab Groups API
/groups&/groups&get&200():::EXIT,return.statistics.job_artifacts_size == return.statistics.lfs_objects_size,daikon.inv.binary.twoScalar.IntEqual,"(return.statistics.job_artifacts_size, return.statistics.lfs_objects_size)",pm.expect(return_statistics_job_artifacts_size).to.eql(return_statistics_lfs_objects_size),get+groups,1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,statistics.job_artifacts_size,GitLab Groups API
/groups&/groups&get&200():::EXIT,return.statistics.job_artifacts_size == return.statistics.packages_size,daikon.inv.binary.twoScalar.IntEqual,"(return.statistics.job_artifacts_size, return.statistics.packages_size)",pm.expect(return_statistics_job_artifacts_size).to.eql(return_statistics_packages_size),get+groups,1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,statistics.job_artifacts_size,GitLab Groups API
/groups&/groups&get&200():::EXIT,return.statistics.job_artifacts_size == return.statistics.snippets_size,daikon.inv.binary.twoScalar.IntEqual,"(return.statistics.job_artifacts_size, return.statistics.snippets_size)",pm.expect(return_statistics_job_artifacts_size).to.eql(return_statistics_snippets_size),get+groups,1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,statistics.job_artifacts_size,GitLab Groups API
/groups&/groups&get&200():::EXIT,"return.auto_devops_enabled one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.auto_devops_enabled),"pm.expect([""false"", ""true""].includes(return_auto_devops_enabled)).to.be.true",get+groups,1,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,auto_devops_enabled,GitLab Groups API
/groups&/groups&get&200():::EXIT,LENGTH(return.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.created_at),pm.expect(return_created_at).to.have.length(24),get+groups,1,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,created_at,GitLab Groups API
/groups&/groups&get&200():::EXIT,return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.created_at),"pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+groups,1,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,created_at,GitLab Groups API
/groups&/groups&get&200():::EXIT,"return.default_branch_protection one of { 0, 1, 2 }",daikon.inv.unary.scalar.OneOfScalar,(return.default_branch_protection),"pm.expect([0, 1, 2].includes(return_default_branch_protection)).to.be.true",get+groups,1,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,default_branch_protection,GitLab Groups API
/groups&/groups&get&200():::EXIT,"return.emails_disabled one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.emails_disabled),"pm.expect([""false"", ""true""].includes(return_emails_disabled)).to.be.true",get+groups,1,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,emails_disabled,GitLab Groups API
/groups&/groups&get&200():::EXIT,"return.mentions_disabled one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.mentions_disabled),"pm.expect([""false"", ""true""].includes(return_mentions_disabled)).to.be.true",get+groups,1,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,mentions_disabled,GitLab Groups API
/groups&/groups&get&200():::EXIT,return.parent_id is Numeric,daikon.inv.unary.string.IsNumeric,(return.parent_id),"pm.expect(return_parent_id).to.match(/^[+-]{0,1}(0|([0-9](\d*|\d{0,2}(,\d{3})*)))?(\.\d*[0-9])?$/)",get+groups,1,,,Indicates that the characters of a string variable are always numeric. Represented as x is Numeric.,,parent_id,GitLab Groups API
/groups&/groups&get&200():::EXIT,"return.project_creation_level one of { ""developer"", ""maintainer"", ""noone"" }",daikon.inv.unary.string.OneOfString,(return.project_creation_level),"pm.expect([""developer"", ""maintainer"", ""noone""].includes(return_project_creation_level)).to.be.true",get+groups,1,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,project_creation_level,GitLab Groups API
/groups&/groups&get&200():::EXIT,return.statistics.job_artifacts_size == 0,daikon.inv.unary.scalar.OneOfScalar,(return.statistics.job_artifacts_size),pm.expect([0].includes(return_statistics_job_artifacts_size)).to.be.true,get+groups,1,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,statistics.job_artifacts_size,GitLab Groups API
/groups&/groups&get&200():::EXIT,return.statistics.repository_size >= 0,daikon.inv.unary.scalar.LowerBound,(return.statistics.repository_size),pm.expect(return_statistics_repository_size).to.be.at.least(0),get+groups,1,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,statistics.repository_size,GitLab Groups API
/groups&/groups&get&200():::EXIT,return.statistics.storage_size >= 0,daikon.inv.unary.scalar.LowerBound,(return.statistics.storage_size),pm.expect(return_statistics_storage_size).to.be.at.least(0),get+groups,1,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,statistics.storage_size,GitLab Groups API
/groups&/groups&get&200():::EXIT,return.statistics.wiki_size >= 0,daikon.inv.unary.scalar.LowerBound,(return.statistics.wiki_size),pm.expect(return_statistics_wiki_size).to.be.at.least(0),get+groups,1,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,statistics.wiki_size,GitLab Groups API
/groups&/groups&get&200():::EXIT,"return.subgroup_creation_level one of { ""maintainer"", ""owner"" }",daikon.inv.unary.string.OneOfString,(return.subgroup_creation_level),"pm.expect([""maintainer"", ""owner""].includes(return_subgroup_creation_level)).to.be.true",get+groups,1,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,subgroup_creation_level,GitLab Groups API
/groups&/groups&get&200():::EXIT,return.two_factor_grace_period >= 0,daikon.inv.unary.scalar.LowerBound,(return.two_factor_grace_period),pm.expect(return_two_factor_grace_period).to.be.at.least(0),get+groups,1,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,two_factor_grace_period,GitLab Groups API
/groups&/groups&get&200():::EXIT,"return.visibility one of { ""internal"", ""private"", ""public"" }",daikon.inv.unary.string.OneOfString,(return.visibility),"pm.expect([""internal"", ""private"", ""public""].includes(return_visibility)).to.be.true",get+groups,1,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,visibility,GitLab Groups API
/groups&/groups&get&200():::EXIT,return.default_branch_protection >= return.statistics.job_artifacts_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.default_branch_protection, return.statistics.job_artifacts_size)",pm.expect(return_default_branch_protection).to.be.at.least(return_statistics_job_artifacts_size),get+groups,1,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,statistics.job_artifacts_size,GitLab Groups API
/groups&/groups&get&200():::EXIT,return.name is a substring of return.full_name,daikon.inv.binary.twoString.StdString$SubString,"(return.full_name, return.name)",pm.expect(return_full_name.includes(return_name)).to.be.true,get+groups,1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,name,GitLab Groups API
/groups&/groups&get&200():::EXIT,return.path is a substring of return.full_path,daikon.inv.binary.twoString.StdString$SubString,"(return.full_path, return.path)",pm.expect(return_full_path.includes(return_path)).to.be.true,get+groups,1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,full_path,GitLab Groups API
/groups&/groups&get&200():::EXIT,return.full_path is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.full_path, return.web_url)",pm.expect(return_web_url.includes(return_full_path)).to.be.true,get+groups,1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,full_path,GitLab Groups API
/groups&/groups&get&200():::EXIT,return.statistics.job_artifacts_size <= return.statistics.repository_size,daikon.inv.binary.twoScalar.IntLessEqual,"(return.statistics.job_artifacts_size, return.statistics.repository_size)",pm.expect(return_statistics_job_artifacts_size).to.be.lte(return_statistics_repository_size),get+groups,1,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,statistics.job_artifacts_size,GitLab Groups API
/groups&/groups&get&200():::EXIT,return.statistics.job_artifacts_size <= return.statistics.storage_size,daikon.inv.binary.twoScalar.IntLessEqual,"(return.statistics.job_artifacts_size, return.statistics.storage_size)",pm.expect(return_statistics_job_artifacts_size).to.be.lte(return_statistics_storage_size),get+groups,1,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,statistics.storage_size,GitLab Groups API
/groups&/groups&get&200():::EXIT,return.statistics.job_artifacts_size <= return.statistics.wiki_size,daikon.inv.binary.twoScalar.IntLessEqual,"(return.statistics.job_artifacts_size, return.statistics.wiki_size)",pm.expect(return_statistics_job_artifacts_size).to.be.lte(return_statistics_wiki_size),get+groups,1,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,statistics.job_artifacts_size,GitLab Groups API
/groups&/groups&get&200():::EXIT,return.statistics.job_artifacts_size <= return.two_factor_grace_period,daikon.inv.binary.twoScalar.IntLessEqual,"(return.statistics.job_artifacts_size, return.two_factor_grace_period)",pm.expect(return_statistics_job_artifacts_size).to.be.lte(return_two_factor_grace_period),get+groups,1,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,statistics.job_artifacts_size,GitLab Groups API
/groups&/groups&get&200():::EXIT,return.statistics.repository_size <= return.statistics.storage_size,daikon.inv.binary.twoScalar.IntLessEqual,"(return.statistics.repository_size, return.statistics.storage_size)",pm.expect(return_statistics_repository_size).to.be.lte(return_statistics_storage_size),get+groups,1,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,statistics.storage_size,GitLab Groups API
/groups&/groups&get&200():::EXIT,return.statistics.repository_size >= return.statistics.wiki_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.repository_size, return.statistics.wiki_size)",pm.expect(return_statistics_repository_size).to.be.at.least(return_statistics_wiki_size),get+groups,1,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,statistics.repository_size,GitLab Groups API
/groups&/groups&get&200():::EXIT,return.statistics.storage_size >= return.statistics.wiki_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.storage_size, return.statistics.wiki_size)",pm.expect(return_statistics_storage_size).to.be.at.least(return_statistics_wiki_size),get+groups,1,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,statistics.storage_size,GitLab Groups API
/groups/{id}&/groups/{id}&get&200&projects():::EXIT,input.id == return.namespace.id,daikon.inv.binary.twoScalar.IntEqual,"(input.id, return.namespace.id)",pm.expect(input_id).to.eql(return_namespace_id),get+groups_{id},1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,projects.namespace.id,GitLab Groups API
/groups/{id}&/groups/{id}&get&200&projects():::EXIT,LENGTH(return.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.created_at),pm.expect(return_created_at).to.have.length(24),get+groups_{id},1,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,projects.created_at,GitLab Groups API
/groups/{id}&/groups/{id}&get&200&projects():::EXIT,return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.created_at),"pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+groups_{id},1,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,projects.created_at,GitLab Groups API
/groups/{id}&/groups/{id}&get&200&projects():::EXIT,LENGTH(return.last_activity_at)==24,daikon.inv.unary.string.FixedLengthString,(return.last_activity_at),pm.expect(return_last_activity_at).to.have.length(24),get+groups_{id},1,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,projects.last_activity_at,GitLab Groups API
/groups/{id}&/groups/{id}&get&200&projects():::EXIT,return.last_activity_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.last_activity_at),"pm.expect(return_last_activity_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+groups_{id},1,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,projects.last_activity_at,GitLab Groups API
/groups/{id}&/groups/{id}&get&200&projects():::EXIT,"return.namespace.kind == ""group""",daikon.inv.unary.string.OneOfString,(return.namespace.kind),"pm.expect([""group""].includes(return_namespace_kind)).to.be.true",get+groups_{id},1,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,projects.namespace.kind,GitLab Groups API
/groups/{id}&/groups/{id}&get&200&projects():::EXIT,LENGTH(return.namespace.kind)==5,daikon.inv.unary.string.FixedLengthString,(return.namespace.kind),pm.expect(return_namespace_kind).to.have.length(5),get+groups_{id},1,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,projects.namespace.kind,GitLab Groups API
/groups/{id}&/groups/{id}&get&200&projects():::EXIT,"return.merge_method one of { ""ff"", ""merge"", ""rebase_merge"" }",daikon.inv.unary.string.OneOfString,(return.merge_method),"pm.expect([""ff"", ""merge"", ""rebase_merge""].includes(return_merge_method)).to.be.true",get+groups_{id},1,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,projects.merge_method,GitLab Groups API
/groups/{id}&/groups/{id}&get&200&projects():::EXIT,"size(return.tag_list[]) one of { 0, 1 }",daikon.inv.unary.scalar.OneOfScalar,(size(return.tag_list[..])),"pm.expect([0, 1, 0].includes(return_tag_list_size_array)).to.be.true",get+groups_{id},1,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,projects.tag_list,GitLab Groups API
/groups/{id}&/groups/{id}&get&200&projects():::EXIT,return.default_branch is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.default_branch, return.readme_url)",pm.expect(return_readme_url.includes(return_default_branch)).to.be.true,get+groups_{id},1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,projects.default_branch,GitLab Groups API
/groups/{id}&/groups/{id}&get&200&projects():::EXIT,return.path_with_namespace is a substring of return.ssh_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.ssh_url_to_repo, return.path_with_namespace)",pm.expect(return_ssh_url_to_repo.includes(return_path_with_namespace)).to.be.true,get+groups_{id},1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,projects.path_with_namespace,GitLab Groups API
/groups/{id}&/groups/{id}&get&200&projects():::EXIT,return.web_url is a substring of return.http_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.http_url_to_repo, return.web_url)",pm.expect(return_http_url_to_repo.includes(return_web_url)).to.be.true,get+groups_{id},1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,projects.web_url,GitLab Groups API
/groups/{id}&/groups/{id}&get&200&projects():::EXIT,return.web_url is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.readme_url)",pm.expect(return_readme_url.includes(return_web_url)).to.be.true,get+groups_{id},1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,projects.web_url,GitLab Groups API
/groups/{id}&/groups/{id}&get&200&projects():::EXIT,return.path_with_namespace is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.path_with_namespace)",pm.expect(return_web_url.includes(return_path_with_namespace)).to.be.true,get+groups_{id},1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,projects.path_with_namespace,GitLab Groups API
/groups/{id}&/groups/{id}&get&200&projects():::EXIT,return.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.name, return.name_with_namespace)",pm.expect(return_name_with_namespace.includes(return_name)).to.be.true,get+groups_{id},1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,projects.name_with_namespace,GitLab Groups API
/groups/{id}&/groups/{id}&get&200&projects():::EXIT,return.namespace.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.name_with_namespace, return.namespace.name)",pm.expect(return_name_with_namespace.includes(return_namespace_name)).to.be.true,get+groups_{id},1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,projects.name_with_namespace,GitLab Groups API
/groups/{id}&/groups/{id}&get&200&projects():::EXIT,return.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path, return.path_with_namespace)",pm.expect(return_path_with_namespace.includes(return_path)).to.be.true,get+groups_{id},1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,projects.path_with_namespace,GitLab Groups API
/groups/{id}&/groups/{id}&get&200&projects():::EXIT,return.namespace.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path_with_namespace, return.namespace.path)",pm.expect(return_path_with_namespace.includes(return_namespace_path)).to.be.true,get+groups_{id},1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,projects.path_with_namespace,GitLab Groups API
/groups/{id}&/groups/{id}&get&200&projects():::EXIT,return._links.self is a substring of return._links.issues,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.issues)",pm.expect(return__links_issues.includes(return__links_self)).to.be.true,get+groups_{id},1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,projects._links.self,GitLab Groups API
/groups/{id}&/groups/{id}&get&200&projects():::EXIT,return._links.self is a substring of return._links.merge_requests,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.merge_requests)",pm.expect(return__links_merge_requests.includes(return__links_self)).to.be.true,get+groups_{id},1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,projects._links.self,GitLab Groups API
/groups/{id}&/groups/{id}&get&200&projects():::EXIT,return._links.self is a substring of return._links.repo_branches,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.repo_branches)",pm.expect(return__links_repo_branches.includes(return__links_self)).to.be.true,get+groups_{id},1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,projects._links.self,GitLab Groups API
/groups/{id}&/groups/{id}&get&200&projects():::EXIT,return._links.self is a substring of return._links.labels,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.labels)",pm.expect(return__links_labels.includes(return__links_self)).to.be.true,get+groups_{id},1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,projects._links.self,GitLab Groups API
/groups/{id}&/groups/{id}&get&200&projects():::EXIT,return._links.self is a substring of return._links.events,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.events)",pm.expect(return__links_events.includes(return__links_self)).to.be.true,get+groups_{id},1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,projects._links.self,GitLab Groups API
/groups/{id}&/groups/{id}&get&200&projects():::EXIT,return._links.self is a substring of return._links.members,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.members)",pm.expect(return__links_members.includes(return__links_self)).to.be.true,get+groups_{id},1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,projects._links.self,GitLab Groups API
/groups/{id}&/groups/{id}&get&200():::EXIT,input.id == return.id,daikon.inv.binary.twoScalar.IntEqual,"(input.id, return.id)",pm.expect(input_id).to.eql(return_id),get+groups_{id},1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,id,GitLab Groups API
/groups/{id}&/groups/{id}&get&200():::EXIT,LENGTH(return.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.created_at),pm.expect(return_created_at).to.have.length(24),get+groups_{id},1,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,created_at,GitLab Groups API
/groups/{id}&/groups/{id}&get&200():::EXIT,return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.created_at),"pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+groups_{id},1,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,created_at,GitLab Groups API
/groups/{id}&/groups/{id}&get&200():::EXIT,"return.visibility one of { ""internal"", ""private"", ""public"" }",daikon.inv.unary.string.OneOfString,(return.visibility),"pm.expect([""internal"", ""private"", ""public""].includes(return_visibility)).to.be.true",get+groups_{id},1,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,visibility,GitLab Groups API
/groups/{id}&/groups/{id}&get&200():::EXIT,return.full_path is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.full_path, return.web_url)",pm.expect(return_web_url.includes(return_full_path)).to.be.true,get+groups_{id},1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,full_path,GitLab Groups API
/groups/{id}&/groups/{id}&get&200():::EXIT,size(return.projects[]) >= size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(size(return.projects[..]), size(return.shared_with_groups[..]))",pm.expect(return_projects_size_array).to.be.at.least(return_shared_with_groups_size_array),get+groups_{id},1,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,projects,GitLab Groups API
/groups/{id}&/groups/{id}&get&200():::EXIT,size(return.shared_projects[]) >= size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(size(return.shared_projects[..]), size(return.shared_with_groups[..]))",pm.expect(return_shared_projects_size_array).to.be.at.least(return_shared_with_groups_size_array),get+groups_{id},1,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,shared_projects,GitLab Groups API
/groups/{id}/descendant_groups&/groups/{id}/descendant_groups&get&200%array():::EXIT,input.per_page >= size(return.array[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(input.per_page, size(return.array[..]))",pm.expect(input_per_page).to.be.at.least(return_array_size_array),get+groups_{id}_descendant_groups,1,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,array,GitLab Groups API
/groups/{id}/descendant_groups&/groups/{id}/descendant_groups&get&200():::EXIT,return.statistics.job_artifacts_size == return.statistics.lfs_objects_size,daikon.inv.binary.twoScalar.IntEqual,"(return.statistics.job_artifacts_size, return.statistics.lfs_objects_size)",pm.expect(return_statistics_job_artifacts_size).to.eql(return_statistics_lfs_objects_size),get+groups_{id}_descendant_groups,1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,statistics.job_artifacts_size,GitLab Groups API
/groups/{id}/descendant_groups&/groups/{id}/descendant_groups&get&200():::EXIT,return.statistics.job_artifacts_size == return.statistics.packages_size,daikon.inv.binary.twoScalar.IntEqual,"(return.statistics.job_artifacts_size, return.statistics.packages_size)",pm.expect(return_statistics_job_artifacts_size).to.eql(return_statistics_packages_size),get+groups_{id}_descendant_groups,1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,statistics.job_artifacts_size,GitLab Groups API
/groups/{id}/descendant_groups&/groups/{id}/descendant_groups&get&200():::EXIT,return.statistics.job_artifacts_size == return.statistics.snippets_size,daikon.inv.binary.twoScalar.IntEqual,"(return.statistics.job_artifacts_size, return.statistics.snippets_size)",pm.expect(return_statistics_job_artifacts_size).to.eql(return_statistics_snippets_size),get+groups_{id}_descendant_groups,1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,statistics.job_artifacts_size,GitLab Groups API
/groups/{id}/descendant_groups&/groups/{id}/descendant_groups&get&200():::EXIT,"return.auto_devops_enabled one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.auto_devops_enabled),"pm.expect([""false"", ""true""].includes(return_auto_devops_enabled)).to.be.true",get+groups_{id}_descendant_groups,1,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,auto_devops_enabled,GitLab Groups API
/groups/{id}/descendant_groups&/groups/{id}/descendant_groups&get&200():::EXIT,LENGTH(return.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.created_at),pm.expect(return_created_at).to.have.length(24),get+groups_{id}_descendant_groups,1,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,created_at,GitLab Groups API
/groups/{id}/descendant_groups&/groups/{id}/descendant_groups&get&200():::EXIT,return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.created_at),"pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+groups_{id}_descendant_groups,1,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,created_at,GitLab Groups API
/groups/{id}/descendant_groups&/groups/{id}/descendant_groups&get&200():::EXIT,"return.default_branch_protection one of { 0, 1, 2 }",daikon.inv.unary.scalar.OneOfScalar,(return.default_branch_protection),"pm.expect([0, 1, 2].includes(return_default_branch_protection)).to.be.true",get+groups_{id}_descendant_groups,1,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,default_branch_protection,GitLab Groups API
/groups/{id}/descendant_groups&/groups/{id}/descendant_groups&get&200():::EXIT,"return.emails_disabled one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.emails_disabled),"pm.expect([""false"", ""true""].includes(return_emails_disabled)).to.be.true",get+groups_{id}_descendant_groups,1,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,emails_disabled,GitLab Groups API
/groups/{id}/descendant_groups&/groups/{id}/descendant_groups&get&200():::EXIT,"return.mentions_disabled one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.mentions_disabled),"pm.expect([""false"", ""true""].includes(return_mentions_disabled)).to.be.true",get+groups_{id}_descendant_groups,1,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,mentions_disabled,GitLab Groups API
/groups/{id}/descendant_groups&/groups/{id}/descendant_groups&get&200():::EXIT,return.parent_id is Numeric,daikon.inv.unary.string.IsNumeric,(return.parent_id),"pm.expect(return_parent_id).to.match(/^[+-]{0,1}(0|([0-9](\d*|\d{0,2}(,\d{3})*)))?(\.\d*[0-9])?$/)",get+groups_{id}_descendant_groups,1,,,Indicates that the characters of a string variable are always numeric. Represented as x is Numeric.,,parent_id,GitLab Groups API
/groups/{id}/descendant_groups&/groups/{id}/descendant_groups&get&200():::EXIT,"return.project_creation_level one of { ""developer"", ""maintainer"", ""noone"" }",daikon.inv.unary.string.OneOfString,(return.project_creation_level),"pm.expect([""developer"", ""maintainer"", ""noone""].includes(return_project_creation_level)).to.be.true",get+groups_{id}_descendant_groups,1,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,project_creation_level,GitLab Groups API
/groups/{id}/descendant_groups&/groups/{id}/descendant_groups&get&200():::EXIT,return.statistics.job_artifacts_size == 0,daikon.inv.unary.scalar.OneOfScalar,(return.statistics.job_artifacts_size),pm.expect([0].includes(return_statistics_job_artifacts_size)).to.be.true,get+groups_{id}_descendant_groups,1,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,statistics.job_artifacts_size,GitLab Groups API
/groups/{id}/descendant_groups&/groups/{id}/descendant_groups&get&200():::EXIT,return.statistics.repository_size >= 0,daikon.inv.unary.scalar.LowerBound,(return.statistics.repository_size),pm.expect(return_statistics_repository_size).to.be.at.least(0),get+groups_{id}_descendant_groups,1,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,statistics.repository_size,GitLab Groups API
/groups/{id}/descendant_groups&/groups/{id}/descendant_groups&get&200():::EXIT,return.statistics.storage_size >= 0,daikon.inv.unary.scalar.LowerBound,(return.statistics.storage_size),pm.expect(return_statistics_storage_size).to.be.at.least(0),get+groups_{id}_descendant_groups,1,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,statistics.storage_size,GitLab Groups API
/groups/{id}/descendant_groups&/groups/{id}/descendant_groups&get&200():::EXIT,return.statistics.wiki_size >= 0,daikon.inv.unary.scalar.LowerBound,(return.statistics.wiki_size),pm.expect(return_statistics_wiki_size).to.be.at.least(0),get+groups_{id}_descendant_groups,1,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,statistics.wiki_size,GitLab Groups API
/groups/{id}/descendant_groups&/groups/{id}/descendant_groups&get&200():::EXIT,"return.subgroup_creation_level one of { ""maintainer"", ""owner"" }",daikon.inv.unary.string.OneOfString,(return.subgroup_creation_level),"pm.expect([""maintainer"", ""owner""].includes(return_subgroup_creation_level)).to.be.true",get+groups_{id}_descendant_groups,1,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,subgroup_creation_level,GitLab Groups API
/groups/{id}/descendant_groups&/groups/{id}/descendant_groups&get&200():::EXIT,return.two_factor_grace_period >= 0,daikon.inv.unary.scalar.LowerBound,(return.two_factor_grace_period),pm.expect(return_two_factor_grace_period).to.be.at.least(0),get+groups_{id}_descendant_groups,1,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,two_factor_grace_period,GitLab Groups API
/groups/{id}/descendant_groups&/groups/{id}/descendant_groups&get&200():::EXIT,"return.visibility one of { ""internal"", ""private"" }",daikon.inv.unary.string.OneOfString,(return.visibility),"pm.expect([""internal"", ""private""].includes(return_visibility)).to.be.true",get+groups_{id}_descendant_groups,1,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,visibility,GitLab Groups API
/groups/{id}/descendant_groups&/groups/{id}/descendant_groups&get&200():::EXIT,input.id < return.id,daikon.inv.binary.twoScalar.IntLessThan,"(input.id, return.id)",pm.expect(input_id).to.be.lessThan(return_id),get+groups_{id}_descendant_groups,1,,,Represents an invariant of < between two long scalars. Prints as x < y.,,id,GitLab Groups API
/groups/{id}/descendant_groups&/groups/{id}/descendant_groups&get&200():::EXIT,input.skip_groups[] elements == input.skip_groups[return.statistics.job_artifacts_size],daikon.inv.binary.sequenceScalar.SeqIntEqual,"(input.skip_groups[..], input.skip_groups[return.statistics.job_artifacts_size])",pm.expect(input_skip_groups_array.every(element => element == input_skip_groups_return_statistics_job_artifacts_size)).to.be.true,get+groups_{id}_descendant_groups,1,,,Represents an invariant between a long scalar and a a sequence of long values. Prints as x[] elements == y where x is a long sequence and y is a long scalar.,,input.skip_groups[statistics.job_artifacts_size],GitLab Groups API
/groups/{id}/descendant_groups&/groups/{id}/descendant_groups&get&200():::EXIT,return.default_branch_protection >= return.statistics.job_artifacts_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.default_branch_protection, return.statistics.job_artifacts_size)",pm.expect(return_default_branch_protection).to.be.at.least(return_statistics_job_artifacts_size),get+groups_{id}_descendant_groups,1,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,statistics.job_artifacts_size,GitLab Groups API
/groups/{id}/descendant_groups&/groups/{id}/descendant_groups&get&200():::EXIT,return.name is a substring of return.full_name,daikon.inv.binary.twoString.StdString$SubString,"(return.full_name, return.name)",pm.expect(return_full_name.includes(return_name)).to.be.true,get+groups_{id}_descendant_groups,1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,name,GitLab Groups API
/groups/{id}/descendant_groups&/groups/{id}/descendant_groups&get&200():::EXIT,return.path is a substring of return.full_path,daikon.inv.binary.twoString.StdString$SubString,"(return.full_path, return.path)",pm.expect(return_full_path.includes(return_path)).to.be.true,get+groups_{id}_descendant_groups,1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,full_path,GitLab Groups API
/groups/{id}/descendant_groups&/groups/{id}/descendant_groups&get&200():::EXIT,return.full_path is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.full_path, return.web_url)",pm.expect(return_web_url.includes(return_full_path)).to.be.true,get+groups_{id}_descendant_groups,1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,full_path,GitLab Groups API
/groups/{id}/descendant_groups&/groups/{id}/descendant_groups&get&200():::EXIT,return.statistics.job_artifacts_size <= return.statistics.repository_size,daikon.inv.binary.twoScalar.IntLessEqual,"(return.statistics.job_artifacts_size, return.statistics.repository_size)",pm.expect(return_statistics_job_artifacts_size).to.be.lte(return_statistics_repository_size),get+groups_{id}_descendant_groups,1,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,statistics.job_artifacts_size,GitLab Groups API
/groups/{id}/descendant_groups&/groups/{id}/descendant_groups&get&200():::EXIT,return.statistics.job_artifacts_size <= return.statistics.storage_size,daikon.inv.binary.twoScalar.IntLessEqual,"(return.statistics.job_artifacts_size, return.statistics.storage_size)",pm.expect(return_statistics_job_artifacts_size).to.be.lte(return_statistics_storage_size),get+groups_{id}_descendant_groups,1,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,statistics.storage_size,GitLab Groups API
/groups/{id}/descendant_groups&/groups/{id}/descendant_groups&get&200():::EXIT,return.statistics.job_artifacts_size <= return.statistics.wiki_size,daikon.inv.binary.twoScalar.IntLessEqual,"(return.statistics.job_artifacts_size, return.statistics.wiki_size)",pm.expect(return_statistics_job_artifacts_size).to.be.lte(return_statistics_wiki_size),get+groups_{id}_descendant_groups,1,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,statistics.job_artifacts_size,GitLab Groups API
/groups/{id}/descendant_groups&/groups/{id}/descendant_groups&get&200():::EXIT,return.statistics.job_artifacts_size <= return.two_factor_grace_period,daikon.inv.binary.twoScalar.IntLessEqual,"(return.statistics.job_artifacts_size, return.two_factor_grace_period)",pm.expect(return_statistics_job_artifacts_size).to.be.lte(return_two_factor_grace_period),get+groups_{id}_descendant_groups,1,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,statistics.job_artifacts_size,GitLab Groups API
/groups/{id}/descendant_groups&/groups/{id}/descendant_groups&get&200():::EXIT,return.statistics.repository_size <= return.statistics.storage_size,daikon.inv.binary.twoScalar.IntLessEqual,"(return.statistics.repository_size, return.statistics.storage_size)",pm.expect(return_statistics_repository_size).to.be.lte(return_statistics_storage_size),get+groups_{id}_descendant_groups,1,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,statistics.storage_size,GitLab Groups API
/groups/{id}/descendant_groups&/groups/{id}/descendant_groups&get&200():::EXIT,return.statistics.repository_size >= return.statistics.wiki_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.repository_size, return.statistics.wiki_size)",pm.expect(return_statistics_repository_size).to.be.at.least(return_statistics_wiki_size),get+groups_{id}_descendant_groups,1,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,statistics.repository_size,GitLab Groups API
/groups/{id}/descendant_groups&/groups/{id}/descendant_groups&get&200():::EXIT,return.statistics.storage_size >= return.statistics.wiki_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.storage_size, return.statistics.wiki_size)",pm.expect(return_statistics_storage_size).to.be.at.least(return_statistics_wiki_size),get+groups_{id}_descendant_groups,1,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,statistics.storage_size,GitLab Groups API
/groups/{id}/hooks&/groups/{id}/hooks&get&200():::EXIT,input.id == return.group_id,daikon.inv.binary.twoScalar.IntEqual,"(input.id, return.group_id)",pm.expect(input_id).to.eql(return_group_id),get+groups_{id}_hooks,1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,group_id,GitLab Groups API
/groups/{id}/hooks&/groups/{id}/hooks&get&200():::EXIT,LENGTH(return.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.created_at),pm.expect(return_created_at).to.have.length(24),get+groups_{id}_hooks,1,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,created_at,GitLab Groups API
/groups/{id}/hooks&/groups/{id}/hooks&get&200():::EXIT,return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.created_at),"pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+groups_{id}_hooks,1,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,created_at,GitLab Groups API
/groups/{id}/hooks/{hook_id}&/groups/{id}/hooks/{hook_id}&get&200():::EXIT,input.hook_id == return.id,daikon.inv.binary.twoScalar.IntEqual,"(input.hook_id, return.id)",pm.expect(input_hook_id).to.eql(return_id),get+groups_{id}_hooks_{hook_id},1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,id,GitLab Groups API
/groups/{id}/hooks/{hook_id}&/groups/{id}/hooks/{hook_id}&get&200():::EXIT,input.id == return.group_id,daikon.inv.binary.twoScalar.IntEqual,"(input.id, return.group_id)",pm.expect(input_id).to.eql(return_group_id),get+groups_{id}_hooks_{hook_id},1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,group_id,GitLab Groups API
/groups/{id}/hooks/{hook_id}&/groups/{id}/hooks/{hook_id}&get&200():::EXIT,LENGTH(return.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.created_at),pm.expect(return_created_at).to.have.length(24),get+groups_{id}_hooks_{hook_id},1,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,created_at,GitLab Groups API
/groups/{id}/hooks/{hook_id}&/groups/{id}/hooks/{hook_id}&get&200():::EXIT,return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.created_at),"pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+groups_{id}_hooks_{hook_id},1,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,created_at,GitLab Groups API
/groups/{id}/projects&/groups/{id}/projects&get&200():::EXIT,input.archived == return.archived,daikon.inv.binary.twoScalar.IntEqual,"(input.archived, return.archived)",pm.expect(input_archived).to.eql(return_archived),get+groups_{id}_projects,1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,archived,GitLab Groups API
/groups/{id}/projects&/groups/{id}/projects&get&200():::EXIT,input.visibility == return.visibility,daikon.inv.binary.twoString.StringEqual,"(input.visibility, return.visibility)",pm.expect(input_visibility).to.eql(return_visibility),get+groups_{id}_projects,1,,,Represents an invariant of == between two String scalars. Prints as x == y.,,visibility,GitLab Groups API
/groups/{id}/projects&/groups/{id}/projects&get&200():::EXIT,input.simple == return.resolve_outdated_diff_discussions,daikon.inv.binary.twoScalar.IntEqual,"(input.simple, return.resolve_outdated_diff_discussions)",pm.expect(input_simple).to.eql(return_resolve_outdated_diff_discussions),get+groups_{id}_projects,1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,resolve_outdated_diff_discussions,GitLab Groups API
/groups/{id}/projects&/groups/{id}/projects&get&200():::EXIT,return.wiki_enabled == return.allow_merge_on_skipped_pipeline,daikon.inv.binary.twoScalar.IntEqual,"(return.wiki_enabled, return.allow_merge_on_skipped_pipeline)",pm.expect(return_wiki_enabled).to.eql(return_allow_merge_on_skipped_pipeline),get+groups_{id}_projects,1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,wiki_enabled,GitLab Groups API
/groups/{id}/projects&/groups/{id}/projects&get&200():::EXIT,return.open_issues_count == 0,daikon.inv.unary.scalar.OneOfScalar,(return.open_issues_count),pm.expect([0].includes(return_open_issues_count)).to.be.true,get+groups_{id}_projects,1,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,open_issues_count,GitLab Groups API
/groups/{id}/projects&/groups/{id}/projects&get&200():::EXIT,LENGTH(return.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.created_at),pm.expect(return_created_at).to.have.length(24),get+groups_{id}_projects,1,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,created_at,GitLab Groups API
/groups/{id}/projects&/groups/{id}/projects&get&200():::EXIT,return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.created_at),"pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+groups_{id}_projects,1,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,created_at,GitLab Groups API
/groups/{id}/projects&/groups/{id}/projects&get&200():::EXIT,LENGTH(return.last_activity_at)==24,daikon.inv.unary.string.FixedLengthString,(return.last_activity_at),pm.expect(return_last_activity_at).to.have.length(24),get+groups_{id}_projects,1,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,last_activity_at,GitLab Groups API
/groups/{id}/projects&/groups/{id}/projects&get&200():::EXIT,return.last_activity_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.last_activity_at),"pm.expect(return_last_activity_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+groups_{id}_projects,1,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,last_activity_at,GitLab Groups API
/groups/{id}/projects&/groups/{id}/projects&get&200():::EXIT,return.creator_id >= 1,daikon.inv.unary.scalar.LowerBound,(return.creator_id),pm.expect(return_creator_id).to.be.at.least(1),get+groups_{id}_projects,1,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,creator_id,GitLab Groups API
/groups/{id}/projects&/groups/{id}/projects&get&200():::EXIT,"return.namespace.kind one of { ""group"", ""user"" }",daikon.inv.unary.string.OneOfString,(return.namespace.kind),"pm.expect([""group"", ""user""].includes(return_namespace_kind)).to.be.true",get+groups_{id}_projects,1,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,namespace.kind,GitLab Groups API
/groups/{id}/projects&/groups/{id}/projects&get&200():::EXIT,"return.import_status one of { ""finished"", ""none"" }",daikon.inv.unary.string.OneOfString,(return.import_status),"pm.expect([""finished"", ""none""].includes(return_import_status)).to.be.true",get+groups_{id}_projects,1,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,import_status,GitLab Groups API
/groups/{id}/projects&/groups/{id}/projects&get&200():::EXIT,return.forks_count >= 0,daikon.inv.unary.scalar.LowerBound,(return.forks_count),pm.expect(return_forks_count).to.be.at.least(0),get+groups_{id}_projects,1,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,forks_count,GitLab Groups API
/groups/{id}/projects&/groups/{id}/projects&get&200():::EXIT,return.star_count >= 0,daikon.inv.unary.scalar.LowerBound,(return.star_count),pm.expect(return_star_count).to.be.at.least(0),get+groups_{id}_projects,1,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,star_count,GitLab Groups API
/groups/{id}/projects&/groups/{id}/projects&get&200():::EXIT,"return.merge_method one of { ""ff"", ""merge"", ""rebase_merge"" }",daikon.inv.unary.string.OneOfString,(return.merge_method),"pm.expect([""ff"", ""merge"", ""rebase_merge""].includes(return_merge_method)).to.be.true",get+groups_{id}_projects,1,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,merge_method,GitLab Groups API
/groups/{id}/projects&/groups/{id}/projects&get&200():::EXIT,"size(return.tag_list[]) one of { 0, 1, 2 }",daikon.inv.unary.scalar.OneOfScalar,(size(return.tag_list[..])),"pm.expect([0, 1, 2].includes(return_tag_list_size_array)).to.be.true",get+groups_{id}_projects,1,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,tag_list,GitLab Groups API
/groups/{id}/projects&/groups/{id}/projects&get&200():::EXIT,"size(return.shared_with_groups[]) one of { 0, 1 }",daikon.inv.unary.scalar.OneOfScalar,(size(return.shared_with_groups[..])),"pm.expect([0, 1, 0].includes(return_shared_with_groups_size_array)).to.be.true",get+groups_{id}_projects,1,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,shared_with_groups,GitLab Groups API
/groups/{id}/projects&/groups/{id}/projects&get&200():::EXIT,input.per_page > return.creator_id,daikon.inv.binary.twoScalar.IntGreaterThan,"(input.per_page, return.creator_id)",pm.expect(input_per_page).to.be.greaterThan(return_creator_id),get+groups_{id}_projects,1,,,Represents an invariant of > between two long scalars. Prints as x > y.,,creator_id,GitLab Groups API
/groups/{id}/projects&/groups/{id}/projects&get&200():::EXIT,return.default_branch is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.default_branch, return.readme_url)",pm.expect(return_readme_url.includes(return_default_branch)).to.be.true,get+groups_{id}_projects,1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,default_branch,GitLab Groups API
/groups/{id}/projects&/groups/{id}/projects&get&200():::EXIT,return.path_with_namespace is a substring of return.ssh_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.ssh_url_to_repo, return.path_with_namespace)",pm.expect(return_ssh_url_to_repo.includes(return_path_with_namespace)).to.be.true,get+groups_{id}_projects,1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Groups API
/groups/{id}/projects&/groups/{id}/projects&get&200():::EXIT,return.web_url is a substring of return.http_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.http_url_to_repo, return.web_url)",pm.expect(return_http_url_to_repo.includes(return_web_url)).to.be.true,get+groups_{id}_projects,1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,web_url,GitLab Groups API
/groups/{id}/projects&/groups/{id}/projects&get&200():::EXIT,return.web_url is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.readme_url)",pm.expect(return_readme_url.includes(return_web_url)).to.be.true,get+groups_{id}_projects,1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,web_url,GitLab Groups API
/groups/{id}/projects&/groups/{id}/projects&get&200():::EXIT,return.path_with_namespace is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.path_with_namespace)",pm.expect(return_web_url.includes(return_path_with_namespace)).to.be.true,get+groups_{id}_projects,1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Groups API
/groups/{id}/projects&/groups/{id}/projects&get&200():::EXIT,return.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.name, return.name_with_namespace)",pm.expect(return_name_with_namespace.includes(return_name)).to.be.true,get+groups_{id}_projects,1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,name_with_namespace,GitLab Groups API
/groups/{id}/projects&/groups/{id}/projects&get&200():::EXIT,return.namespace.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.name_with_namespace, return.namespace.name)",pm.expect(return_name_with_namespace.includes(return_namespace_name)).to.be.true,get+groups_{id}_projects,1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,name_with_namespace,GitLab Groups API
/groups/{id}/projects&/groups/{id}/projects&get&200():::EXIT,return.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path, return.path_with_namespace)",pm.expect(return_path_with_namespace.includes(return_path)).to.be.true,get+groups_{id}_projects,1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Groups API
/groups/{id}/projects&/groups/{id}/projects&get&200():::EXIT,return.namespace.full_path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path_with_namespace, return.namespace.full_path)",pm.expect(return_path_with_namespace.includes(return_namespace_full_path)).to.be.true,get+groups_{id}_projects,1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Groups API
/groups/{id}/projects&/groups/{id}/projects&get&200():::EXIT,return.open_issues_count <= return.forks_count,daikon.inv.binary.twoScalar.IntLessEqual,"(return.open_issues_count, return.forks_count)",pm.expect(return_open_issues_count).to.be.lte(return_forks_count),get+groups_{id}_projects,1,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,open_issues_count,GitLab Groups API
/groups/{id}/projects&/groups/{id}/projects&get&200():::EXIT,return.open_issues_count <= return.star_count,daikon.inv.binary.twoScalar.IntLessEqual,"(return.open_issues_count, return.star_count)",pm.expect(return_open_issues_count).to.be.lte(return_star_count),get+groups_{id}_projects,1,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,open_issues_count,GitLab Groups API
/groups/{id}/projects&/groups/{id}/projects&get&200():::EXIT,return.open_issues_count <= size(return.tag_list[]),daikon.inv.binary.twoScalar.IntLessEqual,"(return.open_issues_count, size(return.tag_list[..]))",pm.expect(return_open_issues_count).to.be.lte(return_tag_list_size_array),get+groups_{id}_projects,1,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,tag_list,GitLab Groups API
/groups/{id}/projects&/groups/{id}/projects&get&200():::EXIT,return.open_issues_count <= size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntLessEqual,"(return.open_issues_count, size(return.shared_with_groups[..]))",pm.expect(return_open_issues_count).to.be.lte(return_shared_with_groups_size_array),get+groups_{id}_projects,1,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,open_issues_count,GitLab Groups API
/groups/{id}/projects&/groups/{id}/projects&get&200():::EXIT,return.creator_id <= return.namespace.id,daikon.inv.binary.twoScalar.IntLessEqual,"(return.creator_id, return.namespace.id)",pm.expect(return_creator_id).to.be.lte(return_namespace_id),get+groups_{id}_projects,1,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,creator_id,GitLab Groups API
/groups/{id}/projects&/groups/{id}/projects&get&200():::EXIT,return.creator_id >= size(return.tag_list[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.creator_id, size(return.tag_list[..]))",pm.expect(return_creator_id).to.be.at.least(return_tag_list_size_array),get+groups_{id}_projects,1,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,tag_list,GitLab Groups API
/groups/{id}/projects&/groups/{id}/projects&get&200():::EXIT,return.creator_id >= size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.creator_id, size(return.shared_with_groups[..]))",pm.expect(return_creator_id).to.be.at.least(return_shared_with_groups_size_array),get+groups_{id}_projects,1,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,creator_id,GitLab Groups API
/groups/{id}/projects&/groups/{id}/projects&get&200():::EXIT,return.namespace.id >= size(return.tag_list[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.namespace.id, size(return.tag_list[..]))",pm.expect(return_namespace_id).to.be.at.least(return_tag_list_size_array),get+groups_{id}_projects,1,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,tag_list,GitLab Groups API
/groups/{id}/projects&/groups/{id}/projects&get&200():::EXIT,return.namespace.id >= size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.namespace.id, size(return.shared_with_groups[..]))",pm.expect(return_namespace_id).to.be.at.least(return_shared_with_groups_size_array),get+groups_{id}_projects,1,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,namespace.id,GitLab Groups API
/groups/{id}/projects&/groups/{id}/projects&get&200():::EXIT,return.namespace.path is a substring of return.namespace.full_path,daikon.inv.binary.twoString.StdString$SubString,"(return.namespace.path, return.namespace.full_path)",pm.expect(return_namespace_full_path.includes(return_namespace_path)).to.be.true,get+groups_{id}_projects,1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,namespace.path,GitLab Groups API
/groups/{id}/projects&/groups/{id}/projects&get&200():::EXIT,return._links.self is a substring of return._links.issues,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.issues)",pm.expect(return__links_issues.includes(return__links_self)).to.be.true,get+groups_{id}_projects,1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Groups API
/groups/{id}/projects&/groups/{id}/projects&get&200():::EXIT,return._links.self is a substring of return._links.merge_requests,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.merge_requests)",pm.expect(return__links_merge_requests.includes(return__links_self)).to.be.true,get+groups_{id}_projects,1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Groups API
/groups/{id}/projects&/groups/{id}/projects&get&200():::EXIT,return._links.self is a substring of return._links.repo_branches,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.repo_branches)",pm.expect(return__links_repo_branches.includes(return__links_self)).to.be.true,get+groups_{id}_projects,1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Groups API
/groups/{id}/projects&/groups/{id}/projects&get&200():::EXIT,return._links.self is a substring of return._links.labels,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.labels)",pm.expect(return__links_labels.includes(return__links_self)).to.be.true,get+groups_{id}_projects,1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Groups API
/groups/{id}/projects&/groups/{id}/projects&get&200():::EXIT,return._links.self is a substring of return._links.events,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.events)",pm.expect(return__links_events.includes(return__links_self)).to.be.true,get+groups_{id}_projects,1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Groups API
/groups/{id}/projects&/groups/{id}/projects&get&200():::EXIT,return._links.self is a substring of return._links.members,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.members)",pm.expect(return__links_members.includes(return__links_self)).to.be.true,get+groups_{id}_projects,1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200%array():::EXIT,input.per_page >= size(return.array[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(input.per_page, size(return.array[..]))",pm.expect(input_per_page).to.be.at.least(return_array_size_array),get+groups_{id}_projects_shared,1,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,array,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,input.page == return.creator_id,daikon.inv.binary.twoScalar.IntEqual,"(input.page, return.creator_id)",pm.expect(input_page).to.eql(return_creator_id),get+groups_{id}_projects_shared,1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,creator_id,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,input.archived == return.archived,daikon.inv.binary.twoScalar.IntEqual,"(input.archived, return.archived)",pm.expect(input_archived).to.eql(return_archived),get+groups_{id}_projects_shared,1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,archived,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,input.visibility == return.visibility,daikon.inv.binary.twoString.StringEqual,"(input.visibility, return.visibility)",pm.expect(input_visibility).to.eql(return_visibility),get+groups_{id}_projects_shared,1,,,Represents an invariant of == between two String scalars. Prints as x == y.,,visibility,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,"return.auto_cancel_pending_pipelines one of { ""disabled"", ""enabled"" }",daikon.inv.unary.string.OneOfString,(return.auto_cancel_pending_pipelines),"pm.expect([""disabled"", ""enabled""].includes(return_auto_cancel_pending_pipelines)).to.be.true",get+groups_{id}_projects_shared,1,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,auto_cancel_pending_pipelines,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,"return.builds_access_level one of { ""disabled"", ""enabled"" }",daikon.inv.unary.string.OneOfString,(return.builds_access_level),"pm.expect([""disabled"", ""enabled""].includes(return_builds_access_level)).to.be.true",get+groups_{id}_projects_shared,1,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,builds_access_level,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,LENGTH(return.container_expiration_policy.next_run_at)==24,daikon.inv.unary.string.FixedLengthString,(return.container_expiration_policy.next_run_at),pm.expect(return_container_expiration_policy_next_run_at).to.have.length(24),get+groups_{id}_projects_shared,1,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,container_expiration_policy.next_run_at,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,return.container_expiration_policy.next_run_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.container_expiration_policy.next_run_at),"pm.expect(return_container_expiration_policy_next_run_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+groups_{id}_projects_shared,1,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,container_expiration_policy.next_run_at,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,LENGTH(return.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.created_at),pm.expect(return_created_at).to.have.length(24),get+groups_{id}_projects_shared,1,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,created_at,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.created_at),"pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+groups_{id}_projects_shared,1,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,created_at,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,"return.default_branch one of { ""develop"", ""main"", ""master"" }",daikon.inv.unary.string.OneOfString,(return.default_branch),"pm.expect([""develop"", ""main"", ""master""].includes(return_default_branch)).to.be.true",get+groups_{id}_projects_shared,1,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,default_branch,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,return.forks_count >= 0,daikon.inv.unary.scalar.LowerBound,(return.forks_count),pm.expect(return_forks_count).to.be.at.least(0),get+groups_{id}_projects_shared,1,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,forks_count,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,"return.import_status one of { ""finished"", ""none"" }",daikon.inv.unary.string.OneOfString,(return.import_status),"pm.expect([""finished"", ""none""].includes(return_import_status)).to.be.true",get+groups_{id}_projects_shared,1,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,import_status,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,"return.issues_access_level one of { ""enabled"", ""private"" }",daikon.inv.unary.string.OneOfString,(return.issues_access_level),"pm.expect([""enabled"", ""private""].includes(return_issues_access_level)).to.be.true",get+groups_{id}_projects_shared,1,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,issues_access_level,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,LENGTH(return.issues_access_level)==7,daikon.inv.unary.string.FixedLengthString,(return.issues_access_level),pm.expect(return_issues_access_level).to.have.length(7),get+groups_{id}_projects_shared,1,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,issues_access_level,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,LENGTH(return.last_activity_at)==24,daikon.inv.unary.string.FixedLengthString,(return.last_activity_at),pm.expect(return_last_activity_at).to.have.length(24),get+groups_{id}_projects_shared,1,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,last_activity_at,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,return.last_activity_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.last_activity_at),"pm.expect(return_last_activity_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+groups_{id}_projects_shared,1,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,last_activity_at,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,"return.merge_requests_access_level one of { ""disabled"", ""enabled"", ""private"" }",daikon.inv.unary.string.OneOfString,(return.merge_requests_access_level),"pm.expect([""disabled"", ""enabled"", ""private""].includes(return_merge_requests_access_level)).to.be.true",get+groups_{id}_projects_shared,1,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,merge_requests_access_level,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,return.namespace.id >= 1,daikon.inv.unary.scalar.LowerBound,(return.namespace.id),pm.expect(return_namespace_id).to.be.at.least(1),get+groups_{id}_projects_shared,1,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,namespace.id,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,"return.namespace.kind one of { ""group"", ""user"" }",daikon.inv.unary.string.OneOfString,(return.namespace.kind),"pm.expect([""group"", ""user""].includes(return_namespace_kind)).to.be.true",get+groups_{id}_projects_shared,1,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,namespace.kind,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,return.only_allow_merge_if_all_discussions_are_resolved == false,daikon.inv.unary.scalar.OneOfScalar,(return.only_allow_merge_if_all_discussions_are_resolved),pm.expect(return_only_allow_merge_if_all_discussions_are_resolved).to.eql(false),get+groups_{id}_projects_shared,1,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,only_allow_merge_if_all_discussions_are_resolved,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,return.open_issues_count == 0,daikon.inv.unary.scalar.OneOfScalar,(return.open_issues_count),pm.expect([0].includes(return_open_issues_count)).to.be.true,get+groups_{id}_projects_shared,1,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,open_issues_count,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,"return.repository_access_level one of { ""enabled"", ""private"" }",daikon.inv.unary.string.OneOfString,(return.repository_access_level),"pm.expect([""enabled"", ""private""].includes(return_repository_access_level)).to.be.true",get+groups_{id}_projects_shared,1,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,repository_access_level,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,LENGTH(return.repository_access_level)==7,daikon.inv.unary.string.FixedLengthString,(return.repository_access_level),pm.expect(return_repository_access_level).to.have.length(7),get+groups_{id}_projects_shared,1,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,repository_access_level,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,"return.repository_storage == ""default""",daikon.inv.unary.string.OneOfString,(return.repository_storage),"pm.expect([""default""].includes(return_repository_storage)).to.be.true",get+groups_{id}_projects_shared,1,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,repository_storage,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,LENGTH(return.repository_storage)==7,daikon.inv.unary.string.FixedLengthString,(return.repository_storage),pm.expect(return_repository_storage).to.have.length(7),get+groups_{id}_projects_shared,1,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,repository_storage,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,"return.snippets_access_level one of { ""disabled"", ""enabled"", ""private"" }",daikon.inv.unary.string.OneOfString,(return.snippets_access_level),"pm.expect([""disabled"", ""enabled"", ""private""].includes(return_snippets_access_level)).to.be.true",get+groups_{id}_projects_shared,1,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,snippets_access_level,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,"return.star_count one of { 0, 1, 2 }",daikon.inv.unary.scalar.OneOfScalar,(return.star_count),"pm.expect([0, 1, 2].includes(return_star_count)).to.be.true",get+groups_{id}_projects_shared,1,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,star_count,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,"return.visibility one of { ""private"", ""public"" }",daikon.inv.unary.string.OneOfString,(return.visibility),"pm.expect([""private"", ""public""].includes(return_visibility)).to.be.true",get+groups_{id}_projects_shared,1,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,visibility,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,"return.wiki_access_level one of { ""disabled"", ""enabled"", ""private"" }",daikon.inv.unary.string.OneOfString,(return.wiki_access_level),"pm.expect([""disabled"", ""enabled"", ""private""].includes(return_wiki_access_level)).to.be.true",get+groups_{id}_projects_shared,1,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,wiki_access_level,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,size(return.shared_with_groups[]) == 1,daikon.inv.unary.scalar.OneOfScalar,(size(return.shared_with_groups[..])),pm.expect([1].includes(return_shared_with_groups_size_array)).to.be.true,get+groups_{id}_projects_shared,1,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,shared_with_groups,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,"size(return.tag_list[]) one of { 0, 1 }",daikon.inv.unary.scalar.OneOfScalar,(size(return.tag_list[..])),"pm.expect([0, 1, 0].includes(return_tag_list_size_array)).to.be.true",get+groups_{id}_projects_shared,1,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,tag_list,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,return.shared_with_groups[input.page -1] has only one value,daikon.inv.unary.scalar.OneOfScalar,(return.shared_with_groups[input.page -1]),//,get+groups_{id}_projects_shared,1,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,shared_with_groups[input.page -1],GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,input.per_page >= return.creator_id,daikon.inv.binary.twoScalar.IntGreaterEqual,"(input.per_page, return.creator_id)",pm.expect(input_per_page).to.be.at.least(return_creator_id),get+groups_{id}_projects_shared,1,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,creator_id,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,input.per_page > return.forks_count,daikon.inv.binary.twoScalar.IntGreaterThan,"(input.per_page, return.forks_count)",pm.expect(input_per_page).to.be.greaterThan(return_forks_count),get+groups_{id}_projects_shared,1,,,Represents an invariant of > between two long scalars. Prints as x > y.,,forks_count,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,input.per_page > return.star_count,daikon.inv.binary.twoScalar.IntGreaterThan,"(input.per_page, return.star_count)",pm.expect(input_per_page).to.be.greaterThan(return_star_count),get+groups_{id}_projects_shared,1,,,Represents an invariant of > between two long scalars. Prints as x > y.,,star_count,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,input.per_page >= size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(input.per_page, size(return.shared_with_groups[..]))",pm.expect(input_per_page).to.be.at.least(return_shared_with_groups_size_array),get+groups_{id}_projects_shared,1,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,shared_with_groups,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,return._links.self is a substring of return._links.issues,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.issues)",pm.expect(return__links_issues.includes(return__links_self)).to.be.true,get+groups_{id}_projects_shared,1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,return._links.self is a substring of return._links.merge_requests,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.merge_requests)",pm.expect(return__links_merge_requests.includes(return__links_self)).to.be.true,get+groups_{id}_projects_shared,1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,return._links.self is a substring of return._links.repo_branches,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.repo_branches)",pm.expect(return__links_repo_branches.includes(return__links_self)).to.be.true,get+groups_{id}_projects_shared,1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,return._links.self is a substring of return._links.labels,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.labels)",pm.expect(return__links_labels.includes(return__links_self)).to.be.true,get+groups_{id}_projects_shared,1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,return._links.self is a substring of return._links.events,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.events)",pm.expect(return__links_events.includes(return__links_self)).to.be.true,get+groups_{id}_projects_shared,1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,return._links.self is a substring of return._links.members,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.members)",pm.expect(return__links_members.includes(return__links_self)).to.be.true,get+groups_{id}_projects_shared,1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,return.creator_id <= return.namespace.id,daikon.inv.binary.twoScalar.IntLessEqual,"(return.creator_id, return.namespace.id)",pm.expect(return_creator_id).to.be.lte(return_namespace_id),get+groups_{id}_projects_shared,1,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,creator_id,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,return.creator_id >= size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.creator_id, size(return.shared_with_groups[..]))",pm.expect(return_creator_id).to.be.at.least(return_shared_with_groups_size_array),get+groups_{id}_projects_shared,1,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,creator_id,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,return.creator_id >= size(return.tag_list[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.creator_id, size(return.tag_list[..]))",pm.expect(return_creator_id).to.be.at.least(return_tag_list_size_array),get+groups_{id}_projects_shared,1,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,tag_list,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,return.default_branch is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.default_branch, return.readme_url)",pm.expect(return_readme_url.includes(return_default_branch)).to.be.true,get+groups_{id}_projects_shared,1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,default_branch,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,return.forks_count >= return.open_issues_count,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.forks_count, return.open_issues_count)",pm.expect(return_forks_count).to.be.at.least(return_open_issues_count),get+groups_{id}_projects_shared,1,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,forks_count,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,return.web_url is a substring of return.http_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.http_url_to_repo, return.web_url)",pm.expect(return_http_url_to_repo.includes(return_web_url)).to.be.true,get+groups_{id}_projects_shared,1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,web_url,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,return.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.name, return.name_with_namespace)",pm.expect(return_name_with_namespace.includes(return_name)).to.be.true,get+groups_{id}_projects_shared,1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,name_with_namespace,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,return.namespace.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.name_with_namespace, return.namespace.name)",pm.expect(return_name_with_namespace.includes(return_namespace_name)).to.be.true,get+groups_{id}_projects_shared,1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,name_with_namespace,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,return.namespace.id >= size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.namespace.id, size(return.shared_with_groups[..]))",pm.expect(return_namespace_id).to.be.at.least(return_shared_with_groups_size_array),get+groups_{id}_projects_shared,1,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,namespace.id,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,return.namespace.id >= size(return.tag_list[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.namespace.id, size(return.tag_list[..]))",pm.expect(return_namespace_id).to.be.at.least(return_tag_list_size_array),get+groups_{id}_projects_shared,1,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,tag_list,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,return.namespace.path is a substring of return.namespace.full_path,daikon.inv.binary.twoString.StdString$SubString,"(return.namespace.path, return.namespace.full_path)",pm.expect(return_namespace_full_path.includes(return_namespace_path)).to.be.true,get+groups_{id}_projects_shared,1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,namespace.path,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,return.namespace.full_path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.namespace.full_path, return.path_with_namespace)",pm.expect(return_path_with_namespace.includes(return_namespace_full_path)).to.be.true,get+groups_{id}_projects_shared,1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,return.open_issues_count <= return.star_count,daikon.inv.binary.twoScalar.IntLessEqual,"(return.open_issues_count, return.star_count)",pm.expect(return_open_issues_count).to.be.lte(return_star_count),get+groups_{id}_projects_shared,1,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,open_issues_count,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,return.open_issues_count <= size(return.tag_list[]),daikon.inv.binary.twoScalar.IntLessEqual,"(return.open_issues_count, size(return.tag_list[..]))",pm.expect(return_open_issues_count).to.be.lte(return_tag_list_size_array),get+groups_{id}_projects_shared,1,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,tag_list,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,return.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path, return.path_with_namespace)",pm.expect(return_path_with_namespace.includes(return_path)).to.be.true,get+groups_{id}_projects_shared,1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,return.path_with_namespace is a substring of return.ssh_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.path_with_namespace, return.ssh_url_to_repo)",pm.expect(return_ssh_url_to_repo.includes(return_path_with_namespace)).to.be.true,get+groups_{id}_projects_shared,1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,return.path_with_namespace is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.path_with_namespace, return.web_url)",pm.expect(return_web_url.includes(return_path_with_namespace)).to.be.true,get+groups_{id}_projects_shared,1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,return.web_url is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.readme_url, return.web_url)",pm.expect(return_readme_url.includes(return_web_url)).to.be.true,get+groups_{id}_projects_shared,1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,web_url,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,return.shared_with_groups[] elements == return.shared_with_groups[input.page -1],daikon.inv.binary.sequenceScalar.SeqIntEqual,"(return.shared_with_groups[..], return.shared_with_groups[input.page -1])",pm.expect(return_shared_with_groups_array.every(element => element == return_shared_with_groups_input_page_minus_1)).to.be.true,get+groups_{id}_projects_shared,1,,,Represents an invariant between a long scalar and a a sequence of long values. Prints as x[] elements == y where x is a long sequence and y is a long scalar.,,shared_with_groups,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,return.shared_with_groups[] elements == return.shared_with_groups[return.open_issues_count],daikon.inv.binary.sequenceScalar.SeqIntEqual,"(return.shared_with_groups[..], return.shared_with_groups[return.open_issues_count])",pm.expect(return_shared_with_groups_array.every(element => element == return_shared_with_groups_return_open_issues_count)).to.be.true,get+groups_{id}_projects_shared,1,,,Represents an invariant between a long scalar and a a sequence of long values. Prints as x[] elements == y where x is a long sequence and y is a long scalar.,,shared_with_groups,GitLab Groups API
/groups/{id}/projects/shared&/groups/{id}/projects/shared&get&200():::EXIT,size(return.shared_with_groups[]) >= size(return.tag_list[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(size(return.shared_with_groups[..]), size(return.tag_list[..]))",pm.expect(return_shared_with_groups_size_array).to.be.at.least(return_tag_list_size_array),get+groups_{id}_projects_shared,1,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,tag_list,GitLab Groups API
/groups/{id}/subgroups&/groups/{id}/subgroups&get&200():::EXIT,return.statistics.job_artifacts_size == return.statistics.lfs_objects_size,daikon.inv.binary.twoScalar.IntEqual,"(return.statistics.job_artifacts_size, return.statistics.lfs_objects_size)",pm.expect(return_statistics_job_artifacts_size).to.eql(return_statistics_lfs_objects_size),get+groups_{id}_subgroups,1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,statistics.job_artifacts_size,GitLab Groups API
/groups/{id}/subgroups&/groups/{id}/subgroups&get&200():::EXIT,return.statistics.job_artifacts_size == return.statistics.packages_size,daikon.inv.binary.twoScalar.IntEqual,"(return.statistics.job_artifacts_size, return.statistics.packages_size)",pm.expect(return_statistics_job_artifacts_size).to.eql(return_statistics_packages_size),get+groups_{id}_subgroups,1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,statistics.job_artifacts_size,GitLab Groups API
/groups/{id}/subgroups&/groups/{id}/subgroups&get&200():::EXIT,return.statistics.job_artifacts_size == return.statistics.snippets_size,daikon.inv.binary.twoScalar.IntEqual,"(return.statistics.job_artifacts_size, return.statistics.snippets_size)",pm.expect(return_statistics_job_artifacts_size).to.eql(return_statistics_snippets_size),get+groups_{id}_subgroups,1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,statistics.job_artifacts_size,GitLab Groups API
/groups/{id}/subgroups&/groups/{id}/subgroups&get&200():::EXIT,"return.auto_devops_enabled one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.auto_devops_enabled),"pm.expect([""false"", ""true""].includes(return_auto_devops_enabled)).to.be.true",get+groups_{id}_subgroups,1,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,auto_devops_enabled,GitLab Groups API
/groups/{id}/subgroups&/groups/{id}/subgroups&get&200():::EXIT,LENGTH(return.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.created_at),pm.expect(return_created_at).to.have.length(24),get+groups_{id}_subgroups,1,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,created_at,GitLab Groups API
/groups/{id}/subgroups&/groups/{id}/subgroups&get&200():::EXIT,return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.created_at),"pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+groups_{id}_subgroups,1,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,created_at,GitLab Groups API
/groups/{id}/subgroups&/groups/{id}/subgroups&get&200():::EXIT,"return.default_branch_protection one of { 0, 1, 2 }",daikon.inv.unary.scalar.OneOfScalar,(return.default_branch_protection),"pm.expect([0, 1, 2].includes(return_default_branch_protection)).to.be.true",get+groups_{id}_subgroups,1,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,default_branch_protection,GitLab Groups API
/groups/{id}/subgroups&/groups/{id}/subgroups&get&200():::EXIT,return.parent_id is Numeric,daikon.inv.unary.string.IsNumeric,(return.parent_id),"pm.expect(return_parent_id).to.match(/^[+-]{0,1}(0|([0-9](\d*|\d{0,2}(,\d{3})*)))?(\.\d*[0-9])?$/)",get+groups_{id}_subgroups,1,,,Indicates that the characters of a string variable are always numeric. Represented as x is Numeric.,,parent_id,GitLab Groups API
/groups/{id}/subgroups&/groups/{id}/subgroups&get&200():::EXIT,"return.project_creation_level one of { ""developer"", ""maintainer"", ""noone"" }",daikon.inv.unary.string.OneOfString,(return.project_creation_level),"pm.expect([""developer"", ""maintainer"", ""noone""].includes(return_project_creation_level)).to.be.true",get+groups_{id}_subgroups,1,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,project_creation_level,GitLab Groups API
/groups/{id}/subgroups&/groups/{id}/subgroups&get&200():::EXIT,return.statistics.job_artifacts_size == 0,daikon.inv.unary.scalar.OneOfScalar,(return.statistics.job_artifacts_size),pm.expect([0].includes(return_statistics_job_artifacts_size)).to.be.true,get+groups_{id}_subgroups,1,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,statistics.job_artifacts_size,GitLab Groups API
/groups/{id}/subgroups&/groups/{id}/subgroups&get&200():::EXIT,return.statistics.repository_size >= 0,daikon.inv.unary.scalar.LowerBound,(return.statistics.repository_size),pm.expect(return_statistics_repository_size).to.be.at.least(0),get+groups_{id}_subgroups,1,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,statistics.repository_size,GitLab Groups API
/groups/{id}/subgroups&/groups/{id}/subgroups&get&200():::EXIT,return.statistics.storage_size >= 0,daikon.inv.unary.scalar.LowerBound,(return.statistics.storage_size),pm.expect(return_statistics_storage_size).to.be.at.least(0),get+groups_{id}_subgroups,1,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,statistics.storage_size,GitLab Groups API
/groups/{id}/subgroups&/groups/{id}/subgroups&get&200():::EXIT,return.statistics.wiki_size >= 0,daikon.inv.unary.scalar.LowerBound,(return.statistics.wiki_size),pm.expect(return_statistics_wiki_size).to.be.at.least(0),get+groups_{id}_subgroups,1,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,statistics.wiki_size,GitLab Groups API
/groups/{id}/subgroups&/groups/{id}/subgroups&get&200():::EXIT,"return.subgroup_creation_level one of { ""maintainer"", ""owner"" }",daikon.inv.unary.string.OneOfString,(return.subgroup_creation_level),"pm.expect([""maintainer"", ""owner""].includes(return_subgroup_creation_level)).to.be.true",get+groups_{id}_subgroups,1,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,subgroup_creation_level,GitLab Groups API
/groups/{id}/subgroups&/groups/{id}/subgroups&get&200():::EXIT,return.two_factor_grace_period >= 0,daikon.inv.unary.scalar.LowerBound,(return.two_factor_grace_period),pm.expect(return_two_factor_grace_period).to.be.at.least(0),get+groups_{id}_subgroups,1,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,two_factor_grace_period,GitLab Groups API
/groups/{id}/subgroups&/groups/{id}/subgroups&get&200():::EXIT,input.id < return.id,daikon.inv.binary.twoScalar.IntLessThan,"(input.id, return.id)",pm.expect(input_id).to.be.lessThan(return_id),get+groups_{id}_subgroups,1,,,Represents an invariant of < between two long scalars. Prints as x < y.,,id,GitLab Groups API
/groups/{id}/subgroups&/groups/{id}/subgroups&get&200():::EXIT,input.skip_groups[] elements == input.skip_groups[return.statistics.job_artifacts_size],daikon.inv.binary.sequenceScalar.SeqIntEqual,"(input.skip_groups[..], input.skip_groups[return.statistics.job_artifacts_size])",pm.expect(input_skip_groups_array.every(element => element == input_skip_groups_return_statistics_job_artifacts_size)).to.be.true,get+groups_{id}_subgroups,1,,,Represents an invariant between a long scalar and a a sequence of long values. Prints as x[] elements == y where x is a long sequence and y is a long scalar.,,input.skip_groups[statistics.job_artifacts_size],GitLab Groups API
/groups/{id}/subgroups&/groups/{id}/subgroups&get&200():::EXIT,return.default_branch_protection >= return.statistics.job_artifacts_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.default_branch_protection, return.statistics.job_artifacts_size)",pm.expect(return_default_branch_protection).to.be.at.least(return_statistics_job_artifacts_size),get+groups_{id}_subgroups,1,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,statistics.job_artifacts_size,GitLab Groups API
/groups/{id}/subgroups&/groups/{id}/subgroups&get&200():::EXIT,return.name is a substring of return.full_name,daikon.inv.binary.twoString.StdString$SubString,"(return.full_name, return.name)",pm.expect(return_full_name.includes(return_name)).to.be.true,get+groups_{id}_subgroups,1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,name,GitLab Groups API
/groups/{id}/subgroups&/groups/{id}/subgroups&get&200():::EXIT,return.path is a substring of return.full_path,daikon.inv.binary.twoString.StdString$SubString,"(return.full_path, return.path)",pm.expect(return_full_path.includes(return_path)).to.be.true,get+groups_{id}_subgroups,1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,full_path,GitLab Groups API
/groups/{id}/subgroups&/groups/{id}/subgroups&get&200():::EXIT,return.full_path is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.full_path, return.web_url)",pm.expect(return_web_url.includes(return_full_path)).to.be.true,get+groups_{id}_subgroups,1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,full_path,GitLab Groups API
/groups/{id}/subgroups&/groups/{id}/subgroups&get&200():::EXIT,return.statistics.job_artifacts_size <= return.statistics.repository_size,daikon.inv.binary.twoScalar.IntLessEqual,"(return.statistics.job_artifacts_size, return.statistics.repository_size)",pm.expect(return_statistics_job_artifacts_size).to.be.lte(return_statistics_repository_size),get+groups_{id}_subgroups,1,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,statistics.job_artifacts_size,GitLab Groups API
/groups/{id}/subgroups&/groups/{id}/subgroups&get&200():::EXIT,return.statistics.job_artifacts_size <= return.statistics.storage_size,daikon.inv.binary.twoScalar.IntLessEqual,"(return.statistics.job_artifacts_size, return.statistics.storage_size)",pm.expect(return_statistics_job_artifacts_size).to.be.lte(return_statistics_storage_size),get+groups_{id}_subgroups,1,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,statistics.storage_size,GitLab Groups API
/groups/{id}/subgroups&/groups/{id}/subgroups&get&200():::EXIT,return.statistics.job_artifacts_size <= return.statistics.wiki_size,daikon.inv.binary.twoScalar.IntLessEqual,"(return.statistics.job_artifacts_size, return.statistics.wiki_size)",pm.expect(return_statistics_job_artifacts_size).to.be.lte(return_statistics_wiki_size),get+groups_{id}_subgroups,1,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,statistics.job_artifacts_size,GitLab Groups API
/groups/{id}/subgroups&/groups/{id}/subgroups&get&200():::EXIT,return.statistics.job_artifacts_size <= return.two_factor_grace_period,daikon.inv.binary.twoScalar.IntLessEqual,"(return.statistics.job_artifacts_size, return.two_factor_grace_period)",pm.expect(return_statistics_job_artifacts_size).to.be.lte(return_two_factor_grace_period),get+groups_{id}_subgroups,1,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,statistics.job_artifacts_size,GitLab Groups API
/groups/{id}/subgroups&/groups/{id}/subgroups&get&200():::EXIT,return.statistics.repository_size <= return.statistics.storage_size,daikon.inv.binary.twoScalar.IntLessEqual,"(return.statistics.repository_size, return.statistics.storage_size)",pm.expect(return_statistics_repository_size).to.be.lte(return_statistics_storage_size),get+groups_{id}_subgroups,1,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,statistics.storage_size,GitLab Groups API
/groups/{id}/subgroups&/groups/{id}/subgroups&get&200():::EXIT,return.statistics.repository_size >= return.statistics.wiki_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.repository_size, return.statistics.wiki_size)",pm.expect(return_statistics_repository_size).to.be.at.least(return_statistics_wiki_size),get+groups_{id}_subgroups,1,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,statistics.repository_size,GitLab Groups API
/groups/{id}/subgroups&/groups/{id}/subgroups&get&200():::EXIT,return.statistics.storage_size >= return.statistics.wiki_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.storage_size, return.statistics.wiki_size)",pm.expect(return_statistics_storage_size).to.be.at.least(return_statistics_wiki_size),get+groups_{id}_subgroups,1,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,statistics.storage_size,GitLab Groups API
/groups&/groups&post&201():::EXIT,input.visibility == return.visibility,daikon.inv.binary.twoString.StringEqual,"(input.visibility, return.visibility)",pm.expect(input_visibility).to.eql(return_visibility),post+groups,1,,,Represents an invariant of == between two String scalars. Prints as x == y.,,visibility,GitLab Groups API
/groups&/groups&post&201():::EXIT,input.share_with_group_lock == return.share_with_group_lock,daikon.inv.binary.twoScalar.IntEqual,"(input.share_with_group_lock, return.share_with_group_lock)",pm.expect(input_share_with_group_lock).to.eql(return_share_with_group_lock),post+groups,1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,share_with_group_lock,GitLab Groups API
/groups&/groups&post&201():::EXIT,input.require_two_factor_authentication == return.require_two_factor_authentication,daikon.inv.binary.twoScalar.IntEqual,"(input.require_two_factor_authentication, return.require_two_factor_authentication)",pm.expect(input_require_two_factor_authentication).to.eql(return_require_two_factor_authentication),post+groups,1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,require_two_factor_authentication,GitLab Groups API
/groups&/groups&post&201():::EXIT,input.two_factor_grace_period == return.two_factor_grace_period,daikon.inv.binary.twoScalar.IntEqual,"(input.two_factor_grace_period, return.two_factor_grace_period)",pm.expect(input_two_factor_grace_period).to.eql(return_two_factor_grace_period),post+groups,1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,two_factor_grace_period,GitLab Groups API
/groups&/groups&post&201():::EXIT,input.project_creation_level == return.project_creation_level,daikon.inv.binary.twoString.StringEqual,"(input.project_creation_level, return.project_creation_level)",pm.expect(input_project_creation_level).to.eql(return_project_creation_level),post+groups,1,,,Represents an invariant of == between two String scalars. Prints as x == y.,,project_creation_level,GitLab Groups API
/groups&/groups&post&201():::EXIT,input.subgroup_creation_level == return.subgroup_creation_level,daikon.inv.binary.twoString.StringEqual,"(input.subgroup_creation_level, return.subgroup_creation_level)",pm.expect(input_subgroup_creation_level).to.eql(return_subgroup_creation_level),post+groups,1,,,Represents an invariant of == between two String scalars. Prints as x == y.,,subgroup_creation_level,GitLab Groups API
/groups&/groups&post&201():::EXIT,input.lfs_enabled == return.lfs_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.lfs_enabled, return.lfs_enabled)",pm.expect(input_lfs_enabled).to.eql(return_lfs_enabled),post+groups,1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,lfs_enabled,GitLab Groups API
/groups&/groups&post&201():::EXIT,input.request_access_enabled == return.request_access_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.request_access_enabled, return.request_access_enabled)",pm.expect(input_request_access_enabled).to.eql(return_request_access_enabled),post+groups,1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,request_access_enabled,GitLab Groups API
/groups&/groups&post&201():::EXIT,input.name == return.name,daikon.inv.binary.twoString.StringEqual,"(input.name, return.name)",pm.expect(input_name).to.eql(return_name),post+groups,1,,,Represents an invariant of == between two String scalars. Prints as x == y.,,name,GitLab Groups API
/groups&/groups&post&201():::EXIT,input.path == return.path,daikon.inv.binary.twoString.StringEqual,"(input.path, return.path)",pm.expect(input_path).to.eql(return_path),post+groups,1,,,Represents an invariant of == between two String scalars. Prints as x == y.,,path,GitLab Groups API
/groups&/groups&post&201():::EXIT,input.description == return.description,daikon.inv.binary.twoString.StringEqual,"(input.description, return.description)",pm.expect(input_description).to.eql(return_description),post+groups,1,,,Represents an invariant of == between two String scalars. Prints as x == y.,,description,GitLab Groups API
/groups&/groups&post&201():::EXIT,"return.auto_devops_enabled one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.auto_devops_enabled),"pm.expect([""false"", ""true""].includes(return_auto_devops_enabled)).to.be.true",post+groups,1,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,auto_devops_enabled,GitLab Groups API
/groups&/groups&post&201():::EXIT,LENGTH(return.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.created_at),pm.expect(return_created_at).to.have.length(24),post+groups,1,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,created_at,GitLab Groups API
/groups&/groups&post&201():::EXIT,return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.created_at),"pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",post+groups,1,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,created_at,GitLab Groups API
/groups&/groups&post&201():::EXIT,"return.default_branch_protection one of { 0, 1, 2 }",daikon.inv.unary.scalar.OneOfScalar,(return.default_branch_protection),"pm.expect([0, 1, 2].includes(return_default_branch_protection)).to.be.true",post+groups,1,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,default_branch_protection,GitLab Groups API
/groups&/groups&post&201():::EXIT,"return.emails_disabled one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.emails_disabled),"pm.expect([""false"", ""true""].includes(return_emails_disabled)).to.be.true",post+groups,1,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,emails_disabled,GitLab Groups API
/groups&/groups&post&201():::EXIT,"return.mentions_disabled one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.mentions_disabled),"pm.expect([""false"", ""true""].includes(return_mentions_disabled)).to.be.true",post+groups,1,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,mentions_disabled,GitLab Groups API
/groups&/groups&post&201():::EXIT,"return.project_creation_level one of { ""developer"", ""maintainer"", ""noone"" }",daikon.inv.unary.string.OneOfString,(return.project_creation_level),"pm.expect([""developer"", ""maintainer"", ""noone""].includes(return_project_creation_level)).to.be.true",post+groups,1,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,project_creation_level,GitLab Groups API
/groups&/groups&post&201():::EXIT,return.statistics == null,daikon.inv.unary.scalar.OneOfScalar,(return.statistics),pm.expect(return_statistics).to.be.null,post+groups,1,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,statistics,GitLab Groups API
/groups&/groups&post&201():::EXIT,"return.subgroup_creation_level one of { ""maintainer"", ""owner"" }",daikon.inv.unary.string.OneOfString,(return.subgroup_creation_level),"pm.expect([""maintainer"", ""owner""].includes(return_subgroup_creation_level)).to.be.true",post+groups,1,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,subgroup_creation_level,GitLab Groups API
/groups&/groups&post&201():::EXIT,"return.visibility one of { ""internal"", ""private"", ""public"" }",daikon.inv.unary.string.OneOfString,(return.visibility),"pm.expect([""internal"", ""private"", ""public""].includes(return_visibility)).to.be.true",post+groups,1,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,visibility,GitLab Groups API
/groups&/groups&post&201():::EXIT,input.path is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(input.path, return.web_url)",pm.expect(return_web_url.includes(input_path)).to.be.true,post+groups,1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,web_url,GitLab Groups API
/groups/{id}/hooks&/groups/{id}/hooks&post&201():::EXIT,input.id == return.group_id,daikon.inv.binary.twoScalar.IntEqual,"(input.id, return.group_id)",pm.expect(input_id).to.eql(return_group_id),post+groups_{id}_hooks,1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,group_id,GitLab Groups API
/groups/{id}/hooks&/groups/{id}/hooks&post&201():::EXIT,input.url == return.url,daikon.inv.binary.twoString.StringEqual,"(input.url, return.url)",pm.expect(input_url).to.eql(return_url),post+groups_{id}_hooks,1,,,Represents an invariant of == between two String scalars. Prints as x == y.,,url,GitLab Groups API
/groups/{id}/hooks&/groups/{id}/hooks&post&201():::EXIT,input.push_events == return.push_events,daikon.inv.binary.twoScalar.IntEqual,"(input.push_events, return.push_events)",pm.expect(input_push_events).to.eql(return_push_events),post+groups_{id}_hooks,1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,push_events,GitLab Groups API
/groups/{id}/hooks&/groups/{id}/hooks&post&201():::EXIT,input.issues_events == return.issues_events,daikon.inv.binary.twoScalar.IntEqual,"(input.issues_events, return.issues_events)",pm.expect(input_issues_events).to.eql(return_issues_events),post+groups_{id}_hooks,1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,issues_events,GitLab Groups API
/groups/{id}/hooks&/groups/{id}/hooks&post&201():::EXIT,input.confidential_issues_events == return.confidential_issues_events,daikon.inv.binary.twoScalar.IntEqual,"(input.confidential_issues_events, return.confidential_issues_events)",pm.expect(input_confidential_issues_events).to.eql(return_confidential_issues_events),post+groups_{id}_hooks,1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,confidential_issues_events,GitLab Groups API
/groups/{id}/hooks&/groups/{id}/hooks&post&201():::EXIT,input.merge_requests_events == return.merge_requests_events,daikon.inv.binary.twoScalar.IntEqual,"(input.merge_requests_events, return.merge_requests_events)",pm.expect(input_merge_requests_events).to.eql(return_merge_requests_events),post+groups_{id}_hooks,1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,merge_requests_events,GitLab Groups API
/groups/{id}/hooks&/groups/{id}/hooks&post&201():::EXIT,input.tag_push_events == return.tag_push_events,daikon.inv.binary.twoScalar.IntEqual,"(input.tag_push_events, return.tag_push_events)",pm.expect(input_tag_push_events).to.eql(return_tag_push_events),post+groups_{id}_hooks,1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,tag_push_events,GitLab Groups API
/groups/{id}/hooks&/groups/{id}/hooks&post&201():::EXIT,input.note_events == return.note_events,daikon.inv.binary.twoScalar.IntEqual,"(input.note_events, return.note_events)",pm.expect(input_note_events).to.eql(return_note_events),post+groups_{id}_hooks,1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,note_events,GitLab Groups API
/groups/{id}/hooks&/groups/{id}/hooks&post&201():::EXIT,input.confidential_note_events == return.confidential_note_events,daikon.inv.binary.twoScalar.IntEqual,"(input.confidential_note_events, return.confidential_note_events)",pm.expect(input_confidential_note_events).to.eql(return_confidential_note_events),post+groups_{id}_hooks,1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,confidential_note_events,GitLab Groups API
/groups/{id}/hooks&/groups/{id}/hooks&post&201():::EXIT,input.job_events == return.job_events,daikon.inv.binary.twoScalar.IntEqual,"(input.job_events, return.job_events)",pm.expect(input_job_events).to.eql(return_job_events),post+groups_{id}_hooks,1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,job_events,GitLab Groups API
/groups/{id}/hooks&/groups/{id}/hooks&post&201():::EXIT,input.pipeline_events == return.pipeline_events,daikon.inv.binary.twoScalar.IntEqual,"(input.pipeline_events, return.pipeline_events)",pm.expect(input_pipeline_events).to.eql(return_pipeline_events),post+groups_{id}_hooks,1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,pipeline_events,GitLab Groups API
/groups/{id}/hooks&/groups/{id}/hooks&post&201():::EXIT,input.wiki_page_events == return.wiki_page_events,daikon.inv.binary.twoScalar.IntEqual,"(input.wiki_page_events, return.wiki_page_events)",pm.expect(input_wiki_page_events).to.eql(return_wiki_page_events),post+groups_{id}_hooks,1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,wiki_page_events,GitLab Groups API
/groups/{id}/hooks&/groups/{id}/hooks&post&201():::EXIT,input.deployment_events == return.deployment_events,daikon.inv.binary.twoScalar.IntEqual,"(input.deployment_events, return.deployment_events)",pm.expect(input_deployment_events).to.eql(return_deployment_events),post+groups_{id}_hooks,1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,deployment_events,GitLab Groups API
/groups/{id}/hooks&/groups/{id}/hooks&post&201():::EXIT,input.releases_events == return.releases_events,daikon.inv.binary.twoScalar.IntEqual,"(input.releases_events, return.releases_events)",pm.expect(input_releases_events).to.eql(return_releases_events),post+groups_{id}_hooks,1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,releases_events,GitLab Groups API
/groups/{id}/hooks&/groups/{id}/hooks&post&201():::EXIT,input.enable_ssl_verification == return.enable_ssl_verification,daikon.inv.binary.twoScalar.IntEqual,"(input.enable_ssl_verification, return.enable_ssl_verification)",pm.expect(input_enable_ssl_verification).to.eql(return_enable_ssl_verification),post+groups_{id}_hooks,1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,enable_ssl_verification,GitLab Groups API
/groups/{id}/hooks&/groups/{id}/hooks&post&201():::EXIT,LENGTH(return.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.created_at),pm.expect(return_created_at).to.have.length(24),post+groups_{id}_hooks,1,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,created_at,GitLab Groups API
/groups/{id}/hooks&/groups/{id}/hooks&post&201():::EXIT,return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.created_at),"pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",post+groups_{id}_hooks,1,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,created_at,GitLab Groups API
/groups/{id}/projects/{project_id}&/groups/{id}/projects/{project_id}&post&201():::EXIT,input.id == return.id,daikon.inv.binary.twoScalar.IntEqual,"(input.id, return.id)",pm.expect(input_id).to.eql(return_id),post+groups_{id}_projects_{project_id},1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,id,GitLab Groups API
/groups/{id}/projects/{project_id}&/groups/{id}/projects/{project_id}&post&201():::EXIT,return._links == null,daikon.inv.unary.scalar.OneOfScalar,(return._links),pm.expect(return__links).to.be.null,post+groups_{id}_projects_{project_id},1,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,_links,GitLab Groups API
/groups/{id}/projects/{project_id}&/groups/{id}/projects/{project_id}&post&201():::EXIT,return.container_expiration_policy == null,daikon.inv.unary.scalar.OneOfScalar,(return.container_expiration_policy),pm.expect(return_container_expiration_policy).to.be.null,post+groups_{id}_projects_{project_id},1,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,container_expiration_policy,GitLab Groups API
/groups/{id}/projects/{project_id}&/groups/{id}/projects/{project_id}&post&201():::EXIT,LENGTH(return.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.created_at),pm.expect(return_created_at).to.have.length(24),post+groups_{id}_projects_{project_id},1,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,created_at,GitLab Groups API
/groups/{id}/projects/{project_id}&/groups/{id}/projects/{project_id}&post&201():::EXIT,return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.created_at),"pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",post+groups_{id}_projects_{project_id},1,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,created_at,GitLab Groups API
/groups/{id}/projects/{project_id}&/groups/{id}/projects/{project_id}&post&201():::EXIT,"return.emails_disabled one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.emails_disabled),"pm.expect([""false"", ""true""].includes(return_emails_disabled)).to.be.true",post+groups_{id}_projects_{project_id},1,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,emails_disabled,GitLab Groups API
/groups/{id}/projects/{project_id}&/groups/{id}/projects/{project_id}&post&201():::EXIT,return.namespace == null,daikon.inv.unary.scalar.OneOfScalar,(return.namespace),pm.expect(return_namespace).to.be.null,post+groups_{id}_projects_{project_id},1,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,namespace,GitLab Groups API
/groups/{id}/projects/{project_id}&/groups/{id}/projects/{project_id}&post&201():::EXIT,return.tag_list == null,daikon.inv.unary.scalar.OneOfScalar,(return.tag_list),pm.expect(return_tag_list).to.be.null,post+groups_{id}_projects_{project_id},1,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,tag_list,GitLab Groups API
/groups/{id}/projects/{project_id}&/groups/{id}/projects/{project_id}&post&201():::EXIT,"return.visibility one of { ""internal"", ""private"", ""public"" }",daikon.inv.unary.string.OneOfString,(return.visibility),"pm.expect([""internal"", ""private"", ""public""].includes(return_visibility)).to.be.true",post+groups_{id}_projects_{project_id},1,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,visibility,GitLab Groups API
/groups/{id}/projects/{project_id}&/groups/{id}/projects/{project_id}&post&201():::EXIT,return.path is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.path, return.web_url)",pm.expect(return_web_url.includes(return_path)).to.be.true,post+groups_{id}_projects_{project_id},1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,web_url,GitLab Groups API
/groups/{id}/share&/groups/{id}/share&post&201&projects&shared_with_groups():::EXIT,"return.group_access_level one of { 10, 20, 30 }",daikon.inv.unary.scalar.OneOfScalar,(return.group_access_level),"pm.expect([10, 20, 30].includes(return_group_access_level)).to.be.true",post+groups_{id}_share,1,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,projects.shared_with_groups.group_access_level,GitLab Groups API
/groups/{id}/share&/groups/{id}/share&post&201&projects():::EXIT,input.id == return.namespace.id,daikon.inv.binary.twoScalar.IntEqual,"(input.id, return.namespace.id)",pm.expect(input_id).to.eql(return_namespace_id),post+groups_{id}_share,1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,projects.namespace.id,GitLab Groups API
/groups/{id}/share&/groups/{id}/share&post&201&projects():::EXIT,return.open_issues_count == 0,daikon.inv.unary.scalar.OneOfScalar,(return.open_issues_count),pm.expect([0].includes(return_open_issues_count)).to.be.true,post+groups_{id}_share,1,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,projects.open_issues_count,GitLab Groups API
/groups/{id}/share&/groups/{id}/share&post&201&projects():::EXIT,LENGTH(return.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.created_at),pm.expect(return_created_at).to.have.length(24),post+groups_{id}_share,1,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,projects.created_at,GitLab Groups API
/groups/{id}/share&/groups/{id}/share&post&201&projects():::EXIT,return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.created_at),"pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",post+groups_{id}_share,1,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,projects.created_at,GitLab Groups API
/groups/{id}/share&/groups/{id}/share&post&201&projects():::EXIT,LENGTH(return.last_activity_at)==24,daikon.inv.unary.string.FixedLengthString,(return.last_activity_at),pm.expect(return_last_activity_at).to.have.length(24),post+groups_{id}_share,1,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,projects.last_activity_at,GitLab Groups API
/groups/{id}/share&/groups/{id}/share&post&201&projects():::EXIT,return.last_activity_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.last_activity_at),"pm.expect(return_last_activity_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",post+groups_{id}_share,1,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,projects.last_activity_at,GitLab Groups API
/groups/{id}/share&/groups/{id}/share&post&201&projects():::EXIT,return.creator_id >= 1,daikon.inv.unary.scalar.LowerBound,(return.creator_id),pm.expect(return_creator_id).to.be.at.least(1),post+groups_{id}_share,1,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,projects.creator_id,GitLab Groups API
/groups/{id}/share&/groups/{id}/share&post&201&projects():::EXIT,"return.namespace.kind == ""group""",daikon.inv.unary.string.OneOfString,(return.namespace.kind),"pm.expect([""group""].includes(return_namespace_kind)).to.be.true",post+groups_{id}_share,1,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,projects.namespace.kind,GitLab Groups API
/groups/{id}/share&/groups/{id}/share&post&201&projects():::EXIT,LENGTH(return.namespace.kind)==5,daikon.inv.unary.string.FixedLengthString,(return.namespace.kind),pm.expect(return_namespace_kind).to.have.length(5),post+groups_{id}_share,1,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,projects.namespace.kind,GitLab Groups API
/groups/{id}/share&/groups/{id}/share&post&201&projects():::EXIT,"return.import_status one of { ""finished"", ""none"" }",daikon.inv.unary.string.OneOfString,(return.import_status),"pm.expect([""finished"", ""none""].includes(return_import_status)).to.be.true",post+groups_{id}_share,1,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,projects.import_status,GitLab Groups API
/groups/{id}/share&/groups/{id}/share&post&201&projects():::EXIT,return.forks_count >= 0,daikon.inv.unary.scalar.LowerBound,(return.forks_count),pm.expect(return_forks_count).to.be.at.least(0),post+groups_{id}_share,1,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,projects.forks_count,GitLab Groups API
/groups/{id}/share&/groups/{id}/share&post&201&projects():::EXIT,return.star_count >= 0,daikon.inv.unary.scalar.LowerBound,(return.star_count),pm.expect(return_star_count).to.be.at.least(0),post+groups_{id}_share,1,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,projects.star_count,GitLab Groups API
/groups/{id}/share&/groups/{id}/share&post&201&projects():::EXIT,"return.merge_method one of { ""ff"", ""merge"", ""rebase_merge"" }",daikon.inv.unary.string.OneOfString,(return.merge_method),"pm.expect([""ff"", ""merge"", ""rebase_merge""].includes(return_merge_method)).to.be.true",post+groups_{id}_share,1,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,projects.merge_method,GitLab Groups API
/groups/{id}/share&/groups/{id}/share&post&201&projects():::EXIT,"size(return.tag_list[]) one of { 0, 1 }",daikon.inv.unary.scalar.OneOfScalar,(size(return.tag_list[..])),"pm.expect([0, 1, 0].includes(return_tag_list_size_array)).to.be.true",post+groups_{id}_share,1,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,projects.tag_list,GitLab Groups API
/groups/{id}/share&/groups/{id}/share&post&201&projects():::EXIT,"size(return.shared_with_groups[]) one of { 0, 1 }",daikon.inv.unary.scalar.OneOfScalar,(size(return.shared_with_groups[..])),"pm.expect([0, 1, 0].includes(return_shared_with_groups_size_array)).to.be.true",post+groups_{id}_share,1,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,projects.shared_with_groups,GitLab Groups API
/groups/{id}/share&/groups/{id}/share&post&201&projects():::EXIT,return.default_branch is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.default_branch, return.readme_url)",pm.expect(return_readme_url.includes(return_default_branch)).to.be.true,post+groups_{id}_share,1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,projects.default_branch,GitLab Groups API
/groups/{id}/share&/groups/{id}/share&post&201&projects():::EXIT,return.path_with_namespace is a substring of return.ssh_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.ssh_url_to_repo, return.path_with_namespace)",pm.expect(return_ssh_url_to_repo.includes(return_path_with_namespace)).to.be.true,post+groups_{id}_share,1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,projects.path_with_namespace,GitLab Groups API
/groups/{id}/share&/groups/{id}/share&post&201&projects():::EXIT,return.web_url is a substring of return.http_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.http_url_to_repo, return.web_url)",pm.expect(return_http_url_to_repo.includes(return_web_url)).to.be.true,post+groups_{id}_share,1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,projects.web_url,GitLab Groups API
/groups/{id}/share&/groups/{id}/share&post&201&projects():::EXIT,return.web_url is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.readme_url)",pm.expect(return_readme_url.includes(return_web_url)).to.be.true,post+groups_{id}_share,1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,projects.web_url,GitLab Groups API
/groups/{id}/share&/groups/{id}/share&post&201&projects():::EXIT,return.path_with_namespace is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.path_with_namespace)",pm.expect(return_web_url.includes(return_path_with_namespace)).to.be.true,post+groups_{id}_share,1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,projects.path_with_namespace,GitLab Groups API
/groups/{id}/share&/groups/{id}/share&post&201&projects():::EXIT,return.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.name, return.name_with_namespace)",pm.expect(return_name_with_namespace.includes(return_name)).to.be.true,post+groups_{id}_share,1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,projects.name_with_namespace,GitLab Groups API
/groups/{id}/share&/groups/{id}/share&post&201&projects():::EXIT,return.namespace.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.name_with_namespace, return.namespace.name)",pm.expect(return_name_with_namespace.includes(return_namespace_name)).to.be.true,post+groups_{id}_share,1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,projects.name_with_namespace,GitLab Groups API
/groups/{id}/share&/groups/{id}/share&post&201&projects():::EXIT,return.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path, return.path_with_namespace)",pm.expect(return_path_with_namespace.includes(return_path)).to.be.true,post+groups_{id}_share,1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,projects.path_with_namespace,GitLab Groups API
/groups/{id}/share&/groups/{id}/share&post&201&projects():::EXIT,return.namespace.full_path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path_with_namespace, return.namespace.full_path)",pm.expect(return_path_with_namespace.includes(return_namespace_full_path)).to.be.true,post+groups_{id}_share,1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,projects.path_with_namespace,GitLab Groups API
/groups/{id}/share&/groups/{id}/share&post&201&projects():::EXIT,return.open_issues_count <= return.forks_count,daikon.inv.binary.twoScalar.IntLessEqual,"(return.open_issues_count, return.forks_count)",pm.expect(return_open_issues_count).to.be.lte(return_forks_count),post+groups_{id}_share,1,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,projects.open_issues_count,GitLab Groups API
/groups/{id}/share&/groups/{id}/share&post&201&projects():::EXIT,return.open_issues_count <= return.star_count,daikon.inv.binary.twoScalar.IntLessEqual,"(return.open_issues_count, return.star_count)",pm.expect(return_open_issues_count).to.be.lte(return_star_count),post+groups_{id}_share,1,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,projects.open_issues_count,GitLab Groups API
/groups/{id}/share&/groups/{id}/share&post&201&projects():::EXIT,return.open_issues_count <= size(return.tag_list[]),daikon.inv.binary.twoScalar.IntLessEqual,"(return.open_issues_count, size(return.tag_list[..]))",pm.expect(return_open_issues_count).to.be.lte(return_tag_list_size_array),post+groups_{id}_share,1,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,projects.tag_list,GitLab Groups API
/groups/{id}/share&/groups/{id}/share&post&201&projects():::EXIT,return.open_issues_count <= size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntLessEqual,"(return.open_issues_count, size(return.shared_with_groups[..]))",pm.expect(return_open_issues_count).to.be.lte(return_shared_with_groups_size_array),post+groups_{id}_share,1,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,projects.open_issues_count,GitLab Groups API
/groups/{id}/share&/groups/{id}/share&post&201&projects():::EXIT,return.creator_id >= size(return.tag_list[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.creator_id, size(return.tag_list[..]))",pm.expect(return_creator_id).to.be.at.least(return_tag_list_size_array),post+groups_{id}_share,1,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,projects.tag_list,GitLab Groups API
/groups/{id}/share&/groups/{id}/share&post&201&projects():::EXIT,return.creator_id >= size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.creator_id, size(return.shared_with_groups[..]))",pm.expect(return_creator_id).to.be.at.least(return_shared_with_groups_size_array),post+groups_{id}_share,1,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,projects.creator_id,GitLab Groups API
/groups/{id}/share&/groups/{id}/share&post&201&projects():::EXIT,return.namespace.path is a substring of return.namespace.full_path,daikon.inv.binary.twoString.StdString$SubString,"(return.namespace.path, return.namespace.full_path)",pm.expect(return_namespace_full_path.includes(return_namespace_path)).to.be.true,post+groups_{id}_share,1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,projects.namespace.path,GitLab Groups API
/groups/{id}/share&/groups/{id}/share&post&201&projects():::EXIT,return._links.self is a substring of return._links.issues,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.issues)",pm.expect(return__links_issues.includes(return__links_self)).to.be.true,post+groups_{id}_share,1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,projects._links.self,GitLab Groups API
/groups/{id}/share&/groups/{id}/share&post&201&projects():::EXIT,return._links.self is a substring of return._links.merge_requests,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.merge_requests)",pm.expect(return__links_merge_requests.includes(return__links_self)).to.be.true,post+groups_{id}_share,1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,projects._links.self,GitLab Groups API
/groups/{id}/share&/groups/{id}/share&post&201&projects():::EXIT,return._links.self is a substring of return._links.repo_branches,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.repo_branches)",pm.expect(return__links_repo_branches.includes(return__links_self)).to.be.true,post+groups_{id}_share,1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,projects._links.self,GitLab Groups API
/groups/{id}/share&/groups/{id}/share&post&201&projects():::EXIT,return._links.self is a substring of return._links.labels,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.labels)",pm.expect(return__links_labels.includes(return__links_self)).to.be.true,post+groups_{id}_share,1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,projects._links.self,GitLab Groups API
/groups/{id}/share&/groups/{id}/share&post&201&projects():::EXIT,return._links.self is a substring of return._links.events,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.events)",pm.expect(return__links_events.includes(return__links_self)).to.be.true,post+groups_{id}_share,1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,projects._links.self,GitLab Groups API
/groups/{id}/share&/groups/{id}/share&post&201&projects():::EXIT,return._links.self is a substring of return._links.members,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.members)",pm.expect(return__links_members.includes(return__links_self)).to.be.true,post+groups_{id}_share,1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,projects._links.self,GitLab Groups API
/groups/{id}/share&/groups/{id}/share&post&201&shared_with_groups():::EXIT,input.expires_at == return.expires_at,daikon.inv.binary.twoString.StringEqual,"(input.expires_at, return.expires_at)",pm.expect(input_expires_at).to.eql(return_expires_at),post+groups_{id}_share,1,,,Represents an invariant of == between two String scalars. Prints as x == y.,,shared_with_groups.expires_at,GitLab Groups API
/groups/{id}/share&/groups/{id}/share&post&201&shared_with_groups():::EXIT,return.expires_at is a Date. Format: YYYY/MM/DD,daikon.inv.unary.string.dates.IsDateYYYYMMDD,(return.expires_at),pm.expect(return_expires_at).to.match(/^(?:1\d{3}|20[01234][0-9]|2050|9999)[-/.](?:0[1-9]|1[012])[-/.](?:0[1-9]|[12][0-9]|3[01])$/),post+groups_{id}_share,1,,,"Indicates that the value of a string variable is always a date following the format YYYY/MM/DD or YYYY-MM-DD (the separator can be ""/"" or ""-""). Represented as x is a Date. Format YYYY/MM/DD.",,shared_with_groups.expires_at,GitLab Groups API
/groups/{id}/share&/groups/{id}/share&post&201&shared_with_groups():::EXIT,input.group_id >= return.group_id,daikon.inv.binary.twoScalar.IntGreaterEqual,"(input.group_id, return.group_id)",pm.expect(input_group_id).to.be.at.least(return_group_id),post+groups_{id}_share,1,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,shared_with_groups.group_id,GitLab Groups API
/groups/{id}/share&/groups/{id}/share&post&201():::EXIT,input.id == return.id,daikon.inv.binary.twoScalar.IntEqual,"(input.id, return.id)",pm.expect(input_id).to.eql(return_id),post+groups_{id}_share,1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,id,GitLab Groups API
/groups/{id}/share&/groups/{id}/share&post&201():::EXIT,LENGTH(return.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.created_at),pm.expect(return_created_at).to.have.length(24),post+groups_{id}_share,1,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,created_at,GitLab Groups API
/groups/{id}/share&/groups/{id}/share&post&201():::EXIT,return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.created_at),"pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",post+groups_{id}_share,1,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,created_at,GitLab Groups API
/groups/{id}/share&/groups/{id}/share&post&201():::EXIT,return.parent_id is Numeric,daikon.inv.unary.string.IsNumeric,(return.parent_id),"pm.expect(return_parent_id).to.match(/^[+-]{0,1}(0|([0-9](\d*|\d{0,2}(,\d{3})*)))?(\.\d*[0-9])?$/)",post+groups_{id}_share,1,,,Indicates that the characters of a string variable are always numeric. Represented as x is Numeric.,,parent_id,GitLab Groups API
/groups/{id}/share&/groups/{id}/share&post&201():::EXIT,"return.visibility one of { ""internal"", ""private"", ""public"" }",daikon.inv.unary.string.OneOfString,(return.visibility),"pm.expect([""internal"", ""private"", ""public""].includes(return_visibility)).to.be.true",post+groups_{id}_share,1,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,visibility,GitLab Groups API
/groups/{id}/share&/groups/{id}/share&post&201():::EXIT,return.name is a substring of return.full_name,daikon.inv.binary.twoString.StdString$SubString,"(return.full_name, return.name)",pm.expect(return_full_name.includes(return_name)).to.be.true,post+groups_{id}_share,1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,name,GitLab Groups API
/groups/{id}/share&/groups/{id}/share&post&201():::EXIT,return.path is a substring of return.full_path,daikon.inv.binary.twoString.StdString$SubString,"(return.full_path, return.path)",pm.expect(return_full_path.includes(return_path)).to.be.true,post+groups_{id}_share,1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,full_path,GitLab Groups API
/groups/{id}/share&/groups/{id}/share&post&201():::EXIT,return.full_path is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.full_path, return.web_url)",pm.expect(return_web_url.includes(return_full_path)).to.be.true,post+groups_{id}_share,1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,full_path,GitLab Groups API
/groups/{id}/share&/groups/{id}/share&post&201():::EXIT,size(return.projects[]) >= size(return.shared_projects[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(size(return.projects[..]), size(return.shared_projects[..]))",pm.expect(return_projects_size_array).to.be.at.least(return_shared_projects_size_array),post+groups_{id}_share,1,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,projects,GitLab Groups API
/groups/{id}&/groups/{id}&put&200&projects():::EXIT,input.id == return.namespace.id,daikon.inv.binary.twoScalar.IntEqual,"(input.id, return.namespace.id)",pm.expect(input_id).to.eql(return_namespace_id),put+groups_{id},1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,projects.namespace.id,GitLab Groups API
/groups/{id}&/groups/{id}&put&200&projects():::EXIT,input.name == return.namespace.name,daikon.inv.binary.twoString.StringEqual,"(input.name, return.namespace.name)",pm.expect(input_name).to.eql(return_namespace_name),put+groups_{id},1,,,Represents an invariant of == between two String scalars. Prints as x == y.,,projects.namespace.name,GitLab Groups API
/groups/{id}&/groups/{id}&put&200&projects():::EXIT,input.path == return.namespace.path,daikon.inv.binary.twoString.StringEqual,"(input.path, return.namespace.path)",pm.expect(input_path).to.eql(return_namespace_path),put+groups_{id},1,,,Represents an invariant of == between two String scalars. Prints as x == y.,,projects.namespace.path,GitLab Groups API
/groups/{id}&/groups/{id}&put&200&projects():::EXIT,input.share_with_group_lock == return.resolve_outdated_diff_discussions,daikon.inv.binary.twoScalar.IntEqual,"(input.share_with_group_lock, return.resolve_outdated_diff_discussions)",pm.expect(input_share_with_group_lock).to.eql(return_resolve_outdated_diff_discussions),put+groups_{id},1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,projects.resolve_outdated_diff_discussions,GitLab Groups API
/groups/{id}&/groups/{id}&put&200&projects():::EXIT,input.require_two_factor_authentication == return.allow_merge_on_skipped_pipeline,daikon.inv.binary.twoScalar.IntEqual,"(input.require_two_factor_authentication, return.allow_merge_on_skipped_pipeline)",pm.expect(input_require_two_factor_authentication).to.eql(return_allow_merge_on_skipped_pipeline),put+groups_{id},1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,projects.allow_merge_on_skipped_pipeline,GitLab Groups API
/groups/{id}&/groups/{id}&put&200&projects():::EXIT,input.mentions_disabled == return.issues_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.mentions_disabled, return.issues_enabled)",pm.expect(input_mentions_disabled).to.eql(return_issues_enabled),put+groups_{id},1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,projects.issues_enabled,GitLab Groups API
/groups/{id}&/groups/{id}&put&200&projects():::EXIT,input.mentions_disabled == return.merge_requests_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.mentions_disabled, return.merge_requests_enabled)",pm.expect(input_mentions_disabled).to.eql(return_merge_requests_enabled),put+groups_{id},1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,projects.merge_requests_enabled,GitLab Groups API
/groups/{id}&/groups/{id}&put&200&projects():::EXIT,input.mentions_disabled == return.public_jobs,daikon.inv.binary.twoScalar.IntEqual,"(input.mentions_disabled, return.public_jobs)",pm.expect(input_mentions_disabled).to.eql(return_public_jobs),put+groups_{id},1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,projects.public_jobs,GitLab Groups API
/groups/{id}&/groups/{id}&put&200&projects():::EXIT,input.mentions_disabled == return.allow_merge_on_skipped_pipeline,daikon.inv.binary.twoScalar.IntEqual,"(input.mentions_disabled, return.allow_merge_on_skipped_pipeline)",pm.expect(input_mentions_disabled).to.eql(return_allow_merge_on_skipped_pipeline),put+groups_{id},1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,projects.allow_merge_on_skipped_pipeline,GitLab Groups API
/groups/{id}&/groups/{id}&put&200&projects():::EXIT,input.mentions_disabled == return.autoclose_referenced_issues,daikon.inv.binary.twoScalar.IntEqual,"(input.mentions_disabled, return.autoclose_referenced_issues)",pm.expect(input_mentions_disabled).to.eql(return_autoclose_referenced_issues),put+groups_{id},1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,projects.autoclose_referenced_issues,GitLab Groups API
/groups/{id}&/groups/{id}&put&200&projects():::EXIT,return.jobs_enabled == return.allow_merge_on_skipped_pipeline,daikon.inv.binary.twoScalar.IntEqual,"(return.jobs_enabled, return.allow_merge_on_skipped_pipeline)",pm.expect(return_jobs_enabled).to.eql(return_allow_merge_on_skipped_pipeline),put+groups_{id},1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,projects.jobs_enabled,GitLab Groups API
/groups/{id}&/groups/{id}&put&200&projects():::EXIT,return.container_registry_enabled == return.allow_merge_on_skipped_pipeline,daikon.inv.binary.twoScalar.IntEqual,"(return.container_registry_enabled, return.allow_merge_on_skipped_pipeline)",pm.expect(return_container_registry_enabled).to.eql(return_allow_merge_on_skipped_pipeline),put+groups_{id},1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,projects.container_registry_enabled,GitLab Groups API
/groups/{id}&/groups/{id}&put&200&projects():::EXIT,return.namespace.path == return.namespace.full_path,daikon.inv.binary.twoString.StringEqual,"(return.namespace.path, return.namespace.full_path)",pm.expect(return_namespace_path).to.eql(return_namespace_full_path),put+groups_{id},1,,,Represents an invariant of == between two String scalars. Prints as x == y.,,projects.namespace.path,GitLab Groups API
/groups/{id}&/groups/{id}&put&200&projects():::EXIT,return.shared_runners_enabled == return.allow_merge_on_skipped_pipeline,daikon.inv.binary.twoScalar.IntEqual,"(return.shared_runners_enabled, return.allow_merge_on_skipped_pipeline)",pm.expect(return_shared_runners_enabled).to.eql(return_allow_merge_on_skipped_pipeline),put+groups_{id},1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,projects.shared_runners_enabled,GitLab Groups API
/groups/{id}&/groups/{id}&put&200&projects():::EXIT,"return.default_branch one of { ""main"", ""master"" }",daikon.inv.unary.string.OneOfString,(return.default_branch),"pm.expect([""main"", ""master""].includes(return_default_branch)).to.be.true",put+groups_{id},1,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,projects.default_branch,GitLab Groups API
/groups/{id}&/groups/{id}&put&200&projects():::EXIT,"return.visibility == ""private""",daikon.inv.unary.string.OneOfString,(return.visibility),"pm.expect([""private""].includes(return_visibility)).to.be.true",put+groups_{id},1,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,projects.visibility,GitLab Groups API
/groups/{id}&/groups/{id}&put&200&projects():::EXIT,LENGTH(return.visibility)==7,daikon.inv.unary.string.FixedLengthString,(return.visibility),pm.expect(return_visibility).to.have.length(7),put+groups_{id},1,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,projects.visibility,GitLab Groups API
/groups/{id}&/groups/{id}&put&200&projects():::EXIT,LENGTH(return.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.created_at),pm.expect(return_created_at).to.have.length(24),put+groups_{id},1,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,projects.created_at,GitLab Groups API
/groups/{id}&/groups/{id}&put&200&projects():::EXIT,return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.created_at),"pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",put+groups_{id},1,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,projects.created_at,GitLab Groups API
/groups/{id}&/groups/{id}&put&200&projects():::EXIT,LENGTH(return.last_activity_at)==24,daikon.inv.unary.string.FixedLengthString,(return.last_activity_at),pm.expect(return_last_activity_at).to.have.length(24),put+groups_{id},1,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,projects.last_activity_at,GitLab Groups API
/groups/{id}&/groups/{id}&put&200&projects():::EXIT,return.last_activity_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.last_activity_at),"pm.expect(return_last_activity_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",put+groups_{id},1,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,projects.last_activity_at,GitLab Groups API
/groups/{id}&/groups/{id}&put&200&projects():::EXIT,"return.namespace.kind == ""group""",daikon.inv.unary.string.OneOfString,(return.namespace.kind),"pm.expect([""group""].includes(return_namespace_kind)).to.be.true",put+groups_{id},1,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,projects.namespace.kind,GitLab Groups API
/groups/{id}&/groups/{id}&put&200&projects():::EXIT,LENGTH(return.namespace.kind)==5,daikon.inv.unary.string.FixedLengthString,(return.namespace.kind),pm.expect(return_namespace_kind).to.have.length(5),put+groups_{id},1,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,projects.namespace.kind,GitLab Groups API
/groups/{id}&/groups/{id}&put&200&projects():::EXIT,"return.import_status one of { ""finished"", ""none"" }",daikon.inv.unary.string.OneOfString,(return.import_status),"pm.expect([""finished"", ""none""].includes(return_import_status)).to.be.true",put+groups_{id},1,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,projects.import_status,GitLab Groups API
/groups/{id}&/groups/{id}&put&200&projects():::EXIT,return.forks_count >= 0,daikon.inv.unary.scalar.LowerBound,(return.forks_count),pm.expect(return_forks_count).to.be.at.least(0),put+groups_{id},1,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,projects.forks_count,GitLab Groups API
/groups/{id}&/groups/{id}&put&200&projects():::EXIT,"return.star_count one of { 0, 1, 2 }",daikon.inv.unary.scalar.OneOfScalar,(return.star_count),"pm.expect([0, 1, 2].includes(return_star_count)).to.be.true",put+groups_{id},1,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,projects.star_count,GitLab Groups API
/groups/{id}&/groups/{id}&put&200&projects():::EXIT,return.allow_merge_on_skipped_pipeline == true,daikon.inv.unary.scalar.OneOfScalar,(return.allow_merge_on_skipped_pipeline),pm.expect(return_allow_merge_on_skipped_pipeline).to.eql(true),put+groups_{id},1,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,projects.allow_merge_on_skipped_pipeline,GitLab Groups API
/groups/{id}&/groups/{id}&put&200&projects():::EXIT,"return.merge_method one of { ""ff"", ""merge"" }",daikon.inv.unary.string.OneOfString,(return.merge_method),"pm.expect([""ff"", ""merge""].includes(return_merge_method)).to.be.true",put+groups_{id},1,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,projects.merge_method,GitLab Groups API
/groups/{id}&/groups/{id}&put&200&projects():::EXIT,"size(return.tag_list[]) one of { 0, 1 }",daikon.inv.unary.scalar.OneOfScalar,(size(return.tag_list[..])),"pm.expect([0, 1, 0].includes(return_tag_list_size_array)).to.be.true",put+groups_{id},1,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,projects.tag_list,GitLab Groups API
/groups/{id}&/groups/{id}&put&200&projects():::EXIT,input.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(input.name, return.name_with_namespace)",pm.expect(return_name_with_namespace.includes(input_name)).to.be.true,put+groups_{id},1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,projects.name_with_namespace,GitLab Groups API
/groups/{id}&/groups/{id}&put&200&projects():::EXIT,input.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(input.path, return.path_with_namespace)",pm.expect(return_path_with_namespace.includes(input_path)).to.be.true,put+groups_{id},1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,projects.path_with_namespace,GitLab Groups API
/groups/{id}&/groups/{id}&put&200&projects():::EXIT,return.default_branch is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.default_branch, return.readme_url)",pm.expect(return_readme_url.includes(return_default_branch)).to.be.true,put+groups_{id},1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,projects.default_branch,GitLab Groups API
/groups/{id}&/groups/{id}&put&200&projects():::EXIT,return.path_with_namespace is a substring of return.ssh_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.ssh_url_to_repo, return.path_with_namespace)",pm.expect(return_ssh_url_to_repo.includes(return_path_with_namespace)).to.be.true,put+groups_{id},1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,projects.path_with_namespace,GitLab Groups API
/groups/{id}&/groups/{id}&put&200&projects():::EXIT,return.web_url is a substring of return.http_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.http_url_to_repo, return.web_url)",pm.expect(return_http_url_to_repo.includes(return_web_url)).to.be.true,put+groups_{id},1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,projects.web_url,GitLab Groups API
/groups/{id}&/groups/{id}&put&200&projects():::EXIT,return.web_url is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.readme_url)",pm.expect(return_readme_url.includes(return_web_url)).to.be.true,put+groups_{id},1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,projects.web_url,GitLab Groups API
/groups/{id}&/groups/{id}&put&200&projects():::EXIT,return.path_with_namespace is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.path_with_namespace)",pm.expect(return_web_url.includes(return_path_with_namespace)).to.be.true,put+groups_{id},1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,projects.path_with_namespace,GitLab Groups API
/groups/{id}&/groups/{id}&put&200&projects():::EXIT,return.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.name, return.name_with_namespace)",pm.expect(return_name_with_namespace.includes(return_name)).to.be.true,put+groups_{id},1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,projects.name_with_namespace,GitLab Groups API
/groups/{id}&/groups/{id}&put&200&projects():::EXIT,return.namespace.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.name_with_namespace, return.namespace.name)",pm.expect(return_name_with_namespace.includes(return_namespace_name)).to.be.true,put+groups_{id},1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,projects.name_with_namespace,GitLab Groups API
/groups/{id}&/groups/{id}&put&200&projects():::EXIT,return.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path, return.path_with_namespace)",pm.expect(return_path_with_namespace.includes(return_path)).to.be.true,put+groups_{id},1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,projects.path_with_namespace,GitLab Groups API
/groups/{id}&/groups/{id}&put&200&projects():::EXIT,return.namespace.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path_with_namespace, return.namespace.path)",pm.expect(return_path_with_namespace.includes(return_namespace_path)).to.be.true,put+groups_{id},1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,projects.path_with_namespace,GitLab Groups API
/groups/{id}&/groups/{id}&put&200&projects():::EXIT,return.open_issues_count <= return.forks_count,daikon.inv.binary.twoScalar.IntLessEqual,"(return.open_issues_count, return.forks_count)",pm.expect(return_open_issues_count).to.be.lte(return_forks_count),put+groups_{id},1,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,projects.open_issues_count,GitLab Groups API
/groups/{id}&/groups/{id}&put&200&projects():::EXIT,return.open_issues_count <= return.star_count,daikon.inv.binary.twoScalar.IntLessEqual,"(return.open_issues_count, return.star_count)",pm.expect(return_open_issues_count).to.be.lte(return_star_count),put+groups_{id},1,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,projects.open_issues_count,GitLab Groups API
/groups/{id}&/groups/{id}&put&200&projects():::EXIT,return.open_issues_count <= size(return.tag_list[]),daikon.inv.binary.twoScalar.IntLessEqual,"(return.open_issues_count, size(return.tag_list[..]))",pm.expect(return_open_issues_count).to.be.lte(return_tag_list_size_array),put+groups_{id},1,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,projects.tag_list,GitLab Groups API
/groups/{id}&/groups/{id}&put&200&projects():::EXIT,return.creator_id >= size(return.tag_list[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.creator_id, size(return.tag_list[..]))",pm.expect(return_creator_id).to.be.at.least(return_tag_list_size_array),put+groups_{id},1,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,projects.tag_list,GitLab Groups API
/groups/{id}&/groups/{id}&put&200&projects():::EXIT,return.forks_count >= size(return.tag_list[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.forks_count, size(return.tag_list[..]))",pm.expect(return_forks_count).to.be.at.least(return_tag_list_size_array),put+groups_{id},1,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,projects.tag_list,GitLab Groups API
/groups/{id}&/groups/{id}&put&200&projects():::EXIT,return.star_count >= size(return.tag_list[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.star_count, size(return.tag_list[..]))",pm.expect(return_star_count).to.be.at.least(return_tag_list_size_array),put+groups_{id},1,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,projects.tag_list,GitLab Groups API
/groups/{id}&/groups/{id}&put&200&projects():::EXIT,return._links.self is a substring of return._links.issues,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.issues)",pm.expect(return__links_issues.includes(return__links_self)).to.be.true,put+groups_{id},1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,projects._links.self,GitLab Groups API
/groups/{id}&/groups/{id}&put&200&projects():::EXIT,return._links.self is a substring of return._links.merge_requests,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.merge_requests)",pm.expect(return__links_merge_requests.includes(return__links_self)).to.be.true,put+groups_{id},1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,projects._links.self,GitLab Groups API
/groups/{id}&/groups/{id}&put&200&projects():::EXIT,return._links.self is a substring of return._links.repo_branches,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.repo_branches)",pm.expect(return__links_repo_branches.includes(return__links_self)).to.be.true,put+groups_{id},1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,projects._links.self,GitLab Groups API
/groups/{id}&/groups/{id}&put&200&projects():::EXIT,return._links.self is a substring of return._links.labels,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.labels)",pm.expect(return__links_labels.includes(return__links_self)).to.be.true,put+groups_{id},1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,projects._links.self,GitLab Groups API
/groups/{id}&/groups/{id}&put&200&projects():::EXIT,return._links.self is a substring of return._links.events,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.events)",pm.expect(return__links_events.includes(return__links_self)).to.be.true,put+groups_{id},1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,projects._links.self,GitLab Groups API
/groups/{id}&/groups/{id}&put&200&projects():::EXIT,return._links.self is a substring of return._links.members,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.members)",pm.expect(return__links_members.includes(return__links_self)).to.be.true,put+groups_{id},1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,projects._links.self,GitLab Groups API
/groups/{id}&/groups/{id}&put&200():::EXIT,input.id == return.id,daikon.inv.binary.twoScalar.IntEqual,"(input.id, return.id)",pm.expect(input_id).to.eql(return_id),put+groups_{id},1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,id,GitLab Groups API
/groups/{id}&/groups/{id}&put&200():::EXIT,input.path == return.full_path,daikon.inv.binary.twoString.StringEqual,"(input.path, return.full_path)",pm.expect(input_path).to.eql(return_full_path),put+groups_{id},1,,,Represents an invariant of == between two String scalars. Prints as x == y.,,full_path,GitLab Groups API
/groups/{id}&/groups/{id}&put&200():::EXIT,input.description == return.description,daikon.inv.binary.twoString.StringEqual,"(input.description, return.description)",pm.expect(input_description).to.eql(return_description),put+groups_{id},1,,,Represents an invariant of == between two String scalars. Prints as x == y.,,description,GitLab Groups API
/groups/{id}&/groups/{id}&put&200():::EXIT,input.visibility == return.visibility,daikon.inv.binary.twoString.StringEqual,"(input.visibility, return.visibility)",pm.expect(input_visibility).to.eql(return_visibility),put+groups_{id},1,,,Represents an invariant of == between two String scalars. Prints as x == y.,,visibility,GitLab Groups API
/groups/{id}&/groups/{id}&put&200():::EXIT,input.request_access_enabled == return.request_access_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.request_access_enabled, return.request_access_enabled)",pm.expect(input_request_access_enabled).to.eql(return_request_access_enabled),put+groups_{id},1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,request_access_enabled,GitLab Groups API
/groups/{id}&/groups/{id}&put&200():::EXIT,return.full_name == return.name,daikon.inv.binary.twoString.StringEqual,"(return.full_name, return.name)",pm.expect(return_full_name).to.eql(return_name),put+groups_{id},1,,,Represents an invariant of == between two String scalars. Prints as x == y.,,name,GitLab Groups API
/groups/{id}&/groups/{id}&put&200():::EXIT,return.full_path == return.path,daikon.inv.binary.twoString.StringEqual,"(return.full_path, return.path)",pm.expect(return_full_path).to.eql(return_path),put+groups_{id},1,,,Represents an invariant of == between two String scalars. Prints as x == y.,,full_path,GitLab Groups API
/groups/{id}&/groups/{id}&put&200():::EXIT,LENGTH(return.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.created_at),pm.expect(return_created_at).to.have.length(24),put+groups_{id},1,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,created_at,GitLab Groups API
/groups/{id}&/groups/{id}&put&200():::EXIT,return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.created_at),"pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",put+groups_{id},1,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,created_at,GitLab Groups API
/groups/{id}&/groups/{id}&put&200():::EXIT,return.shared_with_groups[] == [],daikon.inv.unary.sequence.OneOfSequence,(return.shared_with_groups[..]),pm.expect([[]].some(value => pm.expect(return_shared_with_groups_array).to.deep.equal(value).that)).to.be.true,put+groups_{id},1,,,"Represents long[] variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,shared_with_groups,GitLab Groups API
/groups/{id}&/groups/{id}&put&200():::EXIT,"return.visibility one of { ""internal"", ""private"", ""public"" }",daikon.inv.unary.string.OneOfString,(return.visibility),"pm.expect([""internal"", ""private"", ""public""].includes(return_visibility)).to.be.true",put+groups_{id},1,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,visibility,GitLab Groups API
/groups/{id}&/groups/{id}&put&200():::EXIT,input.path is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(input.path, return.web_url)",pm.expect(return_web_url.includes(input_path)).to.be.true,put+groups_{id},1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,web_url,GitLab Groups API
/groups/{id}&/groups/{id}&put&200():::EXIT,return.full_path is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.full_path, return.web_url)",pm.expect(return_web_url.includes(return_full_path)).to.be.true,put+groups_{id},1,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,full_path,GitLab Groups API
/groups/{id}&/groups/{id}&put&200():::EXIT,size(return.projects[]) >= size(return.shared_projects[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(size(return.projects[..]), size(return.shared_projects[..]))",pm.expect(return_projects_size_array).to.be.at.least(return_shared_projects_size_array),put+groups_{id},1,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,projects,GitLab Groups API
/groups/{id}&/groups/{id}&put&200():::EXIT,size(return.projects[]) >= size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(size(return.projects[..]), size(return.shared_with_groups[..]))",pm.expect(return_projects_size_array).to.be.at.least(return_shared_with_groups_size_array),put+groups_{id},1,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,projects,GitLab Groups API
/groups/{id}&/groups/{id}&put&200():::EXIT,size(return.shared_projects[]) >= size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(size(return.shared_projects[..]), size(return.shared_with_groups[..]))",pm.expect(return_shared_projects_size_array).to.be.at.least(return_shared_with_groups_size_array),put+groups_{id},1,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,shared_projects,GitLab Groups API
/groups/{id}/hooks/{hook_id}&/groups/{id}/hooks/{hook_id}&put&200():::EXIT,input.id == return.group_id,daikon.inv.binary.twoScalar.IntEqual,"(input.id, return.group_id)",pm.expect(input_id).to.eql(return_group_id),put+groups_{id}_hooks_{hook_id},1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,group_id,GitLab Groups API
/groups/{id}/hooks/{hook_id}&/groups/{id}/hooks/{hook_id}&put&200():::EXIT,input.hook_id == return.id,daikon.inv.binary.twoScalar.IntEqual,"(input.hook_id, return.id)",pm.expect(input_hook_id).to.eql(return_id),put+groups_{id}_hooks_{hook_id},1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,id,GitLab Groups API
/groups/{id}/hooks/{hook_id}&/groups/{id}/hooks/{hook_id}&put&200():::EXIT,input.url == return.url,daikon.inv.binary.twoString.StringEqual,"(input.url, return.url)",pm.expect(input_url).to.eql(return_url),put+groups_{id}_hooks_{hook_id},1,,,Represents an invariant of == between two String scalars. Prints as x == y.,,url,GitLab Groups API
/groups/{id}/hooks/{hook_id}&/groups/{id}/hooks/{hook_id}&put&200():::EXIT,input.push_events == return.push_events,daikon.inv.binary.twoScalar.IntEqual,"(input.push_events, return.push_events)",pm.expect(input_push_events).to.eql(return_push_events),put+groups_{id}_hooks_{hook_id},1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,push_events,GitLab Groups API
/groups/{id}/hooks/{hook_id}&/groups/{id}/hooks/{hook_id}&put&200():::EXIT,input.issues_events == return.issues_events,daikon.inv.binary.twoScalar.IntEqual,"(input.issues_events, return.issues_events)",pm.expect(input_issues_events).to.eql(return_issues_events),put+groups_{id}_hooks_{hook_id},1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,issues_events,GitLab Groups API
/groups/{id}/hooks/{hook_id}&/groups/{id}/hooks/{hook_id}&put&200():::EXIT,input.confidential_issues_events == return.confidential_issues_events,daikon.inv.binary.twoScalar.IntEqual,"(input.confidential_issues_events, return.confidential_issues_events)",pm.expect(input_confidential_issues_events).to.eql(return_confidential_issues_events),put+groups_{id}_hooks_{hook_id},1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,confidential_issues_events,GitLab Groups API
/groups/{id}/hooks/{hook_id}&/groups/{id}/hooks/{hook_id}&put&200():::EXIT,input.merge_requests_events == return.merge_requests_events,daikon.inv.binary.twoScalar.IntEqual,"(input.merge_requests_events, return.merge_requests_events)",pm.expect(input_merge_requests_events).to.eql(return_merge_requests_events),put+groups_{id}_hooks_{hook_id},1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,merge_requests_events,GitLab Groups API
/groups/{id}/hooks/{hook_id}&/groups/{id}/hooks/{hook_id}&put&200():::EXIT,input.tag_push_events == return.tag_push_events,daikon.inv.binary.twoScalar.IntEqual,"(input.tag_push_events, return.tag_push_events)",pm.expect(input_tag_push_events).to.eql(return_tag_push_events),put+groups_{id}_hooks_{hook_id},1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,tag_push_events,GitLab Groups API
/groups/{id}/hooks/{hook_id}&/groups/{id}/hooks/{hook_id}&put&200():::EXIT,input.note_events == return.note_events,daikon.inv.binary.twoScalar.IntEqual,"(input.note_events, return.note_events)",pm.expect(input_note_events).to.eql(return_note_events),put+groups_{id}_hooks_{hook_id},1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,note_events,GitLab Groups API
/groups/{id}/hooks/{hook_id}&/groups/{id}/hooks/{hook_id}&put&200():::EXIT,input.confidential_note_events == return.confidential_note_events,daikon.inv.binary.twoScalar.IntEqual,"(input.confidential_note_events, return.confidential_note_events)",pm.expect(input_confidential_note_events).to.eql(return_confidential_note_events),put+groups_{id}_hooks_{hook_id},1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,confidential_note_events,GitLab Groups API
/groups/{id}/hooks/{hook_id}&/groups/{id}/hooks/{hook_id}&put&200():::EXIT,input.job_events == return.job_events,daikon.inv.binary.twoScalar.IntEqual,"(input.job_events, return.job_events)",pm.expect(input_job_events).to.eql(return_job_events),put+groups_{id}_hooks_{hook_id},1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,job_events,GitLab Groups API
/groups/{id}/hooks/{hook_id}&/groups/{id}/hooks/{hook_id}&put&200():::EXIT,input.pipeline_events == return.pipeline_events,daikon.inv.binary.twoScalar.IntEqual,"(input.pipeline_events, return.pipeline_events)",pm.expect(input_pipeline_events).to.eql(return_pipeline_events),put+groups_{id}_hooks_{hook_id},1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,pipeline_events,GitLab Groups API
/groups/{id}/hooks/{hook_id}&/groups/{id}/hooks/{hook_id}&put&200():::EXIT,input.deployment_events == return.deployment_events,daikon.inv.binary.twoScalar.IntEqual,"(input.deployment_events, return.deployment_events)",pm.expect(input_deployment_events).to.eql(return_deployment_events),put+groups_{id}_hooks_{hook_id},1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,deployment_events,GitLab Groups API
/groups/{id}/hooks/{hook_id}&/groups/{id}/hooks/{hook_id}&put&200():::EXIT,input.releases_events == return.releases_events,daikon.inv.binary.twoScalar.IntEqual,"(input.releases_events, return.releases_events)",pm.expect(input_releases_events).to.eql(return_releases_events),put+groups_{id}_hooks_{hook_id},1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,releases_events,GitLab Groups API
/groups/{id}/hooks/{hook_id}&/groups/{id}/hooks/{hook_id}&put&200():::EXIT,input.enable_ssl_verification == return.enable_ssl_verification,daikon.inv.binary.twoScalar.IntEqual,"(input.enable_ssl_verification, return.enable_ssl_verification)",pm.expect(input_enable_ssl_verification).to.eql(return_enable_ssl_verification),put+groups_{id}_hooks_{hook_id},1,,,Represents an invariant of == between two long scalars. Prints as x == y.,,enable_ssl_verification,GitLab Groups API
/groups/{id}/hooks/{hook_id}&/groups/{id}/hooks/{hook_id}&put&200():::EXIT,LENGTH(return.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.created_at),pm.expect(return_created_at).to.have.length(24),put+groups_{id}_hooks_{hook_id},1,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,created_at,GitLab Groups API
/groups/{id}/hooks/{hook_id}&/groups/{id}/hooks/{hook_id}&put&200():::EXIT,return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.created_at),"pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",put+groups_{id}_hooks_{hook_id},1,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,created_at,GitLab Groups API
