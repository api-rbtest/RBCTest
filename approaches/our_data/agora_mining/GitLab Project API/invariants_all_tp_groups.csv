endpoint,group,invariant,invariantType,variables,pptname,tp
get+projects,_links.self,"return._links.self is a substring of return._links.issues
return._links.self is a substring of return._links.merge_requests
return._links.self is a substring of return._links.repo_branches
return._links.self is a substring of return._links.labels
return._links.self is a substring of return._links.events
return._links.self is a substring of return._links.members","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return._links.self, return._links.issues)
(return._links.self, return._links.merge_requests)
(return._links.self, return._links.repo_branches)
(return._links.self, return._links.labels)
(return._links.self, return._links.events)
(return._links.self, return._links.members)","/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT",1.0
get+projects,archived,input.archived == return.archived,daikon.inv.binary.twoScalar.IntEqual,"(input.archived, return.archived)",/projects&/projects&get&200():::EXIT,1.0
get+projects,auto_devops_deploy_strategy,"return.auto_devops_deploy_strategy one of { ""continuous"", ""manual"", ""timed_incremental"" }",daikon.inv.unary.string.OneOfString,(return.auto_devops_deploy_strategy),/projects&/projects&get&200():::EXIT,1.0
get+projects,created_at,"LENGTH(return.created_at)==24
return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.created_at)
(return.created_at)","/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT",1.0
get+projects,default_branch,return.default_branch is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.default_branch, return.readme_url)",/projects&/projects&get&200():::EXIT,1.0
get+projects,last_activity_at,"LENGTH(return.last_activity_at)==24
return.last_activity_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.last_activity_at)
(return.last_activity_at)","/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT",1.0
get+projects,merge_method,"return.merge_method one of { ""ff"", ""merge"", ""rebase_merge"" }",daikon.inv.unary.string.OneOfString,(return.merge_method),/projects&/projects&get&200():::EXIT,1.0
get+projects,name_with_namespace,"return.owner.name is a substring of return.name_with_namespace
return.name is a substring of return.name_with_namespace
return.namespace.name is a substring of return.name_with_namespace","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return.owner.name, return.name_with_namespace)
(return.name, return.name_with_namespace)
(return.name_with_namespace, return.namespace.name)","/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT",1.0
get+projects,namespace.kind,"return.namespace.kind one of { ""group"", ""user"" }",daikon.inv.unary.string.OneOfString,(return.namespace.kind),/projects&/projects&get&200():::EXIT,1.0
get+projects,namespace.path,return.namespace.path is a substring of return.namespace.full_path,daikon.inv.binary.twoString.StdString$SubString,"(return.namespace.path, return.namespace.full_path)",/projects&/projects&get&200():::EXIT,1.0
get+projects,path_with_namespace,"return.path_with_namespace is a substring of return.ssh_url_to_repo
return.path_with_namespace is a substring of return.web_url
return.path is a substring of return.path_with_namespace
return.namespace.full_path is a substring of return.path_with_namespace","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return.ssh_url_to_repo, return.path_with_namespace)
(return.web_url, return.path_with_namespace)
(return.path, return.path_with_namespace)
(return.path_with_namespace, return.namespace.full_path)","/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT",1.0
get+projects,permissions.project_access.notification_level,"return.permissions.project_access.notification_level == return.permissions.group_access.notification_level
return.permissions.project_access.notification_level == 3","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.OneOfScalar","(return.permissions.project_access.notification_level, return.permissions.group_access.notification_level)
(return.permissions.project_access.notification_level)","/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT",1.0
get+projects,repository_storage,"return.repository_storage == ""default""
LENGTH(return.repository_storage)==7","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.repository_storage)
(return.repository_storage)","/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT",1.0
get+projects,runners_token,LENGTH(return.runners_token)==29,daikon.inv.unary.string.FixedLengthString,(return.runners_token),/projects&/projects&get&200():::EXIT,1.0
get+projects,visibility,"input.visibility == return.visibility
return.visibility one of { ""internal"", ""private"", ""public"" }","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.OneOfString","(input.visibility, return.visibility)
(return.visibility)","/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT",1.0
get+projects,web_url,"return.web_url is a substring of return.http_url_to_repo
return.web_url is a substring of return.readme_url","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return.http_url_to_repo, return.web_url)
(return.web_url, return.readme_url)","/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT",1.0
get+projects_{id},archived,"return.archived == return.service_desk_enabled
return.archived == false","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.OneOfScalar","(return.archived, return.service_desk_enabled)
(return.archived)","/projects/{id}&/projects/{id}&get&200():::EXIT
/projects/{id}&/projects/{id}&get&200():::EXIT",1.0
get+projects_{id},auto_devops_deploy_strategy,"return.auto_devops_deploy_strategy one of { ""continuous"", ""manual"", ""timed_incremental"" }",daikon.inv.unary.string.OneOfString,(return.auto_devops_deploy_strategy),/projects/{id}&/projects/{id}&get&200():::EXIT,1.0
get+projects_{id},compliance_frameworks,return.compliance_frameworks[] == [],daikon.inv.unary.stringsequence.OneOfStringSequence,(return.compliance_frameworks[..]),/projects/{id}&/projects/{id}&get&200():::EXIT,1.0
get+projects_{id},container_expiration_policy.enabled,return.container_expiration_policy.enabled == return.archived,daikon.inv.binary.twoScalar.IntEqual,"(return.container_expiration_policy.enabled, return.archived)",/projects/{id}&/projects/{id}&get&200():::EXIT,1.0
get+projects_{id},container_expiration_policy.next_run_at,"LENGTH(return.container_expiration_policy.next_run_at)==24
return.container_expiration_policy.next_run_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.container_expiration_policy.next_run_at)
(return.container_expiration_policy.next_run_at)","/projects/{id}&/projects/{id}&get&200():::EXIT
/projects/{id}&/projects/{id}&get&200():::EXIT",1.0
get+projects_{id},creator_id,"return.creator_id >= 1
return.creator_id <= return.namespace.id
return.creator_id >= return.statistics.commit_count","daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.creator_id)
(return.creator_id, return.namespace.id)
(return.creator_id, return.statistics.commit_count)","/projects/{id}&/projects/{id}&get&200():::EXIT
/projects/{id}&/projects/{id}&get&200():::EXIT
/projects/{id}&/projects/{id}&get&200():::EXIT",1.0
get+projects_{id},id,return.id > return.namespace.id,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.id, return.namespace.id)",/projects/{id}&/projects/{id}&get&200():::EXIT,1.0
get+projects_{id},merge_method,"return.merge_method one of { ""ff"", ""merge"", ""rebase_merge"" }",daikon.inv.unary.string.OneOfString,(return.merge_method),/projects/{id}&/projects/{id}&get&200():::EXIT,1.0
get+projects_{id},merge_requests_enabled,return.merge_requests_enabled == return.can_create_merge_request_in,daikon.inv.binary.twoScalar.IntEqual,"(return.merge_requests_enabled, return.can_create_merge_request_in)",/projects/{id}&/projects/{id}&get&200():::EXIT,1.0
get+projects_{id},name_with_namespace,"return.owner.name is a substring of return.name_with_namespace
return.name is a substring of return.name_with_namespace","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return.owner.name, return.name_with_namespace)
(return.name, return.name_with_namespace)","/projects/{id}&/projects/{id}&get&200():::EXIT
/projects/{id}&/projects/{id}&get&200():::EXIT",1.0
get+projects_{id},namespace.id,"return.namespace.id >= 1
return.namespace.id >= return.statistics.commit_count","daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.namespace.id)
(return.namespace.id, return.statistics.commit_count)","/projects/{id}&/projects/{id}&get&200():::EXIT
/projects/{id}&/projects/{id}&get&200():::EXIT",1.0
get+projects_{id},namespace.path,return.namespace.path == return.namespace.full_path,daikon.inv.binary.twoString.StringEqual,"(return.namespace.path, return.namespace.full_path)",/projects/{id}&/projects/{id}&get&200():::EXIT,1.0
get+projects_{id},owner.id,return.owner.id == return.creator_id,daikon.inv.binary.twoScalar.IntEqual,"(return.owner.id, return.creator_id)",/projects/{id}&/projects/{id}&get&200():::EXIT,1.0
get+projects_{id},owner.name,return.owner.name == return.namespace.name,daikon.inv.binary.twoString.StringEqual,"(return.owner.name, return.namespace.name)",/projects/{id}&/projects/{id}&get&200():::EXIT,1.0
get+projects_{id},path_with_namespace,"return.path_with_namespace is a substring of return.ssh_url_to_repo
return.path_with_namespace is a substring of return.web_url
return.path is a substring of return.path_with_namespace
return.namespace.path is a substring of return.path_with_namespace","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return.ssh_url_to_repo, return.path_with_namespace)
(return.web_url, return.path_with_namespace)
(return.path, return.path_with_namespace)
(return.path_with_namespace, return.namespace.path)","/projects/{id}&/projects/{id}&get&200():::EXIT
/projects/{id}&/projects/{id}&get&200():::EXIT
/projects/{id}&/projects/{id}&get&200():::EXIT
/projects/{id}&/projects/{id}&get&200():::EXIT",1.0
get+projects_{id},permissions.group_access,return.permissions.group_access == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.group_access),/projects/{id}&/projects/{id}&get&200():::EXIT,1.0
get+projects_{id},repository_storage,"return.repository_storage == ""default""
LENGTH(return.repository_storage)==7","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.repository_storage)
(return.repository_storage)","/projects/{id}&/projects/{id}&get&200():::EXIT
/projects/{id}&/projects/{id}&get&200():::EXIT",1.0
get+projects_{id},runners_token,LENGTH(return.runners_token)==29,daikon.inv.unary.string.FixedLengthString,(return.runners_token),/projects/{id}&/projects/{id}&get&200():::EXIT,1.0
get+projects_{id},shared_with_groups,return.shared_with_groups[] == [],daikon.inv.unary.sequence.OneOfSequence,(return.shared_with_groups[..]),/projects/{id}&/projects/{id}&get&200():::EXIT,1.0
get+projects_{id},statistics.job_artifacts_size,return.statistics.wiki_size == return.statistics.job_artifacts_size,daikon.inv.binary.twoScalar.IntEqual,"(return.statistics.wiki_size, return.statistics.job_artifacts_size)",/projects/{id}&/projects/{id}&get&200():::EXIT,1.0
get+projects_{id},visibility,"return.visibility one of { ""internal"", ""private"", ""public"" }",daikon.inv.unary.string.OneOfString,(return.visibility),/projects/{id}&/projects/{id}&get&200():::EXIT,1.0
get+projects_{id},web_url,"return.web_url is a substring of return.http_url_to_repo
return.web_url is a substring of return.readme_url","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return.http_url_to_repo, return.web_url)
(return.web_url, return.readme_url)","/projects/{id}&/projects/{id}&get&200():::EXIT
/projects/{id}&/projects/{id}&get&200():::EXIT",1.0
get+projects_{id}_forks,created_at,"return.created_at == return.last_activity_at
LENGTH(return.created_at)==24
return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.created_at, return.last_activity_at)
(return.created_at)
(return.created_at)","/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT",1.0
get+projects_{id}_forks,forks_count,"return.forks_count >= 0
input.id > return.forks_count
return.forks_count >= return.star_count
return.forks_count >= size(return.shared_with_groups[])","daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.twoScalar.IntGreaterThan
daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.forks_count)
(input.id, return.forks_count)
(return.forks_count, return.star_count)
(return.forks_count, size(return.shared_with_groups[..]))","/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT",1.0
get+projects_{id}_forks,id,input.id < return.id,daikon.inv.binary.twoScalar.IntLessThan,"(input.id, return.id)",/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,1.0
get+projects_{id}_forks,import_status,"return.import_status == ""finished""
LENGTH(return.import_status)==8","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.import_status)
(return.import_status)","/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT",1.0
get+projects_{id}_forks,merge_method,"return.merge_method == ""merge""
LENGTH(return.merge_method)==5
return.merge_method is a substring of return._links.merge_requests","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString
daikon.inv.binary.twoString.StdString$SubString","(return.merge_method)
(return.merge_method)
(return.merge_method, return._links.merge_requests)","/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT",1.0
get+projects_{id}_forks,merge_requests_enabled,return.merge_requests_enabled == return.can_create_merge_request_in,daikon.inv.binary.twoScalar.IntEqual,"(return.merge_requests_enabled, return.can_create_merge_request_in)",/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,1.0
get+projects_{id}_forks,name_with_namespace,"return.name is a substring of return.name_with_namespace
return.namespace.name is a substring of return.name_with_namespace","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return.name, return.name_with_namespace)
(return.name_with_namespace, return.namespace.name)","/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT",1.0
get+projects_{id}_forks,open_issues_count,"return.open_issues_count == return.star_count
return.open_issues_count == size(return.shared_with_groups[])
return.open_issues_count == 0
return.open_issues_count <= return.forks_count","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.OneOfScalar
daikon.inv.binary.twoScalar.IntLessEqual","(return.open_issues_count, return.star_count)
(return.open_issues_count, size(return.shared_with_groups[..]))
(return.open_issues_count)
(return.open_issues_count, return.forks_count)","/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT",1.0
get+projects_{id}_forks,path_with_namespace,"return.path_with_namespace is a substring of return.ssh_url_to_repo
return.path_with_namespace is a substring of return.web_url
return.path is a substring of return.path_with_namespace
return.namespace.path is a substring of return.path_with_namespace","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return.ssh_url_to_repo, return.path_with_namespace)
(return.web_url, return.path_with_namespace)
(return.path, return.path_with_namespace)
(return.path_with_namespace, return.namespace.path)","/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT",1.0
get+projects_{id}_forks,public_jobs,"return.public_jobs == return.remove_source_branch_after_merge
return.public_jobs == return.request_access_enabled
return.public_jobs == return.autoclose_referenced_issues
return.public_jobs == true","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.OneOfScalar","(return.public_jobs, return.remove_source_branch_after_merge)
(return.public_jobs, return.request_access_enabled)
(return.public_jobs, return.autoclose_referenced_issues)
(return.public_jobs)","/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT",1.0
get+projects_{id}_forks,resolve_outdated_diff_discussions,"input.archived == return.resolve_outdated_diff_discussions
input.simple == return.resolve_outdated_diff_discussions
input.starred == return.resolve_outdated_diff_discussions
return.resolve_outdated_diff_discussions == return.archived
return.resolve_outdated_diff_discussions == return.only_allow_merge_if_pipeline_succeeds
return.resolve_outdated_diff_discussions == return.only_allow_merge_if_all_discussions_are_resolved
return.resolve_outdated_diff_discussions == false","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.OneOfScalar","(input.archived, return.resolve_outdated_diff_discussions)
(input.simple, return.resolve_outdated_diff_discussions)
(input.starred, return.resolve_outdated_diff_discussions)
(return.resolve_outdated_diff_discussions, return.archived)
(return.resolve_outdated_diff_discussions, return.only_allow_merge_if_pipeline_succeeds)
(return.resolve_outdated_diff_discussions, return.only_allow_merge_if_all_discussions_are_resolved)
(return.resolve_outdated_diff_discussions)","/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT",1.0
get+projects_{id}_forks,star_count,return.star_count == size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntEqual,"(return.star_count, size(return.shared_with_groups[..]))",/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,1.0
get+projects_{id}_forks,visibility,"input.visibility == return.visibility
return.visibility one of { ""internal"", ""private"", ""public"" }","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.OneOfString","(input.visibility, return.visibility)
(return.visibility)","/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT",1.0
get+projects_{id}_forks,web_url,"return.web_url is a substring of return.http_url_to_repo
return.web_url is a substring of return.readme_url","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return.http_url_to_repo, return.web_url)
(return.web_url, return.readme_url)","/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT",1.0
get+projects_{id}_starrers,starred_since,"LENGTH(return.starred_since)==24
return.starred_since is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.starred_since)
(return.starred_since)","/projects/{id}/starrers&/projects/{id}/starrers&get&200():::EXIT
/projects/{id}/starrers&/projects/{id}/starrers&get&200():::EXIT",1.0
get+projects_{id}_starrers,user.avatar_url,"LENGTH(return.user.avatar_url)==81
return.user.avatar_url is Url","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.IsUrl","(return.user.avatar_url)
(return.user.avatar_url)","/projects/{id}/starrers&/projects/{id}/starrers&get&200():::EXIT
/projects/{id}/starrers&/projects/{id}/starrers&get&200():::EXIT",1.0
get+projects_{id}_starrers,user.id,return.user.id >= 1,daikon.inv.unary.scalar.LowerBound,(return.user.id),/projects/{id}/starrers&/projects/{id}/starrers&get&200():::EXIT,1.0
get+projects_{id}_starrers,user.state,"return.user.state == ""active""
LENGTH(return.user.state)==6","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.user.state)
(return.user.state)","/projects/{id}/starrers&/projects/{id}/starrers&get&200():::EXIT
/projects/{id}/starrers&/projects/{id}/starrers&get&200():::EXIT",1.0
get+projects_{id}_starrers,user.web_url,return.user.username is a substring of return.user.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.user.web_url, return.user.username)",/projects/{id}/starrers&/projects/{id}/starrers&get&200():::EXIT,1.0
get+projects_{id}_users,state,"return.state == ""active""
LENGTH(return.state)==6","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.state)
(return.state)","/projects/{id}/users&/projects/{id}/users&get&200():::EXIT
/projects/{id}/users&/projects/{id}/users&get&200():::EXIT",1.0
get+projects_{id}_users,web_url,return.username is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.username)",/projects/{id}/users&/projects/{id}/users&get&200():::EXIT,1.0
get+users_{user_id}_projects,_links.self,"return._links.self is a substring of return._links.issues
return._links.self is a substring of return._links.merge_requests
return._links.self is a substring of return._links.repo_branches
return._links.self is a substring of return._links.labels
return._links.self is a substring of return._links.events
return._links.self is a substring of return._links.members","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return._links.self, return._links.issues)
(return._links.self, return._links.merge_requests)
(return._links.self, return._links.repo_branches)
(return._links.self, return._links.labels)
(return._links.self, return._links.events)
(return._links.self, return._links.members)","/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT",1.0
get+users_{user_id}_projects,auto_devops_deploy_strategy,"return.auto_devops_deploy_strategy one of { ""continuous"", ""manual"", ""timed_incremental"" }",daikon.inv.unary.string.OneOfString,(return.auto_devops_deploy_strategy),/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,1.0
get+users_{user_id}_projects,created_at,"return.created_at == return.last_activity_at
LENGTH(return.created_at)==24
return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.created_at, return.last_activity_at)
(return.created_at)
(return.created_at)","/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT",1.0
get+users_{user_id}_projects,creator_id,"return.creator_id >= 1
return.creator_id >= size(return.shared_with_groups[])","daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.creator_id)
(return.creator_id, size(return.shared_with_groups[..]))","/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT",1.0
get+users_{user_id}_projects,default_branch,return.default_branch is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.default_branch, return.readme_url)",/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,1.0
get+users_{user_id}_projects,forks_count,return.forks_count >= 0,daikon.inv.unary.scalar.LowerBound,(return.forks_count),/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,1.0
get+users_{user_id}_projects,id,"input.id_after < return.id
input.id_before > return.id
return.id > return.owner.id
return.id > return.creator_id
return.id > return.star_count","daikon.inv.binary.twoScalar.IntLessThan
daikon.inv.binary.twoScalar.IntGreaterThan
daikon.inv.binary.twoScalar.IntGreaterThan
daikon.inv.binary.twoScalar.IntGreaterThan
daikon.inv.binary.twoScalar.IntGreaterThan","(input.id_after, return.id)
(input.id_before, return.id)
(return.id, return.owner.id)
(return.id, return.creator_id)
(return.id, return.star_count)","/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT",1.0
get+users_{user_id}_projects,import_status,"return.import_status one of { ""failed"", ""finished"", ""none"" }",daikon.inv.unary.string.OneOfString,(return.import_status),/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,1.0
get+users_{user_id}_projects,merge_method,"return.merge_method one of { ""ff"", ""merge"", ""rebase_merge"" }",daikon.inv.unary.string.OneOfString,(return.merge_method),/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,1.0
get+users_{user_id}_projects,name_with_namespace,"return.owner.name is a substring of return.name_with_namespace
return.name is a substring of return.name_with_namespace
return.namespace.name is a substring of return.name_with_namespace","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return.owner.name, return.name_with_namespace)
(return.name, return.name_with_namespace)
(return.name_with_namespace, return.namespace.name)","/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT",1.0
get+users_{user_id}_projects,namespace.id,"return.namespace.id >= 1
return.namespace.id >= size(return.shared_with_groups[])","daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.namespace.id)
(return.namespace.id, size(return.shared_with_groups[..]))","/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT",1.0
get+users_{user_id}_projects,namespace.kind,"return.namespace.kind == ""user""
LENGTH(return.namespace.kind)==4","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.namespace.kind)
(return.namespace.kind)","/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT",1.0
get+users_{user_id}_projects,namespace.path,return.namespace.path == return.namespace.full_path,daikon.inv.binary.twoString.StringEqual,"(return.namespace.path, return.namespace.full_path)",/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,1.0
get+users_{user_id}_projects,open_issues_count,"return.open_issues_count == 0
return.open_issues_count <= return.forks_count
return.open_issues_count <= return.star_count
return.open_issues_count <= return.statistics.commit_count
return.open_issues_count <= return.statistics.repository_size
return.open_issues_count <= return.statistics.wiki_size
return.open_issues_count <= return.statistics.lfs_objects_size
return.open_issues_count <= size(return.shared_with_groups[])","daikon.inv.unary.scalar.OneOfScalar
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual","(return.open_issues_count)
(return.open_issues_count, return.forks_count)
(return.open_issues_count, return.star_count)
(return.open_issues_count, return.statistics.commit_count)
(return.open_issues_count, return.statistics.repository_size)
(return.open_issues_count, return.statistics.wiki_size)
(return.open_issues_count, return.statistics.lfs_objects_size)
(return.open_issues_count, size(return.shared_with_groups[..]))","/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT",1.0
get+users_{user_id}_projects,owner.id,"return.owner.id >= 1
return.owner.id <= return.namespace.id
return.owner.id >= size(return.shared_with_groups[])","daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.owner.id)
(return.owner.id, return.namespace.id)
(return.owner.id, size(return.shared_with_groups[..]))","/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT",1.0
get+users_{user_id}_projects,owner.name,return.owner.name == return.namespace.name,daikon.inv.binary.twoString.StringEqual,"(return.owner.name, return.namespace.name)",/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,1.0
get+users_{user_id}_projects,path_with_namespace,"return.path_with_namespace is a substring of return.ssh_url_to_repo
return.path_with_namespace is a substring of return.web_url
return.path is a substring of return.path_with_namespace
return.namespace.path is a substring of return.path_with_namespace","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return.ssh_url_to_repo, return.path_with_namespace)
(return.web_url, return.path_with_namespace)
(return.path, return.path_with_namespace)
(return.path_with_namespace, return.namespace.path)","/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT",1.0
get+users_{user_id}_projects,permissions.group_access,return.permissions.group_access == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.group_access),/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,1.0
get+users_{user_id}_projects,permissions.project_access.access_level,return.permissions.project_access.access_level == 50,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.project_access.access_level),/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,1.0
get+users_{user_id}_projects,permissions.project_access.notification_level,return.permissions.project_access.notification_level == 3,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.project_access.notification_level),/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,1.0
get+users_{user_id}_projects,repository_storage,"return.repository_storage == ""default""
LENGTH(return.repository_storage)==7","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.repository_storage)
(return.repository_storage)","/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT",1.0
get+users_{user_id}_projects,service_desk_enabled,"input.simple == return.service_desk_enabled
return.service_desk_enabled == false","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.OneOfScalar","(input.simple, return.service_desk_enabled)
(return.service_desk_enabled)","/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT",1.0
get+users_{user_id}_projects,shared_with_groups,"size(return.shared_with_groups[]) one of { 0, 1 }",daikon.inv.unary.scalar.OneOfScalar,(size(return.shared_with_groups[..])),/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,1.0
get+users_{user_id}_projects,shared_with_groups.group_access_level,"return.group_access_level one of { 20, 30, 40 }",daikon.inv.unary.scalar.OneOfScalar,(return.group_access_level),/users/{user_id}/projects&/users/{user_id}/projects&get&200&shared_with_groups():::EXIT,1.0
get+users_{user_id}_projects,star_count,return.star_count >= 0,daikon.inv.unary.scalar.LowerBound,(return.star_count),/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,1.0
get+users_{user_id}_projects,statistics.commit_count,"return.statistics.commit_count >= 0
return.statistics.commit_count <= return.statistics.repository_size","daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.twoScalar.IntLessEqual","(return.statistics.commit_count)
(return.statistics.commit_count, return.statistics.repository_size)","/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT",1.0
get+users_{user_id}_projects,statistics.job_artifacts_size,"return.statistics.job_artifacts_size == return.statistics.packages_size
return.statistics.job_artifacts_size == return.statistics.snippets_size
return.statistics.job_artifacts_size == 0
return.forks_count >= return.statistics.job_artifacts_size
return.star_count >= return.statistics.job_artifacts_size
return.statistics.commit_count >= return.statistics.job_artifacts_size
return.statistics.repository_size >= return.statistics.job_artifacts_size
return.statistics.wiki_size >= return.statistics.job_artifacts_size
return.statistics.lfs_objects_size >= return.statistics.job_artifacts_size
return.statistics.job_artifacts_size <= size(return.shared_with_groups[])","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.OneOfScalar
daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntLessEqual","(return.statistics.job_artifacts_size, return.statistics.packages_size)
(return.statistics.job_artifacts_size, return.statistics.snippets_size)
(return.statistics.job_artifacts_size)
(return.forks_count, return.statistics.job_artifacts_size)
(return.star_count, return.statistics.job_artifacts_size)
(return.statistics.commit_count, return.statistics.job_artifacts_size)
(return.statistics.repository_size, return.statistics.job_artifacts_size)
(return.statistics.wiki_size, return.statistics.job_artifacts_size)
(return.statistics.lfs_objects_size, return.statistics.job_artifacts_size)
(return.statistics.job_artifacts_size, size(return.shared_with_groups[..]))","/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT",1.0
get+users_{user_id}_projects,statistics.lfs_objects_size,"return.statistics.lfs_objects_size one of { 0, 290070, 581353017 }",daikon.inv.unary.scalar.OneOfScalar,(return.statistics.lfs_objects_size),/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,1.0
get+users_{user_id}_projects,statistics.repository_size,"return.statistics.repository_size >= 0
return.statistics.repository_size >= return.statistics.wiki_size
return.statistics.repository_size >= size(return.shared_with_groups[])","daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.statistics.repository_size)
(return.statistics.repository_size, return.statistics.wiki_size)
(return.statistics.repository_size, size(return.shared_with_groups[..]))","/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT",1.0
get+users_{user_id}_projects,statistics.storage_size,"return.statistics.storage_size >= 0
return.open_issues_count <= return.statistics.storage_size
return.statistics.commit_count <= return.statistics.storage_size
return.statistics.storage_size >= return.statistics.repository_size
return.statistics.storage_size >= return.statistics.wiki_size
return.statistics.storage_size >= return.statistics.lfs_objects_size
return.statistics.storage_size >= return.statistics.job_artifacts_size
return.statistics.storage_size >= size(return.shared_with_groups[])","daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.statistics.storage_size)
(return.open_issues_count, return.statistics.storage_size)
(return.statistics.commit_count, return.statistics.storage_size)
(return.statistics.storage_size, return.statistics.repository_size)
(return.statistics.storage_size, return.statistics.wiki_size)
(return.statistics.storage_size, return.statistics.lfs_objects_size)
(return.statistics.storage_size, return.statistics.job_artifacts_size)
(return.statistics.storage_size, size(return.shared_with_groups[..]))","/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT",1.0
get+users_{user_id}_projects,statistics.wiki_size,"return.statistics.wiki_size one of { 0, 41943 }",daikon.inv.unary.scalar.OneOfScalar,(return.statistics.wiki_size),/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,1.0
get+users_{user_id}_projects,tag_list,"size(return.tag_list[]) one of { 0, 1 }
return.owner.id >= size(return.tag_list[])
return.open_issues_count <= size(return.tag_list[])
return.creator_id >= size(return.tag_list[])
return.namespace.id >= size(return.tag_list[])
return.statistics.job_artifacts_size <= size(return.tag_list[])","daikon.inv.unary.scalar.OneOfScalar
daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntLessEqual","(size(return.tag_list[..]))
(return.owner.id, size(return.tag_list[..]))
(return.open_issues_count, size(return.tag_list[..]))
(return.creator_id, size(return.tag_list[..]))
(return.namespace.id, size(return.tag_list[..]))
(return.statistics.job_artifacts_size, size(return.tag_list[..]))","/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT",1.0
get+users_{user_id}_projects,visibility,"input.visibility == return.visibility
return.visibility one of { ""internal"", ""private"", ""public"" }","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.OneOfString","(input.visibility, return.visibility)
(return.visibility)","/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT",1.0
get+users_{user_id}_projects,web_url,"return.web_url is a substring of return.http_url_to_repo
return.web_url is a substring of return.readme_url","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return.http_url_to_repo, return.web_url)
(return.web_url, return.readme_url)","/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT",1.0
get+users_{user_id}_starred_projects,archived,input.archived == return.archived,daikon.inv.binary.twoScalar.IntEqual,"(input.archived, return.archived)",/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,1.0
get+users_{user_id}_starred_projects,auto_devops_deploy_strategy,"return.auto_devops_deploy_strategy one of { ""continuous"", ""manual"", ""timed_incremental"" }",daikon.inv.unary.string.OneOfString,(return.auto_devops_deploy_strategy),/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,1.0
get+users_{user_id}_starred_projects,created_at,"LENGTH(return.created_at)==24
return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.created_at)
(return.created_at)","/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT",1.0
get+users_{user_id}_starred_projects,creator_id,"return.creator_id >= 1
return.creator_id <= return.namespace.id
return.creator_id >= return.statistics.commit_count
return.creator_id >= size(return.shared_with_groups[])","daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.creator_id)
(return.creator_id, return.namespace.id)
(return.creator_id, return.statistics.commit_count)
(return.creator_id, size(return.shared_with_groups[..]))","/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT",1.0
get+users_{user_id}_starred_projects,default_branch,return.default_branch is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.default_branch, return.readme_url)",/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,1.0
get+users_{user_id}_starred_projects,forks_count,"return.forks_count >= 0
return.forks_count >= return.statistics.lfs_objects_size","daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.forks_count)
(return.forks_count, return.statistics.lfs_objects_size)","/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT",1.0
get+users_{user_id}_starred_projects,id,return.id > return.star_count,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.id, return.star_count)",/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,1.0
get+users_{user_id}_starred_projects,import_status,"return.import_status one of { ""finished"", ""none"" }",daikon.inv.unary.string.OneOfString,(return.import_status),/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,1.0
get+users_{user_id}_starred_projects,last_activity_at,"LENGTH(return.last_activity_at)==24
return.last_activity_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.last_activity_at)
(return.last_activity_at)","/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT",1.0
get+users_{user_id}_starred_projects,merge_method,"return.merge_method one of { ""ff"", ""merge"", ""rebase_merge"" }",daikon.inv.unary.string.OneOfString,(return.merge_method),/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,1.0
get+users_{user_id}_starred_projects,name_with_namespace,"return.owner.name is a substring of return.name_with_namespace
return.name is a substring of return.name_with_namespace
return.namespace.name is a substring of return.name_with_namespace","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return.owner.name, return.name_with_namespace)
(return.name, return.name_with_namespace)
(return.name_with_namespace, return.namespace.name)","/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT",1.0
get+users_{user_id}_starred_projects,namespace.id,"return.namespace.id >= 1
return.namespace.id >= return.statistics.commit_count
return.namespace.id >= size(return.shared_with_groups[])","daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.namespace.id)
(return.namespace.id, return.statistics.commit_count)
(return.namespace.id, size(return.shared_with_groups[..]))","/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT",1.0
get+users_{user_id}_starred_projects,namespace.kind,"return.namespace.kind one of { ""group"", ""user"" }",daikon.inv.unary.string.OneOfString,(return.namespace.kind),/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,1.0
get+users_{user_id}_starred_projects,namespace.path,return.namespace.path is a substring of return.namespace.full_path,daikon.inv.binary.twoString.StdString$SubString,"(return.namespace.path, return.namespace.full_path)",/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,1.0
get+users_{user_id}_starred_projects,open_issues_count,"return.open_issues_count == return.statistics.lfs_objects_size
return.open_issues_count == 0
return.open_issues_count <= return.forks_count
return.open_issues_count <= return.statistics.commit_count
return.open_issues_count <= return.statistics.repository_size
return.open_issues_count <= return.statistics.wiki_size
return.open_issues_count <= size(return.shared_with_groups[])","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.OneOfScalar
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual","(return.open_issues_count, return.statistics.lfs_objects_size)
(return.open_issues_count)
(return.open_issues_count, return.forks_count)
(return.open_issues_count, return.statistics.commit_count)
(return.open_issues_count, return.statistics.repository_size)
(return.open_issues_count, return.statistics.wiki_size)
(return.open_issues_count, size(return.shared_with_groups[..]))","/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT",1.0
get+users_{user_id}_starred_projects,owner.name,return.owner.name == return.namespace.name,daikon.inv.binary.twoString.StringEqual,"(return.owner.name, return.namespace.name)",/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,1.0
get+users_{user_id}_starred_projects,path_with_namespace,"return.path_with_namespace is a substring of return.ssh_url_to_repo
return.path_with_namespace is a substring of return.web_url
return.path is a substring of return.path_with_namespace
return.namespace.full_path is a substring of return.path_with_namespace","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return.ssh_url_to_repo, return.path_with_namespace)
(return.web_url, return.path_with_namespace)
(return.path, return.path_with_namespace)
(return.path_with_namespace, return.namespace.full_path)","/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT",1.0
get+users_{user_id}_starred_projects,permissions.group_access.access_level,return.permissions.group_access.access_level == 50,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.group_access.access_level),/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,1.0
get+users_{user_id}_starred_projects,permissions.group_access.notification_level,return.permissions.group_access.notification_level == 3,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.group_access.notification_level),/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,1.0
get+users_{user_id}_starred_projects,permissions.project_access.access_level,"return.permissions.project_access.access_level == return.permissions.group_access.access_level
return.permissions.project_access.access_level == 50","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.OneOfScalar","(return.permissions.project_access.access_level, return.permissions.group_access.access_level)
(return.permissions.project_access.access_level)","/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT",1.0
get+users_{user_id}_starred_projects,permissions.project_access.notification_level,"return.permissions.project_access.notification_level == return.permissions.group_access.notification_level
return.permissions.project_access.notification_level == 3","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.OneOfScalar","(return.permissions.project_access.notification_level, return.permissions.group_access.notification_level)
(return.permissions.project_access.notification_level)","/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT",1.0
get+users_{user_id}_starred_projects,repository_storage,"return.repository_storage == ""default""
LENGTH(return.repository_storage)==7","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.repository_storage)
(return.repository_storage)","/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT",1.0
get+users_{user_id}_starred_projects,service_desk_enabled,"input.simple == return.service_desk_enabled
return.service_desk_enabled == false","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.OneOfScalar","(input.simple, return.service_desk_enabled)
(return.service_desk_enabled)","/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT",1.0
get+users_{user_id}_starred_projects,shared_with_groups,"size(return.shared_with_groups[]) one of { 0, 1 }",daikon.inv.unary.scalar.OneOfScalar,(size(return.shared_with_groups[..])),/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,1.0
get+users_{user_id}_starred_projects,shared_with_groups.group_access_level,"return.group_access_level one of { 20, 30, 40 }",daikon.inv.unary.scalar.OneOfScalar,(return.group_access_level),/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200&shared_with_groups():::EXIT,1.0
get+users_{user_id}_starred_projects,star_count,"return.star_count >= return.statistics.commit_count
return.star_count >= size(return.shared_with_groups[])","daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.star_count, return.statistics.commit_count)
(return.star_count, size(return.shared_with_groups[..]))","/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT",1.0
get+users_{user_id}_starred_projects,statistics.commit_count,"return.statistics.commit_count one of { 0, 1 }
return.statistics.commit_count <= return.statistics.repository_size
return.statistics.commit_count >= return.statistics.lfs_objects_size","daikon.inv.unary.scalar.OneOfScalar
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.statistics.commit_count)
(return.statistics.commit_count, return.statistics.repository_size)
(return.statistics.commit_count, return.statistics.lfs_objects_size)","/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT",1.0
get+users_{user_id}_starred_projects,statistics.job_artifacts_size,return.statistics.lfs_objects_size == return.statistics.job_artifacts_size,daikon.inv.binary.twoScalar.IntEqual,"(return.statistics.lfs_objects_size, return.statistics.job_artifacts_size)",/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,1.0
get+users_{user_id}_starred_projects,statistics.storage_size,"return.statistics.storage_size >= 0
return.open_issues_count <= return.statistics.storage_size
return.statistics.commit_count <= return.statistics.storage_size
return.statistics.storage_size >= return.statistics.repository_size
return.statistics.storage_size >= return.statistics.wiki_size
return.statistics.storage_size >= return.statistics.lfs_objects_size
return.statistics.storage_size >= size(return.shared_with_groups[])","daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.statistics.storage_size)
(return.open_issues_count, return.statistics.storage_size)
(return.statistics.commit_count, return.statistics.storage_size)
(return.statistics.storage_size, return.statistics.repository_size)
(return.statistics.storage_size, return.statistics.wiki_size)
(return.statistics.storage_size, return.statistics.lfs_objects_size)
(return.statistics.storage_size, size(return.shared_with_groups[..]))","/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT",1.0
get+users_{user_id}_starred_projects,tag_list,"size(return.tag_list[]) one of { 0, 1, 2 }
return.owner.id >= size(return.tag_list[])
return.open_issues_count <= size(return.tag_list[])
return.namespace.id >= size(return.tag_list[])
return.statistics.lfs_objects_size <= size(return.tag_list[])","daikon.inv.unary.scalar.OneOfScalar
daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntLessEqual","(size(return.tag_list[..]))
(return.owner.id, size(return.tag_list[..]))
(return.open_issues_count, size(return.tag_list[..]))
(return.namespace.id, size(return.tag_list[..]))
(return.statistics.lfs_objects_size, size(return.tag_list[..]))","/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT",1.0
get+users_{user_id}_starred_projects,visibility,"input.visibility == return.visibility
return.visibility one of { ""internal"", ""private"", ""public"" }","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.OneOfString","(input.visibility, return.visibility)
(return.visibility)","/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT",1.0
get+users_{user_id}_starred_projects,web_url,"return.web_url is a substring of return.http_url_to_repo
return.web_url is a substring of return.readme_url","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return.http_url_to_repo, return.web_url)
(return.web_url, return.readme_url)","/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT",1.0
post+projects,_links.self,"return._links.self is a substring of return._links.issues
return._links.self is a substring of return._links.merge_requests
return._links.self is a substring of return._links.repo_branches
return._links.self is a substring of return._links.labels
return._links.self is a substring of return._links.events
return._links.self is a substring of return._links.members","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return._links.self, return._links.issues)
(return._links.self, return._links.merge_requests)
(return._links.self, return._links.repo_branches)
(return._links.self, return._links.labels)
(return._links.self, return._links.events)
(return._links.self, return._links.members)","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT",1.0
post+projects,allow_merge_on_skipped_pipeline,input.allow_merge_on_skipped_pipeline == return.allow_merge_on_skipped_pipeline,daikon.inv.binary.twoScalar.IntEqual,"(input.allow_merge_on_skipped_pipeline, return.allow_merge_on_skipped_pipeline)",/projects&/projects&post&201():::EXIT,1.0
post+projects,archived,"return.archived == return.service_desk_enabled
return.archived == false","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.OneOfScalar","(return.archived, return.service_desk_enabled)
(return.archived)","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT",1.0
post+projects,auto_devops_deploy_strategy,"input.auto_devops_deploy_strategy == return.auto_devops_deploy_strategy
return.auto_devops_deploy_strategy one of { ""continuous"", ""manual"", ""timed_incremental"" }","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.OneOfString","(input.auto_devops_deploy_strategy, return.auto_devops_deploy_strategy)
(return.auto_devops_deploy_strategy)","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT",1.0
post+projects,auto_devops_enabled,input.auto_devops_enabled == return.auto_devops_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.auto_devops_enabled, return.auto_devops_enabled)",/projects&/projects&post&201():::EXIT,1.0
post+projects,autoclose_referenced_issues,input.autoclose_referenced_issues == return.autoclose_referenced_issues,daikon.inv.binary.twoScalar.IntEqual,"(input.autoclose_referenced_issues, return.autoclose_referenced_issues)",/projects&/projects&post&201():::EXIT,1.0
post+projects,ci_default_git_depth,return.ci_default_git_depth == 20,daikon.inv.unary.scalar.OneOfScalar,(return.ci_default_git_depth),/projects&/projects&post&201():::EXIT,1.0
post+projects,ci_forward_deployment_enabled,return.ci_forward_deployment_enabled == true,daikon.inv.unary.scalar.OneOfScalar,(return.ci_forward_deployment_enabled),/projects&/projects&post&201():::EXIT,1.0
post+projects,container_registry_enabled,input.container_registry_enabled == return.container_registry_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.container_registry_enabled, return.container_registry_enabled)",/projects&/projects&post&201():::EXIT,1.0
post+projects,created_at,"LENGTH(return.created_at)==24
return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.created_at)
(return.created_at)","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT",1.0
post+projects,creator_id,return.creator_id <= return.namespace.id,daikon.inv.binary.twoScalar.IntLessEqual,"(return.creator_id, return.namespace.id)",/projects&/projects&post&201():::EXIT,1.0
post+projects,default_branch,return.default_branch is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.default_branch, return.readme_url)",/projects&/projects&post&201():::EXIT,1.0
post+projects,description,input.description == return.description,daikon.inv.binary.twoString.StringEqual,"(input.description, return.description)",/projects&/projects&post&201():::EXIT,1.0
post+projects,forks_count,"return.forks_count == return.star_count
return.forks_count == size(return.shared_with_groups[])
return.forks_count == size(return.shared_with_groups[])","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual","(return.forks_count, return.star_count)
(return.forks_count, size(return.shared_with_groups[..]))
(return.forks_count, size(return.shared_with_groups[..]))","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT",1.0
post+projects,import_status,"return.import_status == ""none""
LENGTH(return.import_status)==4","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.import_status)
(return.import_status)","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT",1.0
post+projects,last_activity_at,"LENGTH(return.last_activity_at)==24
return.last_activity_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.last_activity_at)
(return.last_activity_at)","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT",1.0
post+projects,merge_method,"input.merge_method == return.merge_method
return.merge_method one of { ""ff"", ""merge"", ""rebase_merge"" }","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.OneOfString","(input.merge_method, return.merge_method)
(return.merge_method)","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT",1.0
post+projects,name,input.name == return.name,daikon.inv.binary.twoString.StringEqual,"(input.name, return.name)",/projects&/projects&post&201():::EXIT,1.0
post+projects,name_with_namespace,"input.name is a substring of return.name_with_namespace
return.owner.name is a substring of return.name_with_namespace
return.name is a substring of return.name_with_namespace
return.namespace.name is a substring of return.name_with_namespace","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(input.name, return.name_with_namespace)
(return.owner.name, return.name_with_namespace)
(return.name, return.name_with_namespace)
(return.name_with_namespace, return.namespace.name)","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT",1.0
post+projects,namespace.id,"input.namespace_id == return.namespace.id
return.namespace.id >= 1","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.LowerBound","(input.namespace_id, return.namespace.id)
(return.namespace.id)","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT",1.0
post+projects,namespace.kind,"return.namespace.kind one of { ""group"", ""user"" }",daikon.inv.unary.string.OneOfString,(return.namespace.kind),/projects&/projects&post&201():::EXIT,1.0
post+projects,namespace.path,return.namespace.path is a substring of return.namespace.full_path,daikon.inv.binary.twoString.StdString$SubString,"(return.namespace.path, return.namespace.full_path)",/projects&/projects&post&201():::EXIT,1.0
post+projects,only_allow_merge_if_all_discussions_are_resolved,input.only_allow_merge_if_all_discussions_are_resolved == return.only_allow_merge_if_all_discussions_are_resolved,daikon.inv.binary.twoScalar.IntEqual,"(input.only_allow_merge_if_all_discussions_are_resolved, return.only_allow_merge_if_all_discussions_are_resolved)",/projects&/projects&post&201():::EXIT,1.0
post+projects,only_allow_merge_if_pipeline_succeeds,input.only_allow_merge_if_pipeline_succeeds == return.only_allow_merge_if_pipeline_succeeds,daikon.inv.binary.twoScalar.IntEqual,"(input.only_allow_merge_if_pipeline_succeeds, return.only_allow_merge_if_pipeline_succeeds)",/projects&/projects&post&201():::EXIT,1.0
post+projects,owner.id,"return.owner.id == return.creator_id
return.owner.id <= return.namespace.id","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntLessEqual","(return.owner.id, return.creator_id)
(return.owner.id, return.namespace.id)","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT",1.0
post+projects,owner.name,return.owner.name == return.namespace.name,daikon.inv.binary.twoString.StringEqual,"(return.owner.name, return.namespace.name)",/projects&/projects&post&201():::EXIT,1.0
post+projects,packages_enabled,input.packages_enabled == return.packages_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.packages_enabled, return.packages_enabled)",/projects&/projects&post&201():::EXIT,1.0
post+projects,path,input.path == return.path,daikon.inv.binary.twoString.StringEqual,"(input.path, return.path)",/projects&/projects&post&201():::EXIT,1.0
post+projects,path_with_namespace,"input.path is a substring of return.path_with_namespace
return.path_with_namespace is a substring of return.ssh_url_to_repo
return.path_with_namespace is a substring of return.web_url
return.path is a substring of return.path_with_namespace
return.namespace.full_path is a substring of return.path_with_namespace","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(input.path, return.path_with_namespace)
(return.ssh_url_to_repo, return.path_with_namespace)
(return.web_url, return.path_with_namespace)
(return.path, return.path_with_namespace)
(return.path_with_namespace, return.namespace.full_path)","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT",1.0
post+projects,permissions,return.permissions == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions),/projects&/projects&post&201():::EXIT,1.0
post+projects,permissions.group_access,return.permissions.group_access == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.group_access),/projects&/projects&post&201():::EXIT,1.0
post+projects,permissions.project_access,return.permissions.project_access == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.project_access),/projects&/projects&post&201():::EXIT,1.0
post+projects,public_jobs,input.public_builds == return.public_jobs,daikon.inv.binary.twoScalar.IntEqual,"(input.public_builds, return.public_jobs)",/projects&/projects&post&201():::EXIT,1.0
post+projects,readme_url,input.default_branch is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(input.default_branch, return.readme_url)",/projects&/projects&post&201():::EXIT,1.0
post+projects,remove_source_branch_after_merge,input.remove_source_branch_after_merge == return.remove_source_branch_after_merge,daikon.inv.binary.twoScalar.IntEqual,"(input.remove_source_branch_after_merge, return.remove_source_branch_after_merge)",/projects&/projects&post&201():::EXIT,1.0
post+projects,repository_storage,"input.repository_storage == return.repository_storage
return.repository_storage == ""default""
LENGTH(return.repository_storage)==7","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(input.repository_storage, return.repository_storage)
(return.repository_storage)
(return.repository_storage)","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT",1.0
post+projects,request_access_enabled,input.request_access_enabled == return.request_access_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.request_access_enabled, return.request_access_enabled)",/projects&/projects&post&201():::EXIT,1.0
post+projects,resolve_outdated_diff_discussions,input.resolve_outdated_diff_discussions == return.resolve_outdated_diff_discussions,daikon.inv.binary.twoScalar.IntEqual,"(input.resolve_outdated_diff_discussions, return.resolve_outdated_diff_discussions)",/projects&/projects&post&201():::EXIT,1.0
post+projects,runners_token,LENGTH(return.runners_token)==29,daikon.inv.unary.string.FixedLengthString,(return.runners_token),/projects&/projects&post&201():::EXIT,1.0
post+projects,shared_runners_enabled,input.shared_runners_enabled == return.shared_runners_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.shared_runners_enabled, return.shared_runners_enabled)",/projects&/projects&post&201():::EXIT,1.0
post+projects,shared_with_groups,return.shared_with_groups[] == [],daikon.inv.unary.sequence.OneOfSequence,(return.shared_with_groups[..]),/projects&/projects&post&201():::EXIT,1.0
post+projects,statistics,return.statistics == null,daikon.inv.unary.scalar.OneOfScalar,(return.statistics),/projects&/projects&post&201():::EXIT,1.0
post+projects,tag_list,"size(input.tag_list[]) == size(return.tag_list[])
return.open_issues_count <= size(return.tag_list[])
return.forks_count <= size(return.tag_list[])","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual","(size(input.tag_list[..]), size(return.tag_list[..]))
(return.open_issues_count, size(return.tag_list[..]))
(return.forks_count, size(return.tag_list[..]))","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT",1.0
post+projects,visibility,"input.visibility == return.visibility
return.visibility one of { ""internal"", ""private"", ""public"" }","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.OneOfString","(input.visibility, return.visibility)
(return.visibility)","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT",1.0
post+projects,web_url,"return.web_url is a substring of return.http_url_to_repo
return.web_url is a substring of return.readme_url","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return.http_url_to_repo, return.web_url)
(return.web_url, return.readme_url)","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT",1.0
post+projects_user_{user_id},allow_merge_on_skipped_pipeline,input.allow_merge_on_skipped_pipeline == return.allow_merge_on_skipped_pipeline,daikon.inv.binary.twoScalar.IntEqual,"(input.allow_merge_on_skipped_pipeline, return.allow_merge_on_skipped_pipeline)",/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,1.0
post+projects_user_{user_id},archived,"return.archived == return.service_desk_enabled
return.archived == false","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.OneOfScalar","(return.archived, return.service_desk_enabled)
(return.archived)","/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT",1.0
post+projects_user_{user_id},auto_devops_deploy_strategy,"input.auto_devops_deploy_strategy == return.auto_devops_deploy_strategy
return.auto_devops_deploy_strategy one of { ""continuous"", ""manual"", ""timed_incremental"" }","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.OneOfString","(input.auto_devops_deploy_strategy, return.auto_devops_deploy_strategy)
(return.auto_devops_deploy_strategy)","/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT",1.0
post+projects_user_{user_id},auto_devops_enabled,input.auto_devops_enabled == return.auto_devops_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.auto_devops_enabled, return.auto_devops_enabled)",/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,1.0
post+projects_user_{user_id},autoclose_referenced_issues,input.autoclose_referenced_issues == return.autoclose_referenced_issues,daikon.inv.binary.twoScalar.IntEqual,"(input.autoclose_referenced_issues, return.autoclose_referenced_issues)",/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,1.0
post+projects_user_{user_id},ci_default_git_depth,return.ci_default_git_depth == 20,daikon.inv.unary.scalar.OneOfScalar,(return.ci_default_git_depth),/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,1.0
post+projects_user_{user_id},ci_forward_deployment_enabled,return.ci_forward_deployment_enabled == true,daikon.inv.unary.scalar.OneOfScalar,(return.ci_forward_deployment_enabled),/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,1.0
post+projects_user_{user_id},container_registry_enabled,input.container_registry_enabled == return.container_registry_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.container_registry_enabled, return.container_registry_enabled)",/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,1.0
post+projects_user_{user_id},created_at,"return.created_at == return.last_activity_at
LENGTH(return.created_at)==24
return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.created_at, return.last_activity_at)
(return.created_at)
(return.created_at)","/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT",1.0
post+projects_user_{user_id},creator_id,input.user_id == return.creator_id,daikon.inv.binary.twoScalar.IntEqual,"(input.user_id, return.creator_id)",/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,1.0
post+projects_user_{user_id},description,input.description == return.description,daikon.inv.binary.twoString.StringEqual,"(input.description, return.description)",/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,1.0
post+projects_user_{user_id},forks_count,"return.forks_count == return.star_count
return.forks_count == size(return.shared_with_groups[])
return.forks_count == size(return.shared_with_groups[])","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual","(return.forks_count, return.star_count)
(return.forks_count, size(return.shared_with_groups[..]))
(return.forks_count, size(return.shared_with_groups[..]))","/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT",1.0
post+projects_user_{user_id},import_status,"return.import_status == ""none""
LENGTH(return.import_status)==4","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.import_status)
(return.import_status)","/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT",1.0
post+projects_user_{user_id},jobs_enabled,input.jobs_enabled == return.jobs_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.jobs_enabled, return.jobs_enabled)",/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,1.0
post+projects_user_{user_id},merge_method,"input.merge_method == return.merge_method
return.merge_method one of { ""ff"", ""merge"", ""rebase_merge"" }","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.OneOfString","(input.merge_method, return.merge_method)
(return.merge_method)","/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT",1.0
post+projects_user_{user_id},merge_requests_enabled,return.merge_requests_enabled == return.can_create_merge_request_in,daikon.inv.binary.twoScalar.IntEqual,"(return.merge_requests_enabled, return.can_create_merge_request_in)",/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,1.0
post+projects_user_{user_id},name,input.name == return.name,daikon.inv.binary.twoString.StringEqual,"(input.name, return.name)",/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,1.0
post+projects_user_{user_id},name_with_namespace,"input.name is a substring of return.name_with_namespace
return.owner.name is a substring of return.name_with_namespace","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(input.name, return.name_with_namespace)
(return.owner.name, return.name_with_namespace)","/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT",1.0
post+projects_user_{user_id},namespace.kind,"return.namespace.kind == ""user""
LENGTH(return.namespace.kind)==4","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.namespace.kind)
(return.namespace.kind)","/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT",1.0
post+projects_user_{user_id},namespace.path,return.namespace.path == return.namespace.full_path,daikon.inv.binary.twoString.StringEqual,"(return.namespace.path, return.namespace.full_path)",/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,1.0
post+projects_user_{user_id},only_allow_merge_if_all_discussions_are_resolved,input.only_allow_merge_if_all_discussions_are_resolved == return.only_allow_merge_if_all_discussions_are_resolved,daikon.inv.binary.twoScalar.IntEqual,"(input.only_allow_merge_if_all_discussions_are_resolved, return.only_allow_merge_if_all_discussions_are_resolved)",/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,1.0
post+projects_user_{user_id},only_allow_merge_if_pipeline_succeeds,input.only_allow_merge_if_pipeline_succeeds == return.only_allow_merge_if_pipeline_succeeds,daikon.inv.binary.twoScalar.IntEqual,"(input.only_allow_merge_if_pipeline_succeeds, return.only_allow_merge_if_pipeline_succeeds)",/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,1.0
post+projects_user_{user_id},owner.id,input.user_id == return.owner.id,daikon.inv.binary.twoScalar.IntEqual,"(input.user_id, return.owner.id)",/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,1.0
post+projects_user_{user_id},owner.name,return.owner.name == return.namespace.name,daikon.inv.binary.twoString.StringEqual,"(return.owner.name, return.namespace.name)",/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,1.0
post+projects_user_{user_id},packages_enabled,input.packages_enabled == return.packages_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.packages_enabled, return.packages_enabled)",/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,1.0
post+projects_user_{user_id},path,input.path == return.path,daikon.inv.binary.twoString.StringEqual,"(input.path, return.path)",/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,1.0
post+projects_user_{user_id},path_with_namespace,"input.path is a substring of return.path_with_namespace
return.path_with_namespace is a substring of return.ssh_url_to_repo
return.path_with_namespace is a substring of return.web_url
return.path is a substring of return.path_with_namespace
return.namespace.path is a substring of return.path_with_namespace","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(input.path, return.path_with_namespace)
(return.ssh_url_to_repo, return.path_with_namespace)
(return.web_url, return.path_with_namespace)
(return.path, return.path_with_namespace)
(return.path_with_namespace, return.namespace.path)","/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT",1.0
post+projects_user_{user_id},permissions,return.permissions == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions),/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,1.0
post+projects_user_{user_id},permissions.group_access,return.permissions.group_access == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.group_access),/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,1.0
post+projects_user_{user_id},permissions.project_access,return.permissions.project_access == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.project_access),/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,1.0
post+projects_user_{user_id},public_jobs,input.public_builds == return.public_jobs,daikon.inv.binary.twoScalar.IntEqual,"(input.public_builds, return.public_jobs)",/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,1.0
post+projects_user_{user_id},remove_source_branch_after_merge,input.remove_source_branch_after_merge == return.remove_source_branch_after_merge,daikon.inv.binary.twoScalar.IntEqual,"(input.remove_source_branch_after_merge, return.remove_source_branch_after_merge)",/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,1.0
post+projects_user_{user_id},repository_storage,"return.repository_storage == ""default""
LENGTH(return.repository_storage)==7","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.repository_storage)
(return.repository_storage)","/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT",1.0
post+projects_user_{user_id},request_access_enabled,input.request_access_enabled == return.request_access_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.request_access_enabled, return.request_access_enabled)",/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,1.0
post+projects_user_{user_id},resolve_outdated_diff_discussions,input.resolve_outdated_diff_discussions == return.resolve_outdated_diff_discussions,daikon.inv.binary.twoScalar.IntEqual,"(input.resolve_outdated_diff_discussions, return.resolve_outdated_diff_discussions)",/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,1.0
post+projects_user_{user_id},runners_token,LENGTH(return.runners_token)==29,daikon.inv.unary.string.FixedLengthString,(return.runners_token),/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,1.0
post+projects_user_{user_id},shared_runners_enabled,input.shared_runners_enabled == return.shared_runners_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.shared_runners_enabled, return.shared_runners_enabled)",/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,1.0
post+projects_user_{user_id},shared_with_groups,return.shared_with_groups[] == [],daikon.inv.unary.sequence.OneOfSequence,(return.shared_with_groups[..]),/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,1.0
post+projects_user_{user_id},statistics,return.statistics == null,daikon.inv.unary.scalar.OneOfScalar,(return.statistics),/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,1.0
post+projects_user_{user_id},suggestion_commit_message,input.suggestion_commit_message == return.suggestion_commit_message,daikon.inv.binary.twoString.StringEqual,"(input.suggestion_commit_message, return.suggestion_commit_message)",/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,1.0
post+projects_user_{user_id},visibility,"input.visibility == return.visibility
return.visibility one of { ""internal"", ""private"", ""public"" }","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.OneOfString","(input.visibility, return.visibility)
(return.visibility)","/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT",1.0
post+projects_user_{user_id},web_url,"return.web_url is a substring of return.http_url_to_repo
return.web_url is a substring of return.readme_url","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return.http_url_to_repo, return.web_url)
(return.web_url, return.readme_url)","/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT",1.0
post+projects_{id}_archive,created_at,"return.created_at == return.last_activity_at
LENGTH(return.created_at)==24
return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.created_at, return.last_activity_at)
(return.created_at)
(return.created_at)","/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT",1.0
post+projects_{id}_archive,id,input.id == return.id,daikon.inv.binary.twoScalar.IntEqual,"(input.id, return.id)",/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,1.0
post+projects_{id}_archive,license,return.license == null,daikon.inv.unary.scalar.OneOfScalar,(return.license),/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,1.0
post+projects_{id}_archive,name_with_namespace,"return.owner.name is a substring of return.name_with_namespace
return.name is a substring of return.name_with_namespace","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return.owner.name, return.name_with_namespace)
(return.name, return.name_with_namespace)","/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT",1.0
post+projects_{id}_archive,open_issues_count,"return.open_issues_count == size(return.shared_with_groups[])
return.open_issues_count == size(return.shared_with_groups[])
return.open_issues_count <= return.forks_count
return.open_issues_count <= return.star_count","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual","(return.open_issues_count, size(return.shared_with_groups[..]))
(return.open_issues_count, size(return.shared_with_groups[..]))
(return.open_issues_count, return.forks_count)
(return.open_issues_count, return.star_count)","/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT",1.0
post+projects_{id}_archive,owner.id,return.owner.id == return.creator_id,daikon.inv.binary.twoScalar.IntEqual,"(return.owner.id, return.creator_id)",/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,1.0
post+projects_{id}_archive,path_with_namespace,"return.path_with_namespace is a substring of return.ssh_url_to_repo
return.path_with_namespace is a substring of return.web_url
return.path is a substring of return.path_with_namespace
return.namespace.path is a substring of return.path_with_namespace","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return.ssh_url_to_repo, return.path_with_namespace)
(return.web_url, return.path_with_namespace)
(return.path, return.path_with_namespace)
(return.path_with_namespace, return.namespace.path)","/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT",1.0
post+projects_{id}_archive,permissions,return.permissions == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions),/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,1.0
post+projects_{id}_archive,permissions.group_access,return.permissions.group_access == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.group_access),/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,1.0
post+projects_{id}_archive,permissions.project_access,return.permissions.project_access == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.project_access),/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,1.0
post+projects_{id}_archive,shared_with_groups,return.shared_with_groups[] == [],daikon.inv.unary.sequence.OneOfSequence,(return.shared_with_groups[..]),/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,1.0
post+projects_{id}_archive,star_count,return.star_count >= 0,daikon.inv.unary.scalar.LowerBound,(return.star_count),/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,1.0
post+projects_{id}_archive,visibility,"return.visibility one of { ""internal"", ""private"", ""public"" }",daikon.inv.unary.string.OneOfString,(return.visibility),/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,1.0
post+projects_{id}_archive,web_url,"return.web_url is a substring of return.http_url_to_repo
return.web_url is a substring of return.readme_url","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return.http_url_to_repo, return.web_url)
(return.web_url, return.readme_url)","/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT",1.0
post+projects_{id}_fork,auto_devops_deploy_strategy,"return.auto_devops_deploy_strategy == ""continuous""
LENGTH(return.auto_devops_deploy_strategy)==10","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.auto_devops_deploy_strategy)
(return.auto_devops_deploy_strategy)","/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT",1.0
post+projects_{id}_fork,created_at,"return.created_at == return.last_activity_at
LENGTH(return.created_at)==24
return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.created_at, return.last_activity_at)
(return.created_at)
(return.created_at)","/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT",1.0
post+projects_{id}_fork,creator_id,"input.namespace_id == return.creator_id
return.creator_id == return.namespace.id
return.creator_id == 1","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.OneOfScalar","(input.namespace_id, return.creator_id)
(return.creator_id, return.namespace.id)
(return.creator_id)","/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT",1.0
post+projects_{id}_fork,id,input.id < return.id,daikon.inv.binary.twoScalar.IntLessThan,"(input.id, return.id)",/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,1.0
post+projects_{id}_fork,import_status,"return.import_status == ""scheduled""
LENGTH(return.import_status)==9","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.import_status)
(return.import_status)","/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT",1.0
post+projects_{id}_fork,merge_method,"return.merge_method == ""merge""
LENGTH(return.merge_method)==5
return.merge_method is a substring of return._links.merge_requests","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString
daikon.inv.binary.twoString.StdString$SubString","(return.merge_method)
(return.merge_method)
(return.merge_method, return._links.merge_requests)","/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT",1.0
post+projects_{id}_fork,merge_requests_enabled,return.merge_requests_enabled == return.can_create_merge_request_in,daikon.inv.binary.twoScalar.IntEqual,"(return.merge_requests_enabled, return.can_create_merge_request_in)",/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,1.0
post+projects_{id}_fork,name,input.name == return.name,daikon.inv.binary.twoString.StringEqual,"(input.name, return.name)",/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,1.0
post+projects_{id}_fork,name_with_namespace,"input.name is a substring of return.name_with_namespace
return.owner.name is a substring of return.name_with_namespace
return.name is a substring of return.name_with_namespace","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(input.name, return.name_with_namespace)
(return.owner.name, return.name_with_namespace)
(return.name, return.name_with_namespace)","/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT",1.0
post+projects_{id}_fork,open_issues_count,"return.open_issues_count == return.forks_count
return.open_issues_count == return.star_count
return.open_issues_count == size(return.shared_with_groups[])
return.open_issues_count == size(return.shared_with_groups[])","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual","(return.open_issues_count, return.forks_count)
(return.open_issues_count, return.star_count)
(return.open_issues_count, size(return.shared_with_groups[..]))
(return.open_issues_count, size(return.shared_with_groups[..]))","/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT",1.0
post+projects_{id}_fork,owner.id,return.owner.id == return.creator_id,daikon.inv.binary.twoScalar.IntEqual,"(return.owner.id, return.creator_id)",/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,1.0
post+projects_{id}_fork,path_with_namespace,"input.path is a substring of return.path_with_namespace
return.path_with_namespace is a substring of return.ssh_url_to_repo
return.path_with_namespace is a substring of return.web_url
return.path is a substring of return.path_with_namespace
return.namespace.path is a substring of return.path_with_namespace","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(input.path, return.path_with_namespace)
(return.ssh_url_to_repo, return.path_with_namespace)
(return.web_url, return.path_with_namespace)
(return.path, return.path_with_namespace)
(return.path_with_namespace, return.namespace.path)","/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT",1.0
post+projects_{id}_fork,permissions,return.permissions == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions),/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,1.0
post+projects_{id}_fork,permissions.group_access,return.permissions.group_access == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.group_access),/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,1.0
post+projects_{id}_fork,permissions.project_access,return.permissions.project_access == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.project_access),/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,1.0
post+projects_{id}_fork,repository_storage,"return.repository_storage == ""default""
LENGTH(return.repository_storage)==7","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.repository_storage)
(return.repository_storage)","/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT",1.0
post+projects_{id}_fork,resolve_outdated_diff_discussions,"return.resolve_outdated_diff_discussions == return.archived
return.resolve_outdated_diff_discussions == return.only_allow_merge_if_pipeline_succeeds
return.resolve_outdated_diff_discussions == return.only_allow_merge_if_all_discussions_are_resolved
return.resolve_outdated_diff_discussions == return.service_desk_enabled
return.resolve_outdated_diff_discussions == false","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.OneOfScalar","(return.resolve_outdated_diff_discussions, return.archived)
(return.resolve_outdated_diff_discussions, return.only_allow_merge_if_pipeline_succeeds)
(return.resolve_outdated_diff_discussions, return.only_allow_merge_if_all_discussions_are_resolved)
(return.resolve_outdated_diff_discussions, return.service_desk_enabled)
(return.resolve_outdated_diff_discussions)","/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT",1.0
post+projects_{id}_fork,runners_token,LENGTH(return.runners_token)==29,daikon.inv.unary.string.FixedLengthString,(return.runners_token),/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,1.0
post+projects_{id}_fork,shared_with_groups,return.shared_with_groups[] == [],daikon.inv.unary.sequence.OneOfSequence,(return.shared_with_groups[..]),/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,1.0
post+projects_{id}_fork,statistics,return.statistics == null,daikon.inv.unary.scalar.OneOfScalar,(return.statistics),/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,1.0
post+projects_{id}_fork,web_url,return.web_url is a substring of return.http_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.http_url_to_repo, return.web_url)",/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,1.0
post+projects_{id}_hooks,created_at,"LENGTH(return.created_at)==24
return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.created_at)
(return.created_at)","/projects/{id}/hooks&/projects/{id}/hooks&post&201():::EXIT
/projects/{id}/hooks&/projects/{id}/hooks&post&201():::EXIT",1.0
post+projects_{id}_hooks,enable_ssl_verification,"return.enable_ssl_verification one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.enable_ssl_verification),/projects/{id}/hooks&/projects/{id}/hooks&post&201():::EXIT,1.0
post+projects_{id}_hooks,issues_events,"return.issues_events one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.issues_events),/projects/{id}/hooks&/projects/{id}/hooks&post&201():::EXIT,1.0
post+projects_{id}_hooks,merge_requests_events,"return.merge_requests_events one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.merge_requests_events),/projects/{id}/hooks&/projects/{id}/hooks&post&201():::EXIT,1.0
post+projects_{id}_hooks,note_events,"return.note_events one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.note_events),/projects/{id}/hooks&/projects/{id}/hooks&post&201():::EXIT,1.0
post+projects_{id}_hooks,pipeline_events,"return.pipeline_events one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.pipeline_events),/projects/{id}/hooks&/projects/{id}/hooks&post&201():::EXIT,1.0
post+projects_{id}_hooks,project_id,return.project_id is Numeric,daikon.inv.unary.string.IsNumeric,(return.project_id),/projects/{id}/hooks&/projects/{id}/hooks&post&201():::EXIT,1.0
post+projects_{id}_hooks,push_events,"return.push_events one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.push_events),/projects/{id}/hooks&/projects/{id}/hooks&post&201():::EXIT,1.0
post+projects_{id}_hooks,tag_push_events,"return.tag_push_events one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.tag_push_events),/projects/{id}/hooks&/projects/{id}/hooks&post&201():::EXIT,1.0
post+projects_{id}_hooks,url,input.url == return.url,daikon.inv.binary.twoString.StringEqual,"(input.url, return.url)",/projects/{id}/hooks&/projects/{id}/hooks&post&201():::EXIT,1.0
post+projects_{id}_hooks,wiki_page_events,"return.wiki_page_events one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.wiki_page_events),/projects/{id}/hooks&/projects/{id}/hooks&post&201():::EXIT,1.0
post+projects_{id}_share,expires_at,input.expires_at == return.expires_at,daikon.inv.binary.twoString.StringEqual,"(input.expires_at, return.expires_at)",/projects/{id}/share&/projects/{id}/share&post&201():::EXIT,1.0
post+projects_{id}_share,group_access,input.group_access == return.group_access,daikon.inv.binary.twoString.StringEqual,"(input.group_access, return.group_access)",/projects/{id}/share&/projects/{id}/share&post&201():::EXIT,1.0
post+projects_{id}_share,group_id,return.group_id is Numeric,daikon.inv.unary.string.IsNumeric,(return.group_id),/projects/{id}/share&/projects/{id}/share&post&201():::EXIT,1.0
post+projects_{id}_share,id,return.id is Numeric,daikon.inv.unary.string.IsNumeric,(return.id),/projects/{id}/share&/projects/{id}/share&post&201():::EXIT,1.0
post+projects_{id}_share,project_id,return.project_id is Numeric,daikon.inv.unary.string.IsNumeric,(return.project_id),/projects/{id}/share&/projects/{id}/share&post&201():::EXIT,1.0
post+projects_{id}_star,forks_count,return.forks_count >= 0,daikon.inv.unary.scalar.LowerBound,(return.forks_count),/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,1.0
post+projects_{id}_star,id,input.id == return.id,daikon.inv.binary.twoScalar.IntEqual,"(input.id, return.id)",/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,1.0
post+projects_{id}_star,merge_requests_enabled,return.merge_requests_enabled == return.can_create_merge_request_in,daikon.inv.binary.twoScalar.IntEqual,"(return.merge_requests_enabled, return.can_create_merge_request_in)",/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,1.0
post+projects_{id}_star,name_with_namespace,"return.name is a substring of return.name_with_namespace
return.namespace.name is a substring of return.name_with_namespace","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return.name, return.name_with_namespace)
(return.name_with_namespace, return.namespace.name)","/projects/{id}/star&/projects/{id}/star&post&201():::EXIT
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT",1.0
post+projects_{id}_star,namespace.kind,"return.namespace.kind == ""user""
LENGTH(return.namespace.kind)==4","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.namespace.kind)
(return.namespace.kind)","/projects/{id}/star&/projects/{id}/star&post&201():::EXIT
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT",1.0
post+projects_{id}_star,open_issues_count,"return.open_issues_count == size(return.shared_with_groups[])
return.open_issues_count == size(return.shared_with_groups[])
return.open_issues_count <= return.forks_count","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntLessEqual","(return.open_issues_count, size(return.shared_with_groups[..]))
(return.open_issues_count, size(return.shared_with_groups[..]))
(return.open_issues_count, return.forks_count)","/projects/{id}/star&/projects/{id}/star&post&201():::EXIT
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT",1.0
post+projects_{id}_star,path_with_namespace,"return.path_with_namespace is a substring of return.ssh_url_to_repo
return.path_with_namespace is a substring of return.web_url
return.path is a substring of return.path_with_namespace
return.namespace.path is a substring of return.path_with_namespace","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return.ssh_url_to_repo, return.path_with_namespace)
(return.web_url, return.path_with_namespace)
(return.path, return.path_with_namespace)
(return.path_with_namespace, return.namespace.path)","/projects/{id}/star&/projects/{id}/star&post&201():::EXIT
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT",1.0
post+projects_{id}_star,shared_with_groups,return.shared_with_groups[] == [],daikon.inv.unary.sequence.OneOfSequence,(return.shared_with_groups[..]),/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,1.0
post+projects_{id}_star,web_url,"return.web_url is a substring of return.http_url_to_repo
return.web_url is a substring of return.readme_url","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return.http_url_to_repo, return.web_url)
(return.web_url, return.readme_url)","/projects/{id}/star&/projects/{id}/star&post&201():::EXIT
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT",1.0
post+projects_{id}_unarchive,id,input.id == return.id,daikon.inv.binary.twoScalar.IntEqual,"(input.id, return.id)",/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,1.0
post+projects_{id}_unarchive,license,return.license == null,daikon.inv.unary.scalar.OneOfScalar,(return.license),/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,1.0
post+projects_{id}_unarchive,merge_requests_enabled,return.merge_requests_enabled == return.can_create_merge_request_in,daikon.inv.binary.twoScalar.IntEqual,"(return.merge_requests_enabled, return.can_create_merge_request_in)",/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,1.0
post+projects_{id}_unarchive,name_with_namespace,"return.owner.name is a substring of return.name_with_namespace
return.name is a substring of return.name_with_namespace","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return.owner.name, return.name_with_namespace)
(return.name, return.name_with_namespace)","/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT",1.0
post+projects_{id}_unarchive,open_issues_count,"return.open_issues_count == size(return.shared_with_groups[])
return.open_issues_count == size(return.shared_with_groups[])
return.open_issues_count <= return.forks_count
return.open_issues_count <= return.star_count","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual","(return.open_issues_count, size(return.shared_with_groups[..]))
(return.open_issues_count, size(return.shared_with_groups[..]))
(return.open_issues_count, return.forks_count)
(return.open_issues_count, return.star_count)","/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT",1.0
post+projects_{id}_unarchive,owner.id,return.owner.id == return.creator_id,daikon.inv.binary.twoScalar.IntEqual,"(return.owner.id, return.creator_id)",/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,1.0
post+projects_{id}_unarchive,path_with_namespace,"return.path_with_namespace is a substring of return.ssh_url_to_repo
return.path_with_namespace is a substring of return.web_url
return.path is a substring of return.path_with_namespace
return.namespace.path is a substring of return.path_with_namespace","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return.ssh_url_to_repo, return.path_with_namespace)
(return.web_url, return.path_with_namespace)
(return.path, return.path_with_namespace)
(return.path_with_namespace, return.namespace.path)","/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT",1.0
post+projects_{id}_unarchive,permissions,return.permissions == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions),/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,1.0
post+projects_{id}_unarchive,permissions.group_access,return.permissions.group_access == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.group_access),/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,1.0
post+projects_{id}_unarchive,permissions.project_access,return.permissions.project_access == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.project_access),/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,1.0
post+projects_{id}_unarchive,shared_with_groups,return.shared_with_groups[] == [],daikon.inv.unary.sequence.OneOfSequence,(return.shared_with_groups[..]),/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,1.0
post+projects_{id}_unarchive,visibility,"return.visibility one of { ""internal"", ""private"", ""public"" }",daikon.inv.unary.string.OneOfString,(return.visibility),/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,1.0
post+projects_{id}_unarchive,web_url,"return.web_url is a substring of return.http_url_to_repo
return.web_url is a substring of return.readme_url","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return.http_url_to_repo, return.web_url)
(return.web_url, return.readme_url)","/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT",1.0
post+projects_{id}_unstar,archived,return.archived == false,daikon.inv.unary.scalar.OneOfScalar,(return.archived),/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,1.0
post+projects_{id}_unstar,created_at,"return.created_at == return.last_activity_at
LENGTH(return.created_at)==24
return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.created_at, return.last_activity_at)
(return.created_at)
(return.created_at)","/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT",1.0
post+projects_{id}_unstar,forks_count,"return.forks_count >= 0
return.forks_count >= size(return.shared_with_groups[])","daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.forks_count)
(return.forks_count, size(return.shared_with_groups[..]))","/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT",1.0
post+projects_{id}_unstar,id,input.id == return.id,daikon.inv.binary.twoScalar.IntEqual,"(input.id, return.id)",/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,1.0
post+projects_{id}_unstar,import_status,"return.import_status one of { ""finished"", ""none"" }",daikon.inv.unary.string.OneOfString,(return.import_status),/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,1.0
post+projects_{id}_unstar,license,return.license == null,daikon.inv.unary.scalar.OneOfScalar,(return.license),/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,1.0
post+projects_{id}_unstar,merge_method,"return.merge_method one of { ""ff"", ""merge"", ""rebase_merge"" }",daikon.inv.unary.string.OneOfString,(return.merge_method),/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,1.0
post+projects_{id}_unstar,merge_requests_enabled,return.merge_requests_enabled == return.can_create_merge_request_in,daikon.inv.binary.twoScalar.IntEqual,"(return.merge_requests_enabled, return.can_create_merge_request_in)",/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,1.0
post+projects_{id}_unstar,name_with_namespace,"return.name is a substring of return.name_with_namespace
return.namespace.name is a substring of return.name_with_namespace","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return.name, return.name_with_namespace)
(return.name_with_namespace, return.namespace.name)","/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT",1.0
post+projects_{id}_unstar,path_with_namespace,"return.path_with_namespace is a substring of return.ssh_url_to_repo
return.path_with_namespace is a substring of return.web_url
return.path is a substring of return.path_with_namespace
return.namespace.path is a substring of return.path_with_namespace","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return.ssh_url_to_repo, return.path_with_namespace)
(return.web_url, return.path_with_namespace)
(return.path, return.path_with_namespace)
(return.path_with_namespace, return.namespace.path)","/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT",1.0
post+projects_{id}_unstar,visibility,"return.visibility one of { ""internal"", ""private"", ""public"" }",daikon.inv.unary.string.OneOfString,(return.visibility),/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,1.0
post+projects_{id}_unstar,web_url,"return.web_url is a substring of return.http_url_to_repo
return.web_url is a substring of return.readme_url","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return.http_url_to_repo, return.web_url)
(return.web_url, return.readme_url)","/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT",1.0
put+projects_{id},allow_merge_on_skipped_pipeline,input.allow_merge_on_skipped_pipeline == return.allow_merge_on_skipped_pipeline,daikon.inv.binary.twoScalar.IntEqual,"(input.allow_merge_on_skipped_pipeline, return.allow_merge_on_skipped_pipeline)",/projects/{id}&/projects/{id}&put&200():::EXIT,1.0
put+projects_{id},archived,"return.archived == return.service_desk_enabled
return.archived == false","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.OneOfScalar","(return.archived, return.service_desk_enabled)
(return.archived)","/projects/{id}&/projects/{id}&put&200():::EXIT
/projects/{id}&/projects/{id}&put&200():::EXIT",1.0
put+projects_{id},auto_devops_deploy_strategy,"input.auto_devops_deploy_strategy == return.auto_devops_deploy_strategy
return.auto_devops_deploy_strategy one of { ""continuous"", ""manual"", ""timed_incremental"" }","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.OneOfString","(input.auto_devops_deploy_strategy, return.auto_devops_deploy_strategy)
(return.auto_devops_deploy_strategy)","/projects/{id}&/projects/{id}&put&200():::EXIT
/projects/{id}&/projects/{id}&put&200():::EXIT",1.0
put+projects_{id},auto_devops_enabled,input.auto_devops_enabled == return.auto_devops_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.auto_devops_enabled, return.auto_devops_enabled)",/projects/{id}&/projects/{id}&put&200():::EXIT,1.0
put+projects_{id},autoclose_referenced_issues,input.autoclose_referenced_issues == return.autoclose_referenced_issues,daikon.inv.binary.twoScalar.IntEqual,"(input.autoclose_referenced_issues, return.autoclose_referenced_issues)",/projects/{id}&/projects/{id}&put&200():::EXIT,1.0
put+projects_{id},ci_default_git_depth,input.ci_default_git_depth == return.ci_default_git_depth,daikon.inv.binary.twoScalar.IntEqual,"(input.ci_default_git_depth, return.ci_default_git_depth)",/projects/{id}&/projects/{id}&put&200():::EXIT,1.0
put+projects_{id},ci_forward_deployment_enabled,input.ci_forward_deployment_enabled == return.ci_forward_deployment_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.ci_forward_deployment_enabled, return.ci_forward_deployment_enabled)",/projects/{id}&/projects/{id}&put&200():::EXIT,1.0
put+projects_{id},container_registry_enabled,input.container_registry_enabled == return.container_registry_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.container_registry_enabled, return.container_registry_enabled)",/projects/{id}&/projects/{id}&put&200():::EXIT,1.0
put+projects_{id},created_at,"return.created_at == return.last_activity_at
LENGTH(return.created_at)==24
return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.created_at, return.last_activity_at)
(return.created_at)
(return.created_at)","/projects/{id}&/projects/{id}&put&200():::EXIT
/projects/{id}&/projects/{id}&put&200():::EXIT
/projects/{id}&/projects/{id}&put&200():::EXIT",1.0
put+projects_{id},description,input.description == return.description,daikon.inv.binary.twoString.StringEqual,"(input.description, return.description)",/projects/{id}&/projects/{id}&put&200():::EXIT,1.0
put+projects_{id},id,input.id == return.id,daikon.inv.binary.twoScalar.IntEqual,"(input.id, return.id)",/projects/{id}&/projects/{id}&put&200():::EXIT,1.0
put+projects_{id},jobs_enabled,input.jobs_enabled == return.jobs_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.jobs_enabled, return.jobs_enabled)",/projects/{id}&/projects/{id}&put&200():::EXIT,1.0
put+projects_{id},merge_method,"input.merge_method == return.merge_method
return.merge_method one of { ""ff"", ""merge"", ""rebase_merge"" }","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.OneOfString","(input.merge_method, return.merge_method)
(return.merge_method)","/projects/{id}&/projects/{id}&put&200():::EXIT
/projects/{id}&/projects/{id}&put&200():::EXIT",1.0
put+projects_{id},merge_requests_enabled,return.merge_requests_enabled == return.can_create_merge_request_in,daikon.inv.binary.twoScalar.IntEqual,"(return.merge_requests_enabled, return.can_create_merge_request_in)",/projects/{id}&/projects/{id}&put&200():::EXIT,1.0
put+projects_{id},name,input.name == return.name,daikon.inv.binary.twoString.StringEqual,"(input.name, return.name)",/projects/{id}&/projects/{id}&put&200():::EXIT,1.0
put+projects_{id},name_with_namespace,"input.name is a substring of return.name_with_namespace
return.owner.name is a substring of return.name_with_namespace
return.name is a substring of return.name_with_namespace","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(input.name, return.name_with_namespace)
(return.owner.name, return.name_with_namespace)
(return.name, return.name_with_namespace)","/projects/{id}&/projects/{id}&put&200():::EXIT
/projects/{id}&/projects/{id}&put&200():::EXIT
/projects/{id}&/projects/{id}&put&200():::EXIT",1.0
put+projects_{id},namespace.path,return.namespace.path == return.namespace.full_path,daikon.inv.binary.twoString.StringEqual,"(return.namespace.path, return.namespace.full_path)",/projects/{id}&/projects/{id}&put&200():::EXIT,1.0
put+projects_{id},only_allow_merge_if_all_discussions_are_resolved,input.only_allow_merge_if_all_discussions_are_resolved == return.only_allow_merge_if_all_discussions_are_resolved,daikon.inv.binary.twoScalar.IntEqual,"(input.only_allow_merge_if_all_discussions_are_resolved, return.only_allow_merge_if_all_discussions_are_resolved)",/projects/{id}&/projects/{id}&put&200():::EXIT,1.0
put+projects_{id},only_allow_merge_if_pipeline_succeeds,input.only_allow_merge_if_pipeline_succeeds == return.only_allow_merge_if_pipeline_succeeds,daikon.inv.binary.twoScalar.IntEqual,"(input.only_allow_merge_if_pipeline_succeeds, return.only_allow_merge_if_pipeline_succeeds)",/projects/{id}&/projects/{id}&put&200():::EXIT,1.0
put+projects_{id},open_issues_count,"return.open_issues_count == return.forks_count
return.open_issues_count == return.star_count
return.open_issues_count == size(return.shared_with_groups[])
return.open_issues_count == size(return.shared_with_groups[])","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual","(return.open_issues_count, return.forks_count)
(return.open_issues_count, return.star_count)
(return.open_issues_count, size(return.shared_with_groups[..]))
(return.open_issues_count, size(return.shared_with_groups[..]))","/projects/{id}&/projects/{id}&put&200():::EXIT
/projects/{id}&/projects/{id}&put&200():::EXIT
/projects/{id}&/projects/{id}&put&200():::EXIT
/projects/{id}&/projects/{id}&put&200():::EXIT",1.0
put+projects_{id},owner.id,return.owner.id == return.creator_id,daikon.inv.binary.twoScalar.IntEqual,"(return.owner.id, return.creator_id)",/projects/{id}&/projects/{id}&put&200():::EXIT,1.0
put+projects_{id},owner.name,return.owner.name == return.namespace.name,daikon.inv.binary.twoString.StringEqual,"(return.owner.name, return.namespace.name)",/projects/{id}&/projects/{id}&put&200():::EXIT,1.0
put+projects_{id},packages_enabled,input.packages_enabled == return.packages_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.packages_enabled, return.packages_enabled)",/projects/{id}&/projects/{id}&put&200():::EXIT,1.0
put+projects_{id},path,input.path == return.path,daikon.inv.binary.twoString.StringEqual,"(input.path, return.path)",/projects/{id}&/projects/{id}&put&200():::EXIT,1.0
put+projects_{id},path_with_namespace,"input.path is a substring of return.path_with_namespace
return.path_with_namespace is a substring of return.ssh_url_to_repo
return.path_with_namespace is a substring of return.web_url
return.path is a substring of return.path_with_namespace
return.namespace.path is a substring of return.path_with_namespace","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(input.path, return.path_with_namespace)
(return.ssh_url_to_repo, return.path_with_namespace)
(return.web_url, return.path_with_namespace)
(return.path, return.path_with_namespace)
(return.path_with_namespace, return.namespace.path)","/projects/{id}&/projects/{id}&put&200():::EXIT
/projects/{id}&/projects/{id}&put&200():::EXIT
/projects/{id}&/projects/{id}&put&200():::EXIT
/projects/{id}&/projects/{id}&put&200():::EXIT
/projects/{id}&/projects/{id}&put&200():::EXIT",1.0
put+projects_{id},permissions,return.permissions == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions),/projects/{id}&/projects/{id}&put&200():::EXIT,1.0
put+projects_{id},permissions.group_access,return.permissions.group_access == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.group_access),/projects/{id}&/projects/{id}&put&200():::EXIT,1.0
put+projects_{id},permissions.project_access,return.permissions.project_access == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.project_access),/projects/{id}&/projects/{id}&put&200():::EXIT,1.0
put+projects_{id},public_jobs,input.public_builds == return.public_jobs,daikon.inv.binary.twoScalar.IntEqual,"(input.public_builds, return.public_jobs)",/projects/{id}&/projects/{id}&put&200():::EXIT,1.0
put+projects_{id},remove_source_branch_after_merge,input.remove_source_branch_after_merge == return.remove_source_branch_after_merge,daikon.inv.binary.twoScalar.IntEqual,"(input.remove_source_branch_after_merge, return.remove_source_branch_after_merge)",/projects/{id}&/projects/{id}&put&200():::EXIT,1.0
put+projects_{id},repository_storage,"return.repository_storage == ""default""
LENGTH(return.repository_storage)==7","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.repository_storage)
(return.repository_storage)","/projects/{id}&/projects/{id}&put&200():::EXIT
/projects/{id}&/projects/{id}&put&200():::EXIT",1.0
put+projects_{id},request_access_enabled,input.request_access_enabled == return.request_access_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.request_access_enabled, return.request_access_enabled)",/projects/{id}&/projects/{id}&put&200():::EXIT,1.0
put+projects_{id},resolve_outdated_diff_discussions,input.resolve_outdated_diff_discussions == return.resolve_outdated_diff_discussions,daikon.inv.binary.twoScalar.IntEqual,"(input.resolve_outdated_diff_discussions, return.resolve_outdated_diff_discussions)",/projects/{id}&/projects/{id}&put&200():::EXIT,1.0
put+projects_{id},runners_token,LENGTH(return.runners_token)==29,daikon.inv.unary.string.FixedLengthString,(return.runners_token),/projects/{id}&/projects/{id}&put&200():::EXIT,1.0
put+projects_{id},shared_runners_enabled,input.shared_runners_enabled == return.shared_runners_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.shared_runners_enabled, return.shared_runners_enabled)",/projects/{id}&/projects/{id}&put&200():::EXIT,1.0
put+projects_{id},shared_with_groups,return.shared_with_groups[] == [],daikon.inv.unary.sequence.OneOfSequence,(return.shared_with_groups[..]),/projects/{id}&/projects/{id}&put&200():::EXIT,1.0
put+projects_{id},statistics,return.statistics == null,daikon.inv.unary.scalar.OneOfScalar,(return.statistics),/projects/{id}&/projects/{id}&put&200():::EXIT,1.0
put+projects_{id},suggestion_commit_message,input.suggestion_commit_message == return.suggestion_commit_message,daikon.inv.binary.twoString.StringEqual,"(input.suggestion_commit_message, return.suggestion_commit_message)",/projects/{id}&/projects/{id}&put&200():::EXIT,1.0
put+projects_{id},visibility,"input.visibility == return.visibility
return.visibility one of { ""internal"", ""private"", ""public"" }","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.OneOfString","(input.visibility, return.visibility)
(return.visibility)","/projects/{id}&/projects/{id}&put&200():::EXIT
/projects/{id}&/projects/{id}&put&200():::EXIT",1.0
put+projects_{id},web_url,"return.web_url is a substring of return.http_url_to_repo
return.web_url is a substring of return.readme_url","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return.http_url_to_repo, return.web_url)
(return.web_url, return.readme_url)","/projects/{id}&/projects/{id}&put&200():::EXIT
/projects/{id}&/projects/{id}&put&200():::EXIT",1.0
put+projects_{id}_hooks_{hook_id},created_at,"LENGTH(return.created_at)==24
return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.created_at)
(return.created_at)","/projects/{id}/hooks/{hook_id}&/projects/{id}/hooks/{hook_id}&put&200():::EXIT
/projects/{id}/hooks/{hook_id}&/projects/{id}/hooks/{hook_id}&put&200():::EXIT",1.0
put+projects_{id}_hooks_{hook_id},enable_ssl_verification,"return.enable_ssl_verification one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.enable_ssl_verification),/projects/{id}/hooks/{hook_id}&/projects/{id}/hooks/{hook_id}&put&200():::EXIT,1.0
put+projects_{id}_hooks_{hook_id},id,return.id is Numeric,daikon.inv.unary.string.IsNumeric,(return.id),/projects/{id}/hooks/{hook_id}&/projects/{id}/hooks/{hook_id}&put&200():::EXIT,1.0
put+projects_{id}_hooks_{hook_id},issues_events,"return.issues_events one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.issues_events),/projects/{id}/hooks/{hook_id}&/projects/{id}/hooks/{hook_id}&put&200():::EXIT,1.0
put+projects_{id}_hooks_{hook_id},merge_requests_events,"return.merge_requests_events one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.merge_requests_events),/projects/{id}/hooks/{hook_id}&/projects/{id}/hooks/{hook_id}&put&200():::EXIT,1.0
put+projects_{id}_hooks_{hook_id},note_events,"return.note_events one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.note_events),/projects/{id}/hooks/{hook_id}&/projects/{id}/hooks/{hook_id}&put&200():::EXIT,1.0
put+projects_{id}_hooks_{hook_id},pipeline_events,"return.pipeline_events one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.pipeline_events),/projects/{id}/hooks/{hook_id}&/projects/{id}/hooks/{hook_id}&put&200():::EXIT,1.0
put+projects_{id}_hooks_{hook_id},project_id,return.project_id is Numeric,daikon.inv.unary.string.IsNumeric,(return.project_id),/projects/{id}/hooks/{hook_id}&/projects/{id}/hooks/{hook_id}&put&200():::EXIT,1.0
put+projects_{id}_hooks_{hook_id},push_events,"return.push_events one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.push_events),/projects/{id}/hooks/{hook_id}&/projects/{id}/hooks/{hook_id}&put&200():::EXIT,1.0
put+projects_{id}_hooks_{hook_id},tag_push_events,"return.tag_push_events one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.tag_push_events),/projects/{id}/hooks/{hook_id}&/projects/{id}/hooks/{hook_id}&put&200():::EXIT,1.0
put+projects_{id}_hooks_{hook_id},url,input.url == return.url,daikon.inv.binary.twoString.StringEqual,"(input.url, return.url)",/projects/{id}/hooks/{hook_id}&/projects/{id}/hooks/{hook_id}&put&200():::EXIT,1.0
put+projects_{id}_hooks_{hook_id},wiki_page_events,"return.wiki_page_events one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.wiki_page_events),/projects/{id}/hooks/{hook_id}&/projects/{id}/hooks/{hook_id}&put&200():::EXIT,1.0
put+projects_{id}_transfer,container_expiration_policy.next_run_at,"LENGTH(return.container_expiration_policy.next_run_at)==24
return.container_expiration_policy.next_run_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.container_expiration_policy.next_run_at)
(return.container_expiration_policy.next_run_at)","/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT",1.0
put+projects_{id}_transfer,description,return.description == return.forked_from_project.description,daikon.inv.binary.twoString.StringEqual,"(return.description, return.forked_from_project.description)",/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,1.0
put+projects_{id}_transfer,forked_from_project.created_at,"return.forked_from_project.created_at == return.forked_from_project.last_activity_at
LENGTH(return.forked_from_project.created_at)==24
return.forked_from_project.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.forked_from_project.created_at, return.forked_from_project.last_activity_at)
(return.forked_from_project.created_at)
(return.forked_from_project.created_at)","/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT",1.0
put+projects_{id}_transfer,forked_from_project.forks_count,"return.forked_from_project.forks_count >= size(return.shared_with_groups[])
return.forked_from_project.forks_count >= size(return.forked_from_project.tag_list[])","daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.forked_from_project.forks_count, size(return.shared_with_groups[..]))
(return.forked_from_project.forks_count, size(return.forked_from_project.tag_list[..]))","/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT",1.0
put+projects_{id}_transfer,forked_from_project.http_url_to_repo,return.forked_from_project.web_url is a substring of return.forked_from_project.http_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.forked_from_project.http_url_to_repo, return.forked_from_project.web_url)",/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,1.0
put+projects_{id}_transfer,forked_from_project.id,"input.id > return.forked_from_project.id
return.forked_from_project.id > return.forked_from_project.star_count","daikon.inv.binary.twoScalar.IntGreaterThan
daikon.inv.binary.twoScalar.IntGreaterThan","(input.id, return.forked_from_project.id)
(return.forked_from_project.id, return.forked_from_project.star_count)","/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT",1.0
put+projects_{id}_transfer,forked_from_project.name,return.forked_from_project.name is a substring of return.forked_from_project.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.forked_from_project.name, return.forked_from_project.name_with_namespace)",/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,1.0
put+projects_{id}_transfer,forked_from_project.name_with_namespace,return.forked_from_project.namespace.name is a substring of return.forked_from_project.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.forked_from_project.name_with_namespace, return.forked_from_project.namespace.name)",/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,1.0
put+projects_{id}_transfer,forked_from_project.namespace.id,"return.forked_from_project.namespace.id >= 1
return.forked_from_project.namespace.id >= size(return.shared_with_groups[])
return.forked_from_project.namespace.id >= size(return.forked_from_project.tag_list[])","daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.forked_from_project.namespace.id)
(return.forked_from_project.namespace.id, size(return.shared_with_groups[..]))
(return.forked_from_project.namespace.id, size(return.forked_from_project.tag_list[..]))","/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT",1.0
put+projects_{id}_transfer,forked_from_project.namespace.kind,"return.forked_from_project.namespace.kind one of { ""group"", ""user"" }",daikon.inv.unary.string.OneOfString,(return.forked_from_project.namespace.kind),/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,1.0
put+projects_{id}_transfer,forked_from_project.namespace.path,return.forked_from_project.namespace.path is a substring of return.forked_from_project.namespace.full_path,daikon.inv.binary.twoString.StdString$SubString,"(return.forked_from_project.namespace.path, return.forked_from_project.namespace.full_path)",/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,1.0
put+projects_{id}_transfer,forked_from_project.path,return.forked_from_project.path is a substring of return.forked_from_project.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.forked_from_project.path, return.forked_from_project.path_with_namespace)",/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,1.0
put+projects_{id}_transfer,forked_from_project.path_with_namespace,"return.forked_from_project.path_with_namespace is a substring of return.forked_from_project.ssh_url_to_repo
return.forked_from_project.path_with_namespace is a substring of return.forked_from_project.web_url
return.forked_from_project.namespace.full_path is a substring of return.forked_from_project.path_with_namespace","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return.forked_from_project.path_with_namespace, return.forked_from_project.ssh_url_to_repo)
(return.forked_from_project.path_with_namespace, return.forked_from_project.web_url)
(return.forked_from_project.path_with_namespace, return.forked_from_project.namespace.full_path)","/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT",1.0
put+projects_{id}_transfer,id,input.id == return.id,daikon.inv.binary.twoScalar.IntEqual,"(input.id, return.id)",/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,1.0
put+projects_{id}_transfer,import_status,"return.import_status one of { ""finished"", ""none"" }",daikon.inv.unary.string.OneOfString,(return.import_status),/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,1.0
put+projects_{id}_transfer,license,"return.license == return.forked_from_project.license
return.license == null","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.OneOfScalar","(return.license, return.forked_from_project.license)
(return.license)","/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT",1.0
put+projects_{id}_transfer,name_with_namespace,"return.owner.name is a substring of return.name_with_namespace
return.name is a substring of return.name_with_namespace","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return.owner.name, return.name_with_namespace)
(return.name, return.name_with_namespace)","/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT",1.0
put+projects_{id}_transfer,namespace.id,input.namespace == return.namespace.id,daikon.inv.binary.twoScalar.IntEqual,"(input.namespace, return.namespace.id)",/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,1.0
put+projects_{id}_transfer,open_issues_count,"return.open_issues_count == size(return.compliance_frameworks[])
return.open_issues_count == size(return.compliance_frameworks[])
return.open_issues_count <= return.forks_count
return.open_issues_count <= return.star_count
return.open_issues_count <= return.forked_from_project.forks_count
return.open_issues_count <= return.forked_from_project.star_count
return.open_issues_count <= size(return.shared_with_groups[])
return.open_issues_count <= size(return.forked_from_project.tag_list[])","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual","(return.open_issues_count, size(return.compliance_frameworks[..]))
(return.open_issues_count, size(return.compliance_frameworks[..]))
(return.open_issues_count, return.forks_count)
(return.open_issues_count, return.star_count)
(return.open_issues_count, return.forked_from_project.forks_count)
(return.open_issues_count, return.forked_from_project.star_count)
(return.open_issues_count, size(return.shared_with_groups[..]))
(return.open_issues_count, size(return.forked_from_project.tag_list[..]))","/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT",1.0
put+projects_{id}_transfer,owner.name,return.owner.name == return.namespace.name,daikon.inv.binary.twoString.StringEqual,"(return.owner.name, return.namespace.name)",/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,1.0
put+projects_{id}_transfer,path_with_namespace,"return.path_with_namespace is a substring of return.ssh_url_to_repo
return.path_with_namespace is a substring of return.web_url
return.path is a substring of return.path_with_namespace
return.namespace.path is a substring of return.path_with_namespace","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return.ssh_url_to_repo, return.path_with_namespace)
(return.web_url, return.path_with_namespace)
(return.path, return.path_with_namespace)
(return.path_with_namespace, return.namespace.path)","/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT",1.0
put+projects_{id}_transfer,permissions,return.permissions == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions),/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,1.0
put+projects_{id}_transfer,permissions.group_access,return.permissions.group_access == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.group_access),/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,1.0
put+projects_{id}_transfer,permissions.project_access,return.permissions.project_access == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.project_access),/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,1.0
put+projects_{id}_transfer,repository_storage,"return.repository_storage == ""default""
LENGTH(return.repository_storage)==7","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.repository_storage)
(return.repository_storage)","/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT",1.0
put+projects_{id}_transfer,statistics,return.statistics == null,daikon.inv.unary.scalar.OneOfScalar,(return.statistics),/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,1.0
put+projects_{id}_transfer,web_url,"return.web_url is a substring of return.http_url_to_repo
return.web_url is a substring of return.readme_url","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return.http_url_to_repo, return.web_url)
(return.web_url, return.readme_url)","/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT",1.0
