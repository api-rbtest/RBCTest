pptname,invariant,invariantType,variables,postmanAssertion,endpoint,tp,fp,enter,invariantDescription,Unnamed: 10,group,api
/projects/{id}&/projects/{id}&get&200():::EXIT,input.license == return.issues_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.license, return.issues_enabled)",pm.expect(input_license).to.eql(return_issues_enabled),get+projects_{id},,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,issues_enabled,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,input.license == return.ci_forward_deployment_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.license, return.ci_forward_deployment_enabled)",pm.expect(input_license).to.eql(return_ci_forward_deployment_enabled),get+projects_{id},,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,ci_forward_deployment_enabled,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return.owner.id == return.creator_id,daikon.inv.binary.twoScalar.IntEqual,"(return.owner.id, return.creator_id)",pm.expect(return_owner_id).to.eql(return_creator_id),get+projects_{id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,owner.id,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return.owner.name == return.namespace.name,daikon.inv.binary.twoString.StringEqual,"(return.owner.name, return.namespace.name)",pm.expect(return_owner_name).to.eql(return_namespace_name),get+projects_{id},1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,owner.name,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return.open_issues_count == return.forks_count,daikon.inv.binary.twoScalar.IntEqual,"(return.open_issues_count, return.forks_count)",pm.expect(return_open_issues_count).to.eql(return_forks_count),get+projects_{id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,open_issues_count,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return.open_issues_count == return.star_count,daikon.inv.binary.twoScalar.IntEqual,"(return.open_issues_count, return.star_count)",pm.expect(return_open_issues_count).to.eql(return_star_count),get+projects_{id},,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,open_issues_count,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return.open_issues_count == return.statistics.wiki_size,daikon.inv.binary.twoScalar.IntEqual,"(return.open_issues_count, return.statistics.wiki_size)",pm.expect(return_open_issues_count).to.eql(return_statistics_wiki_size),get+projects_{id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,open_issues_count,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return.open_issues_count == size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntEqual,"(return.open_issues_count, size(return.shared_with_groups[..]))",pm.expect(return_open_issues_count).to.eql(return_shared_with_groups_size_array),get+projects_{id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,open_issues_count,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return.open_issues_count == size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntEqual,"(return.open_issues_count, size(return.shared_with_groups[..]))",pm.expect(return_open_issues_count).to.eql(return_shared_with_groups_size_array),get+projects_{id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,open_issues_count,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return.open_issues_count == size(return.compliance_frameworks[]),daikon.inv.binary.twoScalar.IntEqual,"(return.open_issues_count, size(return.compliance_frameworks[..]))",pm.expect(return_open_issues_count).to.eql(return_compliance_frameworks_size_array),get+projects_{id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,open_issues_count,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return.open_issues_count == size(return.compliance_frameworks[]),daikon.inv.binary.twoScalar.IntEqual,"(return.open_issues_count, size(return.compliance_frameworks[..]))",pm.expect(return_open_issues_count).to.eql(return_compliance_frameworks_size_array),get+projects_{id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,open_issues_count,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return.merge_requests_enabled == return.can_create_merge_request_in,daikon.inv.binary.twoScalar.IntEqual,"(return.merge_requests_enabled, return.can_create_merge_request_in)",pm.expect(return_merge_requests_enabled).to.eql(return_can_create_merge_request_in),get+projects_{id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,merge_requests_enabled,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return.container_expiration_policy.enabled == return.archived,daikon.inv.binary.twoScalar.IntEqual,"(return.container_expiration_policy.enabled, return.archived)",pm.expect(return_container_expiration_policy_enabled).to.eql(return_archived),get+projects_{id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,container_expiration_policy.enabled,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return.created_at == return.last_activity_at,daikon.inv.binary.twoString.StringEqual,"(return.created_at, return.last_activity_at)",pm.expect(return_created_at).to.eql(return_last_activity_at),get+projects_{id},,1.0,,Represents an invariant of == between two String scalars. Prints as x == y.,,created_at,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return.namespace.path == return.namespace.full_path,daikon.inv.binary.twoString.StringEqual,"(return.namespace.path, return.namespace.full_path)",pm.expect(return_namespace_path).to.eql(return_namespace_full_path),get+projects_{id},1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,namespace.path,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return.archived == return.service_desk_enabled,daikon.inv.binary.twoScalar.IntEqual,"(return.archived, return.service_desk_enabled)",pm.expect(return_archived).to.eql(return_service_desk_enabled),get+projects_{id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,archived,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return.license == return.forked_from_project.license,daikon.inv.binary.twoScalar.IntEqual,"(return.license, return.forked_from_project.license)",pm.expect(return_license).to.eql(return_forked_from_project_license),get+projects_{id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,license,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return.statistics.storage_size == return.statistics.repository_size,daikon.inv.binary.twoScalar.IntEqual,"(return.statistics.storage_size, return.statistics.repository_size)",pm.expect(return_statistics_storage_size).to.eql(return_statistics_repository_size),get+projects_{id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,statistics.storage_size,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return.statistics.wiki_size == return.statistics.lfs_objects_size,daikon.inv.binary.twoScalar.IntEqual,"(return.statistics.wiki_size, return.statistics.lfs_objects_size)",pm.expect(return_statistics_wiki_size).to.eql(return_statistics_lfs_objects_size),get+projects_{id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,statistics.wiki_size,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return.statistics.wiki_size == return.statistics.job_artifacts_size,daikon.inv.binary.twoScalar.IntEqual,"(return.statistics.wiki_size, return.statistics.job_artifacts_size)",pm.expect(return_statistics_wiki_size).to.eql(return_statistics_job_artifacts_size),get+projects_{id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,statistics.job_artifacts_size,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return.statistics.wiki_size == return.statistics.packages_size,daikon.inv.binary.twoScalar.IntEqual,"(return.statistics.wiki_size, return.statistics.packages_size)",pm.expect(return_statistics_wiki_size).to.eql(return_statistics_packages_size),get+projects_{id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,statistics.wiki_size,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return.statistics.wiki_size == return.statistics.snippets_size,daikon.inv.binary.twoScalar.IntEqual,"(return.statistics.wiki_size, return.statistics.snippets_size)",pm.expect(return_statistics_wiki_size).to.eql(return_statistics_snippets_size),get+projects_{id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,statistics.wiki_size,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,"return.default_branch one of { ""brushed"", ""main"", ""terrene"" }",daikon.inv.unary.string.OneOfString,(return.default_branch),"pm.expect([""brushed"", ""main"", ""terrene""].includes(return_default_branch)).to.be.true",get+projects_{id},,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,default_branch,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,"return.visibility one of { ""internal"", ""private"", ""public"" }",daikon.inv.unary.string.OneOfString,(return.visibility),"pm.expect([""internal"", ""private"", ""public""].includes(return_visibility)).to.be.true",get+projects_{id},1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,visibility,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,"return.container_expiration_policy.cadence == ""1d""",daikon.inv.unary.string.OneOfString,(return.container_expiration_policy.cadence),"pm.expect([""1d""].includes(return_container_expiration_policy_cadence)).to.be.true",get+projects_{id},,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,container_expiration_policy.cadence,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,LENGTH(return.container_expiration_policy.cadence)==2,daikon.inv.unary.string.FixedLengthString,(return.container_expiration_policy.cadence),pm.expect(return_container_expiration_policy_cadence).to.have.length(2),get+projects_{id},,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,container_expiration_policy.cadence,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return.container_expiration_policy.keep_n == 10,daikon.inv.unary.scalar.OneOfScalar,(return.container_expiration_policy.keep_n),pm.expect([10].includes(return_container_expiration_policy_keep_n)).to.be.true,get+projects_{id},,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,container_expiration_policy.keep_n,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,"return.container_expiration_policy.older_than == ""90d""",daikon.inv.unary.string.OneOfString,(return.container_expiration_policy.older_than),"pm.expect([""90d""].includes(return_container_expiration_policy_older_than)).to.be.true",get+projects_{id},,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,container_expiration_policy.older_than,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,LENGTH(return.container_expiration_policy.older_than)==3,daikon.inv.unary.string.FixedLengthString,(return.container_expiration_policy.older_than),pm.expect(return_container_expiration_policy_older_than).to.have.length(3),get+projects_{id},,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,container_expiration_policy.older_than,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,"return.container_expiration_policy.name_regex == "".*""",daikon.inv.unary.string.OneOfString,(return.container_expiration_policy.name_regex),"pm.expect(["".*""].includes(return_container_expiration_policy_name_regex)).to.be.true",get+projects_{id},,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,container_expiration_policy.name_regex,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,LENGTH(return.container_expiration_policy.name_regex)==2,daikon.inv.unary.string.FixedLengthString,(return.container_expiration_policy.name_regex),pm.expect(return_container_expiration_policy_name_regex).to.have.length(2),get+projects_{id},,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,container_expiration_policy.name_regex,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,LENGTH(return.container_expiration_policy.next_run_at)==24,daikon.inv.unary.string.FixedLengthString,(return.container_expiration_policy.next_run_at),pm.expect(return_container_expiration_policy_next_run_at).to.have.length(24),get+projects_{id},1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,container_expiration_policy.next_run_at,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return.container_expiration_policy.next_run_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.container_expiration_policy.next_run_at),"pm.expect(return_container_expiration_policy_next_run_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+projects_{id},1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,container_expiration_policy.next_run_at,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,LENGTH(return.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.created_at),pm.expect(return_created_at).to.have.length(24),get+projects_{id},1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,created_at,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.created_at),"pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+projects_{id},1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,created_at,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return.creator_id >= 1,daikon.inv.unary.scalar.LowerBound,(return.creator_id),pm.expect(return_creator_id).to.be.at.least(1),get+projects_{id},1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,creator_id,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return.namespace.id >= 1,daikon.inv.unary.scalar.LowerBound,(return.namespace.id),pm.expect(return_namespace_id).to.be.at.least(1),get+projects_{id},1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,namespace.id,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,"return.namespace.kind == ""user""",daikon.inv.unary.string.OneOfString,(return.namespace.kind),"pm.expect([""user""].includes(return_namespace_kind)).to.be.true",get+projects_{id},,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,namespace.kind,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,LENGTH(return.namespace.kind)==4,daikon.inv.unary.string.FixedLengthString,(return.namespace.kind),pm.expect(return_namespace_kind).to.have.length(4),get+projects_{id},1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,namespace.kind,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,"return.import_status == ""none""",daikon.inv.unary.string.OneOfString,(return.import_status),"pm.expect([""none""].includes(return_import_status)).to.be.true",get+projects_{id},,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,import_status,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,LENGTH(return.import_status)==4,daikon.inv.unary.string.FixedLengthString,(return.import_status),pm.expect(return_import_status).to.have.length(4),get+projects_{id},,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,import_status,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return.permissions.project_access.access_level == 50,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.project_access.access_level),pm.expect([50].includes(return_permissions_project_access_access_level)).to.be.true,get+projects_{id},,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,permissions.project_access.access_level,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return.permissions.project_access.notification_level == 3,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.project_access.notification_level),pm.expect([3].includes(return_permissions_project_access_notification_level)).to.be.true,get+projects_{id},,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,permissions.project_access.notification_level,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return.permissions.group_access == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.group_access),pm.expect(return_permissions_group_access).to.be.null,get+projects_{id},1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,permissions.group_access,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return.archived == false,daikon.inv.unary.scalar.OneOfScalar,(return.archived),pm.expect(return_archived).to.eql(false),get+projects_{id},1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,archived,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return.license == null,daikon.inv.unary.scalar.OneOfScalar,(return.license),pm.expect(return_license).to.be.null,get+projects_{id},,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,license,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,LENGTH(return.runners_token)==29,daikon.inv.unary.string.FixedLengthString,(return.runners_token),pm.expect(return_runners_token).to.have.length(29),get+projects_{id},1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,runners_token,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return.ci_default_git_depth == 20,daikon.inv.unary.scalar.OneOfScalar,(return.ci_default_git_depth),pm.expect([20].includes(return_ci_default_git_depth)).to.be.true,get+projects_{id},,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,ci_default_git_depth,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return.shared_with_groups[] == [],daikon.inv.unary.sequence.OneOfSequence,(return.shared_with_groups[..]),pm.expect([[]].some(value => pm.expect(return_shared_with_groups_array).to.deep.equal(value).that)).to.be.true,get+projects_{id},1.0,,,"Represents long[] variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,shared_with_groups,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,"return.merge_method one of { ""ff"", ""merge"", ""rebase_merge"" }",daikon.inv.unary.string.OneOfString,(return.merge_method),"pm.expect([""ff"", ""merge"", ""rebase_merge""].includes(return_merge_method)).to.be.true",get+projects_{id},1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,merge_method,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,"return.auto_devops_deploy_strategy one of { ""continuous"", ""manual"", ""timed_incremental"" }",daikon.inv.unary.string.OneOfString,(return.auto_devops_deploy_strategy),"pm.expect([""continuous"", ""manual"", ""timed_incremental""].includes(return_auto_devops_deploy_strategy)).to.be.true",get+projects_{id},1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,auto_devops_deploy_strategy,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,"return.repository_storage == ""default""",daikon.inv.unary.string.OneOfString,(return.repository_storage),"pm.expect([""default""].includes(return_repository_storage)).to.be.true",get+projects_{id},1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,repository_storage,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,LENGTH(return.repository_storage)==7,daikon.inv.unary.string.FixedLengthString,(return.repository_storage),pm.expect(return_repository_storage).to.have.length(7),get+projects_{id},1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,repository_storage,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return.compliance_frameworks[] == [],daikon.inv.unary.stringsequence.OneOfStringSequence,(return.compliance_frameworks[..]),pm.expect([[]].some(value => pm.expect(return_compliance_frameworks_array).to.deep.equal(value).that)).to.be.true,get+projects_{id},1.0,,,"Represents String[] variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,compliance_frameworks,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,"return.statistics.commit_count one of { 0, 1 }",daikon.inv.unary.scalar.OneOfScalar,(return.statistics.commit_count),"pm.expect([0, 1, 0].includes(return_statistics_commit_count)).to.be.true",get+projects_{id},,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,statistics.commit_count,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,"return.statistics.storage_size one of { 0, 73400 }",daikon.inv.unary.scalar.OneOfScalar,(return.statistics.storage_size),"pm.expect([0, 73400, 0].includes(return_statistics_storage_size)).to.be.true",get+projects_{id},,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,statistics.storage_size,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return.statistics.wiki_size == 0,daikon.inv.unary.scalar.OneOfScalar,(return.statistics.wiki_size),pm.expect([0].includes(return_statistics_wiki_size)).to.be.true,get+projects_{id},,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,statistics.wiki_size,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,LENGTH(return._links.self)==42,daikon.inv.unary.string.FixedLengthString,(return._links.self),pm.expect(return__links_self).to.have.length(42),get+projects_{id},,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.self,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,LENGTH(return._links.issues)==49,daikon.inv.unary.string.FixedLengthString,(return._links.issues),pm.expect(return__links_issues).to.have.length(49),get+projects_{id},,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.issues,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,LENGTH(return._links.merge_requests)==57,daikon.inv.unary.string.FixedLengthString,(return._links.merge_requests),pm.expect(return__links_merge_requests).to.have.length(57),get+projects_{id},,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.merge_requests,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,LENGTH(return._links.repo_branches)==62,daikon.inv.unary.string.FixedLengthString,(return._links.repo_branches),pm.expect(return__links_repo_branches).to.have.length(62),get+projects_{id},,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.repo_branches,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,LENGTH(return._links.labels)==49,daikon.inv.unary.string.FixedLengthString,(return._links.labels),pm.expect(return__links_labels).to.have.length(49),get+projects_{id},,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.labels,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,LENGTH(return._links.events)==49,daikon.inv.unary.string.FixedLengthString,(return._links.events),pm.expect(return__links_events).to.have.length(49),get+projects_{id},,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.events,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,LENGTH(return._links.members)==50,daikon.inv.unary.string.FixedLengthString,(return._links.members),pm.expect(return__links_members).to.have.length(50),get+projects_{id},,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.members,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return.forked_from_project == null,daikon.inv.unary.scalar.OneOfScalar,(return.forked_from_project),pm.expect(return_forked_from_project).to.be.null,get+projects_{id},,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,forked_from_project,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return.forked_from_project.tag_list == null,daikon.inv.unary.scalar.OneOfScalar,(return.forked_from_project.tag_list),pm.expect(return_forked_from_project_tag_list).to.be.null,get+projects_{id},,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,forked_from_project.tag_list,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return.forked_from_project.namespace == null,daikon.inv.unary.scalar.OneOfScalar,(return.forked_from_project.namespace),pm.expect(return_forked_from_project_namespace).to.be.null,get+projects_{id},,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,forked_from_project.namespace,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,"size(return.tag_list[]) one of { 0, 1 }",daikon.inv.unary.scalar.OneOfScalar,(size(return.tag_list[..])),"pm.expect([0, 1, 0].includes(return_tag_list_size_array)).to.be.true",get+projects_{id},,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,tag_list,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,input.id is a substring of return._links.self,daikon.inv.binary.twoString.StdString$SubString,"(input.id, return._links.self)",pm.expect(return__links_self.includes(input_id)).to.be.true,get+projects_{id},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return.id > return.namespace.id,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.id, return.namespace.id)",pm.expect(return_id).to.be.greaterThan(return_namespace_id),get+projects_{id},1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,id,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return.default_branch is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.default_branch, return.readme_url)",pm.expect(return_readme_url.includes(return_default_branch)).to.be.true,get+projects_{id},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,default_branch,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return.path_with_namespace is a substring of return.ssh_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.ssh_url_to_repo, return.path_with_namespace)",pm.expect(return_ssh_url_to_repo.includes(return_path_with_namespace)).to.be.true,get+projects_{id},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return.web_url is a substring of return.http_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.http_url_to_repo, return.web_url)",pm.expect(return_http_url_to_repo.includes(return_web_url)).to.be.true,get+projects_{id},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,web_url,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return.web_url is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.readme_url)",pm.expect(return_readme_url.includes(return_web_url)).to.be.true,get+projects_{id},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,web_url,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return.path_with_namespace is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.path_with_namespace)",pm.expect(return_web_url.includes(return_path_with_namespace)).to.be.true,get+projects_{id},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return.owner.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.owner.name, return.name_with_namespace)",pm.expect(return_name_with_namespace.includes(return_owner_name)).to.be.true,get+projects_{id},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,name_with_namespace,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.name, return.name_with_namespace)",pm.expect(return_name_with_namespace.includes(return_name)).to.be.true,get+projects_{id},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,name_with_namespace,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path, return.path_with_namespace)",pm.expect(return_path_with_namespace.includes(return_path)).to.be.true,get+projects_{id},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return.namespace.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path_with_namespace, return.namespace.path)",pm.expect(return_path_with_namespace.includes(return_namespace_path)).to.be.true,get+projects_{id},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return.open_issues_count <= return.statistics.commit_count,daikon.inv.binary.twoScalar.IntLessEqual,"(return.open_issues_count, return.statistics.commit_count)",pm.expect(return_open_issues_count).to.be.lte(return_statistics_commit_count),get+projects_{id},1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,open_issues_count,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return.open_issues_count <= return.statistics.storage_size,daikon.inv.binary.twoScalar.IntLessEqual,"(return.open_issues_count, return.statistics.storage_size)",pm.expect(return_open_issues_count).to.be.lte(return_statistics_storage_size),get+projects_{id},1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,statistics.storage_size,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return.open_issues_count <= size(return.tag_list[]),daikon.inv.binary.twoScalar.IntLessEqual,"(return.open_issues_count, size(return.tag_list[..]))",pm.expect(return_open_issues_count).to.be.lte(return_tag_list_size_array),get+projects_{id},1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,tag_list,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return.creator_id <= return.namespace.id,daikon.inv.binary.twoScalar.IntLessEqual,"(return.creator_id, return.namespace.id)",pm.expect(return_creator_id).to.be.lte(return_namespace_id),get+projects_{id},1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,creator_id,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return.creator_id >= return.statistics.commit_count,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.creator_id, return.statistics.commit_count)",pm.expect(return_creator_id).to.be.at.least(return_statistics_commit_count),get+projects_{id},1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,creator_id,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return.creator_id >= size(return.tag_list[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.creator_id, size(return.tag_list[..]))",pm.expect(return_creator_id).to.be.at.least(return_tag_list_size_array),get+projects_{id},,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,tag_list,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return.namespace.id >= return.statistics.commit_count,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.namespace.id, return.statistics.commit_count)",pm.expect(return_namespace_id).to.be.at.least(return_statistics_commit_count),get+projects_{id},1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,namespace.id,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return.namespace.id >= size(return.tag_list[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.namespace.id, size(return.tag_list[..]))",pm.expect(return_namespace_id).to.be.at.least(return_tag_list_size_array),get+projects_{id},,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,tag_list,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return.statistics.commit_count <= return.statistics.storage_size,daikon.inv.binary.twoScalar.IntLessEqual,"(return.statistics.commit_count, return.statistics.storage_size)",pm.expect(return_statistics_commit_count).to.be.lte(return_statistics_storage_size),get+projects_{id},1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,statistics.storage_size,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return.statistics.wiki_size <= size(return.tag_list[]),daikon.inv.binary.twoScalar.IntLessEqual,"(return.statistics.wiki_size, size(return.tag_list[..]))",pm.expect(return_statistics_wiki_size).to.be.lte(return_tag_list_size_array),get+projects_{id},1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,tag_list,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return._links.self is a substring of return._links.issues,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.issues)",pm.expect(return__links_issues.includes(return__links_self)).to.be.true,get+projects_{id},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return._links.self is a substring of return._links.merge_requests,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.merge_requests)",pm.expect(return__links_merge_requests.includes(return__links_self)).to.be.true,get+projects_{id},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return._links.self is a substring of return._links.repo_branches,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.repo_branches)",pm.expect(return__links_repo_branches.includes(return__links_self)).to.be.true,get+projects_{id},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return._links.self is a substring of return._links.labels,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.labels)",pm.expect(return__links_labels.includes(return__links_self)).to.be.true,get+projects_{id},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return._links.self is a substring of return._links.events,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.events)",pm.expect(return__links_events.includes(return__links_self)).to.be.true,get+projects_{id},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects/{id}&/projects/{id}&get&200():::EXIT,return._links.self is a substring of return._links.members,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.members)",pm.expect(return__links_members.includes(return__links_self)).to.be.true,get+projects_{id},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,input.archived == return.resolve_outdated_diff_discussions,daikon.inv.binary.twoScalar.IntEqual,"(input.archived, return.resolve_outdated_diff_discussions)",pm.expect(input_archived).to.eql(return_resolve_outdated_diff_discussions),get+projects_{id}_forks,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,resolve_outdated_diff_discussions,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,input.simple == return.resolve_outdated_diff_discussions,daikon.inv.binary.twoScalar.IntEqual,"(input.simple, return.resolve_outdated_diff_discussions)",pm.expect(input_simple).to.eql(return_resolve_outdated_diff_discussions),get+projects_{id}_forks,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,resolve_outdated_diff_discussions,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,input.starred == return.resolve_outdated_diff_discussions,daikon.inv.binary.twoScalar.IntEqual,"(input.starred, return.resolve_outdated_diff_discussions)",pm.expect(input_starred).to.eql(return_resolve_outdated_diff_discussions),get+projects_{id}_forks,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,resolve_outdated_diff_discussions,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,input.visibility == return.visibility,daikon.inv.binary.twoString.StringEqual,"(input.visibility, return.visibility)",pm.expect(input_visibility).to.eql(return_visibility),get+projects_{id}_forks,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,visibility,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,return.open_issues_count == return.star_count,daikon.inv.binary.twoScalar.IntEqual,"(return.open_issues_count, return.star_count)",pm.expect(return_open_issues_count).to.eql(return_star_count),get+projects_{id}_forks,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,open_issues_count,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,return.open_issues_count == size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntEqual,"(return.open_issues_count, size(return.shared_with_groups[..]))",pm.expect(return_open_issues_count).to.eql(return_shared_with_groups_size_array),get+projects_{id}_forks,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,open_issues_count,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,return.merge_requests_enabled == return.can_create_merge_request_in,daikon.inv.binary.twoScalar.IntEqual,"(return.merge_requests_enabled, return.can_create_merge_request_in)",pm.expect(return_merge_requests_enabled).to.eql(return_can_create_merge_request_in),get+projects_{id}_forks,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,merge_requests_enabled,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,return.resolve_outdated_diff_discussions == return.archived,daikon.inv.binary.twoScalar.IntEqual,"(return.resolve_outdated_diff_discussions, return.archived)",pm.expect(return_resolve_outdated_diff_discussions).to.eql(return_archived),get+projects_{id}_forks,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,resolve_outdated_diff_discussions,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,return.resolve_outdated_diff_discussions == return.only_allow_merge_if_pipeline_succeeds,daikon.inv.binary.twoScalar.IntEqual,"(return.resolve_outdated_diff_discussions, return.only_allow_merge_if_pipeline_succeeds)",pm.expect(return_resolve_outdated_diff_discussions).to.eql(return_only_allow_merge_if_pipeline_succeeds),get+projects_{id}_forks,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,resolve_outdated_diff_discussions,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,return.resolve_outdated_diff_discussions == return.only_allow_merge_if_all_discussions_are_resolved,daikon.inv.binary.twoScalar.IntEqual,"(return.resolve_outdated_diff_discussions, return.only_allow_merge_if_all_discussions_are_resolved)",pm.expect(return_resolve_outdated_diff_discussions).to.eql(return_only_allow_merge_if_all_discussions_are_resolved),get+projects_{id}_forks,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,resolve_outdated_diff_discussions,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,return.created_at == return.last_activity_at,daikon.inv.binary.twoString.StringEqual,"(return.created_at, return.last_activity_at)",pm.expect(return_created_at).to.eql(return_last_activity_at),get+projects_{id}_forks,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,created_at,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,return.creator_id == return.namespace.id,daikon.inv.binary.twoScalar.IntEqual,"(return.creator_id, return.namespace.id)",pm.expect(return_creator_id).to.eql(return_namespace_id),get+projects_{id}_forks,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,creator_id,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,return.namespace.path == return.namespace.full_path,daikon.inv.binary.twoString.StringEqual,"(return.namespace.path, return.namespace.full_path)",pm.expect(return_namespace_path).to.eql(return_namespace_full_path),get+projects_{id}_forks,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,namespace.path,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,return.star_count == size(return.tag_list[]),daikon.inv.binary.twoScalar.IntEqual,"(return.star_count, size(return.tag_list[..]))",pm.expect(return_star_count).to.eql(return_tag_list_size_array),get+projects_{id}_forks,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,tag_list,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,return.star_count == size(return.tag_list[]),daikon.inv.binary.twoScalar.IntEqual,"(return.star_count, size(return.tag_list[..]))",pm.expect(return_star_count).to.eql(return_tag_list_size_array),get+projects_{id}_forks,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,tag_list,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,return.star_count == size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntEqual,"(return.star_count, size(return.shared_with_groups[..]))",pm.expect(return_star_count).to.eql(return_shared_with_groups_size_array),get+projects_{id}_forks,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,star_count,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,return.public_jobs == return.remove_source_branch_after_merge,daikon.inv.binary.twoScalar.IntEqual,"(return.public_jobs, return.remove_source_branch_after_merge)",pm.expect(return_public_jobs).to.eql(return_remove_source_branch_after_merge),get+projects_{id}_forks,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,public_jobs,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,return.public_jobs == return.request_access_enabled,daikon.inv.binary.twoScalar.IntEqual,"(return.public_jobs, return.request_access_enabled)",pm.expect(return_public_jobs).to.eql(return_request_access_enabled),get+projects_{id}_forks,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,public_jobs,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,return.public_jobs == return.autoclose_referenced_issues,daikon.inv.binary.twoScalar.IntEqual,"(return.public_jobs, return.autoclose_referenced_issues)",pm.expect(return_public_jobs).to.eql(return_autoclose_referenced_issues),get+projects_{id}_forks,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,public_jobs,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,"return.default_branch == ""main""",daikon.inv.unary.string.OneOfString,(return.default_branch),"pm.expect([""main""].includes(return_default_branch)).to.be.true",get+projects_{id}_forks,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,default_branch,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,LENGTH(return.default_branch)==4,daikon.inv.unary.string.FixedLengthString,(return.default_branch),pm.expect(return_default_branch).to.have.length(4),get+projects_{id}_forks,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,default_branch,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,"return.visibility one of { ""internal"", ""private"", ""public"" }",daikon.inv.unary.string.OneOfString,(return.visibility),"pm.expect([""internal"", ""private"", ""public""].includes(return_visibility)).to.be.true",get+projects_{id}_forks,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,visibility,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,return.tag_list[] == [],daikon.inv.unary.stringsequence.OneOfStringSequence,(return.tag_list[..]),pm.expect([[]].some(value => pm.expect(return_tag_list_array).to.deep.equal(value).that)).to.be.true,get+projects_{id}_forks,,1.0,,"Represents String[] variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,tag_list,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,return.open_issues_count == 0,daikon.inv.unary.scalar.OneOfScalar,(return.open_issues_count),pm.expect([0].includes(return_open_issues_count)).to.be.true,get+projects_{id}_forks,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,open_issues_count,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,return.resolve_outdated_diff_discussions == false,daikon.inv.unary.scalar.OneOfScalar,(return.resolve_outdated_diff_discussions),pm.expect(return_resolve_outdated_diff_discussions).to.eql(false),get+projects_{id}_forks,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,resolve_outdated_diff_discussions,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,LENGTH(return.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.created_at),pm.expect(return_created_at).to.have.length(24),get+projects_{id}_forks,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,created_at,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.created_at),"pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+projects_{id}_forks,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,created_at,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,return.creator_id == 1,daikon.inv.unary.scalar.OneOfScalar,(return.creator_id),pm.expect([1].includes(return_creator_id)).to.be.true,get+projects_{id}_forks,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,creator_id,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,return.namespace.id == 1,daikon.inv.unary.scalar.OneOfScalar,(return.namespace.id),pm.expect([1].includes(return_namespace_id)).to.be.true,get+projects_{id}_forks,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,namespace.id,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,"return.namespace.name == ""Administrator""",daikon.inv.unary.string.OneOfString,(return.namespace.name),"pm.expect([""Administrator""].includes(return_namespace_name)).to.be.true",get+projects_{id}_forks,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,namespace.name,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,LENGTH(return.namespace.name)==13,daikon.inv.unary.string.FixedLengthString,(return.namespace.name),pm.expect(return_namespace_name).to.have.length(13),get+projects_{id}_forks,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,namespace.name,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,"return.namespace.path == ""root""",daikon.inv.unary.string.OneOfString,(return.namespace.path),"pm.expect([""root""].includes(return_namespace_path)).to.be.true",get+projects_{id}_forks,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,namespace.path,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,LENGTH(return.namespace.path)==4,daikon.inv.unary.string.FixedLengthString,(return.namespace.path),pm.expect(return_namespace_path).to.have.length(4),get+projects_{id}_forks,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,namespace.path,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,"return.namespace.kind == ""user""",daikon.inv.unary.string.OneOfString,(return.namespace.kind),"pm.expect([""user""].includes(return_namespace_kind)).to.be.true",get+projects_{id}_forks,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,namespace.kind,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,LENGTH(return.namespace.kind)==4,daikon.inv.unary.string.FixedLengthString,(return.namespace.kind),pm.expect(return_namespace_kind).to.have.length(4),get+projects_{id}_forks,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,namespace.kind,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,"return.import_status == ""finished""",daikon.inv.unary.string.OneOfString,(return.import_status),"pm.expect([""finished""].includes(return_import_status)).to.be.true",get+projects_{id}_forks,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,import_status,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,LENGTH(return.import_status)==8,daikon.inv.unary.string.FixedLengthString,(return.import_status),pm.expect(return_import_status).to.have.length(8),get+projects_{id}_forks,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,import_status,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,return.forks_count >= 0,daikon.inv.unary.scalar.LowerBound,(return.forks_count),pm.expect(return_forks_count).to.be.at.least(0),get+projects_{id}_forks,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,forks_count,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,return.public_jobs == true,daikon.inv.unary.scalar.OneOfScalar,(return.public_jobs),pm.expect(return_public_jobs).to.eql(true),get+projects_{id}_forks,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,public_jobs,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,return.shared_with_groups[] == [],daikon.inv.unary.sequence.OneOfSequence,(return.shared_with_groups[..]),pm.expect([[]].some(value => pm.expect(return_shared_with_groups_array).to.deep.equal(value).that)).to.be.true,get+projects_{id}_forks,,1.0,,"Represents long[] variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,shared_with_groups,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,"return.merge_method == ""merge""",daikon.inv.unary.string.OneOfString,(return.merge_method),"pm.expect([""merge""].includes(return_merge_method)).to.be.true",get+projects_{id}_forks,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,merge_method,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,LENGTH(return.merge_method)==5,daikon.inv.unary.string.FixedLengthString,(return.merge_method),pm.expect(return_merge_method).to.have.length(5),get+projects_{id}_forks,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,merge_method,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,LENGTH(return._links.self)==42,daikon.inv.unary.string.FixedLengthString,(return._links.self),pm.expect(return__links_self).to.have.length(42),get+projects_{id}_forks,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.self,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,LENGTH(return._links.issues)==49,daikon.inv.unary.string.FixedLengthString,(return._links.issues),pm.expect(return__links_issues).to.have.length(49),get+projects_{id}_forks,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.issues,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,LENGTH(return._links.merge_requests)==57,daikon.inv.unary.string.FixedLengthString,(return._links.merge_requests),pm.expect(return__links_merge_requests).to.have.length(57),get+projects_{id}_forks,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.merge_requests,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,LENGTH(return._links.repo_branches)==62,daikon.inv.unary.string.FixedLengthString,(return._links.repo_branches),pm.expect(return__links_repo_branches).to.have.length(62),get+projects_{id}_forks,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.repo_branches,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,LENGTH(return._links.labels)==49,daikon.inv.unary.string.FixedLengthString,(return._links.labels),pm.expect(return__links_labels).to.have.length(49),get+projects_{id}_forks,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.labels,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,LENGTH(return._links.events)==49,daikon.inv.unary.string.FixedLengthString,(return._links.events),pm.expect(return__links_events).to.have.length(49),get+projects_{id}_forks,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.events,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,LENGTH(return._links.members)==50,daikon.inv.unary.string.FixedLengthString,(return._links.members),pm.expect(return__links_members).to.have.length(50),get+projects_{id}_forks,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.members,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,input.id < return.id,daikon.inv.binary.twoScalar.IntLessThan,"(input.id, return.id)",pm.expect(input_id).to.be.lessThan(return_id),get+projects_{id}_forks,1.0,,,Represents an invariant of < between two long scalars. Prints as x < y.,,id,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,input.id > return.forks_count,daikon.inv.binary.twoScalar.IntGreaterThan,"(input.id, return.forks_count)",pm.expect(input_id).to.be.greaterThan(return_forks_count),get+projects_{id}_forks,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,forks_count,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,return.default_branch is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.default_branch, return.readme_url)",pm.expect(return_readme_url.includes(return_default_branch)).to.be.true,get+projects_{id}_forks,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,default_branch,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,return.path_with_namespace is a substring of return.ssh_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.ssh_url_to_repo, return.path_with_namespace)",pm.expect(return_ssh_url_to_repo.includes(return_path_with_namespace)).to.be.true,get+projects_{id}_forks,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,return.web_url is a substring of return.http_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.http_url_to_repo, return.web_url)",pm.expect(return_http_url_to_repo.includes(return_web_url)).to.be.true,get+projects_{id}_forks,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,web_url,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,return.web_url is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.readme_url)",pm.expect(return_readme_url.includes(return_web_url)).to.be.true,get+projects_{id}_forks,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,web_url,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,return.path_with_namespace is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.path_with_namespace)",pm.expect(return_web_url.includes(return_path_with_namespace)).to.be.true,get+projects_{id}_forks,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,return.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.name, return.name_with_namespace)",pm.expect(return_name_with_namespace.includes(return_name)).to.be.true,get+projects_{id}_forks,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,name_with_namespace,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,return.namespace.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.name_with_namespace, return.namespace.name)",pm.expect(return_name_with_namespace.includes(return_namespace_name)).to.be.true,get+projects_{id}_forks,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,name_with_namespace,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,return.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path, return.path_with_namespace)",pm.expect(return_path_with_namespace.includes(return_path)).to.be.true,get+projects_{id}_forks,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,return.namespace.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path_with_namespace, return.namespace.path)",pm.expect(return_path_with_namespace.includes(return_namespace_path)).to.be.true,get+projects_{id}_forks,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,return.open_issues_count <= return.forks_count,daikon.inv.binary.twoScalar.IntLessEqual,"(return.open_issues_count, return.forks_count)",pm.expect(return_open_issues_count).to.be.lte(return_forks_count),get+projects_{id}_forks,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,open_issues_count,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,return.forks_count >= return.star_count,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.forks_count, return.star_count)",pm.expect(return_forks_count).to.be.at.least(return_star_count),get+projects_{id}_forks,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,forks_count,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,return.forks_count >= size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.forks_count, size(return.shared_with_groups[..]))",pm.expect(return_forks_count).to.be.at.least(return_shared_with_groups_size_array),get+projects_{id}_forks,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,forks_count,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,return.merge_method is a substring of return._links.merge_requests,daikon.inv.binary.twoString.StdString$SubString,"(return.merge_method, return._links.merge_requests)",pm.expect(return__links_merge_requests.includes(return_merge_method)).to.be.true,get+projects_{id}_forks,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,merge_method,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,return._links.self is a substring of return._links.issues,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.issues)",pm.expect(return__links_issues.includes(return__links_self)).to.be.true,get+projects_{id}_forks,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,return._links.self is a substring of return._links.merge_requests,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.merge_requests)",pm.expect(return__links_merge_requests.includes(return__links_self)).to.be.true,get+projects_{id}_forks,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,return._links.self is a substring of return._links.repo_branches,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.repo_branches)",pm.expect(return__links_repo_branches.includes(return__links_self)).to.be.true,get+projects_{id}_forks,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,return._links.self is a substring of return._links.labels,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.labels)",pm.expect(return__links_labels.includes(return__links_self)).to.be.true,get+projects_{id}_forks,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,return._links.self is a substring of return._links.events,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.events)",pm.expect(return__links_events.includes(return__links_self)).to.be.true,get+projects_{id}_forks,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT,return._links.self is a substring of return._links.members,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.members)",pm.expect(return__links_members.includes(return__links_self)).to.be.true,get+projects_{id}_forks,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects/{id}/starrers&/projects/{id}/starrers&get&200():::EXIT,LENGTH(return.starred_since)==24,daikon.inv.unary.string.FixedLengthString,(return.starred_since),pm.expect(return_starred_since).to.have.length(24),get+projects_{id}_starrers,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,starred_since,GitLab Project API
/projects/{id}/starrers&/projects/{id}/starrers&get&200():::EXIT,return.starred_since is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.starred_since),"pm.expect(return_starred_since).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+projects_{id}_starrers,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,starred_since,GitLab Project API
/projects/{id}/starrers&/projects/{id}/starrers&get&200():::EXIT,LENGTH(return.user.avatar_url)==81,daikon.inv.unary.string.FixedLengthString,(return.user.avatar_url),pm.expect(return_user_avatar_url).to.have.length(81),get+projects_{id}_starrers,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,user.avatar_url,GitLab Project API
/projects/{id}/starrers&/projects/{id}/starrers&get&200():::EXIT,return.user.avatar_url is Url,daikon.inv.unary.string.IsUrl,(return.user.avatar_url),"pm.expect(return_user_avatar_url).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",get+projects_{id}_starrers,1.0,,,Indicates that the value of a string variable is always a URL. Represented as x is Url.,,user.avatar_url,GitLab Project API
/projects/{id}/starrers&/projects/{id}/starrers&get&200():::EXIT,"return.user.state == ""active""",daikon.inv.unary.string.OneOfString,(return.user.state),"pm.expect([""active""].includes(return_user_state)).to.be.true",get+projects_{id}_starrers,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,user.state,GitLab Project API
/projects/{id}/starrers&/projects/{id}/starrers&get&200():::EXIT,LENGTH(return.user.state)==6,daikon.inv.unary.string.FixedLengthString,(return.user.state),pm.expect(return_user_state).to.have.length(6),get+projects_{id}_starrers,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,user.state,GitLab Project API
/projects/{id}/starrers&/projects/{id}/starrers&get&200():::EXIT,return.user.id >= 1,daikon.inv.unary.scalar.LowerBound,(return.user.id),pm.expect(return_user_id).to.be.at.least(1),get+projects_{id}_starrers,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,user.id,GitLab Project API
/projects/{id}/starrers&/projects/{id}/starrers&get&200():::EXIT,return.user.username is a substring of return.user.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.user.web_url, return.user.username)",pm.expect(return_user_web_url.includes(return_user_username)).to.be.true,get+projects_{id}_starrers,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,user.web_url,GitLab Project API
/projects/{id}/users&/projects/{id}/users&get&200%array():::EXIT,"size(return.array[]) one of { 2, 3, 5 }",daikon.inv.unary.scalar.OneOfScalar,(size(return.array[..])),"pm.expect([2, 3, 5].includes(return_array_size_array)).to.be.true",get+projects_{id}_users,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,array,GitLab Project API
/projects/{id}/users&/projects/{id}/users&get&200():::EXIT,LENGTH(return.avatar_url)==81,daikon.inv.unary.string.FixedLengthString,(return.avatar_url),pm.expect(return_avatar_url).to.have.length(81),get+projects_{id}_users,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,avatar_url,GitLab Project API
/projects/{id}/users&/projects/{id}/users&get&200():::EXIT,return.avatar_url is Url,daikon.inv.unary.string.IsUrl,(return.avatar_url),"pm.expect(return_avatar_url).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",get+projects_{id}_users,1.0,,,Indicates that the value of a string variable is always a URL. Represented as x is Url.,,avatar_url,GitLab Project API
/projects/{id}/users&/projects/{id}/users&get&200():::EXIT,"return.state == ""active""",daikon.inv.unary.string.OneOfString,(return.state),"pm.expect([""active""].includes(return_state)).to.be.true",get+projects_{id}_users,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,state,GitLab Project API
/projects/{id}/users&/projects/{id}/users&get&200():::EXIT,LENGTH(return.state)==6,daikon.inv.unary.string.FixedLengthString,(return.state),pm.expect(return_state).to.have.length(6),get+projects_{id}_users,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,state,GitLab Project API
/projects/{id}/users&/projects/{id}/users&get&200():::EXIT,return.id >= 1,daikon.inv.unary.scalar.LowerBound,(return.id),pm.expect(return_id).to.be.at.least(1),get+projects_{id}_users,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,id,GitLab Project API
/projects/{id}/users&/projects/{id}/users&get&200():::EXIT,return.username is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.username)",pm.expect(return_web_url.includes(return_username)).to.be.true,get+projects_{id}_users,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,web_url,GitLab Project API
/projects/{id}/users&/projects/{id}/users&get&200():::EXIT,return.id >= size(input.skip_users[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.id, size(input.skip_users[..]))",pm.expect(return_id).to.be.at.least(input_skip_users_size_array),get+projects_{id}_users,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,id,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200%array():::EXIT,size(return.array[]) == 20,daikon.inv.unary.scalar.OneOfScalar,(size(return.array[..])),pm.expect([20].includes(return_array_size_array)).to.be.true,get+users_{user_id}_projects,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,array,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200&shared_with_groups():::EXIT,"return.group_access_level one of { 20, 30, 40 }",daikon.inv.unary.scalar.OneOfScalar,(return.group_access_level),"pm.expect([20, 30, 40].includes(return_group_access_level)).to.be.true",get+users_{user_id}_projects,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,shared_with_groups.group_access_level,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200&shared_with_groups():::EXIT,"return.expires_at == ""2027-03-30""",daikon.inv.unary.string.OneOfString,(return.expires_at),"pm.expect([""2027-03-30""].includes(return_expires_at)).to.be.true",get+users_{user_id}_projects,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,shared_with_groups.expires_at,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200&shared_with_groups():::EXIT,return.expires_at is a Date. Format: YYYY/MM/DD,daikon.inv.unary.string.dates.IsDateYYYYMMDD,(return.expires_at),pm.expect(return_expires_at).to.match(/^(?:1\d{3}|20[01234][0-9]|2050|9999)[-/.](?:0[1-9]|1[012])[-/.](?:0[1-9]|[12][0-9]|3[01])$/),get+users_{user_id}_projects,1.0,,,"Indicates that the value of a string variable is always a date following the format YYYY/MM/DD or YYYY-MM-DD (the separator can be ""/"" or ""-""). Represented as x is a Date. Format YYYY/MM/DD.",,shared_with_groups.expires_at,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,input.simple == return.service_desk_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.simple, return.service_desk_enabled)",pm.expect(input_simple).to.eql(return_service_desk_enabled),get+users_{user_id}_projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,service_desk_enabled,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,input.visibility == return.visibility,daikon.inv.binary.twoString.StringEqual,"(input.visibility, return.visibility)",pm.expect(input_visibility).to.eql(return_visibility),get+users_{user_id}_projects,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,visibility,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.owner.name == return.namespace.name,daikon.inv.binary.twoString.StringEqual,"(return.owner.name, return.namespace.name)",pm.expect(return_owner_name).to.eql(return_namespace_name),get+users_{user_id}_projects,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,owner.name,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.created_at == return.last_activity_at,daikon.inv.binary.twoString.StringEqual,"(return.created_at, return.last_activity_at)",pm.expect(return_created_at).to.eql(return_last_activity_at),get+users_{user_id}_projects,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,created_at,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.namespace.path == return.namespace.full_path,daikon.inv.binary.twoString.StringEqual,"(return.namespace.path, return.namespace.full_path)",pm.expect(return_namespace_path).to.eql(return_namespace_full_path),get+users_{user_id}_projects,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,namespace.path,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.statistics.job_artifacts_size == return.statistics.packages_size,daikon.inv.binary.twoScalar.IntEqual,"(return.statistics.job_artifacts_size, return.statistics.packages_size)",pm.expect(return_statistics_job_artifacts_size).to.eql(return_statistics_packages_size),get+users_{user_id}_projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,statistics.job_artifacts_size,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.statistics.job_artifacts_size == return.statistics.snippets_size,daikon.inv.binary.twoScalar.IntEqual,"(return.statistics.job_artifacts_size, return.statistics.snippets_size)",pm.expect(return_statistics_job_artifacts_size).to.eql(return_statistics_snippets_size),get+users_{user_id}_projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,statistics.job_artifacts_size,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,"return.visibility one of { ""internal"", ""private"", ""public"" }",daikon.inv.unary.string.OneOfString,(return.visibility),"pm.expect([""internal"", ""private"", ""public""].includes(return_visibility)).to.be.true",get+users_{user_id}_projects,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,visibility,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.owner.id >= 1,daikon.inv.unary.scalar.LowerBound,(return.owner.id),pm.expect(return_owner_id).to.be.at.least(1),get+users_{user_id}_projects,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,owner.id,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.open_issues_count == 0,daikon.inv.unary.scalar.OneOfScalar,(return.open_issues_count),pm.expect([0].includes(return_open_issues_count)).to.be.true,get+users_{user_id}_projects,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,open_issues_count,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,LENGTH(return.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.created_at),pm.expect(return_created_at).to.have.length(24),get+users_{user_id}_projects,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,created_at,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.created_at),"pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+users_{user_id}_projects,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,created_at,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.creator_id >= 1,daikon.inv.unary.scalar.LowerBound,(return.creator_id),pm.expect(return_creator_id).to.be.at.least(1),get+users_{user_id}_projects,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,creator_id,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.namespace.id >= 1,daikon.inv.unary.scalar.LowerBound,(return.namespace.id),pm.expect(return_namespace_id).to.be.at.least(1),get+users_{user_id}_projects,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,namespace.id,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,"return.namespace.kind == ""user""",daikon.inv.unary.string.OneOfString,(return.namespace.kind),"pm.expect([""user""].includes(return_namespace_kind)).to.be.true",get+users_{user_id}_projects,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,namespace.kind,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,LENGTH(return.namespace.kind)==4,daikon.inv.unary.string.FixedLengthString,(return.namespace.kind),pm.expect(return_namespace_kind).to.have.length(4),get+users_{user_id}_projects,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,namespace.kind,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,"return.import_status one of { ""failed"", ""finished"", ""none"" }",daikon.inv.unary.string.OneOfString,(return.import_status),"pm.expect([""failed"", ""finished"", ""none""].includes(return_import_status)).to.be.true",get+users_{user_id}_projects,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,import_status,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.permissions.project_access.access_level == 50,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.project_access.access_level),pm.expect([50].includes(return_permissions_project_access_access_level)).to.be.true,get+users_{user_id}_projects,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,permissions.project_access.access_level,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.permissions.project_access.notification_level == 3,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.project_access.notification_level),pm.expect([3].includes(return_permissions_project_access_notification_level)).to.be.true,get+users_{user_id}_projects,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,permissions.project_access.notification_level,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.permissions.group_access == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.group_access),pm.expect(return_permissions_group_access).to.be.null,get+users_{user_id}_projects,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,permissions.group_access,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.forks_count >= 0,daikon.inv.unary.scalar.LowerBound,(return.forks_count),pm.expect(return_forks_count).to.be.at.least(0),get+users_{user_id}_projects,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,forks_count,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.star_count >= 0,daikon.inv.unary.scalar.LowerBound,(return.star_count),pm.expect(return_star_count).to.be.at.least(0),get+users_{user_id}_projects,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,star_count,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,"return.merge_method one of { ""ff"", ""merge"", ""rebase_merge"" }",daikon.inv.unary.string.OneOfString,(return.merge_method),"pm.expect([""ff"", ""merge"", ""rebase_merge""].includes(return_merge_method)).to.be.true",get+users_{user_id}_projects,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,merge_method,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,"return.auto_devops_deploy_strategy one of { ""continuous"", ""manual"", ""timed_incremental"" }",daikon.inv.unary.string.OneOfString,(return.auto_devops_deploy_strategy),"pm.expect([""continuous"", ""manual"", ""timed_incremental""].includes(return_auto_devops_deploy_strategy)).to.be.true",get+users_{user_id}_projects,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,auto_devops_deploy_strategy,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,"return.repository_storage == ""default""",daikon.inv.unary.string.OneOfString,(return.repository_storage),"pm.expect([""default""].includes(return_repository_storage)).to.be.true",get+users_{user_id}_projects,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,repository_storage,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,LENGTH(return.repository_storage)==7,daikon.inv.unary.string.FixedLengthString,(return.repository_storage),pm.expect(return_repository_storage).to.have.length(7),get+users_{user_id}_projects,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,repository_storage,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.service_desk_enabled == false,daikon.inv.unary.scalar.OneOfScalar,(return.service_desk_enabled),pm.expect(return_service_desk_enabled).to.eql(false),get+users_{user_id}_projects,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,service_desk_enabled,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.statistics.commit_count >= 0,daikon.inv.unary.scalar.LowerBound,(return.statistics.commit_count),pm.expect(return_statistics_commit_count).to.be.at.least(0),get+users_{user_id}_projects,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,statistics.commit_count,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.statistics.storage_size >= 0,daikon.inv.unary.scalar.LowerBound,(return.statistics.storage_size),pm.expect(return_statistics_storage_size).to.be.at.least(0),get+users_{user_id}_projects,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,statistics.storage_size,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.statistics.repository_size >= 0,daikon.inv.unary.scalar.LowerBound,(return.statistics.repository_size),pm.expect(return_statistics_repository_size).to.be.at.least(0),get+users_{user_id}_projects,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,statistics.repository_size,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,"return.statistics.wiki_size one of { 0, 41943 }",daikon.inv.unary.scalar.OneOfScalar,(return.statistics.wiki_size),"pm.expect([0, 41943, 0].includes(return_statistics_wiki_size)).to.be.true",get+users_{user_id}_projects,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,statistics.wiki_size,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,"return.statistics.lfs_objects_size one of { 0, 290070, 581353017 }",daikon.inv.unary.scalar.OneOfScalar,(return.statistics.lfs_objects_size),"pm.expect([0, 290070, 581353017].includes(return_statistics_lfs_objects_size)).to.be.true",get+users_{user_id}_projects,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,statistics.lfs_objects_size,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.statistics.job_artifacts_size == 0,daikon.inv.unary.scalar.OneOfScalar,(return.statistics.job_artifacts_size),pm.expect([0].includes(return_statistics_job_artifacts_size)).to.be.true,get+users_{user_id}_projects,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,statistics.job_artifacts_size,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,"size(return.tag_list[]) one of { 0, 1 }",daikon.inv.unary.scalar.OneOfScalar,(size(return.tag_list[..])),"pm.expect([0, 1, 0].includes(return_tag_list_size_array)).to.be.true",get+users_{user_id}_projects,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,tag_list,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,"size(return.shared_with_groups[]) one of { 0, 1 }",daikon.inv.unary.scalar.OneOfScalar,(size(return.shared_with_groups[..])),"pm.expect([0, 1, 0].includes(return_shared_with_groups_size_array)).to.be.true",get+users_{user_id}_projects,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,shared_with_groups,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,input.id_after < return.id,daikon.inv.binary.twoScalar.IntLessThan,"(input.id_after, return.id)",pm.expect(input_id_after).to.be.lessThan(return_id),get+users_{user_id}_projects,1.0,,,Represents an invariant of < between two long scalars. Prints as x < y.,,id,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,input.id_before > return.id,daikon.inv.binary.twoScalar.IntGreaterThan,"(input.id_before, return.id)",pm.expect(input_id_before).to.be.greaterThan(return_id),get+users_{user_id}_projects,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,id,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.id > return.owner.id,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.id, return.owner.id)",pm.expect(return_id).to.be.greaterThan(return_owner_id),get+users_{user_id}_projects,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,id,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.id > return.creator_id,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.id, return.creator_id)",pm.expect(return_id).to.be.greaterThan(return_creator_id),get+users_{user_id}_projects,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,id,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.id > return.star_count,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.id, return.star_count)",pm.expect(return_id).to.be.greaterThan(return_star_count),get+users_{user_id}_projects,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,id,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.default_branch is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.default_branch, return.readme_url)",pm.expect(return_readme_url.includes(return_default_branch)).to.be.true,get+users_{user_id}_projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,default_branch,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.path_with_namespace is a substring of return.ssh_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.ssh_url_to_repo, return.path_with_namespace)",pm.expect(return_ssh_url_to_repo.includes(return_path_with_namespace)).to.be.true,get+users_{user_id}_projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.web_url is a substring of return.http_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.http_url_to_repo, return.web_url)",pm.expect(return_http_url_to_repo.includes(return_web_url)).to.be.true,get+users_{user_id}_projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,web_url,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.web_url is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.readme_url)",pm.expect(return_readme_url.includes(return_web_url)).to.be.true,get+users_{user_id}_projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,web_url,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.path_with_namespace is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.path_with_namespace)",pm.expect(return_web_url.includes(return_path_with_namespace)).to.be.true,get+users_{user_id}_projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.owner.id <= return.namespace.id,daikon.inv.binary.twoScalar.IntLessEqual,"(return.owner.id, return.namespace.id)",pm.expect(return_owner_id).to.be.lte(return_namespace_id),get+users_{user_id}_projects,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,owner.id,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.owner.id >= size(return.tag_list[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.owner.id, size(return.tag_list[..]))",pm.expect(return_owner_id).to.be.at.least(return_tag_list_size_array),get+users_{user_id}_projects,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,tag_list,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.owner.id >= size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.owner.id, size(return.shared_with_groups[..]))",pm.expect(return_owner_id).to.be.at.least(return_shared_with_groups_size_array),get+users_{user_id}_projects,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,owner.id,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.owner.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.owner.name, return.name_with_namespace)",pm.expect(return_name_with_namespace.includes(return_owner_name)).to.be.true,get+users_{user_id}_projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,name_with_namespace,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.name, return.name_with_namespace)",pm.expect(return_name_with_namespace.includes(return_name)).to.be.true,get+users_{user_id}_projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,name_with_namespace,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.namespace.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.name_with_namespace, return.namespace.name)",pm.expect(return_name_with_namespace.includes(return_namespace_name)).to.be.true,get+users_{user_id}_projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,name_with_namespace,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path, return.path_with_namespace)",pm.expect(return_path_with_namespace.includes(return_path)).to.be.true,get+users_{user_id}_projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.namespace.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path_with_namespace, return.namespace.path)",pm.expect(return_path_with_namespace.includes(return_namespace_path)).to.be.true,get+users_{user_id}_projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.open_issues_count <= return.forks_count,daikon.inv.binary.twoScalar.IntLessEqual,"(return.open_issues_count, return.forks_count)",pm.expect(return_open_issues_count).to.be.lte(return_forks_count),get+users_{user_id}_projects,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,open_issues_count,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.open_issues_count <= return.star_count,daikon.inv.binary.twoScalar.IntLessEqual,"(return.open_issues_count, return.star_count)",pm.expect(return_open_issues_count).to.be.lte(return_star_count),get+users_{user_id}_projects,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,open_issues_count,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.open_issues_count <= return.statistics.commit_count,daikon.inv.binary.twoScalar.IntLessEqual,"(return.open_issues_count, return.statistics.commit_count)",pm.expect(return_open_issues_count).to.be.lte(return_statistics_commit_count),get+users_{user_id}_projects,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,open_issues_count,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.open_issues_count <= return.statistics.storage_size,daikon.inv.binary.twoScalar.IntLessEqual,"(return.open_issues_count, return.statistics.storage_size)",pm.expect(return_open_issues_count).to.be.lte(return_statistics_storage_size),get+users_{user_id}_projects,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,statistics.storage_size,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.open_issues_count <= return.statistics.repository_size,daikon.inv.binary.twoScalar.IntLessEqual,"(return.open_issues_count, return.statistics.repository_size)",pm.expect(return_open_issues_count).to.be.lte(return_statistics_repository_size),get+users_{user_id}_projects,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,open_issues_count,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.open_issues_count <= return.statistics.wiki_size,daikon.inv.binary.twoScalar.IntLessEqual,"(return.open_issues_count, return.statistics.wiki_size)",pm.expect(return_open_issues_count).to.be.lte(return_statistics_wiki_size),get+users_{user_id}_projects,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,open_issues_count,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.open_issues_count <= return.statistics.lfs_objects_size,daikon.inv.binary.twoScalar.IntLessEqual,"(return.open_issues_count, return.statistics.lfs_objects_size)",pm.expect(return_open_issues_count).to.be.lte(return_statistics_lfs_objects_size),get+users_{user_id}_projects,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,open_issues_count,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.open_issues_count <= size(return.tag_list[]),daikon.inv.binary.twoScalar.IntLessEqual,"(return.open_issues_count, size(return.tag_list[..]))",pm.expect(return_open_issues_count).to.be.lte(return_tag_list_size_array),get+users_{user_id}_projects,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,tag_list,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.open_issues_count <= size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntLessEqual,"(return.open_issues_count, size(return.shared_with_groups[..]))",pm.expect(return_open_issues_count).to.be.lte(return_shared_with_groups_size_array),get+users_{user_id}_projects,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,open_issues_count,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.creator_id >= size(return.tag_list[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.creator_id, size(return.tag_list[..]))",pm.expect(return_creator_id).to.be.at.least(return_tag_list_size_array),get+users_{user_id}_projects,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,tag_list,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.creator_id >= size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.creator_id, size(return.shared_with_groups[..]))",pm.expect(return_creator_id).to.be.at.least(return_shared_with_groups_size_array),get+users_{user_id}_projects,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,creator_id,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.namespace.id >= size(return.tag_list[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.namespace.id, size(return.tag_list[..]))",pm.expect(return_namespace_id).to.be.at.least(return_tag_list_size_array),get+users_{user_id}_projects,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,tag_list,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.namespace.id >= size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.namespace.id, size(return.shared_with_groups[..]))",pm.expect(return_namespace_id).to.be.at.least(return_shared_with_groups_size_array),get+users_{user_id}_projects,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,namespace.id,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.forks_count >= return.statistics.job_artifacts_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.forks_count, return.statistics.job_artifacts_size)",pm.expect(return_forks_count).to.be.at.least(return_statistics_job_artifacts_size),get+users_{user_id}_projects,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,statistics.job_artifacts_size,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.star_count >= return.statistics.job_artifacts_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.star_count, return.statistics.job_artifacts_size)",pm.expect(return_star_count).to.be.at.least(return_statistics_job_artifacts_size),get+users_{user_id}_projects,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,statistics.job_artifacts_size,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.statistics.commit_count <= return.statistics.storage_size,daikon.inv.binary.twoScalar.IntLessEqual,"(return.statistics.commit_count, return.statistics.storage_size)",pm.expect(return_statistics_commit_count).to.be.lte(return_statistics_storage_size),get+users_{user_id}_projects,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,statistics.storage_size,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.statistics.commit_count <= return.statistics.repository_size,daikon.inv.binary.twoScalar.IntLessEqual,"(return.statistics.commit_count, return.statistics.repository_size)",pm.expect(return_statistics_commit_count).to.be.lte(return_statistics_repository_size),get+users_{user_id}_projects,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,statistics.commit_count,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.statistics.commit_count >= return.statistics.job_artifacts_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.commit_count, return.statistics.job_artifacts_size)",pm.expect(return_statistics_commit_count).to.be.at.least(return_statistics_job_artifacts_size),get+users_{user_id}_projects,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,statistics.job_artifacts_size,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.statistics.storage_size >= return.statistics.repository_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.storage_size, return.statistics.repository_size)",pm.expect(return_statistics_storage_size).to.be.at.least(return_statistics_repository_size),get+users_{user_id}_projects,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,statistics.storage_size,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.statistics.storage_size >= return.statistics.wiki_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.storage_size, return.statistics.wiki_size)",pm.expect(return_statistics_storage_size).to.be.at.least(return_statistics_wiki_size),get+users_{user_id}_projects,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,statistics.storage_size,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.statistics.storage_size >= return.statistics.lfs_objects_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.storage_size, return.statistics.lfs_objects_size)",pm.expect(return_statistics_storage_size).to.be.at.least(return_statistics_lfs_objects_size),get+users_{user_id}_projects,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,statistics.storage_size,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.statistics.storage_size >= return.statistics.job_artifacts_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.storage_size, return.statistics.job_artifacts_size)",pm.expect(return_statistics_storage_size).to.be.at.least(return_statistics_job_artifacts_size),get+users_{user_id}_projects,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,statistics.storage_size,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.statistics.storage_size >= size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.storage_size, size(return.shared_with_groups[..]))",pm.expect(return_statistics_storage_size).to.be.at.least(return_shared_with_groups_size_array),get+users_{user_id}_projects,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,statistics.storage_size,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.statistics.repository_size >= return.statistics.wiki_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.repository_size, return.statistics.wiki_size)",pm.expect(return_statistics_repository_size).to.be.at.least(return_statistics_wiki_size),get+users_{user_id}_projects,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,statistics.repository_size,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.statistics.repository_size >= return.statistics.job_artifacts_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.repository_size, return.statistics.job_artifacts_size)",pm.expect(return_statistics_repository_size).to.be.at.least(return_statistics_job_artifacts_size),get+users_{user_id}_projects,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,statistics.job_artifacts_size,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.statistics.repository_size >= size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.repository_size, size(return.shared_with_groups[..]))",pm.expect(return_statistics_repository_size).to.be.at.least(return_shared_with_groups_size_array),get+users_{user_id}_projects,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,statistics.repository_size,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.statistics.wiki_size >= return.statistics.job_artifacts_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.wiki_size, return.statistics.job_artifacts_size)",pm.expect(return_statistics_wiki_size).to.be.at.least(return_statistics_job_artifacts_size),get+users_{user_id}_projects,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,statistics.job_artifacts_size,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.statistics.lfs_objects_size >= return.statistics.job_artifacts_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.lfs_objects_size, return.statistics.job_artifacts_size)",pm.expect(return_statistics_lfs_objects_size).to.be.at.least(return_statistics_job_artifacts_size),get+users_{user_id}_projects,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,statistics.job_artifacts_size,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.statistics.job_artifacts_size <= size(return.tag_list[]),daikon.inv.binary.twoScalar.IntLessEqual,"(return.statistics.job_artifacts_size, size(return.tag_list[..]))",pm.expect(return_statistics_job_artifacts_size).to.be.lte(return_tag_list_size_array),get+users_{user_id}_projects,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,tag_list,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return.statistics.job_artifacts_size <= size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntLessEqual,"(return.statistics.job_artifacts_size, size(return.shared_with_groups[..]))",pm.expect(return_statistics_job_artifacts_size).to.be.lte(return_shared_with_groups_size_array),get+users_{user_id}_projects,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,statistics.job_artifacts_size,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return._links.self is a substring of return._links.issues,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.issues)",pm.expect(return__links_issues.includes(return__links_self)).to.be.true,get+users_{user_id}_projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return._links.self is a substring of return._links.merge_requests,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.merge_requests)",pm.expect(return__links_merge_requests.includes(return__links_self)).to.be.true,get+users_{user_id}_projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return._links.self is a substring of return._links.repo_branches,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.repo_branches)",pm.expect(return__links_repo_branches.includes(return__links_self)).to.be.true,get+users_{user_id}_projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return._links.self is a substring of return._links.labels,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.labels)",pm.expect(return__links_labels.includes(return__links_self)).to.be.true,get+users_{user_id}_projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return._links.self is a substring of return._links.events,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.events)",pm.expect(return__links_events.includes(return__links_self)).to.be.true,get+users_{user_id}_projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT,return._links.self is a substring of return._links.members,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.members)",pm.expect(return__links_members.includes(return__links_self)).to.be.true,get+users_{user_id}_projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200%array():::EXIT,size(return.array[]) == 20,daikon.inv.unary.scalar.OneOfScalar,(size(return.array[..])),pm.expect([20].includes(return_array_size_array)).to.be.true,get+users_{user_id}_starred_projects,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,array,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200&shared_with_groups():::EXIT,"return.group_access_level one of { 20, 30, 40 }",daikon.inv.unary.scalar.OneOfScalar,(return.group_access_level),"pm.expect([20, 30, 40].includes(return_group_access_level)).to.be.true",get+users_{user_id}_starred_projects,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,shared_with_groups.group_access_level,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,input.archived == return.archived,daikon.inv.binary.twoScalar.IntEqual,"(input.archived, return.archived)",pm.expect(input_archived).to.eql(return_archived),get+users_{user_id}_starred_projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,archived,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,input.simple == return.service_desk_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.simple, return.service_desk_enabled)",pm.expect(input_simple).to.eql(return_service_desk_enabled),get+users_{user_id}_starred_projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,service_desk_enabled,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,input.visibility == return.visibility,daikon.inv.binary.twoString.StringEqual,"(input.visibility, return.visibility)",pm.expect(input_visibility).to.eql(return_visibility),get+users_{user_id}_starred_projects,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,visibility,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.owner.name == return.namespace.name,daikon.inv.binary.twoString.StringEqual,"(return.owner.name, return.namespace.name)",pm.expect(return_owner_name).to.eql(return_namespace_name),get+users_{user_id}_starred_projects,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,owner.name,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.open_issues_count == return.statistics.lfs_objects_size,daikon.inv.binary.twoScalar.IntEqual,"(return.open_issues_count, return.statistics.lfs_objects_size)",pm.expect(return_open_issues_count).to.eql(return_statistics_lfs_objects_size),get+users_{user_id}_starred_projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,open_issues_count,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.permissions.project_access.access_level == return.permissions.group_access.access_level,daikon.inv.binary.twoScalar.IntEqual,"(return.permissions.project_access.access_level, return.permissions.group_access.access_level)",pm.expect(return_permissions_project_access_access_level).to.eql(return_permissions_group_access_access_level),get+users_{user_id}_starred_projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,permissions.project_access.access_level,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.permissions.project_access.notification_level == return.permissions.group_access.notification_level,daikon.inv.binary.twoScalar.IntEqual,"(return.permissions.project_access.notification_level, return.permissions.group_access.notification_level)",pm.expect(return_permissions_project_access_notification_level).to.eql(return_permissions_group_access_notification_level),get+users_{user_id}_starred_projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,permissions.project_access.notification_level,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.statistics.lfs_objects_size == return.statistics.job_artifacts_size,daikon.inv.binary.twoScalar.IntEqual,"(return.statistics.lfs_objects_size, return.statistics.job_artifacts_size)",pm.expect(return_statistics_lfs_objects_size).to.eql(return_statistics_job_artifacts_size),get+users_{user_id}_starred_projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,statistics.job_artifacts_size,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.statistics.lfs_objects_size == return.statistics.packages_size,daikon.inv.binary.twoScalar.IntEqual,"(return.statistics.lfs_objects_size, return.statistics.packages_size)",pm.expect(return_statistics_lfs_objects_size).to.eql(return_statistics_packages_size),get+users_{user_id}_starred_projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,statistics.lfs_objects_size,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.statistics.lfs_objects_size == return.statistics.snippets_size,daikon.inv.binary.twoScalar.IntEqual,"(return.statistics.lfs_objects_size, return.statistics.snippets_size)",pm.expect(return_statistics_lfs_objects_size).to.eql(return_statistics_snippets_size),get+users_{user_id}_starred_projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,statistics.lfs_objects_size,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,"return.visibility one of { ""internal"", ""private"", ""public"" }",daikon.inv.unary.string.OneOfString,(return.visibility),"pm.expect([""internal"", ""private"", ""public""].includes(return_visibility)).to.be.true",get+users_{user_id}_starred_projects,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,visibility,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.owner.id >= 1,daikon.inv.unary.scalar.LowerBound,(return.owner.id),pm.expect(return_owner_id).to.be.at.least(1),get+users_{user_id}_starred_projects,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,owner.id,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.open_issues_count == 0,daikon.inv.unary.scalar.OneOfScalar,(return.open_issues_count),pm.expect([0].includes(return_open_issues_count)).to.be.true,get+users_{user_id}_starred_projects,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,open_issues_count,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,LENGTH(return.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.created_at),pm.expect(return_created_at).to.have.length(24),get+users_{user_id}_starred_projects,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,created_at,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.created_at),"pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+users_{user_id}_starred_projects,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,created_at,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,LENGTH(return.last_activity_at)==24,daikon.inv.unary.string.FixedLengthString,(return.last_activity_at),pm.expect(return_last_activity_at).to.have.length(24),get+users_{user_id}_starred_projects,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,last_activity_at,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.last_activity_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.last_activity_at),"pm.expect(return_last_activity_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+users_{user_id}_starred_projects,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,last_activity_at,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.creator_id >= 1,daikon.inv.unary.scalar.LowerBound,(return.creator_id),pm.expect(return_creator_id).to.be.at.least(1),get+users_{user_id}_starred_projects,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,creator_id,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.namespace.id >= 1,daikon.inv.unary.scalar.LowerBound,(return.namespace.id),pm.expect(return_namespace_id).to.be.at.least(1),get+users_{user_id}_starred_projects,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,namespace.id,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,"return.namespace.kind one of { ""group"", ""user"" }",daikon.inv.unary.string.OneOfString,(return.namespace.kind),"pm.expect([""group"", ""user""].includes(return_namespace_kind)).to.be.true",get+users_{user_id}_starred_projects,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,namespace.kind,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,"return.import_status one of { ""finished"", ""none"" }",daikon.inv.unary.string.OneOfString,(return.import_status),"pm.expect([""finished"", ""none""].includes(return_import_status)).to.be.true",get+users_{user_id}_starred_projects,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,import_status,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.permissions.project_access.access_level == 50,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.project_access.access_level),pm.expect([50].includes(return_permissions_project_access_access_level)).to.be.true,get+users_{user_id}_starred_projects,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,permissions.project_access.access_level,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.permissions.project_access.notification_level == 3,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.project_access.notification_level),pm.expect([3].includes(return_permissions_project_access_notification_level)).to.be.true,get+users_{user_id}_starred_projects,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,permissions.project_access.notification_level,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.permissions.group_access.access_level == 50,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.group_access.access_level),pm.expect([50].includes(return_permissions_group_access_access_level)).to.be.true,get+users_{user_id}_starred_projects,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,permissions.group_access.access_level,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.permissions.group_access.notification_level == 3,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.group_access.notification_level),pm.expect([3].includes(return_permissions_group_access_notification_level)).to.be.true,get+users_{user_id}_starred_projects,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,permissions.group_access.notification_level,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.forks_count >= 0,daikon.inv.unary.scalar.LowerBound,(return.forks_count),pm.expect(return_forks_count).to.be.at.least(0),get+users_{user_id}_starred_projects,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,forks_count,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,"return.merge_method one of { ""ff"", ""merge"", ""rebase_merge"" }",daikon.inv.unary.string.OneOfString,(return.merge_method),"pm.expect([""ff"", ""merge"", ""rebase_merge""].includes(return_merge_method)).to.be.true",get+users_{user_id}_starred_projects,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,merge_method,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,"return.auto_devops_deploy_strategy one of { ""continuous"", ""manual"", ""timed_incremental"" }",daikon.inv.unary.string.OneOfString,(return.auto_devops_deploy_strategy),"pm.expect([""continuous"", ""manual"", ""timed_incremental""].includes(return_auto_devops_deploy_strategy)).to.be.true",get+users_{user_id}_starred_projects,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,auto_devops_deploy_strategy,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,"return.repository_storage == ""default""",daikon.inv.unary.string.OneOfString,(return.repository_storage),"pm.expect([""default""].includes(return_repository_storage)).to.be.true",get+users_{user_id}_starred_projects,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,repository_storage,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,LENGTH(return.repository_storage)==7,daikon.inv.unary.string.FixedLengthString,(return.repository_storage),pm.expect(return_repository_storage).to.have.length(7),get+users_{user_id}_starred_projects,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,repository_storage,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.service_desk_enabled == false,daikon.inv.unary.scalar.OneOfScalar,(return.service_desk_enabled),pm.expect(return_service_desk_enabled).to.eql(false),get+users_{user_id}_starred_projects,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,service_desk_enabled,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,"return.statistics.commit_count one of { 0, 1 }",daikon.inv.unary.scalar.OneOfScalar,(return.statistics.commit_count),"pm.expect([0, 1, 0].includes(return_statistics_commit_count)).to.be.true",get+users_{user_id}_starred_projects,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,statistics.commit_count,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.statistics.storage_size >= 0,daikon.inv.unary.scalar.LowerBound,(return.statistics.storage_size),pm.expect(return_statistics_storage_size).to.be.at.least(0),get+users_{user_id}_starred_projects,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,statistics.storage_size,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.statistics.repository_size >= 0,daikon.inv.unary.scalar.LowerBound,(return.statistics.repository_size),pm.expect(return_statistics_repository_size).to.be.at.least(0),get+users_{user_id}_starred_projects,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,statistics.repository_size,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,"return.statistics.wiki_size one of { 0, 41943 }",daikon.inv.unary.scalar.OneOfScalar,(return.statistics.wiki_size),"pm.expect([0, 41943, 0].includes(return_statistics_wiki_size)).to.be.true",get+users_{user_id}_starred_projects,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,statistics.wiki_size,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.statistics.lfs_objects_size == 0,daikon.inv.unary.scalar.OneOfScalar,(return.statistics.lfs_objects_size),pm.expect([0].includes(return_statistics_lfs_objects_size)).to.be.true,get+users_{user_id}_starred_projects,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,statistics.lfs_objects_size,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,LENGTH(return._links.self)==42,daikon.inv.unary.string.FixedLengthString,(return._links.self),pm.expect(return__links_self).to.have.length(42),get+users_{user_id}_starred_projects,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.self,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,LENGTH(return._links.issues)==49,daikon.inv.unary.string.FixedLengthString,(return._links.issues),pm.expect(return__links_issues).to.have.length(49),get+users_{user_id}_starred_projects,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.issues,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,LENGTH(return._links.merge_requests)==57,daikon.inv.unary.string.FixedLengthString,(return._links.merge_requests),pm.expect(return__links_merge_requests).to.have.length(57),get+users_{user_id}_starred_projects,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.merge_requests,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,LENGTH(return._links.repo_branches)==62,daikon.inv.unary.string.FixedLengthString,(return._links.repo_branches),pm.expect(return__links_repo_branches).to.have.length(62),get+users_{user_id}_starred_projects,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.repo_branches,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,LENGTH(return._links.labels)==49,daikon.inv.unary.string.FixedLengthString,(return._links.labels),pm.expect(return__links_labels).to.have.length(49),get+users_{user_id}_starred_projects,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.labels,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,LENGTH(return._links.events)==49,daikon.inv.unary.string.FixedLengthString,(return._links.events),pm.expect(return__links_events).to.have.length(49),get+users_{user_id}_starred_projects,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.events,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,LENGTH(return._links.members)==50,daikon.inv.unary.string.FixedLengthString,(return._links.members),pm.expect(return__links_members).to.have.length(50),get+users_{user_id}_starred_projects,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.members,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,"size(return.tag_list[]) one of { 0, 1, 2 }",daikon.inv.unary.scalar.OneOfScalar,(size(return.tag_list[..])),"pm.expect([0, 1, 2].includes(return_tag_list_size_array)).to.be.true",get+users_{user_id}_starred_projects,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,tag_list,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,"size(return.shared_with_groups[]) one of { 0, 1 }",daikon.inv.unary.scalar.OneOfScalar,(size(return.shared_with_groups[..])),"pm.expect([0, 1, 0].includes(return_shared_with_groups_size_array)).to.be.true",get+users_{user_id}_starred_projects,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,shared_with_groups,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.id > return.star_count,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.id, return.star_count)",pm.expect(return_id).to.be.greaterThan(return_star_count),get+users_{user_id}_starred_projects,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,id,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.default_branch is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.default_branch, return.readme_url)",pm.expect(return_readme_url.includes(return_default_branch)).to.be.true,get+users_{user_id}_starred_projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,default_branch,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.path_with_namespace is a substring of return.ssh_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.ssh_url_to_repo, return.path_with_namespace)",pm.expect(return_ssh_url_to_repo.includes(return_path_with_namespace)).to.be.true,get+users_{user_id}_starred_projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.web_url is a substring of return.http_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.http_url_to_repo, return.web_url)",pm.expect(return_http_url_to_repo.includes(return_web_url)).to.be.true,get+users_{user_id}_starred_projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,web_url,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.web_url is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.readme_url)",pm.expect(return_readme_url.includes(return_web_url)).to.be.true,get+users_{user_id}_starred_projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,web_url,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.path_with_namespace is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.path_with_namespace)",pm.expect(return_web_url.includes(return_path_with_namespace)).to.be.true,get+users_{user_id}_starred_projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.owner.id >= return.creator_id,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.owner.id, return.creator_id)",pm.expect(return_owner_id).to.be.at.least(return_creator_id),get+users_{user_id}_starred_projects,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,owner.id,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.owner.id <= return.namespace.id,daikon.inv.binary.twoScalar.IntLessEqual,"(return.owner.id, return.namespace.id)",pm.expect(return_owner_id).to.be.lte(return_namespace_id),get+users_{user_id}_starred_projects,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,owner.id,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.owner.id >= return.statistics.commit_count,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.owner.id, return.statistics.commit_count)",pm.expect(return_owner_id).to.be.at.least(return_statistics_commit_count),get+users_{user_id}_starred_projects,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,owner.id,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.owner.id >= size(return.tag_list[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.owner.id, size(return.tag_list[..]))",pm.expect(return_owner_id).to.be.at.least(return_tag_list_size_array),get+users_{user_id}_starred_projects,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,tag_list,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.owner.id >= size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.owner.id, size(return.shared_with_groups[..]))",pm.expect(return_owner_id).to.be.at.least(return_shared_with_groups_size_array),get+users_{user_id}_starred_projects,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,owner.id,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.owner.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.owner.name, return.name_with_namespace)",pm.expect(return_name_with_namespace.includes(return_owner_name)).to.be.true,get+users_{user_id}_starred_projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,name_with_namespace,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.name, return.name_with_namespace)",pm.expect(return_name_with_namespace.includes(return_name)).to.be.true,get+users_{user_id}_starred_projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,name_with_namespace,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.namespace.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.name_with_namespace, return.namespace.name)",pm.expect(return_name_with_namespace.includes(return_namespace_name)).to.be.true,get+users_{user_id}_starred_projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,name_with_namespace,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path, return.path_with_namespace)",pm.expect(return_path_with_namespace.includes(return_path)).to.be.true,get+users_{user_id}_starred_projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.namespace.full_path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path_with_namespace, return.namespace.full_path)",pm.expect(return_path_with_namespace.includes(return_namespace_full_path)).to.be.true,get+users_{user_id}_starred_projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.open_issues_count <= return.forks_count,daikon.inv.binary.twoScalar.IntLessEqual,"(return.open_issues_count, return.forks_count)",pm.expect(return_open_issues_count).to.be.lte(return_forks_count),get+users_{user_id}_starred_projects,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,open_issues_count,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.open_issues_count <= return.statistics.commit_count,daikon.inv.binary.twoScalar.IntLessEqual,"(return.open_issues_count, return.statistics.commit_count)",pm.expect(return_open_issues_count).to.be.lte(return_statistics_commit_count),get+users_{user_id}_starred_projects,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,open_issues_count,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.open_issues_count <= return.statistics.storage_size,daikon.inv.binary.twoScalar.IntLessEqual,"(return.open_issues_count, return.statistics.storage_size)",pm.expect(return_open_issues_count).to.be.lte(return_statistics_storage_size),get+users_{user_id}_starred_projects,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,statistics.storage_size,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.open_issues_count <= return.statistics.repository_size,daikon.inv.binary.twoScalar.IntLessEqual,"(return.open_issues_count, return.statistics.repository_size)",pm.expect(return_open_issues_count).to.be.lte(return_statistics_repository_size),get+users_{user_id}_starred_projects,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,open_issues_count,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.open_issues_count <= return.statistics.wiki_size,daikon.inv.binary.twoScalar.IntLessEqual,"(return.open_issues_count, return.statistics.wiki_size)",pm.expect(return_open_issues_count).to.be.lte(return_statistics_wiki_size),get+users_{user_id}_starred_projects,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,open_issues_count,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.open_issues_count <= size(return.tag_list[]),daikon.inv.binary.twoScalar.IntLessEqual,"(return.open_issues_count, size(return.tag_list[..]))",pm.expect(return_open_issues_count).to.be.lte(return_tag_list_size_array),get+users_{user_id}_starred_projects,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,tag_list,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.open_issues_count <= size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntLessEqual,"(return.open_issues_count, size(return.shared_with_groups[..]))",pm.expect(return_open_issues_count).to.be.lte(return_shared_with_groups_size_array),get+users_{user_id}_starred_projects,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,open_issues_count,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.creator_id <= return.namespace.id,daikon.inv.binary.twoScalar.IntLessEqual,"(return.creator_id, return.namespace.id)",pm.expect(return_creator_id).to.be.lte(return_namespace_id),get+users_{user_id}_starred_projects,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,creator_id,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.creator_id >= return.statistics.commit_count,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.creator_id, return.statistics.commit_count)",pm.expect(return_creator_id).to.be.at.least(return_statistics_commit_count),get+users_{user_id}_starred_projects,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,creator_id,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.creator_id >= size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.creator_id, size(return.shared_with_groups[..]))",pm.expect(return_creator_id).to.be.at.least(return_shared_with_groups_size_array),get+users_{user_id}_starred_projects,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,creator_id,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.namespace.id >= return.statistics.commit_count,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.namespace.id, return.statistics.commit_count)",pm.expect(return_namespace_id).to.be.at.least(return_statistics_commit_count),get+users_{user_id}_starred_projects,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,namespace.id,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.namespace.id >= size(return.tag_list[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.namespace.id, size(return.tag_list[..]))",pm.expect(return_namespace_id).to.be.at.least(return_tag_list_size_array),get+users_{user_id}_starred_projects,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,tag_list,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.namespace.id >= size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.namespace.id, size(return.shared_with_groups[..]))",pm.expect(return_namespace_id).to.be.at.least(return_shared_with_groups_size_array),get+users_{user_id}_starred_projects,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,namespace.id,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.namespace.path is a substring of return.namespace.full_path,daikon.inv.binary.twoString.StdString$SubString,"(return.namespace.path, return.namespace.full_path)",pm.expect(return_namespace_full_path.includes(return_namespace_path)).to.be.true,get+users_{user_id}_starred_projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,namespace.path,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.forks_count >= return.statistics.lfs_objects_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.forks_count, return.statistics.lfs_objects_size)",pm.expect(return_forks_count).to.be.at.least(return_statistics_lfs_objects_size),get+users_{user_id}_starred_projects,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,forks_count,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.star_count >= return.statistics.commit_count,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.star_count, return.statistics.commit_count)",pm.expect(return_star_count).to.be.at.least(return_statistics_commit_count),get+users_{user_id}_starred_projects,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,star_count,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.star_count >= size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.star_count, size(return.shared_with_groups[..]))",pm.expect(return_star_count).to.be.at.least(return_shared_with_groups_size_array),get+users_{user_id}_starred_projects,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,star_count,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.statistics.commit_count <= return.statistics.storage_size,daikon.inv.binary.twoScalar.IntLessEqual,"(return.statistics.commit_count, return.statistics.storage_size)",pm.expect(return_statistics_commit_count).to.be.lte(return_statistics_storage_size),get+users_{user_id}_starred_projects,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,statistics.storage_size,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.statistics.commit_count <= return.statistics.repository_size,daikon.inv.binary.twoScalar.IntLessEqual,"(return.statistics.commit_count, return.statistics.repository_size)",pm.expect(return_statistics_commit_count).to.be.lte(return_statistics_repository_size),get+users_{user_id}_starred_projects,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,statistics.commit_count,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.statistics.commit_count >= return.statistics.lfs_objects_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.commit_count, return.statistics.lfs_objects_size)",pm.expect(return_statistics_commit_count).to.be.at.least(return_statistics_lfs_objects_size),get+users_{user_id}_starred_projects,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,statistics.commit_count,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.statistics.storage_size >= return.statistics.repository_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.storage_size, return.statistics.repository_size)",pm.expect(return_statistics_storage_size).to.be.at.least(return_statistics_repository_size),get+users_{user_id}_starred_projects,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,statistics.storage_size,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.statistics.storage_size >= return.statistics.wiki_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.storage_size, return.statistics.wiki_size)",pm.expect(return_statistics_storage_size).to.be.at.least(return_statistics_wiki_size),get+users_{user_id}_starred_projects,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,statistics.storage_size,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.statistics.storage_size >= return.statistics.lfs_objects_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.storage_size, return.statistics.lfs_objects_size)",pm.expect(return_statistics_storage_size).to.be.at.least(return_statistics_lfs_objects_size),get+users_{user_id}_starred_projects,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,statistics.storage_size,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.statistics.storage_size >= size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.storage_size, size(return.shared_with_groups[..]))",pm.expect(return_statistics_storage_size).to.be.at.least(return_shared_with_groups_size_array),get+users_{user_id}_starred_projects,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,statistics.storage_size,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.statistics.repository_size >= return.statistics.wiki_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.repository_size, return.statistics.wiki_size)",pm.expect(return_statistics_repository_size).to.be.at.least(return_statistics_wiki_size),get+users_{user_id}_starred_projects,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,statistics.repository_size,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.statistics.repository_size >= return.statistics.lfs_objects_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.repository_size, return.statistics.lfs_objects_size)",pm.expect(return_statistics_repository_size).to.be.at.least(return_statistics_lfs_objects_size),get+users_{user_id}_starred_projects,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,statistics.repository_size,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.statistics.repository_size >= size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.repository_size, size(return.shared_with_groups[..]))",pm.expect(return_statistics_repository_size).to.be.at.least(return_shared_with_groups_size_array),get+users_{user_id}_starred_projects,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,statistics.repository_size,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.statistics.wiki_size >= return.statistics.lfs_objects_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.wiki_size, return.statistics.lfs_objects_size)",pm.expect(return_statistics_wiki_size).to.be.at.least(return_statistics_lfs_objects_size),get+users_{user_id}_starred_projects,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,statistics.wiki_size,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.statistics.lfs_objects_size <= size(return.tag_list[]),daikon.inv.binary.twoScalar.IntLessEqual,"(return.statistics.lfs_objects_size, size(return.tag_list[..]))",pm.expect(return_statistics_lfs_objects_size).to.be.lte(return_tag_list_size_array),get+users_{user_id}_starred_projects,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,tag_list,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return.statistics.lfs_objects_size <= size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntLessEqual,"(return.statistics.lfs_objects_size, size(return.shared_with_groups[..]))",pm.expect(return_statistics_lfs_objects_size).to.be.lte(return_shared_with_groups_size_array),get+users_{user_id}_starred_projects,,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,statistics.lfs_objects_size,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return._links.self is a substring of return._links.issues,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.issues)",pm.expect(return__links_issues.includes(return__links_self)).to.be.true,get+users_{user_id}_starred_projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return._links.self is a substring of return._links.merge_requests,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.merge_requests)",pm.expect(return__links_merge_requests.includes(return__links_self)).to.be.true,get+users_{user_id}_starred_projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return._links.self is a substring of return._links.repo_branches,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.repo_branches)",pm.expect(return__links_repo_branches.includes(return__links_self)).to.be.true,get+users_{user_id}_starred_projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return._links.self is a substring of return._links.labels,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.labels)",pm.expect(return__links_labels.includes(return__links_self)).to.be.true,get+users_{user_id}_starred_projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return._links.self is a substring of return._links.events,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.events)",pm.expect(return__links_events.includes(return__links_self)).to.be.true,get+users_{user_id}_starred_projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT,return._links.self is a substring of return._links.members,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.members)",pm.expect(return__links_members.includes(return__links_self)).to.be.true,get+users_{user_id}_starred_projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,input.id == return.id,daikon.inv.binary.twoScalar.IntEqual,"(input.id, return.id)",pm.expect(input_id).to.eql(return_id),post+projects_{id}_archive,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,id,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,return.owner.id == return.creator_id,daikon.inv.binary.twoScalar.IntEqual,"(return.owner.id, return.creator_id)",pm.expect(return_owner_id).to.eql(return_creator_id),post+projects_{id}_archive,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,owner.id,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,return.owner.name == return.namespace.name,daikon.inv.binary.twoString.StringEqual,"(return.owner.name, return.namespace.name)",pm.expect(return_owner_name).to.eql(return_namespace_name),post+projects_{id}_archive,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,owner.name,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,return.issues_enabled == return.archived,daikon.inv.binary.twoScalar.IntEqual,"(return.issues_enabled, return.archived)",pm.expect(return_issues_enabled).to.eql(return_archived),post+projects_{id}_archive,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,issues_enabled,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,return.issues_enabled == return.ci_forward_deployment_enabled,daikon.inv.binary.twoScalar.IntEqual,"(return.issues_enabled, return.ci_forward_deployment_enabled)",pm.expect(return_issues_enabled).to.eql(return_ci_forward_deployment_enabled),post+projects_{id}_archive,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,issues_enabled,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,return.issues_enabled == return.public_jobs,daikon.inv.binary.twoScalar.IntEqual,"(return.issues_enabled, return.public_jobs)",pm.expect(return_issues_enabled).to.eql(return_public_jobs),post+projects_{id}_archive,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,issues_enabled,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,return.issues_enabled == return.remove_source_branch_after_merge,daikon.inv.binary.twoScalar.IntEqual,"(return.issues_enabled, return.remove_source_branch_after_merge)",pm.expect(return_issues_enabled).to.eql(return_remove_source_branch_after_merge),post+projects_{id}_archive,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,issues_enabled,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,return.issues_enabled == return.request_access_enabled,daikon.inv.binary.twoScalar.IntEqual,"(return.issues_enabled, return.request_access_enabled)",pm.expect(return_issues_enabled).to.eql(return_request_access_enabled),post+projects_{id}_archive,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,issues_enabled,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,return.issues_enabled == return.autoclose_referenced_issues,daikon.inv.binary.twoScalar.IntEqual,"(return.issues_enabled, return.autoclose_referenced_issues)",pm.expect(return_issues_enabled).to.eql(return_autoclose_referenced_issues),post+projects_{id}_archive,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,issues_enabled,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,return.open_issues_count == size(return.tag_list[]),daikon.inv.binary.twoScalar.IntEqual,"(return.open_issues_count, size(return.tag_list[..]))",pm.expect(return_open_issues_count).to.eql(return_tag_list_size_array),post+projects_{id}_archive,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,tag_list,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,return.open_issues_count == size(return.tag_list[]),daikon.inv.binary.twoScalar.IntEqual,"(return.open_issues_count, size(return.tag_list[..]))",pm.expect(return_open_issues_count).to.eql(return_tag_list_size_array),post+projects_{id}_archive,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,tag_list,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,return.open_issues_count == size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntEqual,"(return.open_issues_count, size(return.shared_with_groups[..]))",pm.expect(return_open_issues_count).to.eql(return_shared_with_groups_size_array),post+projects_{id}_archive,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,open_issues_count,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,return.open_issues_count == size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntEqual,"(return.open_issues_count, size(return.shared_with_groups[..]))",pm.expect(return_open_issues_count).to.eql(return_shared_with_groups_size_array),post+projects_{id}_archive,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,open_issues_count,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,return.can_create_merge_request_in == return.resolve_outdated_diff_discussions,daikon.inv.binary.twoScalar.IntEqual,"(return.can_create_merge_request_in, return.resolve_outdated_diff_discussions)",pm.expect(return_can_create_merge_request_in).to.eql(return_resolve_outdated_diff_discussions),post+projects_{id}_archive,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,can_create_merge_request_in,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,return.can_create_merge_request_in == return.only_allow_merge_if_pipeline_succeeds,daikon.inv.binary.twoScalar.IntEqual,"(return.can_create_merge_request_in, return.only_allow_merge_if_pipeline_succeeds)",pm.expect(return_can_create_merge_request_in).to.eql(return_only_allow_merge_if_pipeline_succeeds),post+projects_{id}_archive,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,can_create_merge_request_in,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,return.can_create_merge_request_in == return.only_allow_merge_if_all_discussions_are_resolved,daikon.inv.binary.twoScalar.IntEqual,"(return.can_create_merge_request_in, return.only_allow_merge_if_all_discussions_are_resolved)",pm.expect(return_can_create_merge_request_in).to.eql(return_only_allow_merge_if_all_discussions_are_resolved),post+projects_{id}_archive,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,can_create_merge_request_in,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,return.created_at == return.last_activity_at,daikon.inv.binary.twoString.StringEqual,"(return.created_at, return.last_activity_at)",pm.expect(return_created_at).to.eql(return_last_activity_at),post+projects_{id}_archive,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,created_at,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,return.creator_id == return.namespace.id,daikon.inv.binary.twoScalar.IntEqual,"(return.creator_id, return.namespace.id)",pm.expect(return_creator_id).to.eql(return_namespace_id),post+projects_{id}_archive,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,creator_id,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,return.namespace.path == return.namespace.full_path,daikon.inv.binary.twoString.StringEqual,"(return.namespace.path, return.namespace.full_path)",pm.expect(return_namespace_path).to.eql(return_namespace_full_path),post+projects_{id}_archive,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,namespace.path,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,"return.default_branch == ""main""",daikon.inv.unary.string.OneOfString,(return.default_branch),"pm.expect([""main""].includes(return_default_branch)).to.be.true",post+projects_{id}_archive,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,default_branch,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,LENGTH(return.default_branch)==4,daikon.inv.unary.string.FixedLengthString,(return.default_branch),pm.expect(return_default_branch).to.have.length(4),post+projects_{id}_archive,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,default_branch,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,"return.visibility one of { ""internal"", ""private"", ""public"" }",daikon.inv.unary.string.OneOfString,(return.visibility),"pm.expect([""internal"", ""private"", ""public""].includes(return_visibility)).to.be.true",post+projects_{id}_archive,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,visibility,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,"return.readme_url one of { ""http://localhost:30000/root/brag/-/blob/main/README.md"", ""http://localhost:30000/root/nightwear/-/blob/main/README.md"" }",daikon.inv.unary.string.OneOfString,(return.readme_url),"pm.expect([""http://localhost:30000/root/brag/-/blob/main/README.md"", ""http://localhost:30000/root/nightwear/-/blob/main/README.md""].includes(return_readme_url)).to.be.true",post+projects_{id}_archive,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,readme_url,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,return.tag_list[] == [],daikon.inv.unary.stringsequence.OneOfStringSequence,(return.tag_list[..]),pm.expect([[]].some(value => pm.expect(return_tag_list_array).to.deep.equal(value).that)).to.be.true,post+projects_{id}_archive,,1.0,,"Represents String[] variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,tag_list,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,"return.owner.name == ""Administrator""",daikon.inv.unary.string.OneOfString,(return.owner.name),"pm.expect([""Administrator""].includes(return_owner_name)).to.be.true",post+projects_{id}_archive,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,owner.name,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,LENGTH(return.owner.name)==13,daikon.inv.unary.string.FixedLengthString,(return.owner.name),pm.expect(return_owner_name).to.have.length(13),post+projects_{id}_archive,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,owner.name,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,return.issues_enabled == true,daikon.inv.unary.scalar.OneOfScalar,(return.issues_enabled),pm.expect(return_issues_enabled).to.eql(true),post+projects_{id}_archive,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,issues_enabled,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,return.can_create_merge_request_in == false,daikon.inv.unary.scalar.OneOfScalar,(return.can_create_merge_request_in),pm.expect(return_can_create_merge_request_in).to.eql(false),post+projects_{id}_archive,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,can_create_merge_request_in,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,LENGTH(return.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.created_at),pm.expect(return_created_at).to.have.length(24),post+projects_{id}_archive,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,created_at,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.created_at),"pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",post+projects_{id}_archive,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,created_at,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,return.creator_id == 1,daikon.inv.unary.scalar.OneOfScalar,(return.creator_id),pm.expect([1].includes(return_creator_id)).to.be.true,post+projects_{id}_archive,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,creator_id,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,"return.namespace.path == ""root""",daikon.inv.unary.string.OneOfString,(return.namespace.path),"pm.expect([""root""].includes(return_namespace_path)).to.be.true",post+projects_{id}_archive,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,namespace.path,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,LENGTH(return.namespace.path)==4,daikon.inv.unary.string.FixedLengthString,(return.namespace.path),pm.expect(return_namespace_path).to.have.length(4),post+projects_{id}_archive,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,namespace.path,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,"return.namespace.kind == ""user""",daikon.inv.unary.string.OneOfString,(return.namespace.kind),"pm.expect([""user""].includes(return_namespace_kind)).to.be.true",post+projects_{id}_archive,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,namespace.kind,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,LENGTH(return.namespace.kind)==4,daikon.inv.unary.string.FixedLengthString,(return.namespace.kind),pm.expect(return_namespace_kind).to.have.length(4),post+projects_{id}_archive,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,namespace.kind,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,"return.import_status == ""finished""",daikon.inv.unary.string.OneOfString,(return.import_status),"pm.expect([""finished""].includes(return_import_status)).to.be.true",post+projects_{id}_archive,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,import_status,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,LENGTH(return.import_status)==8,daikon.inv.unary.string.FixedLengthString,(return.import_status),pm.expect(return_import_status).to.have.length(8),post+projects_{id}_archive,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,import_status,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,return.permissions == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions),pm.expect(return_permissions).to.be.null,post+projects_{id}_archive,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,permissions,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,return.permissions.project_access == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.project_access),pm.expect(return_permissions_project_access).to.be.null,post+projects_{id}_archive,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,permissions.project_access,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,return.permissions.group_access == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.group_access),pm.expect(return_permissions_group_access).to.be.null,post+projects_{id}_archive,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,permissions.group_access,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,return.license == null,daikon.inv.unary.scalar.OneOfScalar,(return.license),pm.expect(return_license).to.be.null,post+projects_{id}_archive,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,license,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,"return.forks_count one of { 0, 1, 3 }",daikon.inv.unary.scalar.OneOfScalar,(return.forks_count),"pm.expect([0, 1, 3].includes(return_forks_count)).to.be.true",post+projects_{id}_archive,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,forks_count,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,return.star_count >= 0,daikon.inv.unary.scalar.LowerBound,(return.star_count),pm.expect(return_star_count).to.be.at.least(0),post+projects_{id}_archive,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,star_count,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,return.shared_with_groups[] == [],daikon.inv.unary.sequence.OneOfSequence,(return.shared_with_groups[..]),pm.expect([[]].some(value => pm.expect(return_shared_with_groups_array).to.deep.equal(value).that)).to.be.true,post+projects_{id}_archive,1.0,,,"Represents long[] variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,shared_with_groups,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,"return.merge_method == ""merge""",daikon.inv.unary.string.OneOfString,(return.merge_method),"pm.expect([""merge""].includes(return_merge_method)).to.be.true",post+projects_{id}_archive,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,merge_method,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,LENGTH(return.merge_method)==5,daikon.inv.unary.string.FixedLengthString,(return.merge_method),pm.expect(return_merge_method).to.have.length(5),post+projects_{id}_archive,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,merge_method,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,LENGTH(return._links.self)==42,daikon.inv.unary.string.FixedLengthString,(return._links.self),pm.expect(return__links_self).to.have.length(42),post+projects_{id}_archive,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.self,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,LENGTH(return._links.issues)==49,daikon.inv.unary.string.FixedLengthString,(return._links.issues),pm.expect(return__links_issues).to.have.length(49),post+projects_{id}_archive,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.issues,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,LENGTH(return._links.merge_requests)==57,daikon.inv.unary.string.FixedLengthString,(return._links.merge_requests),pm.expect(return__links_merge_requests).to.have.length(57),post+projects_{id}_archive,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.merge_requests,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,LENGTH(return._links.repo_branches)==62,daikon.inv.unary.string.FixedLengthString,(return._links.repo_branches),pm.expect(return__links_repo_branches).to.have.length(62),post+projects_{id}_archive,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.repo_branches,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,LENGTH(return._links.labels)==49,daikon.inv.unary.string.FixedLengthString,(return._links.labels),pm.expect(return__links_labels).to.have.length(49),post+projects_{id}_archive,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.labels,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,LENGTH(return._links.events)==49,daikon.inv.unary.string.FixedLengthString,(return._links.events),pm.expect(return__links_events).to.have.length(49),post+projects_{id}_archive,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.events,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,LENGTH(return._links.members)==50,daikon.inv.unary.string.FixedLengthString,(return._links.members),pm.expect(return__links_members).to.have.length(50),post+projects_{id}_archive,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.members,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,return.default_branch is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.default_branch, return.readme_url)",pm.expect(return_readme_url.includes(return_default_branch)).to.be.true,post+projects_{id}_archive,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,default_branch,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,return.path_with_namespace is a substring of return.ssh_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.ssh_url_to_repo, return.path_with_namespace)",pm.expect(return_ssh_url_to_repo.includes(return_path_with_namespace)).to.be.true,post+projects_{id}_archive,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,return.web_url is a substring of return.http_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.http_url_to_repo, return.web_url)",pm.expect(return_http_url_to_repo.includes(return_web_url)).to.be.true,post+projects_{id}_archive,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,web_url,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,return.web_url is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.readme_url)",pm.expect(return_readme_url.includes(return_web_url)).to.be.true,post+projects_{id}_archive,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,web_url,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,return.path_with_namespace is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.path_with_namespace)",pm.expect(return_web_url.includes(return_path_with_namespace)).to.be.true,post+projects_{id}_archive,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,return.owner.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.owner.name, return.name_with_namespace)",pm.expect(return_name_with_namespace.includes(return_owner_name)).to.be.true,post+projects_{id}_archive,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,name_with_namespace,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,return.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.name, return.name_with_namespace)",pm.expect(return_name_with_namespace.includes(return_name)).to.be.true,post+projects_{id}_archive,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,name_with_namespace,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,return.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path, return.path_with_namespace)",pm.expect(return_path_with_namespace.includes(return_path)).to.be.true,post+projects_{id}_archive,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,return.namespace.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path_with_namespace, return.namespace.path)",pm.expect(return_path_with_namespace.includes(return_namespace_path)).to.be.true,post+projects_{id}_archive,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,return.open_issues_count <= return.forks_count,daikon.inv.binary.twoScalar.IntLessEqual,"(return.open_issues_count, return.forks_count)",pm.expect(return_open_issues_count).to.be.lte(return_forks_count),post+projects_{id}_archive,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,open_issues_count,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,return.open_issues_count <= return.star_count,daikon.inv.binary.twoScalar.IntLessEqual,"(return.open_issues_count, return.star_count)",pm.expect(return_open_issues_count).to.be.lte(return_star_count),post+projects_{id}_archive,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,open_issues_count,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,return.merge_method is a substring of return._links.merge_requests,daikon.inv.binary.twoString.StdString$SubString,"(return.merge_method, return._links.merge_requests)",pm.expect(return__links_merge_requests.includes(return_merge_method)).to.be.true,post+projects_{id}_archive,,1.0,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,merge_method,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,return._links.self is a substring of return._links.issues,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.issues)",pm.expect(return__links_issues.includes(return__links_self)).to.be.true,post+projects_{id}_archive,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,return._links.self is a substring of return._links.merge_requests,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.merge_requests)",pm.expect(return__links_merge_requests.includes(return__links_self)).to.be.true,post+projects_{id}_archive,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,return._links.self is a substring of return._links.repo_branches,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.repo_branches)",pm.expect(return__links_repo_branches.includes(return__links_self)).to.be.true,post+projects_{id}_archive,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,return._links.self is a substring of return._links.labels,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.labels)",pm.expect(return__links_labels.includes(return__links_self)).to.be.true,post+projects_{id}_archive,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,return._links.self is a substring of return._links.events,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.events)",pm.expect(return__links_events.includes(return__links_self)).to.be.true,post+projects_{id}_archive,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT,return._links.self is a substring of return._links.members,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.members)",pm.expect(return__links_members.includes(return__links_self)).to.be.true,post+projects_{id}_archive,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,input.name == return.name,daikon.inv.binary.twoString.StringEqual,"(input.name, return.name)",pm.expect(input_name).to.eql(return_name),post+projects_{id}_fork,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,name,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,input.namespace_id == return.creator_id,daikon.inv.binary.twoScalar.IntEqual,"(input.namespace_id, return.creator_id)",pm.expect(input_namespace_id).to.eql(return_creator_id),post+projects_{id}_fork,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,creator_id,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,input.path == return.path,daikon.inv.binary.twoString.StringEqual,"(input.path, return.path)",pm.expect(input_path).to.eql(return_path),post+projects_{id}_fork,,1.0,,Represents an invariant of == between two String scalars. Prints as x == y.,,path,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,return.owner.id == return.creator_id,daikon.inv.binary.twoScalar.IntEqual,"(return.owner.id, return.creator_id)",pm.expect(return_owner_id).to.eql(return_creator_id),post+projects_{id}_fork,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,owner.id,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,return.owner.name == return.namespace.name,daikon.inv.binary.twoString.StringEqual,"(return.owner.name, return.namespace.name)",pm.expect(return_owner_name).to.eql(return_namespace_name),post+projects_{id}_fork,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,owner.name,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,return.issues_enabled == return.ci_forward_deployment_enabled,daikon.inv.binary.twoScalar.IntEqual,"(return.issues_enabled, return.ci_forward_deployment_enabled)",pm.expect(return_issues_enabled).to.eql(return_ci_forward_deployment_enabled),post+projects_{id}_fork,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,issues_enabled,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,return.issues_enabled == return.public_jobs,daikon.inv.binary.twoScalar.IntEqual,"(return.issues_enabled, return.public_jobs)",pm.expect(return_issues_enabled).to.eql(return_public_jobs),post+projects_{id}_fork,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,issues_enabled,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,return.issues_enabled == return.remove_source_branch_after_merge,daikon.inv.binary.twoScalar.IntEqual,"(return.issues_enabled, return.remove_source_branch_after_merge)",pm.expect(return_issues_enabled).to.eql(return_remove_source_branch_after_merge),post+projects_{id}_fork,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,issues_enabled,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,return.issues_enabled == return.request_access_enabled,daikon.inv.binary.twoScalar.IntEqual,"(return.issues_enabled, return.request_access_enabled)",pm.expect(return_issues_enabled).to.eql(return_request_access_enabled),post+projects_{id}_fork,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,issues_enabled,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,return.issues_enabled == return.auto_devops_enabled,daikon.inv.binary.twoScalar.IntEqual,"(return.issues_enabled, return.auto_devops_enabled)",pm.expect(return_issues_enabled).to.eql(return_auto_devops_enabled),post+projects_{id}_fork,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,issues_enabled,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,return.issues_enabled == return.autoclose_referenced_issues,daikon.inv.binary.twoScalar.IntEqual,"(return.issues_enabled, return.autoclose_referenced_issues)",pm.expect(return_issues_enabled).to.eql(return_autoclose_referenced_issues),post+projects_{id}_fork,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,issues_enabled,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,return.open_issues_count == return.forks_count,daikon.inv.binary.twoScalar.IntEqual,"(return.open_issues_count, return.forks_count)",pm.expect(return_open_issues_count).to.eql(return_forks_count),post+projects_{id}_fork,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,open_issues_count,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,return.open_issues_count == return.star_count,daikon.inv.binary.twoScalar.IntEqual,"(return.open_issues_count, return.star_count)",pm.expect(return_open_issues_count).to.eql(return_star_count),post+projects_{id}_fork,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,open_issues_count,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,return.open_issues_count == size(return.tag_list[]),daikon.inv.binary.twoScalar.IntEqual,"(return.open_issues_count, size(return.tag_list[..]))",pm.expect(return_open_issues_count).to.eql(return_tag_list_size_array),post+projects_{id}_fork,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,tag_list,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,return.open_issues_count == size(return.tag_list[]),daikon.inv.binary.twoScalar.IntEqual,"(return.open_issues_count, size(return.tag_list[..]))",pm.expect(return_open_issues_count).to.eql(return_tag_list_size_array),post+projects_{id}_fork,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,tag_list,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,return.open_issues_count == size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntEqual,"(return.open_issues_count, size(return.shared_with_groups[..]))",pm.expect(return_open_issues_count).to.eql(return_shared_with_groups_size_array),post+projects_{id}_fork,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,open_issues_count,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,return.open_issues_count == size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntEqual,"(return.open_issues_count, size(return.shared_with_groups[..]))",pm.expect(return_open_issues_count).to.eql(return_shared_with_groups_size_array),post+projects_{id}_fork,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,open_issues_count,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,return.merge_requests_enabled == return.can_create_merge_request_in,daikon.inv.binary.twoScalar.IntEqual,"(return.merge_requests_enabled, return.can_create_merge_request_in)",pm.expect(return_merge_requests_enabled).to.eql(return_can_create_merge_request_in),post+projects_{id}_fork,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,merge_requests_enabled,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,return.resolve_outdated_diff_discussions == return.archived,daikon.inv.binary.twoScalar.IntEqual,"(return.resolve_outdated_diff_discussions, return.archived)",pm.expect(return_resolve_outdated_diff_discussions).to.eql(return_archived),post+projects_{id}_fork,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,resolve_outdated_diff_discussions,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,return.resolve_outdated_diff_discussions == return.only_allow_merge_if_pipeline_succeeds,daikon.inv.binary.twoScalar.IntEqual,"(return.resolve_outdated_diff_discussions, return.only_allow_merge_if_pipeline_succeeds)",pm.expect(return_resolve_outdated_diff_discussions).to.eql(return_only_allow_merge_if_pipeline_succeeds),post+projects_{id}_fork,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,resolve_outdated_diff_discussions,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,return.resolve_outdated_diff_discussions == return.only_allow_merge_if_all_discussions_are_resolved,daikon.inv.binary.twoScalar.IntEqual,"(return.resolve_outdated_diff_discussions, return.only_allow_merge_if_all_discussions_are_resolved)",pm.expect(return_resolve_outdated_diff_discussions).to.eql(return_only_allow_merge_if_all_discussions_are_resolved),post+projects_{id}_fork,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,resolve_outdated_diff_discussions,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,return.resolve_outdated_diff_discussions == return.service_desk_enabled,daikon.inv.binary.twoScalar.IntEqual,"(return.resolve_outdated_diff_discussions, return.service_desk_enabled)",pm.expect(return_resolve_outdated_diff_discussions).to.eql(return_service_desk_enabled),post+projects_{id}_fork,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,resolve_outdated_diff_discussions,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,return.created_at == return.last_activity_at,daikon.inv.binary.twoString.StringEqual,"(return.created_at, return.last_activity_at)",pm.expect(return_created_at).to.eql(return_last_activity_at),post+projects_{id}_fork,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,created_at,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,return.creator_id == return.namespace.id,daikon.inv.binary.twoScalar.IntEqual,"(return.creator_id, return.namespace.id)",pm.expect(return_creator_id).to.eql(return_namespace_id),post+projects_{id}_fork,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,creator_id,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,return.namespace.path == return.namespace.full_path,daikon.inv.binary.twoString.StringEqual,"(return.namespace.path, return.namespace.full_path)",pm.expect(return_namespace_path).to.eql(return_namespace_full_path),post+projects_{id}_fork,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,namespace.path,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,"return.default_branch == ""main""",daikon.inv.unary.string.OneOfString,(return.default_branch),"pm.expect([""main""].includes(return_default_branch)).to.be.true",post+projects_{id}_fork,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,default_branch,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,LENGTH(return.default_branch)==4,daikon.inv.unary.string.FixedLengthString,(return.default_branch),pm.expect(return_default_branch).to.have.length(4),post+projects_{id}_fork,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,default_branch,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,"return.visibility one of { ""internal"", ""private"" }",daikon.inv.unary.string.OneOfString,(return.visibility),"pm.expect([""internal"", ""private""].includes(return_visibility)).to.be.true",post+projects_{id}_fork,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,visibility,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,return.tag_list[] == [],daikon.inv.unary.stringsequence.OneOfStringSequence,(return.tag_list[..]),pm.expect([[]].some(value => pm.expect(return_tag_list_array).to.deep.equal(value).that)).to.be.true,post+projects_{id}_fork,,1.0,,"Represents String[] variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,tag_list,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,"return.owner.name == ""Administrator""",daikon.inv.unary.string.OneOfString,(return.owner.name),"pm.expect([""Administrator""].includes(return_owner_name)).to.be.true",post+projects_{id}_fork,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,owner.name,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,LENGTH(return.owner.name)==13,daikon.inv.unary.string.FixedLengthString,(return.owner.name),pm.expect(return_owner_name).to.have.length(13),post+projects_{id}_fork,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,owner.name,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,return.issues_enabled == true,daikon.inv.unary.scalar.OneOfScalar,(return.issues_enabled),pm.expect(return_issues_enabled).to.eql(true),post+projects_{id}_fork,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,issues_enabled,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,return.resolve_outdated_diff_discussions == false,daikon.inv.unary.scalar.OneOfScalar,(return.resolve_outdated_diff_discussions),pm.expect(return_resolve_outdated_diff_discussions).to.eql(false),post+projects_{id}_fork,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,resolve_outdated_diff_discussions,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,LENGTH(return.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.created_at),pm.expect(return_created_at).to.have.length(24),post+projects_{id}_fork,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,created_at,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.created_at),"pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",post+projects_{id}_fork,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,created_at,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,return.creator_id == 1,daikon.inv.unary.scalar.OneOfScalar,(return.creator_id),pm.expect([1].includes(return_creator_id)).to.be.true,post+projects_{id}_fork,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,creator_id,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,"return.namespace.path == ""root""",daikon.inv.unary.string.OneOfString,(return.namespace.path),"pm.expect([""root""].includes(return_namespace_path)).to.be.true",post+projects_{id}_fork,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,namespace.path,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,LENGTH(return.namespace.path)==4,daikon.inv.unary.string.FixedLengthString,(return.namespace.path),pm.expect(return_namespace_path).to.have.length(4),post+projects_{id}_fork,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,namespace.path,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,"return.namespace.kind == ""user""",daikon.inv.unary.string.OneOfString,(return.namespace.kind),"pm.expect([""user""].includes(return_namespace_kind)).to.be.true",post+projects_{id}_fork,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,namespace.kind,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,LENGTH(return.namespace.kind)==4,daikon.inv.unary.string.FixedLengthString,(return.namespace.kind),pm.expect(return_namespace_kind).to.have.length(4),post+projects_{id}_fork,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,namespace.kind,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,"return.import_status == ""scheduled""",daikon.inv.unary.string.OneOfString,(return.import_status),"pm.expect([""scheduled""].includes(return_import_status)).to.be.true",post+projects_{id}_fork,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,import_status,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,LENGTH(return.import_status)==9,daikon.inv.unary.string.FixedLengthString,(return.import_status),pm.expect(return_import_status).to.have.length(9),post+projects_{id}_fork,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,import_status,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,return.permissions == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions),pm.expect(return_permissions).to.be.null,post+projects_{id}_fork,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,permissions,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,return.permissions.project_access == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.project_access),pm.expect(return_permissions_project_access).to.be.null,post+projects_{id}_fork,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,permissions.project_access,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,return.permissions.group_access == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.group_access),pm.expect(return_permissions_group_access).to.be.null,post+projects_{id}_fork,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,permissions.group_access,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,LENGTH(return.runners_token)==29,daikon.inv.unary.string.FixedLengthString,(return.runners_token),pm.expect(return_runners_token).to.have.length(29),post+projects_{id}_fork,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,runners_token,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,return.shared_with_groups[] == [],daikon.inv.unary.sequence.OneOfSequence,(return.shared_with_groups[..]),pm.expect([[]].some(value => pm.expect(return_shared_with_groups_array).to.deep.equal(value).that)).to.be.true,post+projects_{id}_fork,1.0,,,"Represents long[] variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,shared_with_groups,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,"return.merge_method == ""merge""",daikon.inv.unary.string.OneOfString,(return.merge_method),"pm.expect([""merge""].includes(return_merge_method)).to.be.true",post+projects_{id}_fork,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,merge_method,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,LENGTH(return.merge_method)==5,daikon.inv.unary.string.FixedLengthString,(return.merge_method),pm.expect(return_merge_method).to.have.length(5),post+projects_{id}_fork,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,merge_method,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,"return.auto_devops_deploy_strategy == ""continuous""",daikon.inv.unary.string.OneOfString,(return.auto_devops_deploy_strategy),"pm.expect([""continuous""].includes(return_auto_devops_deploy_strategy)).to.be.true",post+projects_{id}_fork,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,auto_devops_deploy_strategy,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,LENGTH(return.auto_devops_deploy_strategy)==10,daikon.inv.unary.string.FixedLengthString,(return.auto_devops_deploy_strategy),pm.expect(return_auto_devops_deploy_strategy).to.have.length(10),post+projects_{id}_fork,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,auto_devops_deploy_strategy,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,"return.repository_storage == ""default""",daikon.inv.unary.string.OneOfString,(return.repository_storage),"pm.expect([""default""].includes(return_repository_storage)).to.be.true",post+projects_{id}_fork,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,repository_storage,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,LENGTH(return.repository_storage)==7,daikon.inv.unary.string.FixedLengthString,(return.repository_storage),pm.expect(return_repository_storage).to.have.length(7),post+projects_{id}_fork,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,repository_storage,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,return.statistics == null,daikon.inv.unary.scalar.OneOfScalar,(return.statistics),pm.expect(return_statistics).to.be.null,post+projects_{id}_fork,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,statistics,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,LENGTH(return._links.self)==42,daikon.inv.unary.string.FixedLengthString,(return._links.self),pm.expect(return__links_self).to.have.length(42),post+projects_{id}_fork,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.self,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,LENGTH(return._links.issues)==49,daikon.inv.unary.string.FixedLengthString,(return._links.issues),pm.expect(return__links_issues).to.have.length(49),post+projects_{id}_fork,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.issues,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,LENGTH(return._links.merge_requests)==57,daikon.inv.unary.string.FixedLengthString,(return._links.merge_requests),pm.expect(return__links_merge_requests).to.have.length(57),post+projects_{id}_fork,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.merge_requests,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,LENGTH(return._links.repo_branches)==62,daikon.inv.unary.string.FixedLengthString,(return._links.repo_branches),pm.expect(return__links_repo_branches).to.have.length(62),post+projects_{id}_fork,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.repo_branches,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,LENGTH(return._links.labels)==49,daikon.inv.unary.string.FixedLengthString,(return._links.labels),pm.expect(return__links_labels).to.have.length(49),post+projects_{id}_fork,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.labels,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,LENGTH(return._links.events)==49,daikon.inv.unary.string.FixedLengthString,(return._links.events),pm.expect(return__links_events).to.have.length(49),post+projects_{id}_fork,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.events,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,LENGTH(return._links.members)==50,daikon.inv.unary.string.FixedLengthString,(return._links.members),pm.expect(return__links_members).to.have.length(50),post+projects_{id}_fork,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.members,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,input.id < return.id,daikon.inv.binary.twoScalar.IntLessThan,"(input.id, return.id)",pm.expect(input_id).to.be.lessThan(return_id),post+projects_{id}_fork,1.0,,,Represents an invariant of < between two long scalars. Prints as x < y.,,id,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,input.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(input.name, return.name_with_namespace)",pm.expect(return_name_with_namespace.includes(input_name)).to.be.true,post+projects_{id}_fork,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,name_with_namespace,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,input.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(input.path, return.path_with_namespace)",pm.expect(return_path_with_namespace.includes(input_path)).to.be.true,post+projects_{id}_fork,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,return.path_with_namespace is a substring of return.ssh_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.ssh_url_to_repo, return.path_with_namespace)",pm.expect(return_ssh_url_to_repo.includes(return_path_with_namespace)).to.be.true,post+projects_{id}_fork,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,return.web_url is a substring of return.http_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.http_url_to_repo, return.web_url)",pm.expect(return_http_url_to_repo.includes(return_web_url)).to.be.true,post+projects_{id}_fork,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,web_url,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,return.path_with_namespace is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.path_with_namespace)",pm.expect(return_web_url.includes(return_path_with_namespace)).to.be.true,post+projects_{id}_fork,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,return.owner.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.owner.name, return.name_with_namespace)",pm.expect(return_name_with_namespace.includes(return_owner_name)).to.be.true,post+projects_{id}_fork,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,name_with_namespace,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,return.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.name, return.name_with_namespace)",pm.expect(return_name_with_namespace.includes(return_name)).to.be.true,post+projects_{id}_fork,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,name_with_namespace,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,return.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path, return.path_with_namespace)",pm.expect(return_path_with_namespace.includes(return_path)).to.be.true,post+projects_{id}_fork,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,return.namespace.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path_with_namespace, return.namespace.path)",pm.expect(return_path_with_namespace.includes(return_namespace_path)).to.be.true,post+projects_{id}_fork,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,return.merge_method is a substring of return._links.merge_requests,daikon.inv.binary.twoString.StdString$SubString,"(return.merge_method, return._links.merge_requests)",pm.expect(return__links_merge_requests.includes(return_merge_method)).to.be.true,post+projects_{id}_fork,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,merge_method,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,return._links.self is a substring of return._links.issues,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.issues)",pm.expect(return__links_issues.includes(return__links_self)).to.be.true,post+projects_{id}_fork,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,return._links.self is a substring of return._links.merge_requests,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.merge_requests)",pm.expect(return__links_merge_requests.includes(return__links_self)).to.be.true,post+projects_{id}_fork,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,return._links.self is a substring of return._links.repo_branches,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.repo_branches)",pm.expect(return__links_repo_branches.includes(return__links_self)).to.be.true,post+projects_{id}_fork,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,return._links.self is a substring of return._links.labels,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.labels)",pm.expect(return__links_labels.includes(return__links_self)).to.be.true,post+projects_{id}_fork,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,return._links.self is a substring of return._links.events,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.events)",pm.expect(return__links_events.includes(return__links_self)).to.be.true,post+projects_{id}_fork,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT,return._links.self is a substring of return._links.members,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.members)",pm.expect(return__links_members.includes(return__links_self)).to.be.true,post+projects_{id}_fork,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects/{id}/hooks&/projects/{id}/hooks&post&201():::EXIT,input.url == return.url,daikon.inv.binary.twoString.StringEqual,"(input.url, return.url)",pm.expect(input_url).to.eql(return_url),post+projects_{id}_hooks,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,url,GitLab Project API
/projects/{id}/hooks&/projects/{id}/hooks&post&201():::EXIT,LENGTH(return.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.created_at),pm.expect(return_created_at).to.have.length(24),post+projects_{id}_hooks,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,created_at,GitLab Project API
/projects/{id}/hooks&/projects/{id}/hooks&post&201():::EXIT,return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.created_at),"pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",post+projects_{id}_hooks,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,created_at,GitLab Project API
/projects/{id}/hooks&/projects/{id}/hooks&post&201():::EXIT,"return.enable_ssl_verification one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.enable_ssl_verification),"pm.expect([""false"", ""true""].includes(return_enable_ssl_verification)).to.be.true",post+projects_{id}_hooks,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,enable_ssl_verification,GitLab Project API
/projects/{id}/hooks&/projects/{id}/hooks&post&201():::EXIT,LENGTH(return.id)==3,daikon.inv.unary.string.FixedLengthString,(return.id),pm.expect(return_id).to.have.length(3),post+projects_{id}_hooks,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,id,GitLab Project API
/projects/{id}/hooks&/projects/{id}/hooks&post&201():::EXIT,return.id is Numeric,daikon.inv.unary.string.IsNumeric,(return.id),"pm.expect(return_id).to.match(/^[+-]{0,1}(0|([0-9](\d*|\d{0,2}(,\d{3})*)))?(\.\d*[0-9])?$/)",post+projects_{id}_hooks,1.0,,,Indicates that the characters of a string variable are always numeric. Represented as x is Numeric.,,id,GitLab Project API
/projects/{id}/hooks&/projects/{id}/hooks&post&201():::EXIT,"return.issues_events one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.issues_events),"pm.expect([""false"", ""true""].includes(return_issues_events)).to.be.true",post+projects_{id}_hooks,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,issues_events,GitLab Project API
/projects/{id}/hooks&/projects/{id}/hooks&post&201():::EXIT,"return.merge_requests_events one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.merge_requests_events),"pm.expect([""false"", ""true""].includes(return_merge_requests_events)).to.be.true",post+projects_{id}_hooks,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,merge_requests_events,GitLab Project API
/projects/{id}/hooks&/projects/{id}/hooks&post&201():::EXIT,"return.note_events one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.note_events),"pm.expect([""false"", ""true""].includes(return_note_events)).to.be.true",post+projects_{id}_hooks,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,note_events,GitLab Project API
/projects/{id}/hooks&/projects/{id}/hooks&post&201():::EXIT,"return.pipeline_events one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.pipeline_events),"pm.expect([""false"", ""true""].includes(return_pipeline_events)).to.be.true",post+projects_{id}_hooks,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,pipeline_events,GitLab Project API
/projects/{id}/hooks&/projects/{id}/hooks&post&201():::EXIT,return.project_id is Numeric,daikon.inv.unary.string.IsNumeric,(return.project_id),"pm.expect(return_project_id).to.match(/^[+-]{0,1}(0|([0-9](\d*|\d{0,2}(,\d{3})*)))?(\.\d*[0-9])?$/)",post+projects_{id}_hooks,1.0,,,Indicates that the characters of a string variable are always numeric. Represented as x is Numeric.,,project_id,GitLab Project API
/projects/{id}/hooks&/projects/{id}/hooks&post&201():::EXIT,"return.push_events one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.push_events),"pm.expect([""false"", ""true""].includes(return_push_events)).to.be.true",post+projects_{id}_hooks,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,push_events,GitLab Project API
/projects/{id}/hooks&/projects/{id}/hooks&post&201():::EXIT,"return.tag_push_events one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.tag_push_events),"pm.expect([""false"", ""true""].includes(return_tag_push_events)).to.be.true",post+projects_{id}_hooks,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,tag_push_events,GitLab Project API
/projects/{id}/hooks&/projects/{id}/hooks&post&201():::EXIT,"return.wiki_page_events one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.wiki_page_events),"pm.expect([""false"", ""true""].includes(return_wiki_page_events)).to.be.true",post+projects_{id}_hooks,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,wiki_page_events,GitLab Project API
/projects/{id}/share&/projects/{id}/share&post&201():::EXIT,input.expires_at == return.expires_at,daikon.inv.binary.twoString.StringEqual,"(input.expires_at, return.expires_at)",pm.expect(input_expires_at).to.eql(return_expires_at),post+projects_{id}_share,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,expires_at,GitLab Project API
/projects/{id}/share&/projects/{id}/share&post&201():::EXIT,input.group_access == return.group_access,daikon.inv.binary.twoString.StringEqual,"(input.group_access, return.group_access)",pm.expect(input_group_access).to.eql(return_group_access),post+projects_{id}_share,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,group_access,GitLab Project API
/projects/{id}/share&/projects/{id}/share&post&201():::EXIT,return.group_id is Numeric,daikon.inv.unary.string.IsNumeric,(return.group_id),"pm.expect(return_group_id).to.match(/^[+-]{0,1}(0|([0-9](\d*|\d{0,2}(,\d{3})*)))?(\.\d*[0-9])?$/)",post+projects_{id}_share,1.0,,,Indicates that the characters of a string variable are always numeric. Represented as x is Numeric.,,group_id,GitLab Project API
/projects/{id}/share&/projects/{id}/share&post&201():::EXIT,return.id is Numeric,daikon.inv.unary.string.IsNumeric,(return.id),"pm.expect(return_id).to.match(/^[+-]{0,1}(0|([0-9](\d*|\d{0,2}(,\d{3})*)))?(\.\d*[0-9])?$/)",post+projects_{id}_share,1.0,,,Indicates that the characters of a string variable are always numeric. Represented as x is Numeric.,,id,GitLab Project API
/projects/{id}/share&/projects/{id}/share&post&201():::EXIT,return.project_id is Numeric,daikon.inv.unary.string.IsNumeric,(return.project_id),"pm.expect(return_project_id).to.match(/^[+-]{0,1}(0|([0-9](\d*|\d{0,2}(,\d{3})*)))?(\.\d*[0-9])?$/)",post+projects_{id}_share,1.0,,,Indicates that the characters of a string variable are always numeric. Represented as x is Numeric.,,project_id,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,input.id == return.id,daikon.inv.binary.twoScalar.IntEqual,"(input.id, return.id)",pm.expect(input_id).to.eql(return_id),post+projects_{id}_star,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,id,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,return.issues_enabled == return.public_jobs,daikon.inv.binary.twoScalar.IntEqual,"(return.issues_enabled, return.public_jobs)",pm.expect(return_issues_enabled).to.eql(return_public_jobs),post+projects_{id}_star,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,issues_enabled,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,return.issues_enabled == return.remove_source_branch_after_merge,daikon.inv.binary.twoScalar.IntEqual,"(return.issues_enabled, return.remove_source_branch_after_merge)",pm.expect(return_issues_enabled).to.eql(return_remove_source_branch_after_merge),post+projects_{id}_star,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,issues_enabled,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,return.issues_enabled == return.request_access_enabled,daikon.inv.binary.twoScalar.IntEqual,"(return.issues_enabled, return.request_access_enabled)",pm.expect(return_issues_enabled).to.eql(return_request_access_enabled),post+projects_{id}_star,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,issues_enabled,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,return.issues_enabled == return.autoclose_referenced_issues,daikon.inv.binary.twoScalar.IntEqual,"(return.issues_enabled, return.autoclose_referenced_issues)",pm.expect(return_issues_enabled).to.eql(return_autoclose_referenced_issues),post+projects_{id}_star,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,issues_enabled,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,return.open_issues_count == size(return.tag_list[]),daikon.inv.binary.twoScalar.IntEqual,"(return.open_issues_count, size(return.tag_list[..]))",pm.expect(return_open_issues_count).to.eql(return_tag_list_size_array),post+projects_{id}_star,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,tag_list,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,return.open_issues_count == size(return.tag_list[]),daikon.inv.binary.twoScalar.IntEqual,"(return.open_issues_count, size(return.tag_list[..]))",pm.expect(return_open_issues_count).to.eql(return_tag_list_size_array),post+projects_{id}_star,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,tag_list,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,return.open_issues_count == size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntEqual,"(return.open_issues_count, size(return.shared_with_groups[..]))",pm.expect(return_open_issues_count).to.eql(return_shared_with_groups_size_array),post+projects_{id}_star,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,open_issues_count,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,return.open_issues_count == size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntEqual,"(return.open_issues_count, size(return.shared_with_groups[..]))",pm.expect(return_open_issues_count).to.eql(return_shared_with_groups_size_array),post+projects_{id}_star,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,open_issues_count,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,return.merge_requests_enabled == return.can_create_merge_request_in,daikon.inv.binary.twoScalar.IntEqual,"(return.merge_requests_enabled, return.can_create_merge_request_in)",pm.expect(return_merge_requests_enabled).to.eql(return_can_create_merge_request_in),post+projects_{id}_star,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,merge_requests_enabled,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,return.resolve_outdated_diff_discussions == return.archived,daikon.inv.binary.twoScalar.IntEqual,"(return.resolve_outdated_diff_discussions, return.archived)",pm.expect(return_resolve_outdated_diff_discussions).to.eql(return_archived),post+projects_{id}_star,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,resolve_outdated_diff_discussions,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,return.resolve_outdated_diff_discussions == return.only_allow_merge_if_pipeline_succeeds,daikon.inv.binary.twoScalar.IntEqual,"(return.resolve_outdated_diff_discussions, return.only_allow_merge_if_pipeline_succeeds)",pm.expect(return_resolve_outdated_diff_discussions).to.eql(return_only_allow_merge_if_pipeline_succeeds),post+projects_{id}_star,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,resolve_outdated_diff_discussions,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,return.resolve_outdated_diff_discussions == return.only_allow_merge_if_all_discussions_are_resolved,daikon.inv.binary.twoScalar.IntEqual,"(return.resolve_outdated_diff_discussions, return.only_allow_merge_if_all_discussions_are_resolved)",pm.expect(return_resolve_outdated_diff_discussions).to.eql(return_only_allow_merge_if_all_discussions_are_resolved),post+projects_{id}_star,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,resolve_outdated_diff_discussions,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,return.created_at == return.last_activity_at,daikon.inv.binary.twoString.StringEqual,"(return.created_at, return.last_activity_at)",pm.expect(return_created_at).to.eql(return_last_activity_at),post+projects_{id}_star,,1.0,,Represents an invariant of == between two String scalars. Prints as x == y.,,created_at,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,return.creator_id == return.namespace.id,daikon.inv.binary.twoScalar.IntEqual,"(return.creator_id, return.namespace.id)",pm.expect(return_creator_id).to.eql(return_namespace_id),post+projects_{id}_star,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,creator_id,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,return.namespace.path == return.namespace.full_path,daikon.inv.binary.twoString.StringEqual,"(return.namespace.path, return.namespace.full_path)",pm.expect(return_namespace_path).to.eql(return_namespace_full_path),post+projects_{id}_star,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,namespace.path,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,"return.default_branch == ""main""",daikon.inv.unary.string.OneOfString,(return.default_branch),"pm.expect([""main""].includes(return_default_branch)).to.be.true",post+projects_{id}_star,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,default_branch,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,LENGTH(return.default_branch)==4,daikon.inv.unary.string.FixedLengthString,(return.default_branch),pm.expect(return_default_branch).to.have.length(4),post+projects_{id}_star,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,default_branch,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,"return.visibility one of { ""internal"", ""private"" }",daikon.inv.unary.string.OneOfString,(return.visibility),"pm.expect([""internal"", ""private""].includes(return_visibility)).to.be.true",post+projects_{id}_star,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,visibility,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,return.tag_list[] == [],daikon.inv.unary.stringsequence.OneOfStringSequence,(return.tag_list[..]),pm.expect([[]].some(value => pm.expect(return_tag_list_array).to.deep.equal(value).that)).to.be.true,post+projects_{id}_star,,1.0,,"Represents String[] variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,tag_list,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,return.issues_enabled == true,daikon.inv.unary.scalar.OneOfScalar,(return.issues_enabled),pm.expect(return_issues_enabled).to.eql(true),post+projects_{id}_star,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,issues_enabled,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,return.resolve_outdated_diff_discussions == false,daikon.inv.unary.scalar.OneOfScalar,(return.resolve_outdated_diff_discussions),pm.expect(return_resolve_outdated_diff_discussions).to.eql(false),post+projects_{id}_star,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,resolve_outdated_diff_discussions,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,LENGTH(return.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.created_at),pm.expect(return_created_at).to.have.length(24),post+projects_{id}_star,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,created_at,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.created_at),"pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",post+projects_{id}_star,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,created_at,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,return.creator_id == 1,daikon.inv.unary.scalar.OneOfScalar,(return.creator_id),pm.expect([1].includes(return_creator_id)).to.be.true,post+projects_{id}_star,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,creator_id,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,"return.namespace.name == ""Administrator""",daikon.inv.unary.string.OneOfString,(return.namespace.name),"pm.expect([""Administrator""].includes(return_namespace_name)).to.be.true",post+projects_{id}_star,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,namespace.name,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,LENGTH(return.namespace.name)==13,daikon.inv.unary.string.FixedLengthString,(return.namespace.name),pm.expect(return_namespace_name).to.have.length(13),post+projects_{id}_star,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,namespace.name,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,"return.namespace.path == ""root""",daikon.inv.unary.string.OneOfString,(return.namespace.path),"pm.expect([""root""].includes(return_namespace_path)).to.be.true",post+projects_{id}_star,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,namespace.path,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,LENGTH(return.namespace.path)==4,daikon.inv.unary.string.FixedLengthString,(return.namespace.path),pm.expect(return_namespace_path).to.have.length(4),post+projects_{id}_star,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,namespace.path,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,"return.namespace.kind == ""user""",daikon.inv.unary.string.OneOfString,(return.namespace.kind),"pm.expect([""user""].includes(return_namespace_kind)).to.be.true",post+projects_{id}_star,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,namespace.kind,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,LENGTH(return.namespace.kind)==4,daikon.inv.unary.string.FixedLengthString,(return.namespace.kind),pm.expect(return_namespace_kind).to.have.length(4),post+projects_{id}_star,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,namespace.kind,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,"return.import_status == ""finished""",daikon.inv.unary.string.OneOfString,(return.import_status),"pm.expect([""finished""].includes(return_import_status)).to.be.true",post+projects_{id}_star,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,import_status,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,LENGTH(return.import_status)==8,daikon.inv.unary.string.FixedLengthString,(return.import_status),pm.expect(return_import_status).to.have.length(8),post+projects_{id}_star,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,import_status,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,return.license == null,daikon.inv.unary.scalar.OneOfScalar,(return.license),pm.expect(return_license).to.be.null,post+projects_{id}_star,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,license,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,return.forks_count >= 0,daikon.inv.unary.scalar.LowerBound,(return.forks_count),pm.expect(return_forks_count).to.be.at.least(0),post+projects_{id}_star,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,forks_count,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,"return.star_count one of { 1, 2, 3 }",daikon.inv.unary.scalar.OneOfScalar,(return.star_count),"pm.expect([1, 2, 3].includes(return_star_count)).to.be.true",post+projects_{id}_star,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,star_count,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,return.shared_with_groups[] == [],daikon.inv.unary.sequence.OneOfSequence,(return.shared_with_groups[..]),pm.expect([[]].some(value => pm.expect(return_shared_with_groups_array).to.deep.equal(value).that)).to.be.true,post+projects_{id}_star,1.0,,,"Represents long[] variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,shared_with_groups,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,"return.merge_method == ""merge""",daikon.inv.unary.string.OneOfString,(return.merge_method),"pm.expect([""merge""].includes(return_merge_method)).to.be.true",post+projects_{id}_star,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,merge_method,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,LENGTH(return.merge_method)==5,daikon.inv.unary.string.FixedLengthString,(return.merge_method),pm.expect(return_merge_method).to.have.length(5),post+projects_{id}_star,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,merge_method,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,LENGTH(return._links.self)==42,daikon.inv.unary.string.FixedLengthString,(return._links.self),pm.expect(return__links_self).to.have.length(42),post+projects_{id}_star,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.self,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,LENGTH(return._links.issues)==49,daikon.inv.unary.string.FixedLengthString,(return._links.issues),pm.expect(return__links_issues).to.have.length(49),post+projects_{id}_star,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.issues,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,LENGTH(return._links.merge_requests)==57,daikon.inv.unary.string.FixedLengthString,(return._links.merge_requests),pm.expect(return__links_merge_requests).to.have.length(57),post+projects_{id}_star,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.merge_requests,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,LENGTH(return._links.repo_branches)==62,daikon.inv.unary.string.FixedLengthString,(return._links.repo_branches),pm.expect(return__links_repo_branches).to.have.length(62),post+projects_{id}_star,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.repo_branches,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,LENGTH(return._links.labels)==49,daikon.inv.unary.string.FixedLengthString,(return._links.labels),pm.expect(return__links_labels).to.have.length(49),post+projects_{id}_star,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.labels,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,LENGTH(return._links.events)==49,daikon.inv.unary.string.FixedLengthString,(return._links.events),pm.expect(return__links_events).to.have.length(49),post+projects_{id}_star,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.events,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,LENGTH(return._links.members)==50,daikon.inv.unary.string.FixedLengthString,(return._links.members),pm.expect(return__links_members).to.have.length(50),post+projects_{id}_star,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.members,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,return.default_branch is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.default_branch, return.readme_url)",pm.expect(return_readme_url.includes(return_default_branch)).to.be.true,post+projects_{id}_star,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,default_branch,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,return.path_with_namespace is a substring of return.ssh_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.ssh_url_to_repo, return.path_with_namespace)",pm.expect(return_ssh_url_to_repo.includes(return_path_with_namespace)).to.be.true,post+projects_{id}_star,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,return.web_url is a substring of return.http_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.http_url_to_repo, return.web_url)",pm.expect(return_http_url_to_repo.includes(return_web_url)).to.be.true,post+projects_{id}_star,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,web_url,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,return.web_url is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.readme_url)",pm.expect(return_readme_url.includes(return_web_url)).to.be.true,post+projects_{id}_star,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,web_url,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,return.path_with_namespace is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.path_with_namespace)",pm.expect(return_web_url.includes(return_path_with_namespace)).to.be.true,post+projects_{id}_star,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,return.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.name, return.name_with_namespace)",pm.expect(return_name_with_namespace.includes(return_name)).to.be.true,post+projects_{id}_star,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,name_with_namespace,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,return.namespace.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.name_with_namespace, return.namespace.name)",pm.expect(return_name_with_namespace.includes(return_namespace_name)).to.be.true,post+projects_{id}_star,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,name_with_namespace,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,return.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path, return.path_with_namespace)",pm.expect(return_path_with_namespace.includes(return_path)).to.be.true,post+projects_{id}_star,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,return.namespace.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path_with_namespace, return.namespace.path)",pm.expect(return_path_with_namespace.includes(return_namespace_path)).to.be.true,post+projects_{id}_star,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,return.open_issues_count <= return.forks_count,daikon.inv.binary.twoScalar.IntLessEqual,"(return.open_issues_count, return.forks_count)",pm.expect(return_open_issues_count).to.be.lte(return_forks_count),post+projects_{id}_star,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,open_issues_count,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,return.creator_id <= return.star_count,daikon.inv.binary.twoScalar.IntLessEqual,"(return.creator_id, return.star_count)",pm.expect(return_creator_id).to.be.lte(return_star_count),post+projects_{id}_star,,1.0,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,creator_id,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,return.merge_method is a substring of return._links.merge_requests,daikon.inv.binary.twoString.StdString$SubString,"(return.merge_method, return._links.merge_requests)",pm.expect(return__links_merge_requests.includes(return_merge_method)).to.be.true,post+projects_{id}_star,,1.0,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,merge_method,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,return._links.self is a substring of return._links.issues,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.issues)",pm.expect(return__links_issues.includes(return__links_self)).to.be.true,post+projects_{id}_star,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,return._links.self is a substring of return._links.merge_requests,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.merge_requests)",pm.expect(return__links_merge_requests.includes(return__links_self)).to.be.true,post+projects_{id}_star,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,return._links.self is a substring of return._links.repo_branches,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.repo_branches)",pm.expect(return__links_repo_branches.includes(return__links_self)).to.be.true,post+projects_{id}_star,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,return._links.self is a substring of return._links.labels,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.labels)",pm.expect(return__links_labels.includes(return__links_self)).to.be.true,post+projects_{id}_star,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,return._links.self is a substring of return._links.events,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.events)",pm.expect(return__links_events.includes(return__links_self)).to.be.true,post+projects_{id}_star,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT,return._links.self is a substring of return._links.members,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.members)",pm.expect(return__links_members.includes(return__links_self)).to.be.true,post+projects_{id}_star,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,input.id == return.id,daikon.inv.binary.twoScalar.IntEqual,"(input.id, return.id)",pm.expect(input_id).to.eql(return_id),post+projects_{id}_unarchive,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,id,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,return.owner.id == return.creator_id,daikon.inv.binary.twoScalar.IntEqual,"(return.owner.id, return.creator_id)",pm.expect(return_owner_id).to.eql(return_creator_id),post+projects_{id}_unarchive,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,owner.id,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,return.owner.name == return.namespace.name,daikon.inv.binary.twoString.StringEqual,"(return.owner.name, return.namespace.name)",pm.expect(return_owner_name).to.eql(return_namespace_name),post+projects_{id}_unarchive,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,owner.name,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,return.issues_enabled == return.ci_forward_deployment_enabled,daikon.inv.binary.twoScalar.IntEqual,"(return.issues_enabled, return.ci_forward_deployment_enabled)",pm.expect(return_issues_enabled).to.eql(return_ci_forward_deployment_enabled),post+projects_{id}_unarchive,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,issues_enabled,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,return.issues_enabled == return.public_jobs,daikon.inv.binary.twoScalar.IntEqual,"(return.issues_enabled, return.public_jobs)",pm.expect(return_issues_enabled).to.eql(return_public_jobs),post+projects_{id}_unarchive,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,issues_enabled,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,return.issues_enabled == return.remove_source_branch_after_merge,daikon.inv.binary.twoScalar.IntEqual,"(return.issues_enabled, return.remove_source_branch_after_merge)",pm.expect(return_issues_enabled).to.eql(return_remove_source_branch_after_merge),post+projects_{id}_unarchive,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,issues_enabled,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,return.issues_enabled == return.request_access_enabled,daikon.inv.binary.twoScalar.IntEqual,"(return.issues_enabled, return.request_access_enabled)",pm.expect(return_issues_enabled).to.eql(return_request_access_enabled),post+projects_{id}_unarchive,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,issues_enabled,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,return.issues_enabled == return.autoclose_referenced_issues,daikon.inv.binary.twoScalar.IntEqual,"(return.issues_enabled, return.autoclose_referenced_issues)",pm.expect(return_issues_enabled).to.eql(return_autoclose_referenced_issues),post+projects_{id}_unarchive,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,issues_enabled,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,return.open_issues_count == size(return.tag_list[]),daikon.inv.binary.twoScalar.IntEqual,"(return.open_issues_count, size(return.tag_list[..]))",pm.expect(return_open_issues_count).to.eql(return_tag_list_size_array),post+projects_{id}_unarchive,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,tag_list,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,return.open_issues_count == size(return.tag_list[]),daikon.inv.binary.twoScalar.IntEqual,"(return.open_issues_count, size(return.tag_list[..]))",pm.expect(return_open_issues_count).to.eql(return_tag_list_size_array),post+projects_{id}_unarchive,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,tag_list,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,return.open_issues_count == size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntEqual,"(return.open_issues_count, size(return.shared_with_groups[..]))",pm.expect(return_open_issues_count).to.eql(return_shared_with_groups_size_array),post+projects_{id}_unarchive,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,open_issues_count,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,return.open_issues_count == size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntEqual,"(return.open_issues_count, size(return.shared_with_groups[..]))",pm.expect(return_open_issues_count).to.eql(return_shared_with_groups_size_array),post+projects_{id}_unarchive,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,open_issues_count,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,return.merge_requests_enabled == return.can_create_merge_request_in,daikon.inv.binary.twoScalar.IntEqual,"(return.merge_requests_enabled, return.can_create_merge_request_in)",pm.expect(return_merge_requests_enabled).to.eql(return_can_create_merge_request_in),post+projects_{id}_unarchive,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,merge_requests_enabled,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,return.resolve_outdated_diff_discussions == return.archived,daikon.inv.binary.twoScalar.IntEqual,"(return.resolve_outdated_diff_discussions, return.archived)",pm.expect(return_resolve_outdated_diff_discussions).to.eql(return_archived),post+projects_{id}_unarchive,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,resolve_outdated_diff_discussions,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,return.resolve_outdated_diff_discussions == return.only_allow_merge_if_pipeline_succeeds,daikon.inv.binary.twoScalar.IntEqual,"(return.resolve_outdated_diff_discussions, return.only_allow_merge_if_pipeline_succeeds)",pm.expect(return_resolve_outdated_diff_discussions).to.eql(return_only_allow_merge_if_pipeline_succeeds),post+projects_{id}_unarchive,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,resolve_outdated_diff_discussions,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,return.resolve_outdated_diff_discussions == return.only_allow_merge_if_all_discussions_are_resolved,daikon.inv.binary.twoScalar.IntEqual,"(return.resolve_outdated_diff_discussions, return.only_allow_merge_if_all_discussions_are_resolved)",pm.expect(return_resolve_outdated_diff_discussions).to.eql(return_only_allow_merge_if_all_discussions_are_resolved),post+projects_{id}_unarchive,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,resolve_outdated_diff_discussions,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,return.created_at == return.last_activity_at,daikon.inv.binary.twoString.StringEqual,"(return.created_at, return.last_activity_at)",pm.expect(return_created_at).to.eql(return_last_activity_at),post+projects_{id}_unarchive,,1.0,,Represents an invariant of == between two String scalars. Prints as x == y.,,created_at,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,return.creator_id == return.namespace.id,daikon.inv.binary.twoScalar.IntEqual,"(return.creator_id, return.namespace.id)",pm.expect(return_creator_id).to.eql(return_namespace_id),post+projects_{id}_unarchive,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,creator_id,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,return.namespace.path == return.namespace.full_path,daikon.inv.binary.twoString.StringEqual,"(return.namespace.path, return.namespace.full_path)",pm.expect(return_namespace_path).to.eql(return_namespace_full_path),post+projects_{id}_unarchive,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,namespace.path,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,"return.default_branch one of { ""classified"", ""main"" }",daikon.inv.unary.string.OneOfString,(return.default_branch),"pm.expect([""classified"", ""main""].includes(return_default_branch)).to.be.true",post+projects_{id}_unarchive,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,default_branch,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,"return.visibility one of { ""internal"", ""private"", ""public"" }",daikon.inv.unary.string.OneOfString,(return.visibility),"pm.expect([""internal"", ""private"", ""public""].includes(return_visibility)).to.be.true",post+projects_{id}_unarchive,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,visibility,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,return.tag_list[] == [],daikon.inv.unary.stringsequence.OneOfStringSequence,(return.tag_list[..]),pm.expect([[]].some(value => pm.expect(return_tag_list_array).to.deep.equal(value).that)).to.be.true,post+projects_{id}_unarchive,,1.0,,"Represents String[] variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,tag_list,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,"return.owner.name == ""Administrator""",daikon.inv.unary.string.OneOfString,(return.owner.name),"pm.expect([""Administrator""].includes(return_owner_name)).to.be.true",post+projects_{id}_unarchive,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,owner.name,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,LENGTH(return.owner.name)==13,daikon.inv.unary.string.FixedLengthString,(return.owner.name),pm.expect(return_owner_name).to.have.length(13),post+projects_{id}_unarchive,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,owner.name,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,return.issues_enabled == true,daikon.inv.unary.scalar.OneOfScalar,(return.issues_enabled),pm.expect(return_issues_enabled).to.eql(true),post+projects_{id}_unarchive,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,issues_enabled,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,return.resolve_outdated_diff_discussions == false,daikon.inv.unary.scalar.OneOfScalar,(return.resolve_outdated_diff_discussions),pm.expect(return_resolve_outdated_diff_discussions).to.eql(false),post+projects_{id}_unarchive,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,resolve_outdated_diff_discussions,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,LENGTH(return.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.created_at),pm.expect(return_created_at).to.have.length(24),post+projects_{id}_unarchive,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,created_at,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.created_at),"pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",post+projects_{id}_unarchive,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,created_at,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,return.creator_id == 1,daikon.inv.unary.scalar.OneOfScalar,(return.creator_id),pm.expect([1].includes(return_creator_id)).to.be.true,post+projects_{id}_unarchive,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,creator_id,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,"return.namespace.path == ""root""",daikon.inv.unary.string.OneOfString,(return.namespace.path),"pm.expect([""root""].includes(return_namespace_path)).to.be.true",post+projects_{id}_unarchive,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,namespace.path,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,LENGTH(return.namespace.path)==4,daikon.inv.unary.string.FixedLengthString,(return.namespace.path),pm.expect(return_namespace_path).to.have.length(4),post+projects_{id}_unarchive,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,namespace.path,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,"return.namespace.kind == ""user""",daikon.inv.unary.string.OneOfString,(return.namespace.kind),"pm.expect([""user""].includes(return_namespace_kind)).to.be.true",post+projects_{id}_unarchive,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,namespace.kind,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,LENGTH(return.namespace.kind)==4,daikon.inv.unary.string.FixedLengthString,(return.namespace.kind),pm.expect(return_namespace_kind).to.have.length(4),post+projects_{id}_unarchive,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,namespace.kind,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,"return.import_status == ""finished""",daikon.inv.unary.string.OneOfString,(return.import_status),"pm.expect([""finished""].includes(return_import_status)).to.be.true",post+projects_{id}_unarchive,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,import_status,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,LENGTH(return.import_status)==8,daikon.inv.unary.string.FixedLengthString,(return.import_status),pm.expect(return_import_status).to.have.length(8),post+projects_{id}_unarchive,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,import_status,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,return.permissions == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions),pm.expect(return_permissions).to.be.null,post+projects_{id}_unarchive,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,permissions,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,return.permissions.project_access == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.project_access),pm.expect(return_permissions_project_access).to.be.null,post+projects_{id}_unarchive,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,permissions.project_access,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,return.permissions.group_access == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.group_access),pm.expect(return_permissions_group_access).to.be.null,post+projects_{id}_unarchive,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,permissions.group_access,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,return.license == null,daikon.inv.unary.scalar.OneOfScalar,(return.license),pm.expect(return_license).to.be.null,post+projects_{id}_unarchive,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,license,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,"return.forks_count one of { 0, 1 }",daikon.inv.unary.scalar.OneOfScalar,(return.forks_count),"pm.expect([0, 1, 0].includes(return_forks_count)).to.be.true",post+projects_{id}_unarchive,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,forks_count,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,"return.star_count one of { 0, 1, 2 }",daikon.inv.unary.scalar.OneOfScalar,(return.star_count),"pm.expect([0, 1, 2].includes(return_star_count)).to.be.true",post+projects_{id}_unarchive,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,star_count,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,"return.ci_default_git_depth one of { 20, 30, 983 }",daikon.inv.unary.scalar.OneOfScalar,(return.ci_default_git_depth),"pm.expect([20, 30, 983].includes(return_ci_default_git_depth)).to.be.true",post+projects_{id}_unarchive,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,ci_default_git_depth,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,return.shared_with_groups[] == [],daikon.inv.unary.sequence.OneOfSequence,(return.shared_with_groups[..]),pm.expect([[]].some(value => pm.expect(return_shared_with_groups_array).to.deep.equal(value).that)).to.be.true,post+projects_{id}_unarchive,1.0,,,"Represents long[] variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,shared_with_groups,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,"return.merge_method == ""merge""",daikon.inv.unary.string.OneOfString,(return.merge_method),"pm.expect([""merge""].includes(return_merge_method)).to.be.true",post+projects_{id}_unarchive,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,merge_method,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,LENGTH(return.merge_method)==5,daikon.inv.unary.string.FixedLengthString,(return.merge_method),pm.expect(return_merge_method).to.have.length(5),post+projects_{id}_unarchive,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,merge_method,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,LENGTH(return._links.self)==42,daikon.inv.unary.string.FixedLengthString,(return._links.self),pm.expect(return__links_self).to.have.length(42),post+projects_{id}_unarchive,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.self,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,LENGTH(return._links.issues)==49,daikon.inv.unary.string.FixedLengthString,(return._links.issues),pm.expect(return__links_issues).to.have.length(49),post+projects_{id}_unarchive,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.issues,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,LENGTH(return._links.merge_requests)==57,daikon.inv.unary.string.FixedLengthString,(return._links.merge_requests),pm.expect(return__links_merge_requests).to.have.length(57),post+projects_{id}_unarchive,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.merge_requests,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,LENGTH(return._links.repo_branches)==62,daikon.inv.unary.string.FixedLengthString,(return._links.repo_branches),pm.expect(return__links_repo_branches).to.have.length(62),post+projects_{id}_unarchive,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.repo_branches,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,LENGTH(return._links.labels)==49,daikon.inv.unary.string.FixedLengthString,(return._links.labels),pm.expect(return__links_labels).to.have.length(49),post+projects_{id}_unarchive,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.labels,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,LENGTH(return._links.events)==49,daikon.inv.unary.string.FixedLengthString,(return._links.events),pm.expect(return__links_events).to.have.length(49),post+projects_{id}_unarchive,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.events,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,LENGTH(return._links.members)==50,daikon.inv.unary.string.FixedLengthString,(return._links.members),pm.expect(return__links_members).to.have.length(50),post+projects_{id}_unarchive,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.members,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,return.default_branch is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.default_branch, return.readme_url)",pm.expect(return_readme_url.includes(return_default_branch)).to.be.true,post+projects_{id}_unarchive,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,default_branch,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,return.path_with_namespace is a substring of return.ssh_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.ssh_url_to_repo, return.path_with_namespace)",pm.expect(return_ssh_url_to_repo.includes(return_path_with_namespace)).to.be.true,post+projects_{id}_unarchive,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,return.web_url is a substring of return.http_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.http_url_to_repo, return.web_url)",pm.expect(return_http_url_to_repo.includes(return_web_url)).to.be.true,post+projects_{id}_unarchive,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,web_url,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,return.web_url is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.readme_url)",pm.expect(return_readme_url.includes(return_web_url)).to.be.true,post+projects_{id}_unarchive,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,web_url,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,return.path_with_namespace is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.path_with_namespace)",pm.expect(return_web_url.includes(return_path_with_namespace)).to.be.true,post+projects_{id}_unarchive,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,return.owner.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.owner.name, return.name_with_namespace)",pm.expect(return_name_with_namespace.includes(return_owner_name)).to.be.true,post+projects_{id}_unarchive,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,name_with_namespace,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,return.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.name, return.name_with_namespace)",pm.expect(return_name_with_namespace.includes(return_name)).to.be.true,post+projects_{id}_unarchive,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,name_with_namespace,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,return.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path, return.path_with_namespace)",pm.expect(return_path_with_namespace.includes(return_path)).to.be.true,post+projects_{id}_unarchive,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,return.namespace.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path_with_namespace, return.namespace.path)",pm.expect(return_path_with_namespace.includes(return_namespace_path)).to.be.true,post+projects_{id}_unarchive,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,return.open_issues_count <= return.forks_count,daikon.inv.binary.twoScalar.IntLessEqual,"(return.open_issues_count, return.forks_count)",pm.expect(return_open_issues_count).to.be.lte(return_forks_count),post+projects_{id}_unarchive,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,open_issues_count,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,return.open_issues_count <= return.star_count,daikon.inv.binary.twoScalar.IntLessEqual,"(return.open_issues_count, return.star_count)",pm.expect(return_open_issues_count).to.be.lte(return_star_count),post+projects_{id}_unarchive,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,open_issues_count,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,return.creator_id >= return.forks_count,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.creator_id, return.forks_count)",pm.expect(return_creator_id).to.be.at.least(return_forks_count),post+projects_{id}_unarchive,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,creator_id,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,return.merge_method is a substring of return._links.merge_requests,daikon.inv.binary.twoString.StdString$SubString,"(return.merge_method, return._links.merge_requests)",pm.expect(return__links_merge_requests.includes(return_merge_method)).to.be.true,post+projects_{id}_unarchive,,1.0,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,merge_method,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,return._links.self is a substring of return._links.issues,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.issues)",pm.expect(return__links_issues.includes(return__links_self)).to.be.true,post+projects_{id}_unarchive,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,return._links.self is a substring of return._links.merge_requests,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.merge_requests)",pm.expect(return__links_merge_requests.includes(return__links_self)).to.be.true,post+projects_{id}_unarchive,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,return._links.self is a substring of return._links.repo_branches,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.repo_branches)",pm.expect(return__links_repo_branches.includes(return__links_self)).to.be.true,post+projects_{id}_unarchive,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,return._links.self is a substring of return._links.labels,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.labels)",pm.expect(return__links_labels.includes(return__links_self)).to.be.true,post+projects_{id}_unarchive,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,return._links.self is a substring of return._links.events,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.events)",pm.expect(return__links_events.includes(return__links_self)).to.be.true,post+projects_{id}_unarchive,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT,return._links.self is a substring of return._links.members,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.members)",pm.expect(return__links_members.includes(return__links_self)).to.be.true,post+projects_{id}_unarchive,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,input.id == return.id,daikon.inv.binary.twoScalar.IntEqual,"(input.id, return.id)",pm.expect(input_id).to.eql(return_id),post+projects_{id}_unstar,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,id,GitLab Project API
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,return.open_issues_count == size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntEqual,"(return.open_issues_count, size(return.shared_with_groups[..]))",pm.expect(return_open_issues_count).to.eql(return_shared_with_groups_size_array),post+projects_{id}_unstar,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,open_issues_count,GitLab Project API
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,return.merge_requests_enabled == return.can_create_merge_request_in,daikon.inv.binary.twoScalar.IntEqual,"(return.merge_requests_enabled, return.can_create_merge_request_in)",pm.expect(return_merge_requests_enabled).to.eql(return_can_create_merge_request_in),post+projects_{id}_unstar,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,merge_requests_enabled,GitLab Project API
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,return.created_at == return.last_activity_at,daikon.inv.binary.twoString.StringEqual,"(return.created_at, return.last_activity_at)",pm.expect(return_created_at).to.eql(return_last_activity_at),post+projects_{id}_unstar,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,created_at,GitLab Project API
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,return.namespace.path == return.namespace.full_path,daikon.inv.binary.twoString.StringEqual,"(return.namespace.path, return.namespace.full_path)",pm.expect(return_namespace_path).to.eql(return_namespace_full_path),post+projects_{id}_unstar,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,namespace.path,GitLab Project API
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,"return.default_branch one of { ""classified"", ""main"", ""master"" }",daikon.inv.unary.string.OneOfString,(return.default_branch),"pm.expect([""classified"", ""main"", ""master""].includes(return_default_branch)).to.be.true",post+projects_{id}_unstar,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,default_branch,GitLab Project API
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,"return.visibility one of { ""internal"", ""private"", ""public"" }",daikon.inv.unary.string.OneOfString,(return.visibility),"pm.expect([""internal"", ""private"", ""public""].includes(return_visibility)).to.be.true",post+projects_{id}_unstar,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,visibility,GitLab Project API
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,return.open_issues_count == 0,daikon.inv.unary.scalar.OneOfScalar,(return.open_issues_count),pm.expect([0].includes(return_open_issues_count)).to.be.true,post+projects_{id}_unstar,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,open_issues_count,GitLab Project API
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,LENGTH(return.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.created_at),pm.expect(return_created_at).to.have.length(24),post+projects_{id}_unstar,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,created_at,GitLab Project API
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.created_at),"pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",post+projects_{id}_unstar,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,created_at,GitLab Project API
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,"return.creator_id one of { 1, 9, 11 }",daikon.inv.unary.scalar.OneOfScalar,(return.creator_id),"pm.expect([1, 9, 11].includes(return_creator_id)).to.be.true",post+projects_{id}_unstar,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,creator_id,GitLab Project API
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,"return.namespace.id one of { 1, 170, 361 }",daikon.inv.unary.scalar.OneOfScalar,(return.namespace.id),"pm.expect([1, 170, 361].includes(return_namespace_id)).to.be.true",post+projects_{id}_unstar,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,namespace.id,GitLab Project API
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,"return.namespace.name one of { ""Administrator"", ""GitLab Alert Bot"", ""alice"" }",daikon.inv.unary.string.OneOfString,(return.namespace.name),"pm.expect([""Administrator"", ""GitLab Alert Bot"", ""alice""].includes(return_namespace_name)).to.be.true",post+projects_{id}_unstar,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,namespace.name,GitLab Project API
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,"return.namespace.path one of { ""alert-bot"", ""alice"", ""root"" }",daikon.inv.unary.string.OneOfString,(return.namespace.path),"pm.expect([""alert-bot"", ""alice"", ""root""].includes(return_namespace_path)).to.be.true",post+projects_{id}_unstar,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,namespace.path,GitLab Project API
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,"return.namespace.kind == ""user""",daikon.inv.unary.string.OneOfString,(return.namespace.kind),"pm.expect([""user""].includes(return_namespace_kind)).to.be.true",post+projects_{id}_unstar,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,namespace.kind,GitLab Project API
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,LENGTH(return.namespace.kind)==4,daikon.inv.unary.string.FixedLengthString,(return.namespace.kind),pm.expect(return_namespace_kind).to.have.length(4),post+projects_{id}_unstar,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,namespace.kind,GitLab Project API
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,"return.import_status one of { ""finished"", ""none"" }",daikon.inv.unary.string.OneOfString,(return.import_status),"pm.expect([""finished"", ""none""].includes(return_import_status)).to.be.true",post+projects_{id}_unstar,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,import_status,GitLab Project API
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,return.archived == false,daikon.inv.unary.scalar.OneOfScalar,(return.archived),pm.expect(return_archived).to.eql(false),post+projects_{id}_unstar,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,archived,GitLab Project API
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,return.license == null,daikon.inv.unary.scalar.OneOfScalar,(return.license),pm.expect(return_license).to.be.null,post+projects_{id}_unstar,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,license,GitLab Project API
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,return.forks_count >= 0,daikon.inv.unary.scalar.LowerBound,(return.forks_count),pm.expect(return_forks_count).to.be.at.least(0),post+projects_{id}_unstar,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,forks_count,GitLab Project API
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,return.star_count >= 0,daikon.inv.unary.scalar.LowerBound,(return.star_count),pm.expect(return_star_count).to.be.at.least(0),post+projects_{id}_unstar,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,star_count,GitLab Project API
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,return.shared_with_groups[] == [],daikon.inv.unary.sequence.OneOfSequence,(return.shared_with_groups[..]),pm.expect([[]].some(value => pm.expect(return_shared_with_groups_array).to.deep.equal(value).that)).to.be.true,post+projects_{id}_unstar,,1.0,,"Represents long[] variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,shared_with_groups,GitLab Project API
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,"return.merge_method one of { ""ff"", ""merge"", ""rebase_merge"" }",daikon.inv.unary.string.OneOfString,(return.merge_method),"pm.expect([""ff"", ""merge"", ""rebase_merge""].includes(return_merge_method)).to.be.true",post+projects_{id}_unstar,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,merge_method,GitLab Project API
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,LENGTH(return._links.self)==42,daikon.inv.unary.string.FixedLengthString,(return._links.self),pm.expect(return__links_self).to.have.length(42),post+projects_{id}_unstar,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.self,GitLab Project API
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,LENGTH(return._links.issues)==49,daikon.inv.unary.string.FixedLengthString,(return._links.issues),pm.expect(return__links_issues).to.have.length(49),post+projects_{id}_unstar,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.issues,GitLab Project API
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,LENGTH(return._links.merge_requests)==57,daikon.inv.unary.string.FixedLengthString,(return._links.merge_requests),pm.expect(return__links_merge_requests).to.have.length(57),post+projects_{id}_unstar,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.merge_requests,GitLab Project API
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,LENGTH(return._links.repo_branches)==62,daikon.inv.unary.string.FixedLengthString,(return._links.repo_branches),pm.expect(return__links_repo_branches).to.have.length(62),post+projects_{id}_unstar,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.repo_branches,GitLab Project API
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,LENGTH(return._links.labels)==49,daikon.inv.unary.string.FixedLengthString,(return._links.labels),pm.expect(return__links_labels).to.have.length(49),post+projects_{id}_unstar,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.labels,GitLab Project API
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,LENGTH(return._links.events)==49,daikon.inv.unary.string.FixedLengthString,(return._links.events),pm.expect(return__links_events).to.have.length(49),post+projects_{id}_unstar,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.events,GitLab Project API
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,LENGTH(return._links.members)==50,daikon.inv.unary.string.FixedLengthString,(return._links.members),pm.expect(return__links_members).to.have.length(50),post+projects_{id}_unstar,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.members,GitLab Project API
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,"size(return.tag_list[]) one of { 0, 1 }",daikon.inv.unary.scalar.OneOfScalar,(size(return.tag_list[..])),"pm.expect([0, 1, 0].includes(return_tag_list_size_array)).to.be.true",post+projects_{id}_unstar,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,tag_list,GitLab Project API
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,input.id > return.namespace.id,daikon.inv.binary.twoScalar.IntGreaterThan,"(input.id, return.namespace.id)",pm.expect(input_id).to.be.greaterThan(return_namespace_id),post+projects_{id}_unstar,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,namespace.id,GitLab Project API
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,return.default_branch is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.default_branch, return.readme_url)",pm.expect(return_readme_url.includes(return_default_branch)).to.be.true,post+projects_{id}_unstar,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,default_branch,GitLab Project API
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,return.path_with_namespace is a substring of return.ssh_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.ssh_url_to_repo, return.path_with_namespace)",pm.expect(return_ssh_url_to_repo.includes(return_path_with_namespace)).to.be.true,post+projects_{id}_unstar,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Project API
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,return.web_url is a substring of return.http_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.http_url_to_repo, return.web_url)",pm.expect(return_http_url_to_repo.includes(return_web_url)).to.be.true,post+projects_{id}_unstar,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,web_url,GitLab Project API
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,return.web_url is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.readme_url)",pm.expect(return_readme_url.includes(return_web_url)).to.be.true,post+projects_{id}_unstar,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,web_url,GitLab Project API
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,return.path_with_namespace is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.path_with_namespace)",pm.expect(return_web_url.includes(return_path_with_namespace)).to.be.true,post+projects_{id}_unstar,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Project API
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,return.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.name, return.name_with_namespace)",pm.expect(return_name_with_namespace.includes(return_name)).to.be.true,post+projects_{id}_unstar,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,name_with_namespace,GitLab Project API
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,return.namespace.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.name_with_namespace, return.namespace.name)",pm.expect(return_name_with_namespace.includes(return_namespace_name)).to.be.true,post+projects_{id}_unstar,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,name_with_namespace,GitLab Project API
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,return.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path, return.path_with_namespace)",pm.expect(return_path_with_namespace.includes(return_path)).to.be.true,post+projects_{id}_unstar,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Project API
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,return.namespace.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path_with_namespace, return.namespace.path)",pm.expect(return_path_with_namespace.includes(return_namespace_path)).to.be.true,post+projects_{id}_unstar,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Project API
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,return.open_issues_count <= return.forks_count,daikon.inv.binary.twoScalar.IntLessEqual,"(return.open_issues_count, return.forks_count)",pm.expect(return_open_issues_count).to.be.lte(return_forks_count),post+projects_{id}_unstar,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,open_issues_count,GitLab Project API
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,return.open_issues_count <= return.star_count,daikon.inv.binary.twoScalar.IntLessEqual,"(return.open_issues_count, return.star_count)",pm.expect(return_open_issues_count).to.be.lte(return_star_count),post+projects_{id}_unstar,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,open_issues_count,GitLab Project API
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,return.open_issues_count <= size(return.tag_list[]),daikon.inv.binary.twoScalar.IntLessEqual,"(return.open_issues_count, size(return.tag_list[..]))",pm.expect(return_open_issues_count).to.be.lte(return_tag_list_size_array),post+projects_{id}_unstar,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,tag_list,GitLab Project API
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,return.creator_id <= return.namespace.id,daikon.inv.binary.twoScalar.IntLessEqual,"(return.creator_id, return.namespace.id)",pm.expect(return_creator_id).to.be.lte(return_namespace_id),post+projects_{id}_unstar,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,creator_id,GitLab Project API
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,return.creator_id >= size(return.tag_list[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.creator_id, size(return.tag_list[..]))",pm.expect(return_creator_id).to.be.at.least(return_tag_list_size_array),post+projects_{id}_unstar,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,tag_list,GitLab Project API
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,return.namespace.id >= size(return.tag_list[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.namespace.id, size(return.tag_list[..]))",pm.expect(return_namespace_id).to.be.at.least(return_tag_list_size_array),post+projects_{id}_unstar,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,tag_list,GitLab Project API
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,return.forks_count >= size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.forks_count, size(return.shared_with_groups[..]))",pm.expect(return_forks_count).to.be.at.least(return_shared_with_groups_size_array),post+projects_{id}_unstar,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,forks_count,GitLab Project API
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,return.star_count >= size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.star_count, size(return.shared_with_groups[..]))",pm.expect(return_star_count).to.be.at.least(return_shared_with_groups_size_array),post+projects_{id}_unstar,,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,star_count,GitLab Project API
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,return._links.self is a substring of return._links.issues,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.issues)",pm.expect(return__links_issues.includes(return__links_self)).to.be.true,post+projects_{id}_unstar,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,return._links.self is a substring of return._links.merge_requests,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.merge_requests)",pm.expect(return__links_merge_requests.includes(return__links_self)).to.be.true,post+projects_{id}_unstar,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,return._links.self is a substring of return._links.repo_branches,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.repo_branches)",pm.expect(return__links_repo_branches.includes(return__links_self)).to.be.true,post+projects_{id}_unstar,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,return._links.self is a substring of return._links.labels,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.labels)",pm.expect(return__links_labels.includes(return__links_self)).to.be.true,post+projects_{id}_unstar,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,return._links.self is a substring of return._links.events,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.events)",pm.expect(return__links_events.includes(return__links_self)).to.be.true,post+projects_{id}_unstar,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,return._links.self is a substring of return._links.members,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.members)",pm.expect(return__links_members.includes(return__links_self)).to.be.true,post+projects_{id}_unstar,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT,size(return.tag_list[]) >= size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(size(return.tag_list[..]), size(return.shared_with_groups[..]))",pm.expect(return_tag_list_size_array).to.be.at.least(return_shared_with_groups_size_array),post+projects_{id}_unstar,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,tag_list,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,input.allow_merge_on_skipped_pipeline == return.allow_merge_on_skipped_pipeline,daikon.inv.binary.twoScalar.IntEqual,"(input.allow_merge_on_skipped_pipeline, return.allow_merge_on_skipped_pipeline)",pm.expect(input_allow_merge_on_skipped_pipeline).to.eql(return_allow_merge_on_skipped_pipeline),post+projects_user_{user_id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,allow_merge_on_skipped_pipeline,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,input.auto_devops_deploy_strategy == return.auto_devops_deploy_strategy,daikon.inv.binary.twoString.StringEqual,"(input.auto_devops_deploy_strategy, return.auto_devops_deploy_strategy)",pm.expect(input_auto_devops_deploy_strategy).to.eql(return_auto_devops_deploy_strategy),post+projects_user_{user_id},1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,auto_devops_deploy_strategy,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,input.auto_devops_enabled == return.auto_devops_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.auto_devops_enabled, return.auto_devops_enabled)",pm.expect(input_auto_devops_enabled).to.eql(return_auto_devops_enabled),post+projects_user_{user_id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,auto_devops_enabled,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,input.autoclose_referenced_issues == return.autoclose_referenced_issues,daikon.inv.binary.twoScalar.IntEqual,"(input.autoclose_referenced_issues, return.autoclose_referenced_issues)",pm.expect(input_autoclose_referenced_issues).to.eql(return_autoclose_referenced_issues),post+projects_user_{user_id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,autoclose_referenced_issues,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,input.container_registry_enabled == return.container_registry_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.container_registry_enabled, return.container_registry_enabled)",pm.expect(input_container_registry_enabled).to.eql(return_container_registry_enabled),post+projects_user_{user_id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,container_registry_enabled,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,input.description == return.description,daikon.inv.binary.twoString.StringEqual,"(input.description, return.description)",pm.expect(input_description).to.eql(return_description),post+projects_user_{user_id},1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,description,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,input.jobs_enabled == return.jobs_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.jobs_enabled, return.jobs_enabled)",pm.expect(input_jobs_enabled).to.eql(return_jobs_enabled),post+projects_user_{user_id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,jobs_enabled,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,input.merge_method == return.merge_method,daikon.inv.binary.twoString.StringEqual,"(input.merge_method, return.merge_method)",pm.expect(input_merge_method).to.eql(return_merge_method),post+projects_user_{user_id},1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,merge_method,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,input.name == return.name,daikon.inv.binary.twoString.StringEqual,"(input.name, return.name)",pm.expect(input_name).to.eql(return_name),post+projects_user_{user_id},1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,name,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,input.only_allow_merge_if_all_discussions_are_resolved == return.only_allow_merge_if_all_discussions_are_resolved,daikon.inv.binary.twoScalar.IntEqual,"(input.only_allow_merge_if_all_discussions_are_resolved, return.only_allow_merge_if_all_discussions_are_resolved)",pm.expect(input_only_allow_merge_if_all_discussions_are_resolved).to.eql(return_only_allow_merge_if_all_discussions_are_resolved),post+projects_user_{user_id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,only_allow_merge_if_all_discussions_are_resolved,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,input.only_allow_merge_if_pipeline_succeeds == return.only_allow_merge_if_pipeline_succeeds,daikon.inv.binary.twoScalar.IntEqual,"(input.only_allow_merge_if_pipeline_succeeds, return.only_allow_merge_if_pipeline_succeeds)",pm.expect(input_only_allow_merge_if_pipeline_succeeds).to.eql(return_only_allow_merge_if_pipeline_succeeds),post+projects_user_{user_id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,only_allow_merge_if_pipeline_succeeds,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,input.packages_enabled == return.packages_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.packages_enabled, return.packages_enabled)",pm.expect(input_packages_enabled).to.eql(return_packages_enabled),post+projects_user_{user_id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,packages_enabled,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,input.path == return.path,daikon.inv.binary.twoString.StringEqual,"(input.path, return.path)",pm.expect(input_path).to.eql(return_path),post+projects_user_{user_id},1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,path,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,input.public_builds == return.public_jobs,daikon.inv.binary.twoScalar.IntEqual,"(input.public_builds, return.public_jobs)",pm.expect(input_public_builds).to.eql(return_public_jobs),post+projects_user_{user_id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,public_jobs,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,input.remove_source_branch_after_merge == return.remove_source_branch_after_merge,daikon.inv.binary.twoScalar.IntEqual,"(input.remove_source_branch_after_merge, return.remove_source_branch_after_merge)",pm.expect(input_remove_source_branch_after_merge).to.eql(return_remove_source_branch_after_merge),post+projects_user_{user_id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,remove_source_branch_after_merge,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,input.request_access_enabled == return.request_access_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.request_access_enabled, return.request_access_enabled)",pm.expect(input_request_access_enabled).to.eql(return_request_access_enabled),post+projects_user_{user_id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,request_access_enabled,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,input.resolve_outdated_diff_discussions == return.resolve_outdated_diff_discussions,daikon.inv.binary.twoScalar.IntEqual,"(input.resolve_outdated_diff_discussions, return.resolve_outdated_diff_discussions)",pm.expect(input_resolve_outdated_diff_discussions).to.eql(return_resolve_outdated_diff_discussions),post+projects_user_{user_id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,resolve_outdated_diff_discussions,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,input.shared_runners_enabled == return.shared_runners_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.shared_runners_enabled, return.shared_runners_enabled)",pm.expect(input_shared_runners_enabled).to.eql(return_shared_runners_enabled),post+projects_user_{user_id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,shared_runners_enabled,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,input.suggestion_commit_message == return.suggestion_commit_message,daikon.inv.binary.twoString.StringEqual,"(input.suggestion_commit_message, return.suggestion_commit_message)",pm.expect(input_suggestion_commit_message).to.eql(return_suggestion_commit_message),post+projects_user_{user_id},1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,suggestion_commit_message,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,input.tag_list[] == return.tag_list[],daikon.inv.binary.twoSequence.SeqSeqStringEqual,"(input.tag_list[..], return.tag_list[..])",pm.expect(input_tag_list_array).to.eql(return_tag_list_array),post+projects_user_{user_id},1.0,,,"Represents invariants between two sequences of String values. If order matters for each variable (which it does by default), then the sequences are compared lexically. Prints as x[] == y[] lexically.",,tag_list,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,input.user_id == return.owner.id,daikon.inv.binary.twoScalar.IntEqual,"(input.user_id, return.owner.id)",pm.expect(input_user_id).to.eql(return_owner_id),post+projects_user_{user_id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,owner.id,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,input.user_id == return.creator_id,daikon.inv.binary.twoScalar.IntEqual,"(input.user_id, return.creator_id)",pm.expect(input_user_id).to.eql(return_creator_id),post+projects_user_{user_id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,creator_id,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,input.visibility == return.visibility,daikon.inv.binary.twoString.StringEqual,"(input.visibility, return.visibility)",pm.expect(input_visibility).to.eql(return_visibility),post+projects_user_{user_id},1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,visibility,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,return.owner.name == return.namespace.name,daikon.inv.binary.twoString.StringEqual,"(return.owner.name, return.namespace.name)",pm.expect(return_owner_name).to.eql(return_namespace_name),post+projects_user_{user_id},1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,owner.name,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,return.open_issues_count == return.forks_count,daikon.inv.binary.twoScalar.IntEqual,"(return.open_issues_count, return.forks_count)",pm.expect(return_open_issues_count).to.eql(return_forks_count),post+projects_user_{user_id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,open_issues_count,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,return.merge_requests_enabled == return.can_create_merge_request_in,daikon.inv.binary.twoScalar.IntEqual,"(return.merge_requests_enabled, return.can_create_merge_request_in)",pm.expect(return_merge_requests_enabled).to.eql(return_can_create_merge_request_in),post+projects_user_{user_id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,merge_requests_enabled,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,return.created_at == return.last_activity_at,daikon.inv.binary.twoString.StringEqual,"(return.created_at, return.last_activity_at)",pm.expect(return_created_at).to.eql(return_last_activity_at),post+projects_user_{user_id},1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,created_at,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,return.namespace.path == return.namespace.full_path,daikon.inv.binary.twoString.StringEqual,"(return.namespace.path, return.namespace.full_path)",pm.expect(return_namespace_path).to.eql(return_namespace_full_path),post+projects_user_{user_id},1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,namespace.path,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,return.archived == return.service_desk_enabled,daikon.inv.binary.twoScalar.IntEqual,"(return.archived, return.service_desk_enabled)",pm.expect(return_archived).to.eql(return_service_desk_enabled),post+projects_user_{user_id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,archived,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,return.forks_count == return.star_count,daikon.inv.binary.twoScalar.IntEqual,"(return.forks_count, return.star_count)",pm.expect(return_forks_count).to.eql(return_star_count),post+projects_user_{user_id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,forks_count,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,return.forks_count == size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntEqual,"(return.forks_count, size(return.shared_with_groups[..]))",pm.expect(return_forks_count).to.eql(return_shared_with_groups_size_array),post+projects_user_{user_id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,forks_count,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,return.forks_count == size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntEqual,"(return.forks_count, size(return.shared_with_groups[..]))",pm.expect(return_forks_count).to.eql(return_shared_with_groups_size_array),post+projects_user_{user_id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,forks_count,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,"return.default_branch == ""main""",daikon.inv.unary.string.OneOfString,(return.default_branch),"pm.expect([""main""].includes(return_default_branch)).to.be.true",post+projects_user_{user_id},,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,default_branch,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,LENGTH(return.default_branch)==4,daikon.inv.unary.string.FixedLengthString,(return.default_branch),pm.expect(return_default_branch).to.have.length(4),post+projects_user_{user_id},,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,default_branch,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,"return.visibility one of { ""internal"", ""private"", ""public"" }",daikon.inv.unary.string.OneOfString,(return.visibility),"pm.expect([""internal"", ""private"", ""public""].includes(return_visibility)).to.be.true",post+projects_user_{user_id},1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,visibility,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,return.open_issues_count == 0,daikon.inv.unary.scalar.OneOfScalar,(return.open_issues_count),pm.expect([0].includes(return_open_issues_count)).to.be.true,post+projects_user_{user_id},,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,open_issues_count,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,LENGTH(return.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.created_at),pm.expect(return_created_at).to.have.length(24),post+projects_user_{user_id},1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,created_at,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.created_at),"pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",post+projects_user_{user_id},1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,created_at,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,return.namespace.id >= 1,daikon.inv.unary.scalar.LowerBound,(return.namespace.id),pm.expect(return_namespace_id).to.be.at.least(1),post+projects_user_{user_id},1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,namespace.id,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,"return.namespace.kind == ""user""",daikon.inv.unary.string.OneOfString,(return.namespace.kind),"pm.expect([""user""].includes(return_namespace_kind)).to.be.true",post+projects_user_{user_id},1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,namespace.kind,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,LENGTH(return.namespace.kind)==4,daikon.inv.unary.string.FixedLengthString,(return.namespace.kind),pm.expect(return_namespace_kind).to.have.length(4),post+projects_user_{user_id},1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,namespace.kind,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,"return.import_status == ""none""",daikon.inv.unary.string.OneOfString,(return.import_status),"pm.expect([""none""].includes(return_import_status)).to.be.true",post+projects_user_{user_id},1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,import_status,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,LENGTH(return.import_status)==4,daikon.inv.unary.string.FixedLengthString,(return.import_status),pm.expect(return_import_status).to.have.length(4),post+projects_user_{user_id},1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,import_status,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,return.permissions == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions),pm.expect(return_permissions).to.be.null,post+projects_user_{user_id},1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,permissions,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,return.permissions.project_access == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.project_access),pm.expect(return_permissions_project_access).to.be.null,post+projects_user_{user_id},1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,permissions.project_access,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,return.permissions.group_access == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.group_access),pm.expect(return_permissions_group_access).to.be.null,post+projects_user_{user_id},1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,permissions.group_access,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,return.archived == false,daikon.inv.unary.scalar.OneOfScalar,(return.archived),pm.expect(return_archived).to.eql(false),post+projects_user_{user_id},1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,archived,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,LENGTH(return.runners_token)==29,daikon.inv.unary.string.FixedLengthString,(return.runners_token),pm.expect(return_runners_token).to.have.length(29),post+projects_user_{user_id},1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,runners_token,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,return.ci_default_git_depth == 20,daikon.inv.unary.scalar.OneOfScalar,(return.ci_default_git_depth),pm.expect([20].includes(return_ci_default_git_depth)).to.be.true,post+projects_user_{user_id},1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,ci_default_git_depth,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,return.ci_forward_deployment_enabled == true,daikon.inv.unary.scalar.OneOfScalar,(return.ci_forward_deployment_enabled),pm.expect(return_ci_forward_deployment_enabled).to.eql(true),post+projects_user_{user_id},1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,ci_forward_deployment_enabled,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,return.shared_with_groups[] == [],daikon.inv.unary.sequence.OneOfSequence,(return.shared_with_groups[..]),pm.expect([[]].some(value => pm.expect(return_shared_with_groups_array).to.deep.equal(value).that)).to.be.true,post+projects_user_{user_id},1.0,,,"Represents long[] variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,shared_with_groups,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,"return.merge_method one of { ""ff"", ""merge"", ""rebase_merge"" }",daikon.inv.unary.string.OneOfString,(return.merge_method),"pm.expect([""ff"", ""merge"", ""rebase_merge""].includes(return_merge_method)).to.be.true",post+projects_user_{user_id},1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,merge_method,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,"return.auto_devops_deploy_strategy one of { ""continuous"", ""manual"", ""timed_incremental"" }",daikon.inv.unary.string.OneOfString,(return.auto_devops_deploy_strategy),"pm.expect([""continuous"", ""manual"", ""timed_incremental""].includes(return_auto_devops_deploy_strategy)).to.be.true",post+projects_user_{user_id},1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,auto_devops_deploy_strategy,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,"return.repository_storage == ""default""",daikon.inv.unary.string.OneOfString,(return.repository_storage),"pm.expect([""default""].includes(return_repository_storage)).to.be.true",post+projects_user_{user_id},1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,repository_storage,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,LENGTH(return.repository_storage)==7,daikon.inv.unary.string.FixedLengthString,(return.repository_storage),pm.expect(return_repository_storage).to.have.length(7),post+projects_user_{user_id},1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,repository_storage,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,return.statistics == null,daikon.inv.unary.scalar.OneOfScalar,(return.statistics),pm.expect(return_statistics).to.be.null,post+projects_user_{user_id},1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,statistics,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,LENGTH(return._links.self)==42,daikon.inv.unary.string.FixedLengthString,(return._links.self),pm.expect(return__links_self).to.have.length(42),post+projects_user_{user_id},,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.self,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,LENGTH(return._links.issues)==49,daikon.inv.unary.string.FixedLengthString,(return._links.issues),pm.expect(return__links_issues).to.have.length(49),post+projects_user_{user_id},,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.issues,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,LENGTH(return._links.merge_requests)==57,daikon.inv.unary.string.FixedLengthString,(return._links.merge_requests),pm.expect(return__links_merge_requests).to.have.length(57),post+projects_user_{user_id},,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.merge_requests,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,LENGTH(return._links.repo_branches)==62,daikon.inv.unary.string.FixedLengthString,(return._links.repo_branches),pm.expect(return__links_repo_branches).to.have.length(62),post+projects_user_{user_id},,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.repo_branches,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,LENGTH(return._links.labels)==49,daikon.inv.unary.string.FixedLengthString,(return._links.labels),pm.expect(return__links_labels).to.have.length(49),post+projects_user_{user_id},,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.labels,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,LENGTH(return._links.events)==49,daikon.inv.unary.string.FixedLengthString,(return._links.events),pm.expect(return__links_events).to.have.length(49),post+projects_user_{user_id},,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.events,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,LENGTH(return._links.members)==50,daikon.inv.unary.string.FixedLengthString,(return._links.members),pm.expect(return__links_members).to.have.length(50),post+projects_user_{user_id},,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.members,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,"size(return.tag_list[]) one of { 0, 1 }",daikon.inv.unary.scalar.OneOfScalar,(size(return.tag_list[..])),"pm.expect([0, 1, 0].includes(return_tag_list_size_array)).to.be.true",post+projects_user_{user_id},,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,tag_list,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,input.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(input.name, return.name_with_namespace)",pm.expect(return_name_with_namespace.includes(input_name)).to.be.true,post+projects_user_{user_id},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,name_with_namespace,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,input.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(input.path, return.path_with_namespace)",pm.expect(return_path_with_namespace.includes(input_path)).to.be.true,post+projects_user_{user_id},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,input.tag_list[] == return.tag_list[] (elementwise),daikon.inv.binary.twoSequence.PairwiseStringEqual,"(input.tag_list[..], return.tag_list[..])",pm.expect(input_tag_list_array).to.eql(return_tag_list_array),post+projects_user_{user_id},1.0,,,,,tag_list,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,input.user_id <= return.namespace.id,daikon.inv.binary.twoScalar.IntLessEqual,"(input.user_id, return.namespace.id)",pm.expect(input_user_id).to.be.lte(return_namespace_id),post+projects_user_{user_id},1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,namespace.id,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,input.user_id >= size(return.tag_list[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(input.user_id, size(return.tag_list[..]))",pm.expect(input_user_id).to.be.at.least(return_tag_list_size_array),post+projects_user_{user_id},1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,tag_list,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,return.default_branch is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.default_branch, return.readme_url)",pm.expect(return_readme_url.includes(return_default_branch)).to.be.true,post+projects_user_{user_id},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,default_branch,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,return.path_with_namespace is a substring of return.ssh_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.ssh_url_to_repo, return.path_with_namespace)",pm.expect(return_ssh_url_to_repo.includes(return_path_with_namespace)).to.be.true,post+projects_user_{user_id},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,return.web_url is a substring of return.http_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.http_url_to_repo, return.web_url)",pm.expect(return_http_url_to_repo.includes(return_web_url)).to.be.true,post+projects_user_{user_id},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,web_url,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,return.web_url is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.readme_url)",pm.expect(return_readme_url.includes(return_web_url)).to.be.true,post+projects_user_{user_id},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,web_url,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,return.path_with_namespace is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.path_with_namespace)",pm.expect(return_web_url.includes(return_path_with_namespace)).to.be.true,post+projects_user_{user_id},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,return.owner.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.owner.name, return.name_with_namespace)",pm.expect(return_name_with_namespace.includes(return_owner_name)).to.be.true,post+projects_user_{user_id},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,name_with_namespace,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,return.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path, return.path_with_namespace)",pm.expect(return_path_with_namespace.includes(return_path)).to.be.true,post+projects_user_{user_id},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,return.namespace.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path_with_namespace, return.namespace.path)",pm.expect(return_path_with_namespace.includes(return_namespace_path)).to.be.true,post+projects_user_{user_id},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,return.open_issues_count <= size(return.tag_list[]),daikon.inv.binary.twoScalar.IntLessEqual,"(return.open_issues_count, size(return.tag_list[..]))",pm.expect(return_open_issues_count).to.be.lte(return_tag_list_size_array),post+projects_user_{user_id},1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,tag_list,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,return.namespace.id >= size(input.tag_list[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.namespace.id, size(input.tag_list[..]))",pm.expect(return_namespace_id).to.be.at.least(input_tag_list_size_array),post+projects_user_{user_id},,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,namespace.id,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,return.namespace.id >= size(return.tag_list[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.namespace.id, size(return.tag_list[..]))",pm.expect(return_namespace_id).to.be.at.least(return_tag_list_size_array),post+projects_user_{user_id},1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,tag_list,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,return.forks_count <= size(return.tag_list[]),daikon.inv.binary.twoScalar.IntLessEqual,"(return.forks_count, size(return.tag_list[..]))",pm.expect(return_forks_count).to.be.lte(return_tag_list_size_array),post+projects_user_{user_id},1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,tag_list,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,return._links.self is a substring of return._links.issues,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.issues)",pm.expect(return__links_issues.includes(return__links_self)).to.be.true,post+projects_user_{user_id},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,return._links.self is a substring of return._links.merge_requests,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.merge_requests)",pm.expect(return__links_merge_requests.includes(return__links_self)).to.be.true,post+projects_user_{user_id},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,return._links.self is a substring of return._links.repo_branches,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.repo_branches)",pm.expect(return__links_repo_branches.includes(return__links_self)).to.be.true,post+projects_user_{user_id},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,return._links.self is a substring of return._links.labels,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.labels)",pm.expect(return__links_labels.includes(return__links_self)).to.be.true,post+projects_user_{user_id},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,return._links.self is a substring of return._links.events,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.events)",pm.expect(return__links_events.includes(return__links_self)).to.be.true,post+projects_user_{user_id},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT,return._links.self is a substring of return._links.members,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.members)",pm.expect(return__links_members.includes(return__links_self)).to.be.true,post+projects_user_{user_id},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,input.allow_merge_on_skipped_pipeline == return.allow_merge_on_skipped_pipeline,daikon.inv.binary.twoScalar.IntEqual,"(input.allow_merge_on_skipped_pipeline, return.allow_merge_on_skipped_pipeline)",pm.expect(input_allow_merge_on_skipped_pipeline).to.eql(return_allow_merge_on_skipped_pipeline),put+projects_{id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,allow_merge_on_skipped_pipeline,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,input.auto_devops_deploy_strategy == return.auto_devops_deploy_strategy,daikon.inv.binary.twoString.StringEqual,"(input.auto_devops_deploy_strategy, return.auto_devops_deploy_strategy)",pm.expect(input_auto_devops_deploy_strategy).to.eql(return_auto_devops_deploy_strategy),put+projects_{id},1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,auto_devops_deploy_strategy,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,input.auto_devops_enabled == return.auto_devops_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.auto_devops_enabled, return.auto_devops_enabled)",pm.expect(input_auto_devops_enabled).to.eql(return_auto_devops_enabled),put+projects_{id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,auto_devops_enabled,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,input.autoclose_referenced_issues == return.autoclose_referenced_issues,daikon.inv.binary.twoScalar.IntEqual,"(input.autoclose_referenced_issues, return.autoclose_referenced_issues)",pm.expect(input_autoclose_referenced_issues).to.eql(return_autoclose_referenced_issues),put+projects_{id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,autoclose_referenced_issues,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,input.ci_default_git_depth == return.ci_default_git_depth,daikon.inv.binary.twoScalar.IntEqual,"(input.ci_default_git_depth, return.ci_default_git_depth)",pm.expect(input_ci_default_git_depth).to.eql(return_ci_default_git_depth),put+projects_{id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,ci_default_git_depth,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,input.ci_forward_deployment_enabled == return.ci_forward_deployment_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.ci_forward_deployment_enabled, return.ci_forward_deployment_enabled)",pm.expect(input_ci_forward_deployment_enabled).to.eql(return_ci_forward_deployment_enabled),put+projects_{id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,ci_forward_deployment_enabled,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,input.container_registry_enabled == return.container_registry_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.container_registry_enabled, return.container_registry_enabled)",pm.expect(input_container_registry_enabled).to.eql(return_container_registry_enabled),put+projects_{id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,container_registry_enabled,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,input.description == return.description,daikon.inv.binary.twoString.StringEqual,"(input.description, return.description)",pm.expect(input_description).to.eql(return_description),put+projects_{id},1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,description,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,input.jobs_enabled == return.jobs_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.jobs_enabled, return.jobs_enabled)",pm.expect(input_jobs_enabled).to.eql(return_jobs_enabled),put+projects_{id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,jobs_enabled,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,input.merge_method == return.merge_method,daikon.inv.binary.twoString.StringEqual,"(input.merge_method, return.merge_method)",pm.expect(input_merge_method).to.eql(return_merge_method),put+projects_{id},1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,merge_method,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,input.name == return.name,daikon.inv.binary.twoString.StringEqual,"(input.name, return.name)",pm.expect(input_name).to.eql(return_name),put+projects_{id},1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,name,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,input.only_allow_merge_if_all_discussions_are_resolved == return.only_allow_merge_if_all_discussions_are_resolved,daikon.inv.binary.twoScalar.IntEqual,"(input.only_allow_merge_if_all_discussions_are_resolved, return.only_allow_merge_if_all_discussions_are_resolved)",pm.expect(input_only_allow_merge_if_all_discussions_are_resolved).to.eql(return_only_allow_merge_if_all_discussions_are_resolved),put+projects_{id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,only_allow_merge_if_all_discussions_are_resolved,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,input.only_allow_merge_if_pipeline_succeeds == return.only_allow_merge_if_pipeline_succeeds,daikon.inv.binary.twoScalar.IntEqual,"(input.only_allow_merge_if_pipeline_succeeds, return.only_allow_merge_if_pipeline_succeeds)",pm.expect(input_only_allow_merge_if_pipeline_succeeds).to.eql(return_only_allow_merge_if_pipeline_succeeds),put+projects_{id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,only_allow_merge_if_pipeline_succeeds,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,input.packages_enabled == return.packages_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.packages_enabled, return.packages_enabled)",pm.expect(input_packages_enabled).to.eql(return_packages_enabled),put+projects_{id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,packages_enabled,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,input.path == return.path,daikon.inv.binary.twoString.StringEqual,"(input.path, return.path)",pm.expect(input_path).to.eql(return_path),put+projects_{id},1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,path,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,input.public_builds == return.public_jobs,daikon.inv.binary.twoScalar.IntEqual,"(input.public_builds, return.public_jobs)",pm.expect(input_public_builds).to.eql(return_public_jobs),put+projects_{id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,public_jobs,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,input.remove_source_branch_after_merge == return.remove_source_branch_after_merge,daikon.inv.binary.twoScalar.IntEqual,"(input.remove_source_branch_after_merge, return.remove_source_branch_after_merge)",pm.expect(input_remove_source_branch_after_merge).to.eql(return_remove_source_branch_after_merge),put+projects_{id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,remove_source_branch_after_merge,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,input.request_access_enabled == return.request_access_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.request_access_enabled, return.request_access_enabled)",pm.expect(input_request_access_enabled).to.eql(return_request_access_enabled),put+projects_{id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,request_access_enabled,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,input.resolve_outdated_diff_discussions == return.resolve_outdated_diff_discussions,daikon.inv.binary.twoScalar.IntEqual,"(input.resolve_outdated_diff_discussions, return.resolve_outdated_diff_discussions)",pm.expect(input_resolve_outdated_diff_discussions).to.eql(return_resolve_outdated_diff_discussions),put+projects_{id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,resolve_outdated_diff_discussions,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,input.shared_runners_enabled == return.shared_runners_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.shared_runners_enabled, return.shared_runners_enabled)",pm.expect(input_shared_runners_enabled).to.eql(return_shared_runners_enabled),put+projects_{id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,shared_runners_enabled,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,input.suggestion_commit_message == return.suggestion_commit_message,daikon.inv.binary.twoString.StringEqual,"(input.suggestion_commit_message, return.suggestion_commit_message)",pm.expect(input_suggestion_commit_message).to.eql(return_suggestion_commit_message),put+projects_{id},1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,suggestion_commit_message,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,input.tag_list[] == return.tag_list[],daikon.inv.binary.twoSequence.SeqSeqStringEqual,"(input.tag_list[..], return.tag_list[..])",pm.expect(input_tag_list_array).to.eql(return_tag_list_array),put+projects_{id},1.0,,,"Represents invariants between two sequences of String values. If order matters for each variable (which it does by default), then the sequences are compared lexically. Prints as x[] == y[] lexically.",,tag_list,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,input.id == return.id,daikon.inv.binary.twoScalar.IntEqual,"(input.id, return.id)",pm.expect(input_id).to.eql(return_id),put+projects_{id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,id,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,input.visibility == return.visibility,daikon.inv.binary.twoString.StringEqual,"(input.visibility, return.visibility)",pm.expect(input_visibility).to.eql(return_visibility),put+projects_{id},1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,visibility,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,return.owner.id == return.creator_id,daikon.inv.binary.twoScalar.IntEqual,"(return.owner.id, return.creator_id)",pm.expect(return_owner_id).to.eql(return_creator_id),put+projects_{id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,owner.id,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,return.owner.name == return.namespace.name,daikon.inv.binary.twoString.StringEqual,"(return.owner.name, return.namespace.name)",pm.expect(return_owner_name).to.eql(return_namespace_name),put+projects_{id},1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,owner.name,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,return.open_issues_count == return.forks_count,daikon.inv.binary.twoScalar.IntEqual,"(return.open_issues_count, return.forks_count)",pm.expect(return_open_issues_count).to.eql(return_forks_count),put+projects_{id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,open_issues_count,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,return.open_issues_count == return.star_count,daikon.inv.binary.twoScalar.IntEqual,"(return.open_issues_count, return.star_count)",pm.expect(return_open_issues_count).to.eql(return_star_count),put+projects_{id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,open_issues_count,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,return.open_issues_count == size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntEqual,"(return.open_issues_count, size(return.shared_with_groups[..]))",pm.expect(return_open_issues_count).to.eql(return_shared_with_groups_size_array),put+projects_{id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,open_issues_count,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,return.open_issues_count == size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntEqual,"(return.open_issues_count, size(return.shared_with_groups[..]))",pm.expect(return_open_issues_count).to.eql(return_shared_with_groups_size_array),put+projects_{id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,open_issues_count,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,return.merge_requests_enabled == return.can_create_merge_request_in,daikon.inv.binary.twoScalar.IntEqual,"(return.merge_requests_enabled, return.can_create_merge_request_in)",pm.expect(return_merge_requests_enabled).to.eql(return_can_create_merge_request_in),put+projects_{id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,merge_requests_enabled,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,return.created_at == return.last_activity_at,daikon.inv.binary.twoString.StringEqual,"(return.created_at, return.last_activity_at)",pm.expect(return_created_at).to.eql(return_last_activity_at),put+projects_{id},1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,created_at,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,return.namespace.path == return.namespace.full_path,daikon.inv.binary.twoString.StringEqual,"(return.namespace.path, return.namespace.full_path)",pm.expect(return_namespace_path).to.eql(return_namespace_full_path),put+projects_{id},1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,namespace.path,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,return.archived == return.service_desk_enabled,daikon.inv.binary.twoScalar.IntEqual,"(return.archived, return.service_desk_enabled)",pm.expect(return_archived).to.eql(return_service_desk_enabled),put+projects_{id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,archived,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,"return.default_branch one of { ""classified"", ""main"" }",daikon.inv.unary.string.OneOfString,(return.default_branch),"pm.expect([""classified"", ""main""].includes(return_default_branch)).to.be.true",put+projects_{id},,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,default_branch,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,"return.visibility one of { ""internal"", ""private"", ""public"" }",daikon.inv.unary.string.OneOfString,(return.visibility),"pm.expect([""internal"", ""private"", ""public""].includes(return_visibility)).to.be.true",put+projects_{id},1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,visibility,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,"return.readme_url one of { ""http://localhost:30000/bob/shock/-/blob/main/README.md"", ""http://localhost:30000/root/poseur/-/blob/classified/README.md"", ""http://localhost:30000/user02/dramaturgic/-/blob/main/README.md"" }",daikon.inv.unary.string.OneOfString,(return.readme_url),"pm.expect([""http://localhost:30000/bob/shock/-/blob/main/README.md"", ""http://localhost:30000/root/poseur/-/blob/classified/README.md"", ""http://localhost:30000/user02/dramaturgic/-/blob/main/README.md""].includes(return_readme_url)).to.be.true",put+projects_{id},,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,readme_url,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,return.issues_enabled == true,daikon.inv.unary.scalar.OneOfScalar,(return.issues_enabled),pm.expect(return_issues_enabled).to.eql(true),put+projects_{id},,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,issues_enabled,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,LENGTH(return.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.created_at),pm.expect(return_created_at).to.have.length(24),put+projects_{id},1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,created_at,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.created_at),"pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",put+projects_{id},1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,created_at,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,return.creator_id >= 1,daikon.inv.unary.scalar.LowerBound,(return.creator_id),pm.expect(return_creator_id).to.be.at.least(1),put+projects_{id},1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,creator_id,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,return.namespace.id >= 1,daikon.inv.unary.scalar.LowerBound,(return.namespace.id),pm.expect(return_namespace_id).to.be.at.least(1),put+projects_{id},1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,namespace.id,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,"return.namespace.kind == ""user""",daikon.inv.unary.string.OneOfString,(return.namespace.kind),"pm.expect([""user""].includes(return_namespace_kind)).to.be.true",put+projects_{id},,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,namespace.kind,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,LENGTH(return.namespace.kind)==4,daikon.inv.unary.string.FixedLengthString,(return.namespace.kind),pm.expect(return_namespace_kind).to.have.length(4),put+projects_{id},,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,namespace.kind,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,"return.import_status == ""none""",daikon.inv.unary.string.OneOfString,(return.import_status),"pm.expect([""none""].includes(return_import_status)).to.be.true",put+projects_{id},,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,import_status,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,LENGTH(return.import_status)==4,daikon.inv.unary.string.FixedLengthString,(return.import_status),pm.expect(return_import_status).to.have.length(4),put+projects_{id},,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,import_status,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,return.permissions == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions),pm.expect(return_permissions).to.be.null,put+projects_{id},1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,permissions,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,return.permissions.project_access == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.project_access),pm.expect(return_permissions_project_access).to.be.null,put+projects_{id},1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,permissions.project_access,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,return.permissions.group_access == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.group_access),pm.expect(return_permissions_group_access).to.be.null,put+projects_{id},1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,permissions.group_access,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,return.archived == false,daikon.inv.unary.scalar.OneOfScalar,(return.archived),pm.expect(return_archived).to.eql(false),put+projects_{id},1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,archived,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,LENGTH(return.runners_token)==29,daikon.inv.unary.string.FixedLengthString,(return.runners_token),pm.expect(return_runners_token).to.have.length(29),put+projects_{id},1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,runners_token,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,return.shared_with_groups[] == [],daikon.inv.unary.sequence.OneOfSequence,(return.shared_with_groups[..]),pm.expect([[]].some(value => pm.expect(return_shared_with_groups_array).to.deep.equal(value).that)).to.be.true,put+projects_{id},1.0,,,"Represents long[] variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,shared_with_groups,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,"return.merge_method one of { ""ff"", ""merge"", ""rebase_merge"" }",daikon.inv.unary.string.OneOfString,(return.merge_method),"pm.expect([""ff"", ""merge"", ""rebase_merge""].includes(return_merge_method)).to.be.true",put+projects_{id},1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,merge_method,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,"return.auto_devops_deploy_strategy one of { ""continuous"", ""manual"", ""timed_incremental"" }",daikon.inv.unary.string.OneOfString,(return.auto_devops_deploy_strategy),"pm.expect([""continuous"", ""manual"", ""timed_incremental""].includes(return_auto_devops_deploy_strategy)).to.be.true",put+projects_{id},1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,auto_devops_deploy_strategy,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,"return.repository_storage == ""default""",daikon.inv.unary.string.OneOfString,(return.repository_storage),"pm.expect([""default""].includes(return_repository_storage)).to.be.true",put+projects_{id},1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,repository_storage,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,LENGTH(return.repository_storage)==7,daikon.inv.unary.string.FixedLengthString,(return.repository_storage),pm.expect(return_repository_storage).to.have.length(7),put+projects_{id},1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,repository_storage,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,return.statistics == null,daikon.inv.unary.scalar.OneOfScalar,(return.statistics),pm.expect(return_statistics).to.be.null,put+projects_{id},1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,statistics,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,LENGTH(return._links.self)==42,daikon.inv.unary.string.FixedLengthString,(return._links.self),pm.expect(return__links_self).to.have.length(42),put+projects_{id},,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.self,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,LENGTH(return._links.issues)==49,daikon.inv.unary.string.FixedLengthString,(return._links.issues),pm.expect(return__links_issues).to.have.length(49),put+projects_{id},,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.issues,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,LENGTH(return._links.merge_requests)==57,daikon.inv.unary.string.FixedLengthString,(return._links.merge_requests),pm.expect(return__links_merge_requests).to.have.length(57),put+projects_{id},,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.merge_requests,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,LENGTH(return._links.repo_branches)==62,daikon.inv.unary.string.FixedLengthString,(return._links.repo_branches),pm.expect(return__links_repo_branches).to.have.length(62),put+projects_{id},,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.repo_branches,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,LENGTH(return._links.labels)==49,daikon.inv.unary.string.FixedLengthString,(return._links.labels),pm.expect(return__links_labels).to.have.length(49),put+projects_{id},,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.labels,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,LENGTH(return._links.events)==49,daikon.inv.unary.string.FixedLengthString,(return._links.events),pm.expect(return__links_events).to.have.length(49),put+projects_{id},,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.events,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,LENGTH(return._links.members)==50,daikon.inv.unary.string.FixedLengthString,(return._links.members),pm.expect(return__links_members).to.have.length(50),put+projects_{id},,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.members,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,"size(return.tag_list[]) one of { 0, 1 }",daikon.inv.unary.scalar.OneOfScalar,(size(return.tag_list[..])),"pm.expect([0, 1, 0].includes(return_tag_list_size_array)).to.be.true",put+projects_{id},,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,tag_list,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,input.ci_default_git_depth > return.namespace.id,daikon.inv.binary.twoScalar.IntGreaterThan,"(input.ci_default_git_depth, return.namespace.id)",pm.expect(input_ci_default_git_depth).to.be.greaterThan(return_namespace_id),put+projects_{id},,1.0,,Represents an invariant of > between two long scalars. Prints as x > y.,,namespace.id,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,input.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(input.name, return.name_with_namespace)",pm.expect(return_name_with_namespace.includes(input_name)).to.be.true,put+projects_{id},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,name_with_namespace,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,input.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(input.path, return.path_with_namespace)",pm.expect(return_path_with_namespace.includes(input_path)).to.be.true,put+projects_{id},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,input.tag_list[] == return.tag_list[] (elementwise),daikon.inv.binary.twoSequence.PairwiseStringEqual,"(input.tag_list[..], return.tag_list[..])",pm.expect(input_tag_list_array).to.eql(return_tag_list_array),put+projects_{id},1.0,,,,,tag_list,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,input.id > return.namespace.id,daikon.inv.binary.twoScalar.IntGreaterThan,"(input.id, return.namespace.id)",pm.expect(input_id).to.be.greaterThan(return_namespace_id),put+projects_{id},1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,namespace.id,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,input.keep_n > return.creator_id,daikon.inv.binary.twoScalar.IntGreaterThan,"(input.keep_n, return.creator_id)",pm.expect(input_keep_n).to.be.greaterThan(return_creator_id),put+projects_{id},,1.0,,Represents an invariant of > between two long scalars. Prints as x > y.,,creator_id,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,return.default_branch is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.default_branch, return.readme_url)",pm.expect(return_readme_url.includes(return_default_branch)).to.be.true,put+projects_{id},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,default_branch,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,return.path_with_namespace is a substring of return.ssh_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.ssh_url_to_repo, return.path_with_namespace)",pm.expect(return_ssh_url_to_repo.includes(return_path_with_namespace)).to.be.true,put+projects_{id},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,return.web_url is a substring of return.http_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.http_url_to_repo, return.web_url)",pm.expect(return_http_url_to_repo.includes(return_web_url)).to.be.true,put+projects_{id},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,web_url,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,return.web_url is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.readme_url)",pm.expect(return_readme_url.includes(return_web_url)).to.be.true,put+projects_{id},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,web_url,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,return.path_with_namespace is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.path_with_namespace)",pm.expect(return_web_url.includes(return_path_with_namespace)).to.be.true,put+projects_{id},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,return.owner.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.owner.name, return.name_with_namespace)",pm.expect(return_name_with_namespace.includes(return_owner_name)).to.be.true,put+projects_{id},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,name_with_namespace,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,return.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.name, return.name_with_namespace)",pm.expect(return_name_with_namespace.includes(return_name)).to.be.true,put+projects_{id},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,name_with_namespace,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,return.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path, return.path_with_namespace)",pm.expect(return_path_with_namespace.includes(return_path)).to.be.true,put+projects_{id},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,return.namespace.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path_with_namespace, return.namespace.path)",pm.expect(return_path_with_namespace.includes(return_namespace_path)).to.be.true,put+projects_{id},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,return.open_issues_count <= size(return.tag_list[]),daikon.inv.binary.twoScalar.IntLessEqual,"(return.open_issues_count, size(return.tag_list[..]))",pm.expect(return_open_issues_count).to.be.lte(return_tag_list_size_array),put+projects_{id},1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,tag_list,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,return.creator_id <= return.namespace.id,daikon.inv.binary.twoScalar.IntLessEqual,"(return.creator_id, return.namespace.id)",pm.expect(return_creator_id).to.be.lte(return_namespace_id),put+projects_{id},1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,creator_id,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,return.creator_id >= size(input.tag_list[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.creator_id, size(input.tag_list[..]))",pm.expect(return_creator_id).to.be.at.least(input_tag_list_size_array),put+projects_{id},,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,creator_id,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,return.creator_id >= size(return.tag_list[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.creator_id, size(return.tag_list[..]))",pm.expect(return_creator_id).to.be.at.least(return_tag_list_size_array),put+projects_{id},1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,tag_list,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,return.namespace.id >= size(input.tag_list[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.namespace.id, size(input.tag_list[..]))",pm.expect(return_namespace_id).to.be.at.least(input_tag_list_size_array),put+projects_{id},,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,namespace.id,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,return.namespace.id >= size(return.tag_list[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.namespace.id, size(return.tag_list[..]))",pm.expect(return_namespace_id).to.be.at.least(return_tag_list_size_array),put+projects_{id},1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,tag_list,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,return._links.self is a substring of return._links.issues,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.issues)",pm.expect(return__links_issues.includes(return__links_self)).to.be.true,put+projects_{id},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,return._links.self is a substring of return._links.merge_requests,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.merge_requests)",pm.expect(return__links_merge_requests.includes(return__links_self)).to.be.true,put+projects_{id},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,return._links.self is a substring of return._links.repo_branches,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.repo_branches)",pm.expect(return__links_repo_branches.includes(return__links_self)).to.be.true,put+projects_{id},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,return._links.self is a substring of return._links.labels,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.labels)",pm.expect(return__links_labels.includes(return__links_self)).to.be.true,put+projects_{id},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,return._links.self is a substring of return._links.events,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.events)",pm.expect(return__links_events.includes(return__links_self)).to.be.true,put+projects_{id},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects/{id}&/projects/{id}&put&200():::EXIT,return._links.self is a substring of return._links.members,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.members)",pm.expect(return__links_members.includes(return__links_self)).to.be.true,put+projects_{id},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects/{id}/hooks/{hook_id}&/projects/{id}/hooks/{hook_id}&put&200():::EXIT,input.url == return.url,daikon.inv.binary.twoString.StringEqual,"(input.url, return.url)",pm.expect(input_url).to.eql(return_url),put+projects_{id}_hooks_{hook_id},1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,url,GitLab Project API
/projects/{id}/hooks/{hook_id}&/projects/{id}/hooks/{hook_id}&put&200():::EXIT,LENGTH(return.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.created_at),pm.expect(return_created_at).to.have.length(24),put+projects_{id}_hooks_{hook_id},1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,created_at,GitLab Project API
/projects/{id}/hooks/{hook_id}&/projects/{id}/hooks/{hook_id}&put&200():::EXIT,return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.created_at),"pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",put+projects_{id}_hooks_{hook_id},1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,created_at,GitLab Project API
/projects/{id}/hooks/{hook_id}&/projects/{id}/hooks/{hook_id}&put&200():::EXIT,"return.enable_ssl_verification one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.enable_ssl_verification),"pm.expect([""false"", ""true""].includes(return_enable_ssl_verification)).to.be.true",put+projects_{id}_hooks_{hook_id},1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,enable_ssl_verification,GitLab Project API
/projects/{id}/hooks/{hook_id}&/projects/{id}/hooks/{hook_id}&put&200():::EXIT,return.id is Numeric,daikon.inv.unary.string.IsNumeric,(return.id),"pm.expect(return_id).to.match(/^[+-]{0,1}(0|([0-9](\d*|\d{0,2}(,\d{3})*)))?(\.\d*[0-9])?$/)",put+projects_{id}_hooks_{hook_id},1.0,,,Indicates that the characters of a string variable are always numeric. Represented as x is Numeric.,,id,GitLab Project API
/projects/{id}/hooks/{hook_id}&/projects/{id}/hooks/{hook_id}&put&200():::EXIT,"return.issues_events one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.issues_events),"pm.expect([""false"", ""true""].includes(return_issues_events)).to.be.true",put+projects_{id}_hooks_{hook_id},1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,issues_events,GitLab Project API
/projects/{id}/hooks/{hook_id}&/projects/{id}/hooks/{hook_id}&put&200():::EXIT,"return.merge_requests_events one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.merge_requests_events),"pm.expect([""false"", ""true""].includes(return_merge_requests_events)).to.be.true",put+projects_{id}_hooks_{hook_id},1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,merge_requests_events,GitLab Project API
/projects/{id}/hooks/{hook_id}&/projects/{id}/hooks/{hook_id}&put&200():::EXIT,"return.note_events one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.note_events),"pm.expect([""false"", ""true""].includes(return_note_events)).to.be.true",put+projects_{id}_hooks_{hook_id},1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,note_events,GitLab Project API
/projects/{id}/hooks/{hook_id}&/projects/{id}/hooks/{hook_id}&put&200():::EXIT,"return.pipeline_events one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.pipeline_events),"pm.expect([""false"", ""true""].includes(return_pipeline_events)).to.be.true",put+projects_{id}_hooks_{hook_id},1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,pipeline_events,GitLab Project API
/projects/{id}/hooks/{hook_id}&/projects/{id}/hooks/{hook_id}&put&200():::EXIT,return.project_id is Numeric,daikon.inv.unary.string.IsNumeric,(return.project_id),"pm.expect(return_project_id).to.match(/^[+-]{0,1}(0|([0-9](\d*|\d{0,2}(,\d{3})*)))?(\.\d*[0-9])?$/)",put+projects_{id}_hooks_{hook_id},1.0,,,Indicates that the characters of a string variable are always numeric. Represented as x is Numeric.,,project_id,GitLab Project API
/projects/{id}/hooks/{hook_id}&/projects/{id}/hooks/{hook_id}&put&200():::EXIT,"return.push_events one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.push_events),"pm.expect([""false"", ""true""].includes(return_push_events)).to.be.true",put+projects_{id}_hooks_{hook_id},1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,push_events,GitLab Project API
/projects/{id}/hooks/{hook_id}&/projects/{id}/hooks/{hook_id}&put&200():::EXIT,"return.tag_push_events one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.tag_push_events),"pm.expect([""false"", ""true""].includes(return_tag_push_events)).to.be.true",put+projects_{id}_hooks_{hook_id},1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,tag_push_events,GitLab Project API
/projects/{id}/hooks/{hook_id}&/projects/{id}/hooks/{hook_id}&put&200():::EXIT,"return.wiki_page_events one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.wiki_page_events),"pm.expect([""false"", ""true""].includes(return_wiki_page_events)).to.be.true",put+projects_{id}_hooks_{hook_id},1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,wiki_page_events,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200&shared_with_groups():::EXIT,"return.group_id one of { 183, 194, 1070 }",daikon.inv.unary.scalar.OneOfScalar,(return.group_id),"pm.expect([183, 194, 1070].includes(return_group_id)).to.be.true",put+projects_{id}_transfer,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,shared_with_groups.group_id,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200&shared_with_groups():::EXIT,"return.group_name one of { ""Group 96"", ""Valid Group 16"", ""myjane"" }",daikon.inv.unary.string.OneOfString,(return.group_name),"pm.expect([""Group 96"", ""Valid Group 16"", ""myjane""].includes(return_group_name)).to.be.true",put+projects_{id}_transfer,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,shared_with_groups.group_name,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200&shared_with_groups():::EXIT,"return.group_full_path one of { ""demo0222/valid-group-7/valid-group-16"", ""group-96"", ""myjane"" }",daikon.inv.unary.string.OneOfString,(return.group_full_path),"pm.expect([""demo0222/valid-group-7/valid-group-16"", ""group-96"", ""myjane""].includes(return_group_full_path)).to.be.true",put+projects_{id}_transfer,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,shared_with_groups.group_full_path,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200&shared_with_groups():::EXIT,"return.group_access_level one of { 10, 20, 40 }",daikon.inv.unary.scalar.OneOfScalar,(return.group_access_level),"pm.expect([10, 20, 40].includes(return_group_access_level)).to.be.true",put+projects_{id}_transfer,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,shared_with_groups.group_access_level,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,input.id == return.id,daikon.inv.binary.twoScalar.IntEqual,"(input.id, return.id)",pm.expect(input_id).to.eql(return_id),put+projects_{id}_transfer,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,id,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,input.namespace == return.namespace.id,daikon.inv.binary.twoScalar.IntEqual,"(input.namespace, return.namespace.id)",pm.expect(input_namespace).to.eql(return_namespace_id),put+projects_{id}_transfer,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,namespace.id,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.description == return.forked_from_project.description,daikon.inv.binary.twoString.StringEqual,"(return.description, return.forked_from_project.description)",pm.expect(return_description).to.eql(return_forked_from_project_description),put+projects_{id}_transfer,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,description,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.default_branch == return.forked_from_project.default_branch,daikon.inv.binary.twoString.StringEqual,"(return.default_branch, return.forked_from_project.default_branch)",pm.expect(return_default_branch).to.eql(return_forked_from_project_default_branch),put+projects_{id}_transfer,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,default_branch,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.owner.name == return.namespace.name,daikon.inv.binary.twoString.StringEqual,"(return.owner.name, return.namespace.name)",pm.expect(return_owner_name).to.eql(return_namespace_name),put+projects_{id}_transfer,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,owner.name,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.issues_enabled == return.ci_forward_deployment_enabled,daikon.inv.binary.twoScalar.IntEqual,"(return.issues_enabled, return.ci_forward_deployment_enabled)",pm.expect(return_issues_enabled).to.eql(return_ci_forward_deployment_enabled),put+projects_{id}_transfer,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,issues_enabled,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.issues_enabled == return.public_jobs,daikon.inv.binary.twoScalar.IntEqual,"(return.issues_enabled, return.public_jobs)",pm.expect(return_issues_enabled).to.eql(return_public_jobs),put+projects_{id}_transfer,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,issues_enabled,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.issues_enabled == return.remove_source_branch_after_merge,daikon.inv.binary.twoScalar.IntEqual,"(return.issues_enabled, return.remove_source_branch_after_merge)",pm.expect(return_issues_enabled).to.eql(return_remove_source_branch_after_merge),put+projects_{id}_transfer,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,issues_enabled,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.issues_enabled == return.request_access_enabled,daikon.inv.binary.twoScalar.IntEqual,"(return.issues_enabled, return.request_access_enabled)",pm.expect(return_issues_enabled).to.eql(return_request_access_enabled),put+projects_{id}_transfer,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,issues_enabled,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.issues_enabled == return.auto_devops_enabled,daikon.inv.binary.twoScalar.IntEqual,"(return.issues_enabled, return.auto_devops_enabled)",pm.expect(return_issues_enabled).to.eql(return_auto_devops_enabled),put+projects_{id}_transfer,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,issues_enabled,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.issues_enabled == return.packages_enabled,daikon.inv.binary.twoScalar.IntEqual,"(return.issues_enabled, return.packages_enabled)",pm.expect(return_issues_enabled).to.eql(return_packages_enabled),put+projects_{id}_transfer,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,issues_enabled,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.issues_enabled == return.autoclose_referenced_issues,daikon.inv.binary.twoScalar.IntEqual,"(return.issues_enabled, return.autoclose_referenced_issues)",pm.expect(return_issues_enabled).to.eql(return_autoclose_referenced_issues),put+projects_{id}_transfer,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,issues_enabled,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.open_issues_count == size(return.tag_list[]),daikon.inv.binary.twoScalar.IntEqual,"(return.open_issues_count, size(return.tag_list[..]))",pm.expect(return_open_issues_count).to.eql(return_tag_list_size_array),put+projects_{id}_transfer,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,tag_list,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.open_issues_count == size(return.tag_list[]),daikon.inv.binary.twoScalar.IntEqual,"(return.open_issues_count, size(return.tag_list[..]))",pm.expect(return_open_issues_count).to.eql(return_tag_list_size_array),put+projects_{id}_transfer,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,tag_list,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.open_issues_count == size(return.compliance_frameworks[]),daikon.inv.binary.twoScalar.IntEqual,"(return.open_issues_count, size(return.compliance_frameworks[..]))",pm.expect(return_open_issues_count).to.eql(return_compliance_frameworks_size_array),put+projects_{id}_transfer,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,open_issues_count,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.open_issues_count == size(return.compliance_frameworks[]),daikon.inv.binary.twoScalar.IntEqual,"(return.open_issues_count, size(return.compliance_frameworks[..]))",pm.expect(return_open_issues_count).to.eql(return_compliance_frameworks_size_array),put+projects_{id}_transfer,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,open_issues_count,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.merge_requests_enabled == return.can_create_merge_request_in,daikon.inv.binary.twoScalar.IntEqual,"(return.merge_requests_enabled, return.can_create_merge_request_in)",pm.expect(return_merge_requests_enabled).to.eql(return_can_create_merge_request_in),put+projects_{id}_transfer,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,merge_requests_enabled,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.resolve_outdated_diff_discussions == return.container_expiration_policy.enabled,daikon.inv.binary.twoScalar.IntEqual,"(return.resolve_outdated_diff_discussions, return.container_expiration_policy.enabled)",pm.expect(return_resolve_outdated_diff_discussions).to.eql(return_container_expiration_policy_enabled),put+projects_{id}_transfer,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,resolve_outdated_diff_discussions,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.resolve_outdated_diff_discussions == return.archived,daikon.inv.binary.twoScalar.IntEqual,"(return.resolve_outdated_diff_discussions, return.archived)",pm.expect(return_resolve_outdated_diff_discussions).to.eql(return_archived),put+projects_{id}_transfer,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,resolve_outdated_diff_discussions,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.resolve_outdated_diff_discussions == return.only_allow_merge_if_pipeline_succeeds,daikon.inv.binary.twoScalar.IntEqual,"(return.resolve_outdated_diff_discussions, return.only_allow_merge_if_pipeline_succeeds)",pm.expect(return_resolve_outdated_diff_discussions).to.eql(return_only_allow_merge_if_pipeline_succeeds),put+projects_{id}_transfer,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,resolve_outdated_diff_discussions,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.resolve_outdated_diff_discussions == return.only_allow_merge_if_all_discussions_are_resolved,daikon.inv.binary.twoScalar.IntEqual,"(return.resolve_outdated_diff_discussions, return.only_allow_merge_if_all_discussions_are_resolved)",pm.expect(return_resolve_outdated_diff_discussions).to.eql(return_only_allow_merge_if_all_discussions_are_resolved),put+projects_{id}_transfer,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,resolve_outdated_diff_discussions,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.resolve_outdated_diff_discussions == return.service_desk_enabled,daikon.inv.binary.twoScalar.IntEqual,"(return.resolve_outdated_diff_discussions, return.service_desk_enabled)",pm.expect(return_resolve_outdated_diff_discussions).to.eql(return_service_desk_enabled),put+projects_{id}_transfer,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,resolve_outdated_diff_discussions,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.created_at == return.last_activity_at,daikon.inv.binary.twoString.StringEqual,"(return.created_at, return.last_activity_at)",pm.expect(return_created_at).to.eql(return_last_activity_at),put+projects_{id}_transfer,,1.0,,Represents an invariant of == between two String scalars. Prints as x == y.,,created_at,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.namespace.path == return.namespace.full_path,daikon.inv.binary.twoString.StringEqual,"(return.namespace.path, return.namespace.full_path)",pm.expect(return_namespace_path).to.eql(return_namespace_full_path),put+projects_{id}_transfer,,1.0,,Represents an invariant of == between two String scalars. Prints as x == y.,,namespace.path,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.license == return.forked_from_project.license,daikon.inv.binary.twoScalar.IntEqual,"(return.license, return.forked_from_project.license)",pm.expect(return_license).to.eql(return_forked_from_project_license),put+projects_{id}_transfer,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,license,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.forked_from_project.created_at == return.forked_from_project.last_activity_at,daikon.inv.binary.twoString.StringEqual,"(return.forked_from_project.created_at, return.forked_from_project.last_activity_at)",pm.expect(return_forked_from_project_created_at).to.eql(return_forked_from_project_last_activity_at),put+projects_{id}_transfer,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,forked_from_project.created_at,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,"return.default_branch one of { ""classified"", ""main"" }",daikon.inv.unary.string.OneOfString,(return.default_branch),"pm.expect([""classified"", ""main""].includes(return_default_branch)).to.be.true",put+projects_{id}_transfer,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,default_branch,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,"return.visibility one of { ""private"", ""public"" }",daikon.inv.unary.string.OneOfString,(return.visibility),"pm.expect([""private"", ""public""].includes(return_visibility)).to.be.true",put+projects_{id}_transfer,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,visibility,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.tag_list[] == [],daikon.inv.unary.stringsequence.OneOfStringSequence,(return.tag_list[..]),pm.expect([[]].some(value => pm.expect(return_tag_list_array).to.deep.equal(value).that)).to.be.true,put+projects_{id}_transfer,,1.0,,"Represents String[] variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,tag_list,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.issues_enabled == true,daikon.inv.unary.scalar.OneOfScalar,(return.issues_enabled),pm.expect(return_issues_enabled).to.eql(true),put+projects_{id}_transfer,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,issues_enabled,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.resolve_outdated_diff_discussions == false,daikon.inv.unary.scalar.OneOfScalar,(return.resolve_outdated_diff_discussions),pm.expect(return_resolve_outdated_diff_discussions).to.eql(false),put+projects_{id}_transfer,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,resolve_outdated_diff_discussions,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,"return.container_expiration_policy.cadence == ""1d""",daikon.inv.unary.string.OneOfString,(return.container_expiration_policy.cadence),"pm.expect([""1d""].includes(return_container_expiration_policy_cadence)).to.be.true",put+projects_{id}_transfer,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,container_expiration_policy.cadence,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,LENGTH(return.container_expiration_policy.cadence)==2,daikon.inv.unary.string.FixedLengthString,(return.container_expiration_policy.cadence),pm.expect(return_container_expiration_policy_cadence).to.have.length(2),put+projects_{id}_transfer,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,container_expiration_policy.cadence,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.container_expiration_policy.keep_n == 10,daikon.inv.unary.scalar.OneOfScalar,(return.container_expiration_policy.keep_n),pm.expect([10].includes(return_container_expiration_policy_keep_n)).to.be.true,put+projects_{id}_transfer,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,container_expiration_policy.keep_n,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,"return.container_expiration_policy.older_than == ""90d""",daikon.inv.unary.string.OneOfString,(return.container_expiration_policy.older_than),"pm.expect([""90d""].includes(return_container_expiration_policy_older_than)).to.be.true",put+projects_{id}_transfer,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,container_expiration_policy.older_than,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,LENGTH(return.container_expiration_policy.older_than)==3,daikon.inv.unary.string.FixedLengthString,(return.container_expiration_policy.older_than),pm.expect(return_container_expiration_policy_older_than).to.have.length(3),put+projects_{id}_transfer,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,container_expiration_policy.older_than,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,"return.container_expiration_policy.name_regex == "".*""",daikon.inv.unary.string.OneOfString,(return.container_expiration_policy.name_regex),"pm.expect(["".*""].includes(return_container_expiration_policy_name_regex)).to.be.true",put+projects_{id}_transfer,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,container_expiration_policy.name_regex,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,LENGTH(return.container_expiration_policy.name_regex)==2,daikon.inv.unary.string.FixedLengthString,(return.container_expiration_policy.name_regex),pm.expect(return_container_expiration_policy_name_regex).to.have.length(2),put+projects_{id}_transfer,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,container_expiration_policy.name_regex,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,LENGTH(return.container_expiration_policy.next_run_at)==24,daikon.inv.unary.string.FixedLengthString,(return.container_expiration_policy.next_run_at),pm.expect(return_container_expiration_policy_next_run_at).to.have.length(24),put+projects_{id}_transfer,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,container_expiration_policy.next_run_at,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.container_expiration_policy.next_run_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.container_expiration_policy.next_run_at),"pm.expect(return_container_expiration_policy_next_run_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",put+projects_{id}_transfer,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,container_expiration_policy.next_run_at,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,LENGTH(return.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.created_at),pm.expect(return_created_at).to.have.length(24),put+projects_{id}_transfer,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,created_at,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.created_at),"pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",put+projects_{id}_transfer,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,created_at,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.creator_id == 1,daikon.inv.unary.scalar.OneOfScalar,(return.creator_id),pm.expect([1].includes(return_creator_id)).to.be.true,put+projects_{id}_transfer,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,creator_id,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,"return.namespace.kind == ""user""",daikon.inv.unary.string.OneOfString,(return.namespace.kind),"pm.expect([""user""].includes(return_namespace_kind)).to.be.true",put+projects_{id}_transfer,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,namespace.kind,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,LENGTH(return.namespace.kind)==4,daikon.inv.unary.string.FixedLengthString,(return.namespace.kind),pm.expect(return_namespace_kind).to.have.length(4),put+projects_{id}_transfer,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,namespace.kind,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,"return.import_status one of { ""finished"", ""none"" }",daikon.inv.unary.string.OneOfString,(return.import_status),"pm.expect([""finished"", ""none""].includes(return_import_status)).to.be.true",put+projects_{id}_transfer,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,import_status,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.permissions == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions),pm.expect(return_permissions).to.be.null,put+projects_{id}_transfer,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,permissions,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.permissions.project_access == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.project_access),pm.expect(return_permissions_project_access).to.be.null,put+projects_{id}_transfer,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,permissions.project_access,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.permissions.group_access == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.group_access),pm.expect(return_permissions_group_access).to.be.null,put+projects_{id}_transfer,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,permissions.group_access,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.license == null,daikon.inv.unary.scalar.OneOfScalar,(return.license),pm.expect(return_license).to.be.null,put+projects_{id}_transfer,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,license,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,"return.forks_count one of { 0, 1 }",daikon.inv.unary.scalar.OneOfScalar,(return.forks_count),"pm.expect([0, 1, 0].includes(return_forks_count)).to.be.true",put+projects_{id}_transfer,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,forks_count,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,"return.star_count one of { 0, 1, 2 }",daikon.inv.unary.scalar.OneOfScalar,(return.star_count),"pm.expect([0, 1, 2].includes(return_star_count)).to.be.true",put+projects_{id}_transfer,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,star_count,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,"return.merge_method == ""merge""",daikon.inv.unary.string.OneOfString,(return.merge_method),"pm.expect([""merge""].includes(return_merge_method)).to.be.true",put+projects_{id}_transfer,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,merge_method,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,LENGTH(return.merge_method)==5,daikon.inv.unary.string.FixedLengthString,(return.merge_method),pm.expect(return_merge_method).to.have.length(5),put+projects_{id}_transfer,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,merge_method,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,"return.auto_devops_deploy_strategy == ""continuous""",daikon.inv.unary.string.OneOfString,(return.auto_devops_deploy_strategy),"pm.expect([""continuous""].includes(return_auto_devops_deploy_strategy)).to.be.true",put+projects_{id}_transfer,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,auto_devops_deploy_strategy,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,LENGTH(return.auto_devops_deploy_strategy)==10,daikon.inv.unary.string.FixedLengthString,(return.auto_devops_deploy_strategy),pm.expect(return_auto_devops_deploy_strategy).to.have.length(10),put+projects_{id}_transfer,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,auto_devops_deploy_strategy,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,"return.repository_storage == ""default""",daikon.inv.unary.string.OneOfString,(return.repository_storage),"pm.expect([""default""].includes(return_repository_storage)).to.be.true",put+projects_{id}_transfer,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,repository_storage,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,LENGTH(return.repository_storage)==7,daikon.inv.unary.string.FixedLengthString,(return.repository_storage),pm.expect(return_repository_storage).to.have.length(7),put+projects_{id}_transfer,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,repository_storage,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.statistics == null,daikon.inv.unary.scalar.OneOfScalar,(return.statistics),pm.expect(return_statistics).to.be.null,put+projects_{id}_transfer,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,statistics,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,LENGTH(return._links.self)==42,daikon.inv.unary.string.FixedLengthString,(return._links.self),pm.expect(return__links_self).to.have.length(42),put+projects_{id}_transfer,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.self,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,LENGTH(return._links.issues)==49,daikon.inv.unary.string.FixedLengthString,(return._links.issues),pm.expect(return__links_issues).to.have.length(49),put+projects_{id}_transfer,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.issues,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,LENGTH(return._links.merge_requests)==57,daikon.inv.unary.string.FixedLengthString,(return._links.merge_requests),pm.expect(return__links_merge_requests).to.have.length(57),put+projects_{id}_transfer,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.merge_requests,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,LENGTH(return._links.repo_branches)==62,daikon.inv.unary.string.FixedLengthString,(return._links.repo_branches),pm.expect(return__links_repo_branches).to.have.length(62),put+projects_{id}_transfer,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.repo_branches,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,LENGTH(return._links.labels)==49,daikon.inv.unary.string.FixedLengthString,(return._links.labels),pm.expect(return__links_labels).to.have.length(49),put+projects_{id}_transfer,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.labels,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,LENGTH(return._links.events)==49,daikon.inv.unary.string.FixedLengthString,(return._links.events),pm.expect(return__links_events).to.have.length(49),put+projects_{id}_transfer,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.events,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,LENGTH(return._links.members)==50,daikon.inv.unary.string.FixedLengthString,(return._links.members),pm.expect(return__links_members).to.have.length(50),put+projects_{id}_transfer,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,_links.members,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,LENGTH(return.forked_from_project.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.forked_from_project.created_at),pm.expect(return_forked_from_project_created_at).to.have.length(24),put+projects_{id}_transfer,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,forked_from_project.created_at,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.forked_from_project.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.forked_from_project.created_at),"pm.expect(return_forked_from_project_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",put+projects_{id}_transfer,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,forked_from_project.created_at,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.forked_from_project.star_count >= 0,daikon.inv.unary.scalar.LowerBound,(return.forked_from_project.star_count),pm.expect(return_forked_from_project_star_count).to.be.at.least(0),put+projects_{id}_transfer,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,forked_from_project.star_count,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.forked_from_project.namespace.id >= 1,daikon.inv.unary.scalar.LowerBound,(return.forked_from_project.namespace.id),pm.expect(return_forked_from_project_namespace_id).to.be.at.least(1),put+projects_{id}_transfer,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,forked_from_project.namespace.id,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,"return.forked_from_project.namespace.kind one of { ""group"", ""user"" }",daikon.inv.unary.string.OneOfString,(return.forked_from_project.namespace.kind),"pm.expect([""group"", ""user""].includes(return_forked_from_project_namespace_kind)).to.be.true",put+projects_{id}_transfer,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,forked_from_project.namespace.kind,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,"size(return.shared_with_groups[]) one of { 0, 1 }",daikon.inv.unary.scalar.OneOfScalar,(size(return.shared_with_groups[..])),"pm.expect([0, 1, 0].includes(return_shared_with_groups_size_array)).to.be.true",put+projects_{id}_transfer,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,shared_with_groups,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,"size(return.forked_from_project.tag_list[]) one of { 0, 1 }",daikon.inv.unary.scalar.OneOfScalar,(size(return.forked_from_project.tag_list[..])),"pm.expect([0, 1, 0].includes(return_forked_from_project_tag_list_size_array)).to.be.true",put+projects_{id}_transfer,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,forked_from_project.tag_list,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,input.id > return.ci_default_git_depth,daikon.inv.binary.twoScalar.IntGreaterThan,"(input.id, return.ci_default_git_depth)",pm.expect(input_id).to.be.greaterThan(return_ci_default_git_depth),put+projects_{id}_transfer,,1.0,,Represents an invariant of > between two long scalars. Prints as x > y.,,ci_default_git_depth,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,input.id > return.forked_from_project.id,daikon.inv.binary.twoScalar.IntGreaterThan,"(input.id, return.forked_from_project.id)",pm.expect(input_id).to.be.greaterThan(return_forked_from_project_id),put+projects_{id}_transfer,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,forked_from_project.id,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,input.namespace >= return.owner.id,daikon.inv.binary.twoScalar.IntGreaterEqual,"(input.namespace, return.owner.id)",pm.expect(input_namespace).to.be.at.least(return_owner_id),put+projects_{id}_transfer,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,owner.id,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,input.namespace >= return.creator_id,daikon.inv.binary.twoScalar.IntGreaterEqual,"(input.namespace, return.creator_id)",pm.expect(input_namespace).to.be.at.least(return_creator_id),put+projects_{id}_transfer,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,creator_id,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,input.namespace > return.forks_count,daikon.inv.binary.twoScalar.IntGreaterThan,"(input.namespace, return.forks_count)",pm.expect(input_namespace).to.be.greaterThan(return_forks_count),put+projects_{id}_transfer,,1.0,,Represents an invariant of > between two long scalars. Prints as x > y.,,forks_count,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,input.namespace >= return.forked_from_project.star_count,daikon.inv.binary.twoScalar.IntGreaterEqual,"(input.namespace, return.forked_from_project.star_count)",pm.expect(input_namespace).to.be.at.least(return_forked_from_project_star_count),put+projects_{id}_transfer,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,forked_from_project.star_count,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,input.namespace > size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntGreaterThan,"(input.namespace, size(return.shared_with_groups[..]))",pm.expect(input_namespace).to.be.greaterThan(return_shared_with_groups_size_array),put+projects_{id}_transfer,,1.0,,Represents an invariant of > between two long scalars. Prints as x > y.,,shared_with_groups,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,input.namespace > size(return.forked_from_project.tag_list[]),daikon.inv.binary.twoScalar.IntGreaterThan,"(input.namespace, size(return.forked_from_project.tag_list[..]))",pm.expect(input_namespace).to.be.greaterThan(return_forked_from_project_tag_list_size_array),put+projects_{id}_transfer,,1.0,,Represents an invariant of > between two long scalars. Prints as x > y.,,forked_from_project.tag_list,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.default_branch is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.default_branch, return.readme_url)",pm.expect(return_readme_url.includes(return_default_branch)).to.be.true,put+projects_{id}_transfer,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,default_branch,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.path_with_namespace is a substring of return.ssh_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.ssh_url_to_repo, return.path_with_namespace)",pm.expect(return_ssh_url_to_repo.includes(return_path_with_namespace)).to.be.true,put+projects_{id}_transfer,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.web_url is a substring of return.http_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.http_url_to_repo, return.web_url)",pm.expect(return_http_url_to_repo.includes(return_web_url)).to.be.true,put+projects_{id}_transfer,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,web_url,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.web_url is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.readme_url)",pm.expect(return_readme_url.includes(return_web_url)).to.be.true,put+projects_{id}_transfer,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,web_url,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.path_with_namespace is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.path_with_namespace)",pm.expect(return_web_url.includes(return_path_with_namespace)).to.be.true,put+projects_{id}_transfer,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.owner.id <= return.container_expiration_policy.keep_n,daikon.inv.binary.twoScalar.IntLessEqual,"(return.owner.id, return.container_expiration_policy.keep_n)",pm.expect(return_owner_id).to.be.lte(return_container_expiration_policy_keep_n),put+projects_{id}_transfer,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,owner.id,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.owner.id >= return.creator_id,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.owner.id, return.creator_id)",pm.expect(return_owner_id).to.be.at.least(return_creator_id),put+projects_{id}_transfer,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,owner.id,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.owner.id > return.forks_count,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.owner.id, return.forks_count)",pm.expect(return_owner_id).to.be.greaterThan(return_forks_count),put+projects_{id}_transfer,,1.0,,Represents an invariant of > between two long scalars. Prints as x > y.,,owner.id,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.owner.id < return.forked_from_project.id,daikon.inv.binary.twoScalar.IntLessThan,"(return.owner.id, return.forked_from_project.id)",pm.expect(return_owner_id).to.be.lessThan(return_forked_from_project_id),put+projects_{id}_transfer,,1.0,,Represents an invariant of < between two long scalars. Prints as x < y.,,owner.id,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.owner.id > size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntGreaterThan,"(return.owner.id, size(return.shared_with_groups[..]))",pm.expect(return_owner_id).to.be.greaterThan(return_shared_with_groups_size_array),put+projects_{id}_transfer,,1.0,,Represents an invariant of > between two long scalars. Prints as x > y.,,owner.id,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.owner.id > size(return.forked_from_project.tag_list[]),daikon.inv.binary.twoScalar.IntGreaterThan,"(return.owner.id, size(return.forked_from_project.tag_list[..]))",pm.expect(return_owner_id).to.be.greaterThan(return_forked_from_project_tag_list_size_array),put+projects_{id}_transfer,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,owner.id,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.owner.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.owner.name, return.name_with_namespace)",pm.expect(return_name_with_namespace.includes(return_owner_name)).to.be.true,put+projects_{id}_transfer,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,name_with_namespace,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.name, return.name_with_namespace)",pm.expect(return_name_with_namespace.includes(return_name)).to.be.true,put+projects_{id}_transfer,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,name_with_namespace,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path, return.path_with_namespace)",pm.expect(return_path_with_namespace.includes(return_path)).to.be.true,put+projects_{id}_transfer,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.namespace.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path_with_namespace, return.namespace.path)",pm.expect(return_path_with_namespace.includes(return_namespace_path)).to.be.true,put+projects_{id}_transfer,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.open_issues_count <= return.forks_count,daikon.inv.binary.twoScalar.IntLessEqual,"(return.open_issues_count, return.forks_count)",pm.expect(return_open_issues_count).to.be.lte(return_forks_count),put+projects_{id}_transfer,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,open_issues_count,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.open_issues_count <= return.star_count,daikon.inv.binary.twoScalar.IntLessEqual,"(return.open_issues_count, return.star_count)",pm.expect(return_open_issues_count).to.be.lte(return_star_count),put+projects_{id}_transfer,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,open_issues_count,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.open_issues_count <= return.forked_from_project.forks_count,daikon.inv.binary.twoScalar.IntLessEqual,"(return.open_issues_count, return.forked_from_project.forks_count)",pm.expect(return_open_issues_count).to.be.lte(return_forked_from_project_forks_count),put+projects_{id}_transfer,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,open_issues_count,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.open_issues_count <= return.forked_from_project.star_count,daikon.inv.binary.twoScalar.IntLessEqual,"(return.open_issues_count, return.forked_from_project.star_count)",pm.expect(return_open_issues_count).to.be.lte(return_forked_from_project_star_count),put+projects_{id}_transfer,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,open_issues_count,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.open_issues_count <= size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntLessEqual,"(return.open_issues_count, size(return.shared_with_groups[..]))",pm.expect(return_open_issues_count).to.be.lte(return_shared_with_groups_size_array),put+projects_{id}_transfer,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,open_issues_count,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.open_issues_count <= size(return.forked_from_project.tag_list[]),daikon.inv.binary.twoScalar.IntLessEqual,"(return.open_issues_count, size(return.forked_from_project.tag_list[..]))",pm.expect(return_open_issues_count).to.be.lte(return_forked_from_project_tag_list_size_array),put+projects_{id}_transfer,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,open_issues_count,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.creator_id >= return.forks_count,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.creator_id, return.forks_count)",pm.expect(return_creator_id).to.be.at.least(return_forks_count),put+projects_{id}_transfer,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,creator_id,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.creator_id <= return.forked_from_project.namespace.id,daikon.inv.binary.twoScalar.IntLessEqual,"(return.creator_id, return.forked_from_project.namespace.id)",pm.expect(return_creator_id).to.be.lte(return_forked_from_project_namespace_id),put+projects_{id}_transfer,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,creator_id,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.creator_id >= size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.creator_id, size(return.shared_with_groups[..]))",pm.expect(return_creator_id).to.be.at.least(return_shared_with_groups_size_array),put+projects_{id}_transfer,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,creator_id,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.creator_id >= size(return.forked_from_project.tag_list[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.creator_id, size(return.forked_from_project.tag_list[..]))",pm.expect(return_creator_id).to.be.at.least(return_forked_from_project_tag_list_size_array),put+projects_{id}_transfer,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,creator_id,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.forks_count <= return.star_count,daikon.inv.binary.twoScalar.IntLessEqual,"(return.forks_count, return.star_count)",pm.expect(return_forks_count).to.be.lte(return_star_count),put+projects_{id}_transfer,,1.0,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,forks_count,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.forks_count <= return.forked_from_project.forks_count,daikon.inv.binary.twoScalar.IntLessEqual,"(return.forks_count, return.forked_from_project.forks_count)",pm.expect(return_forks_count).to.be.lte(return_forked_from_project_forks_count),put+projects_{id}_transfer,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,forks_count,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.forks_count <= return.forked_from_project.star_count,daikon.inv.binary.twoScalar.IntLessEqual,"(return.forks_count, return.forked_from_project.star_count)",pm.expect(return_forks_count).to.be.lte(return_forked_from_project_star_count),put+projects_{id}_transfer,,1.0,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,forks_count,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.forks_count < return.forked_from_project.namespace.id,daikon.inv.binary.twoScalar.IntLessThan,"(return.forks_count, return.forked_from_project.namespace.id)",pm.expect(return_forks_count).to.be.lessThan(return_forked_from_project_namespace_id),put+projects_{id}_transfer,,1.0,,Represents an invariant of < between two long scalars. Prints as x < y.,,forks_count,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.star_count <= return.forked_from_project.forks_count,daikon.inv.binary.twoScalar.IntLessEqual,"(return.star_count, return.forked_from_project.forks_count)",pm.expect(return_star_count).to.be.lte(return_forked_from_project_forks_count),put+projects_{id}_transfer,,1.0,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,star_count,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.merge_method is a substring of return._links.merge_requests,daikon.inv.binary.twoString.StdString$SubString,"(return.merge_method, return._links.merge_requests)",pm.expect(return__links_merge_requests.includes(return_merge_method)).to.be.true,put+projects_{id}_transfer,,1.0,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,merge_method,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return._links.self is a substring of return._links.issues,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.issues)",pm.expect(return__links_issues.includes(return__links_self)).to.be.true,put+projects_{id}_transfer,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return._links.self is a substring of return._links.merge_requests,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.merge_requests)",pm.expect(return__links_merge_requests.includes(return__links_self)).to.be.true,put+projects_{id}_transfer,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return._links.self is a substring of return._links.repo_branches,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.repo_branches)",pm.expect(return__links_repo_branches.includes(return__links_self)).to.be.true,put+projects_{id}_transfer,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return._links.self is a substring of return._links.labels,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.labels)",pm.expect(return__links_labels.includes(return__links_self)).to.be.true,put+projects_{id}_transfer,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return._links.self is a substring of return._links.events,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.events)",pm.expect(return__links_events.includes(return__links_self)).to.be.true,put+projects_{id}_transfer,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return._links.self is a substring of return._links.members,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.members)",pm.expect(return__links_members.includes(return__links_self)).to.be.true,put+projects_{id}_transfer,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.forked_from_project.id > return.forked_from_project.star_count,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.forked_from_project.id, return.forked_from_project.star_count)",pm.expect(return_forked_from_project_id).to.be.greaterThan(return_forked_from_project_star_count),put+projects_{id}_transfer,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,forked_from_project.id,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.forked_from_project.name is a substring of return.forked_from_project.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.forked_from_project.name, return.forked_from_project.name_with_namespace)",pm.expect(return_forked_from_project_name_with_namespace.includes(return_forked_from_project_name)).to.be.true,put+projects_{id}_transfer,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,forked_from_project.name,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.forked_from_project.namespace.name is a substring of return.forked_from_project.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.forked_from_project.name_with_namespace, return.forked_from_project.namespace.name)",pm.expect(return_forked_from_project_name_with_namespace.includes(return_forked_from_project_namespace_name)).to.be.true,put+projects_{id}_transfer,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,forked_from_project.name_with_namespace,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.forked_from_project.path is a substring of return.forked_from_project.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.forked_from_project.path, return.forked_from_project.path_with_namespace)",pm.expect(return_forked_from_project_path_with_namespace.includes(return_forked_from_project_path)).to.be.true,put+projects_{id}_transfer,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,forked_from_project.path,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.forked_from_project.path_with_namespace is a substring of return.forked_from_project.ssh_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.forked_from_project.path_with_namespace, return.forked_from_project.ssh_url_to_repo)",pm.expect(return_forked_from_project_ssh_url_to_repo.includes(return_forked_from_project_path_with_namespace)).to.be.true,put+projects_{id}_transfer,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,forked_from_project.path_with_namespace,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.forked_from_project.path_with_namespace is a substring of return.forked_from_project.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.forked_from_project.path_with_namespace, return.forked_from_project.web_url)",pm.expect(return_forked_from_project_web_url.includes(return_forked_from_project_path_with_namespace)).to.be.true,put+projects_{id}_transfer,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,forked_from_project.path_with_namespace,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.forked_from_project.namespace.full_path is a substring of return.forked_from_project.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.forked_from_project.path_with_namespace, return.forked_from_project.namespace.full_path)",pm.expect(return_forked_from_project_path_with_namespace.includes(return_forked_from_project_namespace_full_path)).to.be.true,put+projects_{id}_transfer,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,forked_from_project.path_with_namespace,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.forked_from_project.web_url is a substring of return.forked_from_project.http_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.forked_from_project.http_url_to_repo, return.forked_from_project.web_url)",pm.expect(return_forked_from_project_http_url_to_repo.includes(return_forked_from_project_web_url)).to.be.true,put+projects_{id}_transfer,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,forked_from_project.http_url_to_repo,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.forked_from_project.forks_count >= size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.forked_from_project.forks_count, size(return.shared_with_groups[..]))",pm.expect(return_forked_from_project_forks_count).to.be.at.least(return_shared_with_groups_size_array),put+projects_{id}_transfer,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,forked_from_project.forks_count,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.forked_from_project.forks_count >= size(return.forked_from_project.tag_list[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.forked_from_project.forks_count, size(return.forked_from_project.tag_list[..]))",pm.expect(return_forked_from_project_forks_count).to.be.at.least(return_forked_from_project_tag_list_size_array),put+projects_{id}_transfer,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,forked_from_project.forks_count,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.forked_from_project.namespace.id >= size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.forked_from_project.namespace.id, size(return.shared_with_groups[..]))",pm.expect(return_forked_from_project_namespace_id).to.be.at.least(return_shared_with_groups_size_array),put+projects_{id}_transfer,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,forked_from_project.namespace.id,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.forked_from_project.namespace.id >= size(return.forked_from_project.tag_list[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.forked_from_project.namespace.id, size(return.forked_from_project.tag_list[..]))",pm.expect(return_forked_from_project_namespace_id).to.be.at.least(return_forked_from_project_tag_list_size_array),put+projects_{id}_transfer,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,forked_from_project.namespace.id,GitLab Project API
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT,return.forked_from_project.namespace.path is a substring of return.forked_from_project.namespace.full_path,daikon.inv.binary.twoString.StdString$SubString,"(return.forked_from_project.namespace.path, return.forked_from_project.namespace.full_path)",pm.expect(return_forked_from_project_namespace_full_path.includes(return_forked_from_project_namespace_path)).to.be.true,put+projects_{id}_transfer,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,forked_from_project.namespace.path,GitLab Project API
/projects&/projects&get&200%array():::EXIT,input.id_after > size(return.array[]),daikon.inv.binary.twoScalar.IntGreaterThan,"(input.id_after, size(return.array[..]))",pm.expect(input_id_after).to.be.greaterThan(return_array_size_array),get+projects,,1.0,,Represents an invariant of > between two long scalars. Prints as x > y.,,array,GitLab Project API
/projects&/projects&get&200&shared_with_groups():::EXIT,"return.group_id one of { 176, 1070 }",daikon.inv.unary.scalar.OneOfScalar,(return.group_id),"pm.expect([176, 1070, 0].includes(return_group_id)).to.be.true",get+projects,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,shared_with_groups.group_id,GitLab Project API
/projects&/projects&get&200&shared_with_groups():::EXIT,"return.group_name one of { ""effortlessly"", ""myjane"" }",daikon.inv.unary.string.OneOfString,(return.group_name),"pm.expect([""effortlessly"", ""myjane""].includes(return_group_name)).to.be.true",get+projects,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,shared_with_groups.group_name,GitLab Project API
/projects&/projects&get&200&shared_with_groups():::EXIT,"return.group_full_path one of { ""myjane"", ""salubriousness"" }",daikon.inv.unary.string.OneOfString,(return.group_full_path),"pm.expect([""myjane"", ""salubriousness""].includes(return_group_full_path)).to.be.true",get+projects,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,shared_with_groups.group_full_path,GitLab Project API
/projects&/projects&get&200&shared_with_groups():::EXIT,"return.group_access_level one of { 20, 30 }",daikon.inv.unary.scalar.OneOfScalar,(return.group_access_level),"pm.expect([20, 30, 0].includes(return_group_access_level)).to.be.true",get+projects,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,shared_with_groups.group_access_level,GitLab Project API
/projects&/projects&get&200():::EXIT,input.archived == return.archived,daikon.inv.binary.twoScalar.IntEqual,"(input.archived, return.archived)",pm.expect(input_archived).to.eql(return_archived),get+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,archived,GitLab Project API
/projects&/projects&get&200():::EXIT,input.simple == return.service_desk_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.simple, return.service_desk_enabled)",pm.expect(input_simple).to.eql(return_service_desk_enabled),get+projects,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,service_desk_enabled,GitLab Project API
/projects&/projects&get&200():::EXIT,input.visibility == return.visibility,daikon.inv.binary.twoString.StringEqual,"(input.visibility, return.visibility)",pm.expect(input_visibility).to.eql(return_visibility),get+projects,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,visibility,GitLab Project API
/projects&/projects&get&200():::EXIT,return.owner.name == return.namespace.name,daikon.inv.binary.twoString.StringEqual,"(return.owner.name, return.namespace.name)",pm.expect(return_owner_name).to.eql(return_namespace_name),get+projects,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,owner.name,GitLab Project API
/projects&/projects&get&200():::EXIT,return.permissions.project_access.access_level == return.permissions.group_access.access_level,daikon.inv.binary.twoScalar.IntEqual,"(return.permissions.project_access.access_level, return.permissions.group_access.access_level)",pm.expect(return_permissions_project_access_access_level).to.eql(return_permissions_group_access_access_level),get+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,permissions.project_access.access_level,GitLab Project API
/projects&/projects&get&200():::EXIT,return.permissions.project_access.notification_level == return.permissions.group_access.notification_level,daikon.inv.binary.twoScalar.IntEqual,"(return.permissions.project_access.notification_level, return.permissions.group_access.notification_level)",pm.expect(return_permissions_project_access_notification_level).to.eql(return_permissions_group_access_notification_level),get+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,permissions.project_access.notification_level,GitLab Project API
/projects&/projects&get&200():::EXIT,return.statistics.lfs_objects_size == return.statistics.job_artifacts_size,daikon.inv.binary.twoScalar.IntEqual,"(return.statistics.lfs_objects_size, return.statistics.job_artifacts_size)",pm.expect(return_statistics_lfs_objects_size).to.eql(return_statistics_job_artifacts_size),get+projects,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,statistics.job_artifacts_size,GitLab Project API
/projects&/projects&get&200():::EXIT,return.statistics.lfs_objects_size == return.statistics.packages_size,daikon.inv.binary.twoScalar.IntEqual,"(return.statistics.lfs_objects_size, return.statistics.packages_size)",pm.expect(return_statistics_lfs_objects_size).to.eql(return_statistics_packages_size),get+projects,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,statistics.lfs_objects_size,GitLab Project API
/projects&/projects&get&200():::EXIT,return.statistics.lfs_objects_size == return.statistics.snippets_size,daikon.inv.binary.twoScalar.IntEqual,"(return.statistics.lfs_objects_size, return.statistics.snippets_size)",pm.expect(return_statistics_lfs_objects_size).to.eql(return_statistics_snippets_size),get+projects,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,statistics.lfs_objects_size,GitLab Project API
/projects&/projects&get&200():::EXIT,"return.visibility one of { ""internal"", ""private"", ""public"" }",daikon.inv.unary.string.OneOfString,(return.visibility),"pm.expect([""internal"", ""private"", ""public""].includes(return_visibility)).to.be.true",get+projects,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,visibility,GitLab Project API
/projects&/projects&get&200():::EXIT,return.owner.id >= 1,daikon.inv.unary.scalar.LowerBound,(return.owner.id),pm.expect(return_owner_id).to.be.at.least(1),get+projects,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,owner.id,GitLab Project API
/projects&/projects&get&200():::EXIT,return.open_issues_count >= 0,daikon.inv.unary.scalar.LowerBound,(return.open_issues_count),pm.expect(return_open_issues_count).to.be.at.least(0),get+projects,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,open_issues_count,GitLab Project API
/projects&/projects&get&200():::EXIT,LENGTH(return.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.created_at),pm.expect(return_created_at).to.have.length(24),get+projects,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,created_at,GitLab Project API
/projects&/projects&get&200():::EXIT,return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.created_at),"pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+projects,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,created_at,GitLab Project API
/projects&/projects&get&200():::EXIT,LENGTH(return.last_activity_at)==24,daikon.inv.unary.string.FixedLengthString,(return.last_activity_at),pm.expect(return_last_activity_at).to.have.length(24),get+projects,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,last_activity_at,GitLab Project API
/projects&/projects&get&200():::EXIT,return.last_activity_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.last_activity_at),"pm.expect(return_last_activity_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+projects,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,last_activity_at,GitLab Project API
/projects&/projects&get&200():::EXIT,return.creator_id >= 1,daikon.inv.unary.scalar.LowerBound,(return.creator_id),pm.expect(return_creator_id).to.be.at.least(1),get+projects,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,creator_id,GitLab Project API
/projects&/projects&get&200():::EXIT,return.namespace.id >= 1,daikon.inv.unary.scalar.LowerBound,(return.namespace.id),pm.expect(return_namespace_id).to.be.at.least(1),get+projects,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,namespace.id,GitLab Project API
/projects&/projects&get&200():::EXIT,"return.namespace.kind one of { ""group"", ""user"" }",daikon.inv.unary.string.OneOfString,(return.namespace.kind),"pm.expect([""group"", ""user""].includes(return_namespace_kind)).to.be.true",get+projects,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,namespace.kind,GitLab Project API
/projects&/projects&get&200():::EXIT,"return.import_status one of { ""finished"", ""none"" }",daikon.inv.unary.string.OneOfString,(return.import_status),"pm.expect([""finished"", ""none""].includes(return_import_status)).to.be.true",get+projects,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,import_status,GitLab Project API
/projects&/projects&get&200():::EXIT,return.permissions.project_access.access_level == 50,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.project_access.access_level),pm.expect([50].includes(return_permissions_project_access_access_level)).to.be.true,get+projects,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,permissions.project_access.access_level,GitLab Project API
/projects&/projects&get&200():::EXIT,return.permissions.project_access.notification_level == 3,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.project_access.notification_level),pm.expect([3].includes(return_permissions_project_access_notification_level)).to.be.true,get+projects,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,permissions.project_access.notification_level,GitLab Project API
/projects&/projects&get&200():::EXIT,return.permissions.group_access.access_level == 50,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.group_access.access_level),pm.expect([50].includes(return_permissions_group_access_access_level)).to.be.true,get+projects,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,permissions.group_access.access_level,GitLab Project API
/projects&/projects&get&200():::EXIT,return.permissions.group_access.notification_level == 3,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.group_access.notification_level),pm.expect([3].includes(return_permissions_group_access_notification_level)).to.be.true,get+projects,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,permissions.group_access.notification_level,GitLab Project API
/projects&/projects&get&200():::EXIT,"return.avatar_url one of { ""https://gitlab.com/gropoutoux/bvcbvc/-/avatar"", ""https://gitlab.com/uploads/-/system/project/avatar/53268997/rect1.png"" }",daikon.inv.unary.string.OneOfString,(return.avatar_url),"pm.expect([""https://gitlab.com/gropoutoux/bvcbvc/-/avatar"", ""https://gitlab.com/uploads/-/system/project/avatar/53268997/rect1.png""].includes(return_avatar_url)).to.be.true",get+projects,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,avatar_url,GitLab Project API
/projects&/projects&get&200():::EXIT,return.avatar_url is Url,daikon.inv.unary.string.IsUrl,(return.avatar_url),"pm.expect(return_avatar_url).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",get+projects,1.0,,,Indicates that the value of a string variable is always a URL. Represented as x is Url.,,avatar_url,GitLab Project API
/projects&/projects&get&200():::EXIT,return.forks_count >= 0,daikon.inv.unary.scalar.LowerBound,(return.forks_count),pm.expect(return_forks_count).to.be.at.least(0),get+projects,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,forks_count,GitLab Project API
/projects&/projects&get&200():::EXIT,return.star_count >= 0,daikon.inv.unary.scalar.LowerBound,(return.star_count),pm.expect(return_star_count).to.be.at.least(0),get+projects,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,star_count,GitLab Project API
/projects&/projects&get&200():::EXIT,LENGTH(return.runners_token)==29,daikon.inv.unary.string.FixedLengthString,(return.runners_token),pm.expect(return_runners_token).to.have.length(29),get+projects,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,runners_token,GitLab Project API
/projects&/projects&get&200():::EXIT,"return.merge_method one of { ""ff"", ""merge"", ""rebase_merge"" }",daikon.inv.unary.string.OneOfString,(return.merge_method),"pm.expect([""ff"", ""merge"", ""rebase_merge""].includes(return_merge_method)).to.be.true",get+projects,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,merge_method,GitLab Project API
/projects&/projects&get&200():::EXIT,"return.auto_devops_deploy_strategy one of { ""continuous"", ""manual"", ""timed_incremental"" }",daikon.inv.unary.string.OneOfString,(return.auto_devops_deploy_strategy),"pm.expect([""continuous"", ""manual"", ""timed_incremental""].includes(return_auto_devops_deploy_strategy)).to.be.true",get+projects,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,auto_devops_deploy_strategy,GitLab Project API
/projects&/projects&get&200():::EXIT,"return.repository_storage == ""default""",daikon.inv.unary.string.OneOfString,(return.repository_storage),"pm.expect([""default""].includes(return_repository_storage)).to.be.true",get+projects,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,repository_storage,GitLab Project API
/projects&/projects&get&200():::EXIT,LENGTH(return.repository_storage)==7,daikon.inv.unary.string.FixedLengthString,(return.repository_storage),pm.expect(return_repository_storage).to.have.length(7),get+projects,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,repository_storage,GitLab Project API
/projects&/projects&get&200():::EXIT,"return.external_authorization_classification_label == """"",daikon.inv.unary.string.OneOfString,(return.external_authorization_classification_label),"pm.expect([""""].includes(return_external_authorization_classification_label)).to.be.true",get+projects,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,external_authorization_classification_label,GitLab Project API
/projects&/projects&get&200():::EXIT,LENGTH(return.external_authorization_classification_label)==0,daikon.inv.unary.string.FixedLengthString,(return.external_authorization_classification_label),pm.expect(return_external_authorization_classification_label).to.have.length(0),get+projects,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,external_authorization_classification_label,GitLab Project API
/projects&/projects&get&200():::EXIT,return.service_desk_enabled == false,daikon.inv.unary.scalar.OneOfScalar,(return.service_desk_enabled),pm.expect(return_service_desk_enabled).to.eql(false),get+projects,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,service_desk_enabled,GitLab Project API
/projects&/projects&get&200():::EXIT,return.statistics.commit_count >= 0,daikon.inv.unary.scalar.LowerBound,(return.statistics.commit_count),pm.expect(return_statistics_commit_count).to.be.at.least(0),get+projects,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,statistics.commit_count,GitLab Project API
/projects&/projects&get&200():::EXIT,return.statistics.storage_size >= 0,daikon.inv.unary.scalar.LowerBound,(return.statistics.storage_size),pm.expect(return_statistics_storage_size).to.be.at.least(0),get+projects,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,statistics.storage_size,GitLab Project API
/projects&/projects&get&200():::EXIT,return.statistics.repository_size >= 0,daikon.inv.unary.scalar.LowerBound,(return.statistics.repository_size),pm.expect(return_statistics_repository_size).to.be.at.least(0),get+projects,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,statistics.repository_size,GitLab Project API
/projects&/projects&get&200():::EXIT,"return.statistics.wiki_size one of { 0, 41943 }",daikon.inv.unary.scalar.OneOfScalar,(return.statistics.wiki_size),"pm.expect([0, 41943, 0].includes(return_statistics_wiki_size)).to.be.true",get+projects,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,statistics.wiki_size,GitLab Project API
/projects&/projects&get&200():::EXIT,return.statistics.lfs_objects_size == 0,daikon.inv.unary.scalar.OneOfScalar,(return.statistics.lfs_objects_size),pm.expect([0].includes(return_statistics_lfs_objects_size)).to.be.true,get+projects,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,statistics.lfs_objects_size,GitLab Project API
/projects&/projects&get&200():::EXIT,"size(return.shared_with_groups[]) one of { 0, 1 }",daikon.inv.unary.scalar.OneOfScalar,(size(return.shared_with_groups[..])),"pm.expect([0, 1, 0].includes(return_shared_with_groups_size_array)).to.be.true",get+projects,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,shared_with_groups,GitLab Project API
/projects&/projects&get&200():::EXIT,input.id_after < return.id,daikon.inv.binary.twoScalar.IntLessThan,"(input.id_after, return.id)",pm.expect(input_id_after).to.be.lessThan(return_id),get+projects,1.0,,,Represents an invariant of < between two long scalars. Prints as x < y.,,id,GitLab Project API
/projects&/projects&get&200():::EXIT,input.id_before > return.id,daikon.inv.binary.twoScalar.IntGreaterThan,"(input.id_before, return.id)",pm.expect(input_id_before).to.be.greaterThan(return_id),get+projects,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,id,GitLab Project API
/projects&/projects&get&200():::EXIT,input.id_before > return.owner.id,daikon.inv.binary.twoScalar.IntGreaterThan,"(input.id_before, return.owner.id)",pm.expect(input_id_before).to.be.greaterThan(return_owner_id),get+projects,,1.0,,Represents an invariant of > between two long scalars. Prints as x > y.,,owner.id,GitLab Project API
/projects&/projects&get&200():::EXIT,input.id_before > return.creator_id,daikon.inv.binary.twoScalar.IntGreaterThan,"(input.id_before, return.creator_id)",pm.expect(input_id_before).to.be.greaterThan(return_creator_id),get+projects,,1.0,,Represents an invariant of > between two long scalars. Prints as x > y.,,creator_id,GitLab Project API
/projects&/projects&get&200():::EXIT,return.id > return.open_issues_count,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.id, return.open_issues_count)",pm.expect(return_id).to.be.greaterThan(return_open_issues_count),get+projects,,1.0,,Represents an invariant of > between two long scalars. Prints as x > y.,,id,GitLab Project API
/projects&/projects&get&200():::EXIT,return.id > return.forks_count,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.id, return.forks_count)",pm.expect(return_id).to.be.greaterThan(return_forks_count),get+projects,,1.0,,Represents an invariant of > between two long scalars. Prints as x > y.,,id,GitLab Project API
/projects&/projects&get&200():::EXIT,return.id > return.star_count,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.id, return.star_count)",pm.expect(return_id).to.be.greaterThan(return_star_count),get+projects,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,id,GitLab Project API
/projects&/projects&get&200():::EXIT,return.id > size(return.tag_list[]),daikon.inv.binary.twoScalar.IntGreaterThan,"(return.id, size(return.tag_list[..]))",pm.expect(return_id).to.be.greaterThan(return_tag_list_size_array),get+projects,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,tag_list,GitLab Project API
/projects&/projects&get&200():::EXIT,return.default_branch is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.default_branch, return.readme_url)",pm.expect(return_readme_url.includes(return_default_branch)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,default_branch,GitLab Project API
/projects&/projects&get&200():::EXIT,return.path_with_namespace is a substring of return.ssh_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.ssh_url_to_repo, return.path_with_namespace)",pm.expect(return_ssh_url_to_repo.includes(return_path_with_namespace)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Project API
/projects&/projects&get&200():::EXIT,return.web_url is a substring of return.http_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.http_url_to_repo, return.web_url)",pm.expect(return_http_url_to_repo.includes(return_web_url)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,web_url,GitLab Project API
/projects&/projects&get&200():::EXIT,return.web_url is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.readme_url)",pm.expect(return_readme_url.includes(return_web_url)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,web_url,GitLab Project API
/projects&/projects&get&200():::EXIT,return.path_with_namespace is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.path_with_namespace)",pm.expect(return_web_url.includes(return_path_with_namespace)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Project API
/projects&/projects&get&200():::EXIT,return.owner.id > size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntGreaterThan,"(return.owner.id, size(return.shared_with_groups[..]))",pm.expect(return_owner_id).to.be.greaterThan(return_shared_with_groups_size_array),get+projects,,1.0,,Represents an invariant of > between two long scalars. Prints as x > y.,,owner.id,GitLab Project API
/projects&/projects&get&200():::EXIT,return.owner.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.owner.name, return.name_with_namespace)",pm.expect(return_name_with_namespace.includes(return_owner_name)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,name_with_namespace,GitLab Project API
/projects&/projects&get&200():::EXIT,return.owner.name is a substring of return.avatar_url,daikon.inv.binary.twoString.StdString$SubString,"(return.owner.name, return.avatar_url)",pm.expect(return_avatar_url.includes(return_owner_name)).to.be.true,get+projects,,1.0,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,owner.name,GitLab Project API
/projects&/projects&get&200():::EXIT,return.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.name, return.name_with_namespace)",pm.expect(return_name_with_namespace.includes(return_name)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,name_with_namespace,GitLab Project API
/projects&/projects&get&200():::EXIT,return.namespace.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.name_with_namespace, return.namespace.name)",pm.expect(return_name_with_namespace.includes(return_namespace_name)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,name_with_namespace,GitLab Project API
/projects&/projects&get&200():::EXIT,return.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path, return.path_with_namespace)",pm.expect(return_path_with_namespace.includes(return_path)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Project API
/projects&/projects&get&200():::EXIT,return.namespace.full_path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path_with_namespace, return.namespace.full_path)",pm.expect(return_path_with_namespace.includes(return_namespace_full_path)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Project API
/projects&/projects&get&200():::EXIT,return.open_issues_count >= return.statistics.lfs_objects_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.open_issues_count, return.statistics.lfs_objects_size)",pm.expect(return_open_issues_count).to.be.at.least(return_statistics_lfs_objects_size),get+projects,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,open_issues_count,GitLab Project API
/projects&/projects&get&200():::EXIT,return.creator_id >= size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.creator_id, size(return.shared_with_groups[..]))",pm.expect(return_creator_id).to.be.at.least(return_shared_with_groups_size_array),get+projects,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,creator_id,GitLab Project API
/projects&/projects&get&200():::EXIT,return.namespace.id > size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntGreaterThan,"(return.namespace.id, size(return.shared_with_groups[..]))",pm.expect(return_namespace_id).to.be.greaterThan(return_shared_with_groups_size_array),get+projects,,1.0,,Represents an invariant of > between two long scalars. Prints as x > y.,,namespace.id,GitLab Project API
/projects&/projects&get&200():::EXIT,return.namespace.path is a substring of return.namespace.full_path,daikon.inv.binary.twoString.StdString$SubString,"(return.namespace.path, return.namespace.full_path)",pm.expect(return_namespace_full_path.includes(return_namespace_path)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,namespace.path,GitLab Project API
/projects&/projects&get&200():::EXIT,return.permissions.group_access.notification_level >= return.forks_count,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.permissions.group_access.notification_level, return.forks_count)",pm.expect(return_permissions_group_access_notification_level).to.be.at.least(return_forks_count),get+projects,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,permissions.group_access.notification_level,GitLab Project API
/projects&/projects&get&200():::EXIT,return.permissions.group_access.notification_level >= size(return.tag_list[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.permissions.group_access.notification_level, size(return.tag_list[..]))",pm.expect(return_permissions_group_access_notification_level).to.be.at.least(return_tag_list_size_array),get+projects,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,tag_list,GitLab Project API
/projects&/projects&get&200():::EXIT,return.forks_count >= return.statistics.lfs_objects_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.forks_count, return.statistics.lfs_objects_size)",pm.expect(return_forks_count).to.be.at.least(return_statistics_lfs_objects_size),get+projects,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,forks_count,GitLab Project API
/projects&/projects&get&200():::EXIT,return.star_count >= return.statistics.lfs_objects_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.star_count, return.statistics.lfs_objects_size)",pm.expect(return_star_count).to.be.at.least(return_statistics_lfs_objects_size),get+projects,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,star_count,GitLab Project API
/projects&/projects&get&200():::EXIT,return.statistics.commit_count >= return.statistics.lfs_objects_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.commit_count, return.statistics.lfs_objects_size)",pm.expect(return_statistics_commit_count).to.be.at.least(return_statistics_lfs_objects_size),get+projects,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,statistics.commit_count,GitLab Project API
/projects&/projects&get&200():::EXIT,return.statistics.commit_count >= size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.commit_count, size(return.shared_with_groups[..]))",pm.expect(return_statistics_commit_count).to.be.at.least(return_shared_with_groups_size_array),get+projects,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,statistics.commit_count,GitLab Project API
/projects&/projects&get&200():::EXIT,return.statistics.storage_size >= return.statistics.repository_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.storage_size, return.statistics.repository_size)",pm.expect(return_statistics_storage_size).to.be.at.least(return_statistics_repository_size),get+projects,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,statistics.storage_size,GitLab Project API
/projects&/projects&get&200():::EXIT,return.statistics.storage_size >= return.statistics.wiki_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.storage_size, return.statistics.wiki_size)",pm.expect(return_statistics_storage_size).to.be.at.least(return_statistics_wiki_size),get+projects,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,statistics.storage_size,GitLab Project API
/projects&/projects&get&200():::EXIT,return.statistics.storage_size >= return.statistics.lfs_objects_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.storage_size, return.statistics.lfs_objects_size)",pm.expect(return_statistics_storage_size).to.be.at.least(return_statistics_lfs_objects_size),get+projects,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,statistics.storage_size,GitLab Project API
/projects&/projects&get&200():::EXIT,return.statistics.storage_size >= size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.storage_size, size(return.shared_with_groups[..]))",pm.expect(return_statistics_storage_size).to.be.at.least(return_shared_with_groups_size_array),get+projects,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,statistics.storage_size,GitLab Project API
/projects&/projects&get&200():::EXIT,return.statistics.repository_size >= return.statistics.lfs_objects_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.repository_size, return.statistics.lfs_objects_size)",pm.expect(return_statistics_repository_size).to.be.at.least(return_statistics_lfs_objects_size),get+projects,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,statistics.repository_size,GitLab Project API
/projects&/projects&get&200():::EXIT,return.statistics.repository_size >= size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.repository_size, size(return.shared_with_groups[..]))",pm.expect(return_statistics_repository_size).to.be.at.least(return_shared_with_groups_size_array),get+projects,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,statistics.repository_size,GitLab Project API
/projects&/projects&get&200():::EXIT,return.statistics.wiki_size >= return.statistics.lfs_objects_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.wiki_size, return.statistics.lfs_objects_size)",pm.expect(return_statistics_wiki_size).to.be.at.least(return_statistics_lfs_objects_size),get+projects,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,statistics.wiki_size,GitLab Project API
/projects&/projects&get&200():::EXIT,return.statistics.lfs_objects_size <= size(return.tag_list[]),daikon.inv.binary.twoScalar.IntLessEqual,"(return.statistics.lfs_objects_size, size(return.tag_list[..]))",pm.expect(return_statistics_lfs_objects_size).to.be.lte(return_tag_list_size_array),get+projects,,1.0,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,tag_list,GitLab Project API
/projects&/projects&get&200():::EXIT,return.statistics.lfs_objects_size <= size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntLessEqual,"(return.statistics.lfs_objects_size, size(return.shared_with_groups[..]))",pm.expect(return_statistics_lfs_objects_size).to.be.lte(return_shared_with_groups_size_array),get+projects,,1.0,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,statistics.lfs_objects_size,GitLab Project API
/projects&/projects&get&200():::EXIT,return._links.self is a substring of return._links.issues,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.issues)",pm.expect(return__links_issues.includes(return__links_self)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects&/projects&get&200():::EXIT,return._links.self is a substring of return._links.merge_requests,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.merge_requests)",pm.expect(return__links_merge_requests.includes(return__links_self)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects&/projects&get&200():::EXIT,return._links.self is a substring of return._links.repo_branches,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.repo_branches)",pm.expect(return__links_repo_branches.includes(return__links_self)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects&/projects&get&200():::EXIT,return._links.self is a substring of return._links.labels,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.labels)",pm.expect(return__links_labels.includes(return__links_self)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects&/projects&get&200():::EXIT,return._links.self is a substring of return._links.events,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.events)",pm.expect(return__links_events.includes(return__links_self)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects&/projects&get&200():::EXIT,return._links.self is a substring of return._links.members,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.members)",pm.expect(return__links_members.includes(return__links_self)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects&/projects&post&201():::EXIT,input.allow_merge_on_skipped_pipeline == return.allow_merge_on_skipped_pipeline,daikon.inv.binary.twoScalar.IntEqual,"(input.allow_merge_on_skipped_pipeline, return.allow_merge_on_skipped_pipeline)",pm.expect(input_allow_merge_on_skipped_pipeline).to.eql(return_allow_merge_on_skipped_pipeline),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,allow_merge_on_skipped_pipeline,GitLab Project API
/projects&/projects&post&201():::EXIT,input.auto_devops_deploy_strategy == return.auto_devops_deploy_strategy,daikon.inv.binary.twoString.StringEqual,"(input.auto_devops_deploy_strategy, return.auto_devops_deploy_strategy)",pm.expect(input_auto_devops_deploy_strategy).to.eql(return_auto_devops_deploy_strategy),post+projects,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,auto_devops_deploy_strategy,GitLab Project API
/projects&/projects&post&201():::EXIT,input.auto_devops_enabled == return.auto_devops_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.auto_devops_enabled, return.auto_devops_enabled)",pm.expect(input_auto_devops_enabled).to.eql(return_auto_devops_enabled),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,auto_devops_enabled,GitLab Project API
/projects&/projects&post&201():::EXIT,input.autoclose_referenced_issues == return.autoclose_referenced_issues,daikon.inv.binary.twoScalar.IntEqual,"(input.autoclose_referenced_issues, return.autoclose_referenced_issues)",pm.expect(input_autoclose_referenced_issues).to.eql(return_autoclose_referenced_issues),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,autoclose_referenced_issues,GitLab Project API
/projects&/projects&post&201():::EXIT,input.container_registry_enabled == return.container_registry_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.container_registry_enabled, return.container_registry_enabled)",pm.expect(input_container_registry_enabled).to.eql(return_container_registry_enabled),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,container_registry_enabled,GitLab Project API
/projects&/projects&post&201():::EXIT,input.description == return.description,daikon.inv.binary.twoString.StringEqual,"(input.description, return.description)",pm.expect(input_description).to.eql(return_description),post+projects,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,description,GitLab Project API
/projects&/projects&post&201():::EXIT,input.merge_method == return.merge_method,daikon.inv.binary.twoString.StringEqual,"(input.merge_method, return.merge_method)",pm.expect(input_merge_method).to.eql(return_merge_method),post+projects,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,merge_method,GitLab Project API
/projects&/projects&post&201():::EXIT,input.name == return.name,daikon.inv.binary.twoString.StringEqual,"(input.name, return.name)",pm.expect(input_name).to.eql(return_name),post+projects,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,name,GitLab Project API
/projects&/projects&post&201():::EXIT,input.namespace_id == return.namespace.id,daikon.inv.binary.twoScalar.IntEqual,"(input.namespace_id, return.namespace.id)",pm.expect(input_namespace_id).to.eql(return_namespace_id),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,namespace.id,GitLab Project API
/projects&/projects&post&201():::EXIT,input.only_allow_merge_if_all_discussions_are_resolved == return.only_allow_merge_if_all_discussions_are_resolved,daikon.inv.binary.twoScalar.IntEqual,"(input.only_allow_merge_if_all_discussions_are_resolved, return.only_allow_merge_if_all_discussions_are_resolved)",pm.expect(input_only_allow_merge_if_all_discussions_are_resolved).to.eql(return_only_allow_merge_if_all_discussions_are_resolved),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,only_allow_merge_if_all_discussions_are_resolved,GitLab Project API
/projects&/projects&post&201():::EXIT,input.only_allow_merge_if_pipeline_succeeds == return.only_allow_merge_if_pipeline_succeeds,daikon.inv.binary.twoScalar.IntEqual,"(input.only_allow_merge_if_pipeline_succeeds, return.only_allow_merge_if_pipeline_succeeds)",pm.expect(input_only_allow_merge_if_pipeline_succeeds).to.eql(return_only_allow_merge_if_pipeline_succeeds),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,only_allow_merge_if_pipeline_succeeds,GitLab Project API
/projects&/projects&post&201():::EXIT,input.packages_enabled == return.packages_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.packages_enabled, return.packages_enabled)",pm.expect(input_packages_enabled).to.eql(return_packages_enabled),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,packages_enabled,GitLab Project API
/projects&/projects&post&201():::EXIT,input.path == return.path,daikon.inv.binary.twoString.StringEqual,"(input.path, return.path)",pm.expect(input_path).to.eql(return_path),post+projects,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,path,GitLab Project API
/projects&/projects&post&201():::EXIT,input.public_builds == return.public_jobs,daikon.inv.binary.twoScalar.IntEqual,"(input.public_builds, return.public_jobs)",pm.expect(input_public_builds).to.eql(return_public_jobs),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,public_jobs,GitLab Project API
/projects&/projects&post&201():::EXIT,input.remove_source_branch_after_merge == return.remove_source_branch_after_merge,daikon.inv.binary.twoScalar.IntEqual,"(input.remove_source_branch_after_merge, return.remove_source_branch_after_merge)",pm.expect(input_remove_source_branch_after_merge).to.eql(return_remove_source_branch_after_merge),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,remove_source_branch_after_merge,GitLab Project API
/projects&/projects&post&201():::EXIT,input.repository_storage == return.repository_storage,daikon.inv.binary.twoString.StringEqual,"(input.repository_storage, return.repository_storage)",pm.expect(input_repository_storage).to.eql(return_repository_storage),post+projects,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,repository_storage,GitLab Project API
/projects&/projects&post&201():::EXIT,input.request_access_enabled == return.request_access_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.request_access_enabled, return.request_access_enabled)",pm.expect(input_request_access_enabled).to.eql(return_request_access_enabled),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,request_access_enabled,GitLab Project API
/projects&/projects&post&201():::EXIT,input.resolve_outdated_diff_discussions == return.resolve_outdated_diff_discussions,daikon.inv.binary.twoScalar.IntEqual,"(input.resolve_outdated_diff_discussions, return.resolve_outdated_diff_discussions)",pm.expect(input_resolve_outdated_diff_discussions).to.eql(return_resolve_outdated_diff_discussions),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,resolve_outdated_diff_discussions,GitLab Project API
/projects&/projects&post&201():::EXIT,input.shared_runners_enabled == return.shared_runners_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.shared_runners_enabled, return.shared_runners_enabled)",pm.expect(input_shared_runners_enabled).to.eql(return_shared_runners_enabled),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,shared_runners_enabled,GitLab Project API
/projects&/projects&post&201():::EXIT,input.visibility == return.visibility,daikon.inv.binary.twoString.StringEqual,"(input.visibility, return.visibility)",pm.expect(input_visibility).to.eql(return_visibility),post+projects,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,visibility,GitLab Project API
/projects&/projects&post&201():::EXIT,return.owner.id == return.creator_id,daikon.inv.binary.twoScalar.IntEqual,"(return.owner.id, return.creator_id)",pm.expect(return_owner_id).to.eql(return_creator_id),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,owner.id,GitLab Project API
/projects&/projects&post&201():::EXIT,return.owner.name == return.namespace.name,daikon.inv.binary.twoString.StringEqual,"(return.owner.name, return.namespace.name)",pm.expect(return_owner_name).to.eql(return_namespace_name),post+projects,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,owner.name,GitLab Project API
/projects&/projects&post&201():::EXIT,return.open_issues_count == return.forks_count,daikon.inv.binary.twoScalar.IntEqual,"(return.open_issues_count, return.forks_count)",pm.expect(return_open_issues_count).to.eql(return_forks_count),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,open_issues_count,GitLab Project API
/projects&/projects&post&201():::EXIT,return.merge_requests_enabled == return.can_create_merge_request_in,daikon.inv.binary.twoScalar.IntEqual,"(return.merge_requests_enabled, return.can_create_merge_request_in)",pm.expect(return_merge_requests_enabled).to.eql(return_can_create_merge_request_in),post+projects,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,merge_requests_enabled,GitLab Project API
/projects&/projects&post&201():::EXIT,return.archived == return.service_desk_enabled,daikon.inv.binary.twoScalar.IntEqual,"(return.archived, return.service_desk_enabled)",pm.expect(return_archived).to.eql(return_service_desk_enabled),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,archived,GitLab Project API
/projects&/projects&post&201():::EXIT,return.forks_count == return.star_count,daikon.inv.binary.twoScalar.IntEqual,"(return.forks_count, return.star_count)",pm.expect(return_forks_count).to.eql(return_star_count),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,forks_count,GitLab Project API
/projects&/projects&post&201():::EXIT,return.forks_count == size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntEqual,"(return.forks_count, size(return.shared_with_groups[..]))",pm.expect(return_forks_count).to.eql(return_shared_with_groups_size_array),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,forks_count,GitLab Project API
/projects&/projects&post&201():::EXIT,return.forks_count == size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntEqual,"(return.forks_count, size(return.shared_with_groups[..]))",pm.expect(return_forks_count).to.eql(return_shared_with_groups_size_array),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,forks_count,GitLab Project API
/projects&/projects&post&201():::EXIT,size(input.tag_list[]) == size(return.tag_list[]),daikon.inv.binary.twoScalar.IntEqual,"(size(input.tag_list[..]), size(return.tag_list[..]))",pm.expect(input_tag_list_size_array).to.eql(return_tag_list_size_array),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,tag_list,GitLab Project API
/projects&/projects&post&201():::EXIT,"return.visibility one of { ""internal"", ""private"", ""public"" }",daikon.inv.unary.string.OneOfString,(return.visibility),"pm.expect([""internal"", ""private"", ""public""].includes(return_visibility)).to.be.true",post+projects,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,visibility,GitLab Project API
/projects&/projects&post&201():::EXIT,return.open_issues_count == 0,daikon.inv.unary.scalar.OneOfScalar,(return.open_issues_count),pm.expect([0].includes(return_open_issues_count)).to.be.true,post+projects,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,open_issues_count,GitLab Project API
/projects&/projects&post&201():::EXIT,LENGTH(return.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.created_at),pm.expect(return_created_at).to.have.length(24),post+projects,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,created_at,GitLab Project API
/projects&/projects&post&201():::EXIT,return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.created_at),"pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",post+projects,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,created_at,GitLab Project API
/projects&/projects&post&201():::EXIT,LENGTH(return.last_activity_at)==24,daikon.inv.unary.string.FixedLengthString,(return.last_activity_at),pm.expect(return_last_activity_at).to.have.length(24),post+projects,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,last_activity_at,GitLab Project API
/projects&/projects&post&201():::EXIT,return.last_activity_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.last_activity_at),"pm.expect(return_last_activity_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",post+projects,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,last_activity_at,GitLab Project API
/projects&/projects&post&201():::EXIT,return.namespace.id >= 1,daikon.inv.unary.scalar.LowerBound,(return.namespace.id),pm.expect(return_namespace_id).to.be.at.least(1),post+projects,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,namespace.id,GitLab Project API
/projects&/projects&post&201():::EXIT,"return.namespace.kind one of { ""group"", ""user"" }",daikon.inv.unary.string.OneOfString,(return.namespace.kind),"pm.expect([""group"", ""user""].includes(return_namespace_kind)).to.be.true",post+projects,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,namespace.kind,GitLab Project API
/projects&/projects&post&201():::EXIT,"return.import_status == ""none""",daikon.inv.unary.string.OneOfString,(return.import_status),"pm.expect([""none""].includes(return_import_status)).to.be.true",post+projects,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,import_status,GitLab Project API
/projects&/projects&post&201():::EXIT,LENGTH(return.import_status)==4,daikon.inv.unary.string.FixedLengthString,(return.import_status),pm.expect(return_import_status).to.have.length(4),post+projects,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,import_status,GitLab Project API
/projects&/projects&post&201():::EXIT,return.permissions == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions),pm.expect(return_permissions).to.be.null,post+projects,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,permissions,GitLab Project API
/projects&/projects&post&201():::EXIT,return.permissions.project_access == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.project_access),pm.expect(return_permissions_project_access).to.be.null,post+projects,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,permissions.project_access,GitLab Project API
/projects&/projects&post&201():::EXIT,return.permissions.group_access == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.group_access),pm.expect(return_permissions_group_access).to.be.null,post+projects,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,permissions.group_access,GitLab Project API
/projects&/projects&post&201():::EXIT,return.archived == false,daikon.inv.unary.scalar.OneOfScalar,(return.archived),pm.expect(return_archived).to.eql(false),post+projects,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,archived,GitLab Project API
/projects&/projects&post&201():::EXIT,LENGTH(return.runners_token)==29,daikon.inv.unary.string.FixedLengthString,(return.runners_token),pm.expect(return_runners_token).to.have.length(29),post+projects,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,runners_token,GitLab Project API
/projects&/projects&post&201():::EXIT,return.ci_default_git_depth == 20,daikon.inv.unary.scalar.OneOfScalar,(return.ci_default_git_depth),pm.expect([20].includes(return_ci_default_git_depth)).to.be.true,post+projects,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,ci_default_git_depth,GitLab Project API
/projects&/projects&post&201():::EXIT,return.ci_forward_deployment_enabled == true,daikon.inv.unary.scalar.OneOfScalar,(return.ci_forward_deployment_enabled),pm.expect(return_ci_forward_deployment_enabled).to.eql(true),post+projects,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,ci_forward_deployment_enabled,GitLab Project API
/projects&/projects&post&201():::EXIT,return.shared_with_groups[] == [],daikon.inv.unary.sequence.OneOfSequence,(return.shared_with_groups[..]),pm.expect([[]].some(value => pm.expect(return_shared_with_groups_array).to.deep.equal(value).that)).to.be.true,post+projects,1.0,,,"Represents long[] variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,shared_with_groups,GitLab Project API
/projects&/projects&post&201():::EXIT,"return.merge_method one of { ""ff"", ""merge"", ""rebase_merge"" }",daikon.inv.unary.string.OneOfString,(return.merge_method),"pm.expect([""ff"", ""merge"", ""rebase_merge""].includes(return_merge_method)).to.be.true",post+projects,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,merge_method,GitLab Project API
/projects&/projects&post&201():::EXIT,"return.auto_devops_deploy_strategy one of { ""continuous"", ""manual"", ""timed_incremental"" }",daikon.inv.unary.string.OneOfString,(return.auto_devops_deploy_strategy),"pm.expect([""continuous"", ""manual"", ""timed_incremental""].includes(return_auto_devops_deploy_strategy)).to.be.true",post+projects,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,auto_devops_deploy_strategy,GitLab Project API
/projects&/projects&post&201():::EXIT,"return.repository_storage == ""default""",daikon.inv.unary.string.OneOfString,(return.repository_storage),"pm.expect([""default""].includes(return_repository_storage)).to.be.true",post+projects,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,repository_storage,GitLab Project API
/projects&/projects&post&201():::EXIT,LENGTH(return.repository_storage)==7,daikon.inv.unary.string.FixedLengthString,(return.repository_storage),pm.expect(return_repository_storage).to.have.length(7),post+projects,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,repository_storage,GitLab Project API
/projects&/projects&post&201():::EXIT,return.statistics == null,daikon.inv.unary.scalar.OneOfScalar,(return.statistics),pm.expect(return_statistics).to.be.null,post+projects,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,statistics,GitLab Project API
/projects&/projects&post&201():::EXIT,input.default_branch is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(input.default_branch, return.readme_url)",pm.expect(return_readme_url.includes(input_default_branch)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,readme_url,GitLab Project API
/projects&/projects&post&201():::EXIT,input.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(input.name, return.name_with_namespace)",pm.expect(return_name_with_namespace.includes(input_name)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,name_with_namespace,GitLab Project API
/projects&/projects&post&201():::EXIT,input.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(input.path, return.path_with_namespace)",pm.expect(return_path_with_namespace.includes(input_path)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Project API
/projects&/projects&post&201():::EXIT,return.id > return.namespace.id,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.id, return.namespace.id)",pm.expect(return_id).to.be.greaterThan(return_namespace_id),post+projects,,1.0,,Represents an invariant of > between two long scalars. Prints as x > y.,,id,GitLab Project API
/projects&/projects&post&201():::EXIT,return.default_branch is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.default_branch, return.readme_url)",pm.expect(return_readme_url.includes(return_default_branch)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,default_branch,GitLab Project API
/projects&/projects&post&201():::EXIT,return.path_with_namespace is a substring of return.ssh_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.ssh_url_to_repo, return.path_with_namespace)",pm.expect(return_ssh_url_to_repo.includes(return_path_with_namespace)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Project API
/projects&/projects&post&201():::EXIT,return.web_url is a substring of return.http_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.http_url_to_repo, return.web_url)",pm.expect(return_http_url_to_repo.includes(return_web_url)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,web_url,GitLab Project API
/projects&/projects&post&201():::EXIT,return.web_url is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.readme_url)",pm.expect(return_readme_url.includes(return_web_url)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,web_url,GitLab Project API
/projects&/projects&post&201():::EXIT,return.path_with_namespace is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.path_with_namespace)",pm.expect(return_web_url.includes(return_path_with_namespace)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Project API
/projects&/projects&post&201():::EXIT,return.owner.id <= return.namespace.id,daikon.inv.binary.twoScalar.IntLessEqual,"(return.owner.id, return.namespace.id)",pm.expect(return_owner_id).to.be.lte(return_namespace_id),post+projects,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,owner.id,GitLab Project API
/projects&/projects&post&201():::EXIT,return.owner.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.owner.name, return.name_with_namespace)",pm.expect(return_name_with_namespace.includes(return_owner_name)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,name_with_namespace,GitLab Project API
/projects&/projects&post&201():::EXIT,return.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.name, return.name_with_namespace)",pm.expect(return_name_with_namespace.includes(return_name)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,name_with_namespace,GitLab Project API
/projects&/projects&post&201():::EXIT,return.namespace.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.name_with_namespace, return.namespace.name)",pm.expect(return_name_with_namespace.includes(return_namespace_name)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,name_with_namespace,GitLab Project API
/projects&/projects&post&201():::EXIT,return.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path, return.path_with_namespace)",pm.expect(return_path_with_namespace.includes(return_path)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Project API
/projects&/projects&post&201():::EXIT,return.namespace.full_path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path_with_namespace, return.namespace.full_path)",pm.expect(return_path_with_namespace.includes(return_namespace_full_path)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Project API
/projects&/projects&post&201():::EXIT,return.open_issues_count <= size(return.tag_list[]),daikon.inv.binary.twoScalar.IntLessEqual,"(return.open_issues_count, size(return.tag_list[..]))",pm.expect(return_open_issues_count).to.be.lte(return_tag_list_size_array),post+projects,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,tag_list,GitLab Project API
/projects&/projects&post&201():::EXIT,return.creator_id <= return.namespace.id,daikon.inv.binary.twoScalar.IntLessEqual,"(return.creator_id, return.namespace.id)",pm.expect(return_creator_id).to.be.lte(return_namespace_id),post+projects,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,creator_id,GitLab Project API
/projects&/projects&post&201():::EXIT,return.namespace.path is a substring of return.namespace.full_path,daikon.inv.binary.twoString.StdString$SubString,"(return.namespace.path, return.namespace.full_path)",pm.expect(return_namespace_full_path.includes(return_namespace_path)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,namespace.path,GitLab Project API
/projects&/projects&post&201():::EXIT,return.forks_count <= size(return.tag_list[]),daikon.inv.binary.twoScalar.IntLessEqual,"(return.forks_count, size(return.tag_list[..]))",pm.expect(return_forks_count).to.be.lte(return_tag_list_size_array),post+projects,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,tag_list,GitLab Project API
/projects&/projects&post&201():::EXIT,return._links.self is a substring of return._links.issues,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.issues)",pm.expect(return__links_issues.includes(return__links_self)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects&/projects&post&201():::EXIT,return._links.self is a substring of return._links.merge_requests,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.merge_requests)",pm.expect(return__links_merge_requests.includes(return__links_self)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects&/projects&post&201():::EXIT,return._links.self is a substring of return._links.repo_branches,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.repo_branches)",pm.expect(return__links_repo_branches.includes(return__links_self)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects&/projects&post&201():::EXIT,return._links.self is a substring of return._links.labels,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.labels)",pm.expect(return__links_labels.includes(return__links_self)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects&/projects&post&201():::EXIT,return._links.self is a substring of return._links.events,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.events)",pm.expect(return__links_events.includes(return__links_self)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
/projects&/projects&post&201():::EXIT,return._links.self is a substring of return._links.members,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.members)",pm.expect(return__links_members.includes(return__links_self)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Project API
