endpoint,group,invariant,invariantType,variables,postmanAssertion,pptname
get+projects,_links.self,"return._links.self is a substring of return._links.issues
return._links.self is a substring of return._links.merge_requests
return._links.self is a substring of return._links.repo_branches
return._links.self is a substring of return._links.labels
return._links.self is a substring of return._links.events
return._links.self is a substring of return._links.members","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return._links.self, return._links.issues)
(return._links.self, return._links.merge_requests)
(return._links.self, return._links.repo_branches)
(return._links.self, return._links.labels)
(return._links.self, return._links.events)
(return._links.self, return._links.members)","pm.expect(return__links_issues.includes(return__links_self)).to.be.true
pm.expect(return__links_merge_requests.includes(return__links_self)).to.be.true
pm.expect(return__links_repo_branches.includes(return__links_self)).to.be.true
pm.expect(return__links_labels.includes(return__links_self)).to.be.true
pm.expect(return__links_events.includes(return__links_self)).to.be.true
pm.expect(return__links_members.includes(return__links_self)).to.be.true","/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT"
get+projects,archived,input.archived == return.archived,daikon.inv.binary.twoScalar.IntEqual,"(input.archived, return.archived)",pm.expect(input_archived).to.eql(return_archived),/projects&/projects&get&200():::EXIT
get+projects,auto_devops_deploy_strategy,"return.auto_devops_deploy_strategy one of { ""continuous"", ""manual"", ""timed_incremental"" }",daikon.inv.unary.string.OneOfString,(return.auto_devops_deploy_strategy),"pm.expect([""continuous"", ""manual"", ""timed_incremental""].includes(return_auto_devops_deploy_strategy)).to.be.true",/projects&/projects&get&200():::EXIT
get+projects,avatar_url,return.avatar_url is Url,daikon.inv.unary.string.IsUrl,(return.avatar_url),"pm.expect(return_avatar_url).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",/projects&/projects&get&200():::EXIT
get+projects,created_at,"LENGTH(return.created_at)==24
return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.created_at)
(return.created_at)","pm.expect(return_created_at).to.have.length(24)
pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)","/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT"
get+projects,creator_id,return.creator_id >= 1,daikon.inv.unary.scalar.LowerBound,(return.creator_id),pm.expect(return_creator_id).to.be.at.least(1),/projects&/projects&get&200():::EXIT
get+projects,default_branch,return.default_branch is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.default_branch, return.readme_url)",pm.expect(return_readme_url.includes(return_default_branch)).to.be.true,/projects&/projects&get&200():::EXIT
get+projects,external_authorization_classification_label,"return.external_authorization_classification_label == """"
LENGTH(return.external_authorization_classification_label)==0","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.external_authorization_classification_label)
(return.external_authorization_classification_label)","pm.expect([""""].includes(return_external_authorization_classification_label)).to.be.true
pm.expect(return_external_authorization_classification_label).to.have.length(0)","/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT"
get+projects,forks_count,return.forks_count >= 0,daikon.inv.unary.scalar.LowerBound,(return.forks_count),pm.expect(return_forks_count).to.be.at.least(0),/projects&/projects&get&200():::EXIT
get+projects,http_url_to_repo,return.web_url is a substring of return.http_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.http_url_to_repo, return.web_url)",pm.expect(return_http_url_to_repo.includes(return_web_url)).to.be.true,/projects&/projects&get&200():::EXIT
get+projects,id,"input.id_after < return.id
input.id_before > return.id
return.id > return.star_count
return.id > size(return.tag_list[])","daikon.inv.binary.twoScalar.IntLessThan
daikon.inv.binary.twoScalar.IntGreaterThan
daikon.inv.binary.twoScalar.IntGreaterThan
daikon.inv.binary.twoScalar.IntGreaterThan","(input.id_after, return.id)
(input.id_before, return.id)
(return.id, return.star_count)
(return.id, size(return.tag_list[..]))","pm.expect(input_id_after).to.be.lessThan(return_id)
pm.expect(input_id_before).to.be.greaterThan(return_id)
pm.expect(return_id).to.be.greaterThan(return_star_count)
pm.expect(return_id).to.be.greaterThan(return_tag_list_size_array)","/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT"
get+projects,last_activity_at,"LENGTH(return.last_activity_at)==24
return.last_activity_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.last_activity_at)
(return.last_activity_at)","pm.expect(return_last_activity_at).to.have.length(24)
pm.expect(return_last_activity_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)","/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT"
get+projects,merge_method,"return.merge_method one of { ""ff"", ""merge"", ""rebase_merge"" }",daikon.inv.unary.string.OneOfString,(return.merge_method),"pm.expect([""ff"", ""merge"", ""rebase_merge""].includes(return_merge_method)).to.be.true",/projects&/projects&get&200():::EXIT
get+projects,name,return.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.name, return.name_with_namespace)",pm.expect(return_name_with_namespace.includes(return_name)).to.be.true,/projects&/projects&get&200():::EXIT
get+projects,name_with_namespace,return.namespace.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.name_with_namespace, return.namespace.name)",pm.expect(return_name_with_namespace.includes(return_namespace_name)).to.be.true,/projects&/projects&get&200():::EXIT
get+projects,namespace.id,return.namespace.id >= 1,daikon.inv.unary.scalar.LowerBound,(return.namespace.id),pm.expect(return_namespace_id).to.be.at.least(1),/projects&/projects&get&200():::EXIT
get+projects,namespace.kind,"return.namespace.kind one of { ""group"", ""user"" }",daikon.inv.unary.string.OneOfString,(return.namespace.kind),"pm.expect([""group"", ""user""].includes(return_namespace_kind)).to.be.true",/projects&/projects&get&200():::EXIT
get+projects,namespace.path,return.namespace.path is a substring of return.namespace.full_path,daikon.inv.binary.twoString.StdString$SubString,"(return.namespace.path, return.namespace.full_path)",pm.expect(return_namespace_full_path.includes(return_namespace_path)).to.be.true,/projects&/projects&get&200():::EXIT
get+projects,open_issues_count,return.open_issues_count >= 0,daikon.inv.unary.scalar.LowerBound,(return.open_issues_count),pm.expect(return_open_issues_count).to.be.at.least(0),/projects&/projects&get&200():::EXIT
get+projects,owner.id,return.owner.id >= 1,daikon.inv.unary.scalar.LowerBound,(return.owner.id),pm.expect(return_owner_id).to.be.at.least(1),/projects&/projects&get&200():::EXIT
get+projects,owner.name,"return.owner.name == return.namespace.name
return.owner.name is a substring of return.name_with_namespace","daikon.inv.binary.twoString.StringEqual
daikon.inv.binary.twoString.StdString$SubString","(return.owner.name, return.namespace.name)
(return.owner.name, return.name_with_namespace)","pm.expect(return_owner_name).to.eql(return_namespace_name)
pm.expect(return_name_with_namespace.includes(return_owner_name)).to.be.true","/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT"
get+projects,path,return.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path, return.path_with_namespace)",pm.expect(return_path_with_namespace.includes(return_path)).to.be.true,/projects&/projects&get&200():::EXIT
get+projects,path_with_namespace,return.namespace.full_path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path_with_namespace, return.namespace.full_path)",pm.expect(return_path_with_namespace.includes(return_namespace_full_path)).to.be.true,/projects&/projects&get&200():::EXIT
get+projects,permissions.group_access.notification_level,return.permissions.group_access.notification_level == 3,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.group_access.notification_level),pm.expect([3].includes(return_permissions_group_access_notification_level)).to.be.true,/projects&/projects&get&200():::EXIT
get+projects,permissions.project_access.access_level,return.permissions.project_access.access_level == return.permissions.group_access.access_level,daikon.inv.binary.twoScalar.IntEqual,"(return.permissions.project_access.access_level, return.permissions.group_access.access_level)",pm.expect(return_permissions_project_access_access_level).to.eql(return_permissions_group_access_access_level),/projects&/projects&get&200():::EXIT
get+projects,permissions.project_access.notification_level,"return.permissions.project_access.notification_level == return.permissions.group_access.notification_level
return.permissions.project_access.notification_level == 3","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.OneOfScalar","(return.permissions.project_access.notification_level, return.permissions.group_access.notification_level)
(return.permissions.project_access.notification_level)","pm.expect(return_permissions_project_access_notification_level).to.eql(return_permissions_group_access_notification_level)
pm.expect([3].includes(return_permissions_project_access_notification_level)).to.be.true","/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT"
get+projects,repository_storage,"return.repository_storage == ""default""
LENGTH(return.repository_storage)==7","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.repository_storage)
(return.repository_storage)","pm.expect([""default""].includes(return_repository_storage)).to.be.true
pm.expect(return_repository_storage).to.have.length(7)","/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT"
get+projects,runners_token,LENGTH(return.runners_token)==29,daikon.inv.unary.string.FixedLengthString,(return.runners_token),pm.expect(return_runners_token).to.have.length(29),/projects&/projects&get&200():::EXIT
get+projects,ssh_url_to_repo,return.path_with_namespace is a substring of return.ssh_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.ssh_url_to_repo, return.path_with_namespace)",pm.expect(return_ssh_url_to_repo.includes(return_path_with_namespace)).to.be.true,/projects&/projects&get&200():::EXIT
get+projects,star_count,return.star_count >= 0,daikon.inv.unary.scalar.LowerBound,(return.star_count),pm.expect(return_star_count).to.be.at.least(0),/projects&/projects&get&200():::EXIT
get+projects,statistics.commit_count,return.statistics.commit_count >= 0,daikon.inv.unary.scalar.LowerBound,(return.statistics.commit_count),pm.expect(return_statistics_commit_count).to.be.at.least(0),/projects&/projects&get&200():::EXIT
get+projects,statistics.repository_size,"return.statistics.repository_size >= 0
return.statistics.repository_size >= return.statistics.lfs_objects_size","daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.statistics.repository_size)
(return.statistics.repository_size, return.statistics.lfs_objects_size)","pm.expect(return_statistics_repository_size).to.be.at.least(0)
pm.expect(return_statistics_repository_size).to.be.at.least(return_statistics_lfs_objects_size)","/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT"
get+projects,statistics.storage_size,"return.statistics.storage_size >= 0
return.statistics.storage_size >= return.statistics.repository_size
return.statistics.storage_size >= return.statistics.wiki_size
return.statistics.storage_size >= return.statistics.lfs_objects_size","daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.statistics.storage_size)
(return.statistics.storage_size, return.statistics.repository_size)
(return.statistics.storage_size, return.statistics.wiki_size)
(return.statistics.storage_size, return.statistics.lfs_objects_size)","pm.expect(return_statistics_storage_size).to.be.at.least(0)
pm.expect(return_statistics_storage_size).to.be.at.least(return_statistics_repository_size)
pm.expect(return_statistics_storage_size).to.be.at.least(return_statistics_wiki_size)
pm.expect(return_statistics_storage_size).to.be.at.least(return_statistics_lfs_objects_size)","/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT"
get+projects,visibility,"input.visibility == return.visibility
return.visibility one of { ""internal"", ""private"", ""public"" }","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.OneOfString","(input.visibility, return.visibility)
(return.visibility)","pm.expect(input_visibility).to.eql(return_visibility)
pm.expect([""internal"", ""private"", ""public""].includes(return_visibility)).to.be.true","/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT"
get+projects,web_url,"return.web_url is a substring of return.readme_url
return.path_with_namespace is a substring of return.web_url","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return.web_url, return.readme_url)
(return.web_url, return.path_with_namespace)","pm.expect(return_readme_url.includes(return_web_url)).to.be.true
pm.expect(return_web_url.includes(return_path_with_namespace)).to.be.true","/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT"
get+projects_{id},_links.self,"input.id is a substring of return._links.self
return._links.self is a substring of return._links.issues
return._links.self is a substring of return._links.merge_requests
return._links.self is a substring of return._links.repo_branches
return._links.self is a substring of return._links.labels
return._links.self is a substring of return._links.events
return._links.self is a substring of return._links.members","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(input.id, return._links.self)
(return._links.self, return._links.issues)
(return._links.self, return._links.merge_requests)
(return._links.self, return._links.repo_branches)
(return._links.self, return._links.labels)
(return._links.self, return._links.events)
(return._links.self, return._links.members)","pm.expect(return__links_self.includes(input_id)).to.be.true
pm.expect(return__links_issues.includes(return__links_self)).to.be.true
pm.expect(return__links_merge_requests.includes(return__links_self)).to.be.true
pm.expect(return__links_repo_branches.includes(return__links_self)).to.be.true
pm.expect(return__links_labels.includes(return__links_self)).to.be.true
pm.expect(return__links_events.includes(return__links_self)).to.be.true
pm.expect(return__links_members.includes(return__links_self)).to.be.true","/projects/{id}&/projects/{id}&get&200():::EXIT
/projects/{id}&/projects/{id}&get&200():::EXIT
/projects/{id}&/projects/{id}&get&200():::EXIT
/projects/{id}&/projects/{id}&get&200():::EXIT
/projects/{id}&/projects/{id}&get&200():::EXIT
/projects/{id}&/projects/{id}&get&200():::EXIT
/projects/{id}&/projects/{id}&get&200():::EXIT"
get+projects_{id},archived,"return.archived == return.service_desk_enabled
return.archived == false","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.OneOfScalar","(return.archived, return.service_desk_enabled)
(return.archived)","pm.expect(return_archived).to.eql(return_service_desk_enabled)
pm.expect(return_archived).to.eql(false)","/projects/{id}&/projects/{id}&get&200():::EXIT
/projects/{id}&/projects/{id}&get&200():::EXIT"
get+projects_{id},auto_devops_deploy_strategy,"return.auto_devops_deploy_strategy one of { ""continuous"", ""manual"", ""timed_incremental"" }",daikon.inv.unary.string.OneOfString,(return.auto_devops_deploy_strategy),"pm.expect([""continuous"", ""manual"", ""timed_incremental""].includes(return_auto_devops_deploy_strategy)).to.be.true",/projects/{id}&/projects/{id}&get&200():::EXIT
get+projects_{id},compliance_frameworks,return.compliance_frameworks[] == [],daikon.inv.unary.stringsequence.OneOfStringSequence,(return.compliance_frameworks[..]),pm.expect([[]].some(value => pm.expect(return_compliance_frameworks_array).to.deep.equal(value).that)).to.be.true,/projects/{id}&/projects/{id}&get&200():::EXIT
get+projects_{id},container_expiration_policy.cadence,"return.container_expiration_policy.cadence == ""1d""
LENGTH(return.container_expiration_policy.cadence)==2","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.container_expiration_policy.cadence)
(return.container_expiration_policy.cadence)","pm.expect([""1d""].includes(return_container_expiration_policy_cadence)).to.be.true
pm.expect(return_container_expiration_policy_cadence).to.have.length(2)","/projects/{id}&/projects/{id}&get&200():::EXIT
/projects/{id}&/projects/{id}&get&200():::EXIT"
get+projects_{id},container_expiration_policy.enabled,return.container_expiration_policy.enabled == return.archived,daikon.inv.binary.twoScalar.IntEqual,"(return.container_expiration_policy.enabled, return.archived)",pm.expect(return_container_expiration_policy_enabled).to.eql(return_archived),/projects/{id}&/projects/{id}&get&200():::EXIT
get+projects_{id},container_expiration_policy.keep_n,return.container_expiration_policy.keep_n == 10,daikon.inv.unary.scalar.OneOfScalar,(return.container_expiration_policy.keep_n),pm.expect([10].includes(return_container_expiration_policy_keep_n)).to.be.true,/projects/{id}&/projects/{id}&get&200():::EXIT
get+projects_{id},container_expiration_policy.name_regex,"return.container_expiration_policy.name_regex == "".*""
LENGTH(return.container_expiration_policy.name_regex)==2","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.container_expiration_policy.name_regex)
(return.container_expiration_policy.name_regex)","pm.expect(["".*""].includes(return_container_expiration_policy_name_regex)).to.be.true
pm.expect(return_container_expiration_policy_name_regex).to.have.length(2)","/projects/{id}&/projects/{id}&get&200():::EXIT
/projects/{id}&/projects/{id}&get&200():::EXIT"
get+projects_{id},container_expiration_policy.next_run_at,"LENGTH(return.container_expiration_policy.next_run_at)==24
return.container_expiration_policy.next_run_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.container_expiration_policy.next_run_at)
(return.container_expiration_policy.next_run_at)","pm.expect(return_container_expiration_policy_next_run_at).to.have.length(24)
pm.expect(return_container_expiration_policy_next_run_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)","/projects/{id}&/projects/{id}&get&200():::EXIT
/projects/{id}&/projects/{id}&get&200():::EXIT"
get+projects_{id},container_expiration_policy.older_than,"return.container_expiration_policy.older_than == ""90d""
LENGTH(return.container_expiration_policy.older_than)==3","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.container_expiration_policy.older_than)
(return.container_expiration_policy.older_than)","pm.expect([""90d""].includes(return_container_expiration_policy_older_than)).to.be.true
pm.expect(return_container_expiration_policy_older_than).to.have.length(3)","/projects/{id}&/projects/{id}&get&200():::EXIT
/projects/{id}&/projects/{id}&get&200():::EXIT"
get+projects_{id},created_at,"LENGTH(return.created_at)==24
return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.created_at)
(return.created_at)","pm.expect(return_created_at).to.have.length(24)
pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)","/projects/{id}&/projects/{id}&get&200():::EXIT
/projects/{id}&/projects/{id}&get&200():::EXIT"
get+projects_{id},creator_id,"return.creator_id >= 1
return.creator_id <= return.namespace.id
return.creator_id >= return.statistics.commit_count","daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.creator_id)
(return.creator_id, return.namespace.id)
(return.creator_id, return.statistics.commit_count)","pm.expect(return_creator_id).to.be.at.least(1)
pm.expect(return_creator_id).to.be.lte(return_namespace_id)
pm.expect(return_creator_id).to.be.at.least(return_statistics_commit_count)","/projects/{id}&/projects/{id}&get&200():::EXIT
/projects/{id}&/projects/{id}&get&200():::EXIT
/projects/{id}&/projects/{id}&get&200():::EXIT"
get+projects_{id},default_branch,return.default_branch is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.default_branch, return.readme_url)",pm.expect(return_readme_url.includes(return_default_branch)).to.be.true,/projects/{id}&/projects/{id}&get&200():::EXIT
get+projects_{id},forked_from_project,return.forked_from_project == null,daikon.inv.unary.scalar.OneOfScalar,(return.forked_from_project),pm.expect(return_forked_from_project).to.be.null,/projects/{id}&/projects/{id}&get&200():::EXIT
get+projects_{id},forked_from_project.namespace,return.forked_from_project.namespace == null,daikon.inv.unary.scalar.OneOfScalar,(return.forked_from_project.namespace),pm.expect(return_forked_from_project_namespace).to.be.null,/projects/{id}&/projects/{id}&get&200():::EXIT
get+projects_{id},forked_from_project.tag_list,return.forked_from_project.tag_list == null,daikon.inv.unary.scalar.OneOfScalar,(return.forked_from_project.tag_list),pm.expect(return_forked_from_project_tag_list).to.be.null,/projects/{id}&/projects/{id}&get&200():::EXIT
get+projects_{id},http_url_to_repo,return.web_url is a substring of return.http_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.http_url_to_repo, return.web_url)",pm.expect(return_http_url_to_repo.includes(return_web_url)).to.be.true,/projects/{id}&/projects/{id}&get&200():::EXIT
get+projects_{id},id,return.id > return.namespace.id,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.id, return.namespace.id)",pm.expect(return_id).to.be.greaterThan(return_namespace_id),/projects/{id}&/projects/{id}&get&200():::EXIT
get+projects_{id},license,"return.license == return.forked_from_project.license
return.license == null","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.OneOfScalar","(return.license, return.forked_from_project.license)
(return.license)","pm.expect(return_license).to.eql(return_forked_from_project_license)
pm.expect(return_license).to.be.null","/projects/{id}&/projects/{id}&get&200():::EXIT
/projects/{id}&/projects/{id}&get&200():::EXIT"
get+projects_{id},merge_method,"return.merge_method one of { ""ff"", ""merge"", ""rebase_merge"" }",daikon.inv.unary.string.OneOfString,(return.merge_method),"pm.expect([""ff"", ""merge"", ""rebase_merge""].includes(return_merge_method)).to.be.true",/projects/{id}&/projects/{id}&get&200():::EXIT
get+projects_{id},merge_requests_enabled,return.merge_requests_enabled == return.can_create_merge_request_in,daikon.inv.binary.twoScalar.IntEqual,"(return.merge_requests_enabled, return.can_create_merge_request_in)",pm.expect(return_merge_requests_enabled).to.eql(return_can_create_merge_request_in),/projects/{id}&/projects/{id}&get&200():::EXIT
get+projects_{id},name,return.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.name, return.name_with_namespace)",pm.expect(return_name_with_namespace.includes(return_name)).to.be.true,/projects/{id}&/projects/{id}&get&200():::EXIT
get+projects_{id},namespace.id,"return.namespace.id >= 1
return.namespace.id >= return.statistics.commit_count","daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.namespace.id)
(return.namespace.id, return.statistics.commit_count)","pm.expect(return_namespace_id).to.be.at.least(1)
pm.expect(return_namespace_id).to.be.at.least(return_statistics_commit_count)","/projects/{id}&/projects/{id}&get&200():::EXIT
/projects/{id}&/projects/{id}&get&200():::EXIT"
get+projects_{id},namespace.kind,"return.namespace.kind == ""user""
LENGTH(return.namespace.kind)==4","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.namespace.kind)
(return.namespace.kind)","pm.expect([""user""].includes(return_namespace_kind)).to.be.true
pm.expect(return_namespace_kind).to.have.length(4)","/projects/{id}&/projects/{id}&get&200():::EXIT
/projects/{id}&/projects/{id}&get&200():::EXIT"
get+projects_{id},namespace.path,return.namespace.path == return.namespace.full_path,daikon.inv.binary.twoString.StringEqual,"(return.namespace.path, return.namespace.full_path)",pm.expect(return_namespace_path).to.eql(return_namespace_full_path),/projects/{id}&/projects/{id}&get&200():::EXIT
get+projects_{id},open_issues_count,"return.open_issues_count == return.forks_count
return.open_issues_count == return.statistics.wiki_size
return.open_issues_count == size(return.shared_with_groups[])
return.open_issues_count == size(return.shared_with_groups[])
return.open_issues_count == size(return.compliance_frameworks[])
return.open_issues_count == size(return.compliance_frameworks[])
return.open_issues_count <= return.statistics.commit_count
return.open_issues_count <= return.statistics.storage_size
return.open_issues_count <= size(return.tag_list[])","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual","(return.open_issues_count, return.forks_count)
(return.open_issues_count, return.statistics.wiki_size)
(return.open_issues_count, size(return.shared_with_groups[..]))
(return.open_issues_count, size(return.shared_with_groups[..]))
(return.open_issues_count, size(return.compliance_frameworks[..]))
(return.open_issues_count, size(return.compliance_frameworks[..]))
(return.open_issues_count, return.statistics.commit_count)
(return.open_issues_count, return.statistics.storage_size)
(return.open_issues_count, size(return.tag_list[..]))","pm.expect(return_open_issues_count).to.eql(return_forks_count)
pm.expect(return_open_issues_count).to.eql(return_statistics_wiki_size)
pm.expect(return_open_issues_count).to.eql(return_shared_with_groups_size_array)
pm.expect(return_open_issues_count).to.eql(return_shared_with_groups_size_array)
pm.expect(return_open_issues_count).to.eql(return_compliance_frameworks_size_array)
pm.expect(return_open_issues_count).to.eql(return_compliance_frameworks_size_array)
pm.expect(return_open_issues_count).to.be.lte(return_statistics_commit_count)
pm.expect(return_open_issues_count).to.be.lte(return_statistics_storage_size)
pm.expect(return_open_issues_count).to.be.lte(return_tag_list_size_array)","/projects/{id}&/projects/{id}&get&200():::EXIT
/projects/{id}&/projects/{id}&get&200():::EXIT
/projects/{id}&/projects/{id}&get&200():::EXIT
/projects/{id}&/projects/{id}&get&200():::EXIT
/projects/{id}&/projects/{id}&get&200():::EXIT
/projects/{id}&/projects/{id}&get&200():::EXIT
/projects/{id}&/projects/{id}&get&200():::EXIT
/projects/{id}&/projects/{id}&get&200():::EXIT
/projects/{id}&/projects/{id}&get&200():::EXIT"
get+projects_{id},owner.id,return.owner.id == return.creator_id,daikon.inv.binary.twoScalar.IntEqual,"(return.owner.id, return.creator_id)",pm.expect(return_owner_id).to.eql(return_creator_id),/projects/{id}&/projects/{id}&get&200():::EXIT
get+projects_{id},owner.name,"return.owner.name == return.namespace.name
return.owner.name is a substring of return.name_with_namespace","daikon.inv.binary.twoString.StringEqual
daikon.inv.binary.twoString.StdString$SubString","(return.owner.name, return.namespace.name)
(return.owner.name, return.name_with_namespace)","pm.expect(return_owner_name).to.eql(return_namespace_name)
pm.expect(return_name_with_namespace.includes(return_owner_name)).to.be.true","/projects/{id}&/projects/{id}&get&200():::EXIT
/projects/{id}&/projects/{id}&get&200():::EXIT"
get+projects_{id},path,return.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path, return.path_with_namespace)",pm.expect(return_path_with_namespace.includes(return_path)).to.be.true,/projects/{id}&/projects/{id}&get&200():::EXIT
get+projects_{id},path_with_namespace,return.namespace.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path_with_namespace, return.namespace.path)",pm.expect(return_path_with_namespace.includes(return_namespace_path)).to.be.true,/projects/{id}&/projects/{id}&get&200():::EXIT
get+projects_{id},permissions.group_access,return.permissions.group_access == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.group_access),pm.expect(return_permissions_group_access).to.be.null,/projects/{id}&/projects/{id}&get&200():::EXIT
get+projects_{id},repository_storage,"return.repository_storage == ""default""
LENGTH(return.repository_storage)==7","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.repository_storage)
(return.repository_storage)","pm.expect([""default""].includes(return_repository_storage)).to.be.true
pm.expect(return_repository_storage).to.have.length(7)","/projects/{id}&/projects/{id}&get&200():::EXIT
/projects/{id}&/projects/{id}&get&200():::EXIT"
get+projects_{id},runners_token,LENGTH(return.runners_token)==29,daikon.inv.unary.string.FixedLengthString,(return.runners_token),pm.expect(return_runners_token).to.have.length(29),/projects/{id}&/projects/{id}&get&200():::EXIT
get+projects_{id},shared_with_groups,return.shared_with_groups[] == [],daikon.inv.unary.sequence.OneOfSequence,(return.shared_with_groups[..]),pm.expect([[]].some(value => pm.expect(return_shared_with_groups_array).to.deep.equal(value).that)).to.be.true,/projects/{id}&/projects/{id}&get&200():::EXIT
get+projects_{id},ssh_url_to_repo,return.path_with_namespace is a substring of return.ssh_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.ssh_url_to_repo, return.path_with_namespace)",pm.expect(return_ssh_url_to_repo.includes(return_path_with_namespace)).to.be.true,/projects/{id}&/projects/{id}&get&200():::EXIT
get+projects_{id},statistics.commit_count,return.statistics.commit_count <= return.statistics.storage_size,daikon.inv.binary.twoScalar.IntLessEqual,"(return.statistics.commit_count, return.statistics.storage_size)",pm.expect(return_statistics_commit_count).to.be.lte(return_statistics_storage_size),/projects/{id}&/projects/{id}&get&200():::EXIT
get+projects_{id},statistics.storage_size,return.statistics.storage_size == return.statistics.repository_size,daikon.inv.binary.twoScalar.IntEqual,"(return.statistics.storage_size, return.statistics.repository_size)",pm.expect(return_statistics_storage_size).to.eql(return_statistics_repository_size),/projects/{id}&/projects/{id}&get&200():::EXIT
get+projects_{id},statistics.wiki_size,"return.statistics.wiki_size == return.statistics.lfs_objects_size
return.statistics.wiki_size == return.statistics.job_artifacts_size
return.statistics.wiki_size == return.statistics.packages_size
return.statistics.wiki_size == return.statistics.snippets_size
return.statistics.wiki_size <= size(return.tag_list[])","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntLessEqual","(return.statistics.wiki_size, return.statistics.lfs_objects_size)
(return.statistics.wiki_size, return.statistics.job_artifacts_size)
(return.statistics.wiki_size, return.statistics.packages_size)
(return.statistics.wiki_size, return.statistics.snippets_size)
(return.statistics.wiki_size, size(return.tag_list[..]))","pm.expect(return_statistics_wiki_size).to.eql(return_statistics_lfs_objects_size)
pm.expect(return_statistics_wiki_size).to.eql(return_statistics_job_artifacts_size)
pm.expect(return_statistics_wiki_size).to.eql(return_statistics_packages_size)
pm.expect(return_statistics_wiki_size).to.eql(return_statistics_snippets_size)
pm.expect(return_statistics_wiki_size).to.be.lte(return_tag_list_size_array)","/projects/{id}&/projects/{id}&get&200():::EXIT
/projects/{id}&/projects/{id}&get&200():::EXIT
/projects/{id}&/projects/{id}&get&200():::EXIT
/projects/{id}&/projects/{id}&get&200():::EXIT
/projects/{id}&/projects/{id}&get&200():::EXIT"
get+projects_{id},visibility,"return.visibility one of { ""internal"", ""private"", ""public"" }",daikon.inv.unary.string.OneOfString,(return.visibility),"pm.expect([""internal"", ""private"", ""public""].includes(return_visibility)).to.be.true",/projects/{id}&/projects/{id}&get&200():::EXIT
get+projects_{id},web_url,"return.web_url is a substring of return.readme_url
return.path_with_namespace is a substring of return.web_url","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return.web_url, return.readme_url)
(return.web_url, return.path_with_namespace)","pm.expect(return_readme_url.includes(return_web_url)).to.be.true
pm.expect(return_web_url.includes(return_path_with_namespace)).to.be.true","/projects/{id}&/projects/{id}&get&200():::EXIT
/projects/{id}&/projects/{id}&get&200():::EXIT"
get+projects_{id}_forks,_links.events,LENGTH(return._links.events)==49,daikon.inv.unary.string.FixedLengthString,(return._links.events),pm.expect(return__links_events).to.have.length(49),/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
get+projects_{id}_forks,_links.issues,LENGTH(return._links.issues)==49,daikon.inv.unary.string.FixedLengthString,(return._links.issues),pm.expect(return__links_issues).to.have.length(49),/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
get+projects_{id}_forks,_links.labels,LENGTH(return._links.labels)==49,daikon.inv.unary.string.FixedLengthString,(return._links.labels),pm.expect(return__links_labels).to.have.length(49),/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
get+projects_{id}_forks,_links.members,LENGTH(return._links.members)==50,daikon.inv.unary.string.FixedLengthString,(return._links.members),pm.expect(return__links_members).to.have.length(50),/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
get+projects_{id}_forks,_links.merge_requests,LENGTH(return._links.merge_requests)==57,daikon.inv.unary.string.FixedLengthString,(return._links.merge_requests),pm.expect(return__links_merge_requests).to.have.length(57),/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
get+projects_{id}_forks,_links.repo_branches,LENGTH(return._links.repo_branches)==62,daikon.inv.unary.string.FixedLengthString,(return._links.repo_branches),pm.expect(return__links_repo_branches).to.have.length(62),/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
get+projects_{id}_forks,_links.self,"LENGTH(return._links.self)==42
return._links.self is a substring of return._links.issues
return._links.self is a substring of return._links.merge_requests
return._links.self is a substring of return._links.repo_branches
return._links.self is a substring of return._links.labels
return._links.self is a substring of return._links.events
return._links.self is a substring of return._links.members","daikon.inv.unary.string.FixedLengthString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return._links.self)
(return._links.self, return._links.issues)
(return._links.self, return._links.merge_requests)
(return._links.self, return._links.repo_branches)
(return._links.self, return._links.labels)
(return._links.self, return._links.events)
(return._links.self, return._links.members)","pm.expect(return__links_self).to.have.length(42)
pm.expect(return__links_issues.includes(return__links_self)).to.be.true
pm.expect(return__links_merge_requests.includes(return__links_self)).to.be.true
pm.expect(return__links_repo_branches.includes(return__links_self)).to.be.true
pm.expect(return__links_labels.includes(return__links_self)).to.be.true
pm.expect(return__links_events.includes(return__links_self)).to.be.true
pm.expect(return__links_members.includes(return__links_self)).to.be.true","/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT"
get+projects_{id}_forks,created_at,"return.created_at == return.last_activity_at
LENGTH(return.created_at)==24
return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.created_at, return.last_activity_at)
(return.created_at)
(return.created_at)","pm.expect(return_created_at).to.eql(return_last_activity_at)
pm.expect(return_created_at).to.have.length(24)
pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)","/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT"
get+projects_{id}_forks,creator_id,"return.creator_id == return.namespace.id
return.creator_id == 1","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.OneOfScalar","(return.creator_id, return.namespace.id)
(return.creator_id)","pm.expect(return_creator_id).to.eql(return_namespace_id)
pm.expect([1].includes(return_creator_id)).to.be.true","/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT"
get+projects_{id}_forks,default_branch,return.default_branch is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.default_branch, return.readme_url)",pm.expect(return_readme_url.includes(return_default_branch)).to.be.true,/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
get+projects_{id}_forks,forks_count,"return.forks_count >= 0
input.id > return.forks_count
return.forks_count >= return.star_count
return.forks_count >= size(return.shared_with_groups[])","daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.twoScalar.IntGreaterThan
daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.forks_count)
(input.id, return.forks_count)
(return.forks_count, return.star_count)
(return.forks_count, size(return.shared_with_groups[..]))","pm.expect(return_forks_count).to.be.at.least(0)
pm.expect(input_id).to.be.greaterThan(return_forks_count)
pm.expect(return_forks_count).to.be.at.least(return_star_count)
pm.expect(return_forks_count).to.be.at.least(return_shared_with_groups_size_array)","/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT"
get+projects_{id}_forks,http_url_to_repo,return.web_url is a substring of return.http_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.http_url_to_repo, return.web_url)",pm.expect(return_http_url_to_repo.includes(return_web_url)).to.be.true,/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
get+projects_{id}_forks,id,input.id < return.id,daikon.inv.binary.twoScalar.IntLessThan,"(input.id, return.id)",pm.expect(input_id).to.be.lessThan(return_id),/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
get+projects_{id}_forks,import_status,"return.import_status == ""finished""
LENGTH(return.import_status)==8","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.import_status)
(return.import_status)","pm.expect([""finished""].includes(return_import_status)).to.be.true
pm.expect(return_import_status).to.have.length(8)","/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT"
get+projects_{id}_forks,merge_method,"return.merge_method == ""merge""
LENGTH(return.merge_method)==5
return.merge_method is a substring of return._links.merge_requests","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString
daikon.inv.binary.twoString.StdString$SubString","(return.merge_method)
(return.merge_method)
(return.merge_method, return._links.merge_requests)","pm.expect([""merge""].includes(return_merge_method)).to.be.true
pm.expect(return_merge_method).to.have.length(5)
pm.expect(return__links_merge_requests.includes(return_merge_method)).to.be.true","/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT"
get+projects_{id}_forks,merge_requests_enabled,return.merge_requests_enabled == return.can_create_merge_request_in,daikon.inv.binary.twoScalar.IntEqual,"(return.merge_requests_enabled, return.can_create_merge_request_in)",pm.expect(return_merge_requests_enabled).to.eql(return_can_create_merge_request_in),/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
get+projects_{id}_forks,name,return.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.name, return.name_with_namespace)",pm.expect(return_name_with_namespace.includes(return_name)).to.be.true,/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
get+projects_{id}_forks,name_with_namespace,return.namespace.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.name_with_namespace, return.namespace.name)",pm.expect(return_name_with_namespace.includes(return_namespace_name)).to.be.true,/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
get+projects_{id}_forks,namespace.id,return.namespace.id == 1,daikon.inv.unary.scalar.OneOfScalar,(return.namespace.id),pm.expect([1].includes(return_namespace_id)).to.be.true,/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
get+projects_{id}_forks,namespace.kind,"return.namespace.kind == ""user""
LENGTH(return.namespace.kind)==4","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.namespace.kind)
(return.namespace.kind)","pm.expect([""user""].includes(return_namespace_kind)).to.be.true
pm.expect(return_namespace_kind).to.have.length(4)","/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT"
get+projects_{id}_forks,namespace.name,"return.namespace.name == ""Administrator""
LENGTH(return.namespace.name)==13","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.namespace.name)
(return.namespace.name)","pm.expect([""Administrator""].includes(return_namespace_name)).to.be.true
pm.expect(return_namespace_name).to.have.length(13)","/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT"
get+projects_{id}_forks,namespace.path,"return.namespace.path == return.namespace.full_path
return.namespace.path == ""root""
LENGTH(return.namespace.path)==4","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.namespace.path, return.namespace.full_path)
(return.namespace.path)
(return.namespace.path)","pm.expect(return_namespace_path).to.eql(return_namespace_full_path)
pm.expect([""root""].includes(return_namespace_path)).to.be.true
pm.expect(return_namespace_path).to.have.length(4)","/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT"
get+projects_{id}_forks,open_issues_count,"return.open_issues_count == return.star_count
return.open_issues_count == size(return.shared_with_groups[])
return.open_issues_count == 0
return.open_issues_count <= return.forks_count","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.OneOfScalar
daikon.inv.binary.twoScalar.IntLessEqual","(return.open_issues_count, return.star_count)
(return.open_issues_count, size(return.shared_with_groups[..]))
(return.open_issues_count)
(return.open_issues_count, return.forks_count)","pm.expect(return_open_issues_count).to.eql(return_star_count)
pm.expect(return_open_issues_count).to.eql(return_shared_with_groups_size_array)
pm.expect([0].includes(return_open_issues_count)).to.be.true
pm.expect(return_open_issues_count).to.be.lte(return_forks_count)","/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT"
get+projects_{id}_forks,path,return.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path, return.path_with_namespace)",pm.expect(return_path_with_namespace.includes(return_path)).to.be.true,/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
get+projects_{id}_forks,path_with_namespace,return.namespace.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path_with_namespace, return.namespace.path)",pm.expect(return_path_with_namespace.includes(return_namespace_path)).to.be.true,/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
get+projects_{id}_forks,public_jobs,"return.public_jobs == return.remove_source_branch_after_merge
return.public_jobs == return.request_access_enabled
return.public_jobs == return.autoclose_referenced_issues
return.public_jobs == true","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.OneOfScalar","(return.public_jobs, return.remove_source_branch_after_merge)
(return.public_jobs, return.request_access_enabled)
(return.public_jobs, return.autoclose_referenced_issues)
(return.public_jobs)","pm.expect(return_public_jobs).to.eql(return_remove_source_branch_after_merge)
pm.expect(return_public_jobs).to.eql(return_request_access_enabled)
pm.expect(return_public_jobs).to.eql(return_autoclose_referenced_issues)
pm.expect(return_public_jobs).to.eql(true)","/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT"
get+projects_{id}_forks,resolve_outdated_diff_discussions,"input.archived == return.resolve_outdated_diff_discussions
input.simple == return.resolve_outdated_diff_discussions
input.starred == return.resolve_outdated_diff_discussions
return.resolve_outdated_diff_discussions == return.archived
return.resolve_outdated_diff_discussions == return.only_allow_merge_if_pipeline_succeeds
return.resolve_outdated_diff_discussions == return.only_allow_merge_if_all_discussions_are_resolved
return.resolve_outdated_diff_discussions == false","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.OneOfScalar","(input.archived, return.resolve_outdated_diff_discussions)
(input.simple, return.resolve_outdated_diff_discussions)
(input.starred, return.resolve_outdated_diff_discussions)
(return.resolve_outdated_diff_discussions, return.archived)
(return.resolve_outdated_diff_discussions, return.only_allow_merge_if_pipeline_succeeds)
(return.resolve_outdated_diff_discussions, return.only_allow_merge_if_all_discussions_are_resolved)
(return.resolve_outdated_diff_discussions)","pm.expect(input_archived).to.eql(return_resolve_outdated_diff_discussions)
pm.expect(input_simple).to.eql(return_resolve_outdated_diff_discussions)
pm.expect(input_starred).to.eql(return_resolve_outdated_diff_discussions)
pm.expect(return_resolve_outdated_diff_discussions).to.eql(return_archived)
pm.expect(return_resolve_outdated_diff_discussions).to.eql(return_only_allow_merge_if_pipeline_succeeds)
pm.expect(return_resolve_outdated_diff_discussions).to.eql(return_only_allow_merge_if_all_discussions_are_resolved)
pm.expect(return_resolve_outdated_diff_discussions).to.eql(false)","/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT"
get+projects_{id}_forks,ssh_url_to_repo,return.path_with_namespace is a substring of return.ssh_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.ssh_url_to_repo, return.path_with_namespace)",pm.expect(return_ssh_url_to_repo.includes(return_path_with_namespace)).to.be.true,/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
get+projects_{id}_forks,star_count,"return.star_count == size(return.tag_list[])
return.star_count == size(return.tag_list[])
return.star_count == size(return.shared_with_groups[])","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual","(return.star_count, size(return.tag_list[..]))
(return.star_count, size(return.tag_list[..]))
(return.star_count, size(return.shared_with_groups[..]))","pm.expect(return_star_count).to.eql(return_tag_list_size_array)
pm.expect(return_star_count).to.eql(return_tag_list_size_array)
pm.expect(return_star_count).to.eql(return_shared_with_groups_size_array)","/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT"
get+projects_{id}_forks,visibility,"input.visibility == return.visibility
return.visibility one of { ""internal"", ""private"", ""public"" }","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.OneOfString","(input.visibility, return.visibility)
(return.visibility)","pm.expect(input_visibility).to.eql(return_visibility)
pm.expect([""internal"", ""private"", ""public""].includes(return_visibility)).to.be.true","/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT"
get+projects_{id}_forks,web_url,"return.web_url is a substring of return.readme_url
return.path_with_namespace is a substring of return.web_url","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return.web_url, return.readme_url)
(return.web_url, return.path_with_namespace)","pm.expect(return_readme_url.includes(return_web_url)).to.be.true
pm.expect(return_web_url.includes(return_path_with_namespace)).to.be.true","/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT
/projects/{id}/forks&/projects/{id}/forks&get&200():::EXIT"
get+projects_{id}_starrers,starred_since,"LENGTH(return.starred_since)==24
return.starred_since is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.starred_since)
(return.starred_since)","pm.expect(return_starred_since).to.have.length(24)
pm.expect(return_starred_since).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)","/projects/{id}/starrers&/projects/{id}/starrers&get&200():::EXIT
/projects/{id}/starrers&/projects/{id}/starrers&get&200():::EXIT"
get+projects_{id}_starrers,user.avatar_url,"LENGTH(return.user.avatar_url)==81
return.user.avatar_url is Url","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.IsUrl","(return.user.avatar_url)
(return.user.avatar_url)","pm.expect(return_user_avatar_url).to.have.length(81)
pm.expect(return_user_avatar_url).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)","/projects/{id}/starrers&/projects/{id}/starrers&get&200():::EXIT
/projects/{id}/starrers&/projects/{id}/starrers&get&200():::EXIT"
get+projects_{id}_starrers,user.id,return.user.id >= 1,daikon.inv.unary.scalar.LowerBound,(return.user.id),pm.expect(return_user_id).to.be.at.least(1),/projects/{id}/starrers&/projects/{id}/starrers&get&200():::EXIT
get+projects_{id}_starrers,user.state,"return.user.state == ""active""
LENGTH(return.user.state)==6","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.user.state)
(return.user.state)","pm.expect([""active""].includes(return_user_state)).to.be.true
pm.expect(return_user_state).to.have.length(6)","/projects/{id}/starrers&/projects/{id}/starrers&get&200():::EXIT
/projects/{id}/starrers&/projects/{id}/starrers&get&200():::EXIT"
get+projects_{id}_starrers,user.web_url,return.user.username is a substring of return.user.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.user.web_url, return.user.username)",pm.expect(return_user_web_url.includes(return_user_username)).to.be.true,/projects/{id}/starrers&/projects/{id}/starrers&get&200():::EXIT
get+projects_{id}_users,avatar_url,return.avatar_url is Url,daikon.inv.unary.string.IsUrl,(return.avatar_url),"pm.expect(return_avatar_url).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",/projects/{id}/users&/projects/{id}/users&get&200():::EXIT
get+projects_{id}_users,id,return.id >= 1,daikon.inv.unary.scalar.LowerBound,(return.id),pm.expect(return_id).to.be.at.least(1),/projects/{id}/users&/projects/{id}/users&get&200():::EXIT
get+projects_{id}_users,state,"return.state == ""active""
LENGTH(return.state)==6","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.state)
(return.state)","pm.expect([""active""].includes(return_state)).to.be.true
pm.expect(return_state).to.have.length(6)","/projects/{id}/users&/projects/{id}/users&get&200():::EXIT
/projects/{id}/users&/projects/{id}/users&get&200():::EXIT"
get+projects_{id}_users,web_url,return.username is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.username)",pm.expect(return_web_url.includes(return_username)).to.be.true,/projects/{id}/users&/projects/{id}/users&get&200():::EXIT
get+users_{user_id}_projects,_links.self,"return._links.self is a substring of return._links.issues
return._links.self is a substring of return._links.merge_requests
return._links.self is a substring of return._links.repo_branches
return._links.self is a substring of return._links.labels
return._links.self is a substring of return._links.events
return._links.self is a substring of return._links.members","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return._links.self, return._links.issues)
(return._links.self, return._links.merge_requests)
(return._links.self, return._links.repo_branches)
(return._links.self, return._links.labels)
(return._links.self, return._links.events)
(return._links.self, return._links.members)","pm.expect(return__links_issues.includes(return__links_self)).to.be.true
pm.expect(return__links_merge_requests.includes(return__links_self)).to.be.true
pm.expect(return__links_repo_branches.includes(return__links_self)).to.be.true
pm.expect(return__links_labels.includes(return__links_self)).to.be.true
pm.expect(return__links_events.includes(return__links_self)).to.be.true
pm.expect(return__links_members.includes(return__links_self)).to.be.true","/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT"
get+users_{user_id}_projects,auto_devops_deploy_strategy,"return.auto_devops_deploy_strategy one of { ""continuous"", ""manual"", ""timed_incremental"" }",daikon.inv.unary.string.OneOfString,(return.auto_devops_deploy_strategy),"pm.expect([""continuous"", ""manual"", ""timed_incremental""].includes(return_auto_devops_deploy_strategy)).to.be.true",/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
get+users_{user_id}_projects,created_at,"return.created_at == return.last_activity_at
LENGTH(return.created_at)==24
return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.created_at, return.last_activity_at)
(return.created_at)
(return.created_at)","pm.expect(return_created_at).to.eql(return_last_activity_at)
pm.expect(return_created_at).to.have.length(24)
pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)","/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT"
get+users_{user_id}_projects,creator_id,"return.creator_id >= 1
return.creator_id >= size(return.tag_list[])
return.creator_id >= size(return.shared_with_groups[])","daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.creator_id)
(return.creator_id, size(return.tag_list[..]))
(return.creator_id, size(return.shared_with_groups[..]))","pm.expect(return_creator_id).to.be.at.least(1)
pm.expect(return_creator_id).to.be.at.least(return_tag_list_size_array)
pm.expect(return_creator_id).to.be.at.least(return_shared_with_groups_size_array)","/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT"
get+users_{user_id}_projects,default_branch,return.default_branch is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.default_branch, return.readme_url)",pm.expect(return_readme_url.includes(return_default_branch)).to.be.true,/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
get+users_{user_id}_projects,forks_count,"return.forks_count >= 0
return.forks_count >= return.statistics.job_artifacts_size","daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.forks_count)
(return.forks_count, return.statistics.job_artifacts_size)","pm.expect(return_forks_count).to.be.at.least(0)
pm.expect(return_forks_count).to.be.at.least(return_statistics_job_artifacts_size)","/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT"
get+users_{user_id}_projects,http_url_to_repo,return.web_url is a substring of return.http_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.http_url_to_repo, return.web_url)",pm.expect(return_http_url_to_repo.includes(return_web_url)).to.be.true,/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
get+users_{user_id}_projects,id,"input.id_after < return.id
input.id_before > return.id
return.id > return.owner.id
return.id > return.creator_id
return.id > return.star_count","daikon.inv.binary.twoScalar.IntLessThan
daikon.inv.binary.twoScalar.IntGreaterThan
daikon.inv.binary.twoScalar.IntGreaterThan
daikon.inv.binary.twoScalar.IntGreaterThan
daikon.inv.binary.twoScalar.IntGreaterThan","(input.id_after, return.id)
(input.id_before, return.id)
(return.id, return.owner.id)
(return.id, return.creator_id)
(return.id, return.star_count)","pm.expect(input_id_after).to.be.lessThan(return_id)
pm.expect(input_id_before).to.be.greaterThan(return_id)
pm.expect(return_id).to.be.greaterThan(return_owner_id)
pm.expect(return_id).to.be.greaterThan(return_creator_id)
pm.expect(return_id).to.be.greaterThan(return_star_count)","/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT"
get+users_{user_id}_projects,import_status,"return.import_status one of { ""failed"", ""finished"", ""none"" }",daikon.inv.unary.string.OneOfString,(return.import_status),"pm.expect([""failed"", ""finished"", ""none""].includes(return_import_status)).to.be.true",/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
get+users_{user_id}_projects,merge_method,"return.merge_method one of { ""ff"", ""merge"", ""rebase_merge"" }",daikon.inv.unary.string.OneOfString,(return.merge_method),"pm.expect([""ff"", ""merge"", ""rebase_merge""].includes(return_merge_method)).to.be.true",/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
get+users_{user_id}_projects,name,return.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.name, return.name_with_namespace)",pm.expect(return_name_with_namespace.includes(return_name)).to.be.true,/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
get+users_{user_id}_projects,name_with_namespace,return.namespace.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.name_with_namespace, return.namespace.name)",pm.expect(return_name_with_namespace.includes(return_namespace_name)).to.be.true,/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
get+users_{user_id}_projects,namespace.id,"return.namespace.id >= 1
return.namespace.id >= size(return.tag_list[])
return.namespace.id >= size(return.shared_with_groups[])","daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.namespace.id)
(return.namespace.id, size(return.tag_list[..]))
(return.namespace.id, size(return.shared_with_groups[..]))","pm.expect(return_namespace_id).to.be.at.least(1)
pm.expect(return_namespace_id).to.be.at.least(return_tag_list_size_array)
pm.expect(return_namespace_id).to.be.at.least(return_shared_with_groups_size_array)","/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT"
get+users_{user_id}_projects,namespace.kind,"return.namespace.kind == ""user""
LENGTH(return.namespace.kind)==4","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.namespace.kind)
(return.namespace.kind)","pm.expect([""user""].includes(return_namespace_kind)).to.be.true
pm.expect(return_namespace_kind).to.have.length(4)","/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT"
get+users_{user_id}_projects,namespace.path,return.namespace.path == return.namespace.full_path,daikon.inv.binary.twoString.StringEqual,"(return.namespace.path, return.namespace.full_path)",pm.expect(return_namespace_path).to.eql(return_namespace_full_path),/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
get+users_{user_id}_projects,open_issues_count,"return.open_issues_count == 0
return.open_issues_count <= return.forks_count
return.open_issues_count <= return.star_count
return.open_issues_count <= return.statistics.commit_count
return.open_issues_count <= return.statistics.storage_size
return.open_issues_count <= return.statistics.repository_size
return.open_issues_count <= return.statistics.wiki_size
return.open_issues_count <= return.statistics.lfs_objects_size
return.open_issues_count <= size(return.tag_list[])
return.open_issues_count <= size(return.shared_with_groups[])","daikon.inv.unary.scalar.OneOfScalar
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual","(return.open_issues_count)
(return.open_issues_count, return.forks_count)
(return.open_issues_count, return.star_count)
(return.open_issues_count, return.statistics.commit_count)
(return.open_issues_count, return.statistics.storage_size)
(return.open_issues_count, return.statistics.repository_size)
(return.open_issues_count, return.statistics.wiki_size)
(return.open_issues_count, return.statistics.lfs_objects_size)
(return.open_issues_count, size(return.tag_list[..]))
(return.open_issues_count, size(return.shared_with_groups[..]))","pm.expect([0].includes(return_open_issues_count)).to.be.true
pm.expect(return_open_issues_count).to.be.lte(return_forks_count)
pm.expect(return_open_issues_count).to.be.lte(return_star_count)
pm.expect(return_open_issues_count).to.be.lte(return_statistics_commit_count)
pm.expect(return_open_issues_count).to.be.lte(return_statistics_storage_size)
pm.expect(return_open_issues_count).to.be.lte(return_statistics_repository_size)
pm.expect(return_open_issues_count).to.be.lte(return_statistics_wiki_size)
pm.expect(return_open_issues_count).to.be.lte(return_statistics_lfs_objects_size)
pm.expect(return_open_issues_count).to.be.lte(return_tag_list_size_array)
pm.expect(return_open_issues_count).to.be.lte(return_shared_with_groups_size_array)","/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT"
get+users_{user_id}_projects,owner.id,"return.owner.id >= 1
return.owner.id <= return.namespace.id
return.owner.id >= size(return.tag_list[])
return.owner.id >= size(return.shared_with_groups[])","daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.owner.id)
(return.owner.id, return.namespace.id)
(return.owner.id, size(return.tag_list[..]))
(return.owner.id, size(return.shared_with_groups[..]))","pm.expect(return_owner_id).to.be.at.least(1)
pm.expect(return_owner_id).to.be.lte(return_namespace_id)
pm.expect(return_owner_id).to.be.at.least(return_tag_list_size_array)
pm.expect(return_owner_id).to.be.at.least(return_shared_with_groups_size_array)","/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT"
get+users_{user_id}_projects,owner.name,"return.owner.name == return.namespace.name
return.owner.name is a substring of return.name_with_namespace","daikon.inv.binary.twoString.StringEqual
daikon.inv.binary.twoString.StdString$SubString","(return.owner.name, return.namespace.name)
(return.owner.name, return.name_with_namespace)","pm.expect(return_owner_name).to.eql(return_namespace_name)
pm.expect(return_name_with_namespace.includes(return_owner_name)).to.be.true","/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT"
get+users_{user_id}_projects,path,return.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path, return.path_with_namespace)",pm.expect(return_path_with_namespace.includes(return_path)).to.be.true,/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
get+users_{user_id}_projects,path_with_namespace,return.namespace.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path_with_namespace, return.namespace.path)",pm.expect(return_path_with_namespace.includes(return_namespace_path)).to.be.true,/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
get+users_{user_id}_projects,permissions.group_access,return.permissions.group_access == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.group_access),pm.expect(return_permissions_group_access).to.be.null,/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
get+users_{user_id}_projects,permissions.project_access.access_level,return.permissions.project_access.access_level == 50,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.project_access.access_level),pm.expect([50].includes(return_permissions_project_access_access_level)).to.be.true,/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
get+users_{user_id}_projects,permissions.project_access.notification_level,return.permissions.project_access.notification_level == 3,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.project_access.notification_level),pm.expect([3].includes(return_permissions_project_access_notification_level)).to.be.true,/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
get+users_{user_id}_projects,repository_storage,"return.repository_storage == ""default""
LENGTH(return.repository_storage)==7","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.repository_storage)
(return.repository_storage)","pm.expect([""default""].includes(return_repository_storage)).to.be.true
pm.expect(return_repository_storage).to.have.length(7)","/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT"
get+users_{user_id}_projects,service_desk_enabled,"input.simple == return.service_desk_enabled
return.service_desk_enabled == false","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.OneOfScalar","(input.simple, return.service_desk_enabled)
(return.service_desk_enabled)","pm.expect(input_simple).to.eql(return_service_desk_enabled)
pm.expect(return_service_desk_enabled).to.eql(false)","/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT"
get+users_{user_id}_projects,shared_with_groups,"size(return.shared_with_groups[]) one of { 0, 1 }",daikon.inv.unary.scalar.OneOfScalar,(size(return.shared_with_groups[..])),"pm.expect([0, 1, 0].includes(return_shared_with_groups_size_array)).to.be.true",/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
get+users_{user_id}_projects,shared_with_groups.expires_at,return.expires_at is a Date. Format: YYYY/MM/DD,daikon.inv.unary.string.dates.IsDateYYYYMMDD,(return.expires_at),pm.expect(return_expires_at).to.match(/^(?:1\d{3}|20[01234][0-9]|2050|9999)[-/.](?:0[1-9]|1[012])[-/.](?:0[1-9]|[12][0-9]|3[01])$/),/users/{user_id}/projects&/users/{user_id}/projects&get&200&shared_with_groups():::EXIT
get+users_{user_id}_projects,shared_with_groups.group_access_level,"return.group_access_level one of { 20, 30, 40 }",daikon.inv.unary.scalar.OneOfScalar,(return.group_access_level),"pm.expect([20, 30, 40].includes(return_group_access_level)).to.be.true",/users/{user_id}/projects&/users/{user_id}/projects&get&200&shared_with_groups():::EXIT
get+users_{user_id}_projects,ssh_url_to_repo,return.path_with_namespace is a substring of return.ssh_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.ssh_url_to_repo, return.path_with_namespace)",pm.expect(return_ssh_url_to_repo.includes(return_path_with_namespace)).to.be.true,/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
get+users_{user_id}_projects,star_count,"return.star_count >= 0
return.star_count >= return.statistics.job_artifacts_size","daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.star_count)
(return.star_count, return.statistics.job_artifacts_size)","pm.expect(return_star_count).to.be.at.least(0)
pm.expect(return_star_count).to.be.at.least(return_statistics_job_artifacts_size)","/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT"
get+users_{user_id}_projects,statistics.commit_count,"return.statistics.commit_count >= 0
return.statistics.commit_count <= return.statistics.storage_size
return.statistics.commit_count <= return.statistics.repository_size
return.statistics.commit_count >= return.statistics.job_artifacts_size","daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.statistics.commit_count)
(return.statistics.commit_count, return.statistics.storage_size)
(return.statistics.commit_count, return.statistics.repository_size)
(return.statistics.commit_count, return.statistics.job_artifacts_size)","pm.expect(return_statistics_commit_count).to.be.at.least(0)
pm.expect(return_statistics_commit_count).to.be.lte(return_statistics_storage_size)
pm.expect(return_statistics_commit_count).to.be.lte(return_statistics_repository_size)
pm.expect(return_statistics_commit_count).to.be.at.least(return_statistics_job_artifacts_size)","/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT"
get+users_{user_id}_projects,statistics.job_artifacts_size,"return.statistics.job_artifacts_size == return.statistics.packages_size
return.statistics.job_artifacts_size == return.statistics.snippets_size
return.statistics.job_artifacts_size == 0
return.statistics.job_artifacts_size <= size(return.tag_list[])
return.statistics.job_artifacts_size <= size(return.shared_with_groups[])","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.OneOfScalar
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual","(return.statistics.job_artifacts_size, return.statistics.packages_size)
(return.statistics.job_artifacts_size, return.statistics.snippets_size)
(return.statistics.job_artifacts_size)
(return.statistics.job_artifacts_size, size(return.tag_list[..]))
(return.statistics.job_artifacts_size, size(return.shared_with_groups[..]))","pm.expect(return_statistics_job_artifacts_size).to.eql(return_statistics_packages_size)
pm.expect(return_statistics_job_artifacts_size).to.eql(return_statistics_snippets_size)
pm.expect([0].includes(return_statistics_job_artifacts_size)).to.be.true
pm.expect(return_statistics_job_artifacts_size).to.be.lte(return_tag_list_size_array)
pm.expect(return_statistics_job_artifacts_size).to.be.lte(return_shared_with_groups_size_array)","/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT"
get+users_{user_id}_projects,statistics.lfs_objects_size,"return.statistics.lfs_objects_size one of { 0, 290070, 581353017 }
return.statistics.lfs_objects_size >= return.statistics.job_artifacts_size","daikon.inv.unary.scalar.OneOfScalar
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.statistics.lfs_objects_size)
(return.statistics.lfs_objects_size, return.statistics.job_artifacts_size)","pm.expect([0, 290070, 581353017].includes(return_statistics_lfs_objects_size)).to.be.true
pm.expect(return_statistics_lfs_objects_size).to.be.at.least(return_statistics_job_artifacts_size)","/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT"
get+users_{user_id}_projects,statistics.repository_size,"return.statistics.repository_size >= 0
return.statistics.repository_size >= return.statistics.wiki_size
return.statistics.repository_size >= return.statistics.job_artifacts_size
return.statistics.repository_size >= size(return.shared_with_groups[])","daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.statistics.repository_size)
(return.statistics.repository_size, return.statistics.wiki_size)
(return.statistics.repository_size, return.statistics.job_artifacts_size)
(return.statistics.repository_size, size(return.shared_with_groups[..]))","pm.expect(return_statistics_repository_size).to.be.at.least(0)
pm.expect(return_statistics_repository_size).to.be.at.least(return_statistics_wiki_size)
pm.expect(return_statistics_repository_size).to.be.at.least(return_statistics_job_artifacts_size)
pm.expect(return_statistics_repository_size).to.be.at.least(return_shared_with_groups_size_array)","/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT"
get+users_{user_id}_projects,statistics.storage_size,"return.statistics.storage_size >= 0
return.statistics.storage_size >= return.statistics.repository_size
return.statistics.storage_size >= return.statistics.wiki_size
return.statistics.storage_size >= return.statistics.lfs_objects_size
return.statistics.storage_size >= return.statistics.job_artifacts_size
return.statistics.storage_size >= size(return.shared_with_groups[])","daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.statistics.storage_size)
(return.statistics.storage_size, return.statistics.repository_size)
(return.statistics.storage_size, return.statistics.wiki_size)
(return.statistics.storage_size, return.statistics.lfs_objects_size)
(return.statistics.storage_size, return.statistics.job_artifacts_size)
(return.statistics.storage_size, size(return.shared_with_groups[..]))","pm.expect(return_statistics_storage_size).to.be.at.least(0)
pm.expect(return_statistics_storage_size).to.be.at.least(return_statistics_repository_size)
pm.expect(return_statistics_storage_size).to.be.at.least(return_statistics_wiki_size)
pm.expect(return_statistics_storage_size).to.be.at.least(return_statistics_lfs_objects_size)
pm.expect(return_statistics_storage_size).to.be.at.least(return_statistics_job_artifacts_size)
pm.expect(return_statistics_storage_size).to.be.at.least(return_shared_with_groups_size_array)","/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT"
get+users_{user_id}_projects,statistics.wiki_size,"return.statistics.wiki_size one of { 0, 41943 }
return.statistics.wiki_size >= return.statistics.job_artifacts_size","daikon.inv.unary.scalar.OneOfScalar
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.statistics.wiki_size)
(return.statistics.wiki_size, return.statistics.job_artifacts_size)","pm.expect([0, 41943, 0].includes(return_statistics_wiki_size)).to.be.true
pm.expect(return_statistics_wiki_size).to.be.at.least(return_statistics_job_artifacts_size)","/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT"
get+users_{user_id}_projects,tag_list,"size(return.tag_list[]) one of { 0, 1 }",daikon.inv.unary.scalar.OneOfScalar,(size(return.tag_list[..])),"pm.expect([0, 1, 0].includes(return_tag_list_size_array)).to.be.true",/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
get+users_{user_id}_projects,visibility,"input.visibility == return.visibility
return.visibility one of { ""internal"", ""private"", ""public"" }","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.OneOfString","(input.visibility, return.visibility)
(return.visibility)","pm.expect(input_visibility).to.eql(return_visibility)
pm.expect([""internal"", ""private"", ""public""].includes(return_visibility)).to.be.true","/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT"
get+users_{user_id}_projects,web_url,"return.web_url is a substring of return.readme_url
return.path_with_namespace is a substring of return.web_url","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return.web_url, return.readme_url)
(return.web_url, return.path_with_namespace)","pm.expect(return_readme_url.includes(return_web_url)).to.be.true
pm.expect(return_web_url.includes(return_path_with_namespace)).to.be.true","/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT
/users/{user_id}/projects&/users/{user_id}/projects&get&200():::EXIT"
get+users_{user_id}_starred_projects,_links.self,"return._links.self is a substring of return._links.issues
return._links.self is a substring of return._links.merge_requests
return._links.self is a substring of return._links.repo_branches
return._links.self is a substring of return._links.labels
return._links.self is a substring of return._links.events
return._links.self is a substring of return._links.members","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return._links.self, return._links.issues)
(return._links.self, return._links.merge_requests)
(return._links.self, return._links.repo_branches)
(return._links.self, return._links.labels)
(return._links.self, return._links.events)
(return._links.self, return._links.members)","pm.expect(return__links_issues.includes(return__links_self)).to.be.true
pm.expect(return__links_merge_requests.includes(return__links_self)).to.be.true
pm.expect(return__links_repo_branches.includes(return__links_self)).to.be.true
pm.expect(return__links_labels.includes(return__links_self)).to.be.true
pm.expect(return__links_events.includes(return__links_self)).to.be.true
pm.expect(return__links_members.includes(return__links_self)).to.be.true","/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT"
get+users_{user_id}_starred_projects,archived,input.archived == return.archived,daikon.inv.binary.twoScalar.IntEqual,"(input.archived, return.archived)",pm.expect(input_archived).to.eql(return_archived),/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
get+users_{user_id}_starred_projects,array,size(return.array[]) == 20,daikon.inv.unary.scalar.OneOfScalar,(size(return.array[..])),pm.expect([20].includes(return_array_size_array)).to.be.true,/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200%array():::EXIT
get+users_{user_id}_starred_projects,auto_devops_deploy_strategy,"return.auto_devops_deploy_strategy one of { ""continuous"", ""manual"", ""timed_incremental"" }",daikon.inv.unary.string.OneOfString,(return.auto_devops_deploy_strategy),"pm.expect([""continuous"", ""manual"", ""timed_incremental""].includes(return_auto_devops_deploy_strategy)).to.be.true",/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
get+users_{user_id}_starred_projects,created_at,"LENGTH(return.created_at)==24
return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.created_at)
(return.created_at)","pm.expect(return_created_at).to.have.length(24)
pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)","/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT"
get+users_{user_id}_starred_projects,creator_id,"return.creator_id >= 1
return.creator_id <= return.namespace.id
return.creator_id >= return.statistics.commit_count
return.creator_id >= size(return.shared_with_groups[])","daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.creator_id)
(return.creator_id, return.namespace.id)
(return.creator_id, return.statistics.commit_count)
(return.creator_id, size(return.shared_with_groups[..]))","pm.expect(return_creator_id).to.be.at.least(1)
pm.expect(return_creator_id).to.be.lte(return_namespace_id)
pm.expect(return_creator_id).to.be.at.least(return_statistics_commit_count)
pm.expect(return_creator_id).to.be.at.least(return_shared_with_groups_size_array)","/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT"
get+users_{user_id}_starred_projects,default_branch,return.default_branch is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.default_branch, return.readme_url)",pm.expect(return_readme_url.includes(return_default_branch)).to.be.true,/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
get+users_{user_id}_starred_projects,forks_count,"return.forks_count >= 0
return.forks_count >= return.statistics.lfs_objects_size","daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.forks_count)
(return.forks_count, return.statistics.lfs_objects_size)","pm.expect(return_forks_count).to.be.at.least(0)
pm.expect(return_forks_count).to.be.at.least(return_statistics_lfs_objects_size)","/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT"
get+users_{user_id}_starred_projects,http_url_to_repo,return.web_url is a substring of return.http_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.http_url_to_repo, return.web_url)",pm.expect(return_http_url_to_repo.includes(return_web_url)).to.be.true,/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
get+users_{user_id}_starred_projects,id,return.id > return.star_count,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.id, return.star_count)",pm.expect(return_id).to.be.greaterThan(return_star_count),/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
get+users_{user_id}_starred_projects,import_status,"return.import_status one of { ""finished"", ""none"" }",daikon.inv.unary.string.OneOfString,(return.import_status),"pm.expect([""finished"", ""none""].includes(return_import_status)).to.be.true",/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
get+users_{user_id}_starred_projects,last_activity_at,"LENGTH(return.last_activity_at)==24
return.last_activity_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.last_activity_at)
(return.last_activity_at)","pm.expect(return_last_activity_at).to.have.length(24)
pm.expect(return_last_activity_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)","/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT"
get+users_{user_id}_starred_projects,merge_method,"return.merge_method one of { ""ff"", ""merge"", ""rebase_merge"" }",daikon.inv.unary.string.OneOfString,(return.merge_method),"pm.expect([""ff"", ""merge"", ""rebase_merge""].includes(return_merge_method)).to.be.true",/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
get+users_{user_id}_starred_projects,name,return.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.name, return.name_with_namespace)",pm.expect(return_name_with_namespace.includes(return_name)).to.be.true,/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
get+users_{user_id}_starred_projects,name_with_namespace,return.namespace.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.name_with_namespace, return.namespace.name)",pm.expect(return_name_with_namespace.includes(return_namespace_name)).to.be.true,/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
get+users_{user_id}_starred_projects,namespace.id,"return.namespace.id >= 1
return.namespace.id >= return.statistics.commit_count
return.namespace.id >= size(return.tag_list[])
return.namespace.id >= size(return.shared_with_groups[])","daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.namespace.id)
(return.namespace.id, return.statistics.commit_count)
(return.namespace.id, size(return.tag_list[..]))
(return.namespace.id, size(return.shared_with_groups[..]))","pm.expect(return_namespace_id).to.be.at.least(1)
pm.expect(return_namespace_id).to.be.at.least(return_statistics_commit_count)
pm.expect(return_namespace_id).to.be.at.least(return_tag_list_size_array)
pm.expect(return_namespace_id).to.be.at.least(return_shared_with_groups_size_array)","/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT"
get+users_{user_id}_starred_projects,namespace.kind,"return.namespace.kind one of { ""group"", ""user"" }",daikon.inv.unary.string.OneOfString,(return.namespace.kind),"pm.expect([""group"", ""user""].includes(return_namespace_kind)).to.be.true",/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
get+users_{user_id}_starred_projects,namespace.path,return.namespace.path is a substring of return.namespace.full_path,daikon.inv.binary.twoString.StdString$SubString,"(return.namespace.path, return.namespace.full_path)",pm.expect(return_namespace_full_path.includes(return_namespace_path)).to.be.true,/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
get+users_{user_id}_starred_projects,open_issues_count,"return.open_issues_count == return.statistics.lfs_objects_size
return.open_issues_count == 0
return.open_issues_count <= return.forks_count
return.open_issues_count <= return.statistics.commit_count
return.open_issues_count <= return.statistics.storage_size
return.open_issues_count <= return.statistics.repository_size
return.open_issues_count <= return.statistics.wiki_size
return.open_issues_count <= size(return.tag_list[])
return.open_issues_count <= size(return.shared_with_groups[])","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.OneOfScalar
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual","(return.open_issues_count, return.statistics.lfs_objects_size)
(return.open_issues_count)
(return.open_issues_count, return.forks_count)
(return.open_issues_count, return.statistics.commit_count)
(return.open_issues_count, return.statistics.storage_size)
(return.open_issues_count, return.statistics.repository_size)
(return.open_issues_count, return.statistics.wiki_size)
(return.open_issues_count, size(return.tag_list[..]))
(return.open_issues_count, size(return.shared_with_groups[..]))","pm.expect(return_open_issues_count).to.eql(return_statistics_lfs_objects_size)
pm.expect([0].includes(return_open_issues_count)).to.be.true
pm.expect(return_open_issues_count).to.be.lte(return_forks_count)
pm.expect(return_open_issues_count).to.be.lte(return_statistics_commit_count)
pm.expect(return_open_issues_count).to.be.lte(return_statistics_storage_size)
pm.expect(return_open_issues_count).to.be.lte(return_statistics_repository_size)
pm.expect(return_open_issues_count).to.be.lte(return_statistics_wiki_size)
pm.expect(return_open_issues_count).to.be.lte(return_tag_list_size_array)
pm.expect(return_open_issues_count).to.be.lte(return_shared_with_groups_size_array)","/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT"
get+users_{user_id}_starred_projects,owner.id,"return.owner.id >= 1
return.owner.id <= return.namespace.id
return.owner.id >= return.statistics.commit_count
return.owner.id >= size(return.tag_list[])
return.owner.id >= size(return.shared_with_groups[])","daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.owner.id)
(return.owner.id, return.namespace.id)
(return.owner.id, return.statistics.commit_count)
(return.owner.id, size(return.tag_list[..]))
(return.owner.id, size(return.shared_with_groups[..]))","pm.expect(return_owner_id).to.be.at.least(1)
pm.expect(return_owner_id).to.be.lte(return_namespace_id)
pm.expect(return_owner_id).to.be.at.least(return_statistics_commit_count)
pm.expect(return_owner_id).to.be.at.least(return_tag_list_size_array)
pm.expect(return_owner_id).to.be.at.least(return_shared_with_groups_size_array)","/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT"
get+users_{user_id}_starred_projects,owner.name,"return.owner.name == return.namespace.name
return.owner.name is a substring of return.name_with_namespace","daikon.inv.binary.twoString.StringEqual
daikon.inv.binary.twoString.StdString$SubString","(return.owner.name, return.namespace.name)
(return.owner.name, return.name_with_namespace)","pm.expect(return_owner_name).to.eql(return_namespace_name)
pm.expect(return_name_with_namespace.includes(return_owner_name)).to.be.true","/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT"
get+users_{user_id}_starred_projects,path,return.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path, return.path_with_namespace)",pm.expect(return_path_with_namespace.includes(return_path)).to.be.true,/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
get+users_{user_id}_starred_projects,path_with_namespace,return.namespace.full_path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path_with_namespace, return.namespace.full_path)",pm.expect(return_path_with_namespace.includes(return_namespace_full_path)).to.be.true,/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
get+users_{user_id}_starred_projects,permissions.group_access.access_level,return.permissions.group_access.access_level == 50,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.group_access.access_level),pm.expect([50].includes(return_permissions_group_access_access_level)).to.be.true,/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
get+users_{user_id}_starred_projects,permissions.group_access.notification_level,return.permissions.group_access.notification_level == 3,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.group_access.notification_level),pm.expect([3].includes(return_permissions_group_access_notification_level)).to.be.true,/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
get+users_{user_id}_starred_projects,permissions.project_access.access_level,"return.permissions.project_access.access_level == return.permissions.group_access.access_level
return.permissions.project_access.access_level == 50","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.OneOfScalar","(return.permissions.project_access.access_level, return.permissions.group_access.access_level)
(return.permissions.project_access.access_level)","pm.expect(return_permissions_project_access_access_level).to.eql(return_permissions_group_access_access_level)
pm.expect([50].includes(return_permissions_project_access_access_level)).to.be.true","/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT"
get+users_{user_id}_starred_projects,permissions.project_access.notification_level,"return.permissions.project_access.notification_level == return.permissions.group_access.notification_level
return.permissions.project_access.notification_level == 3","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.OneOfScalar","(return.permissions.project_access.notification_level, return.permissions.group_access.notification_level)
(return.permissions.project_access.notification_level)","pm.expect(return_permissions_project_access_notification_level).to.eql(return_permissions_group_access_notification_level)
pm.expect([3].includes(return_permissions_project_access_notification_level)).to.be.true","/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT"
get+users_{user_id}_starred_projects,repository_storage,"return.repository_storage == ""default""
LENGTH(return.repository_storage)==7","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.repository_storage)
(return.repository_storage)","pm.expect([""default""].includes(return_repository_storage)).to.be.true
pm.expect(return_repository_storage).to.have.length(7)","/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT"
get+users_{user_id}_starred_projects,service_desk_enabled,"input.simple == return.service_desk_enabled
return.service_desk_enabled == false","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.OneOfScalar","(input.simple, return.service_desk_enabled)
(return.service_desk_enabled)","pm.expect(input_simple).to.eql(return_service_desk_enabled)
pm.expect(return_service_desk_enabled).to.eql(false)","/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT"
get+users_{user_id}_starred_projects,shared_with_groups,"size(return.shared_with_groups[]) one of { 0, 1 }",daikon.inv.unary.scalar.OneOfScalar,(size(return.shared_with_groups[..])),"pm.expect([0, 1, 0].includes(return_shared_with_groups_size_array)).to.be.true",/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
get+users_{user_id}_starred_projects,shared_with_groups.group_access_level,"return.group_access_level one of { 20, 30, 40 }",daikon.inv.unary.scalar.OneOfScalar,(return.group_access_level),"pm.expect([20, 30, 40].includes(return_group_access_level)).to.be.true",/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200&shared_with_groups():::EXIT
get+users_{user_id}_starred_projects,ssh_url_to_repo,return.path_with_namespace is a substring of return.ssh_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.ssh_url_to_repo, return.path_with_namespace)",pm.expect(return_ssh_url_to_repo.includes(return_path_with_namespace)).to.be.true,/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
get+users_{user_id}_starred_projects,star_count,"return.star_count >= return.statistics.commit_count
return.star_count >= size(return.shared_with_groups[])","daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.star_count, return.statistics.commit_count)
(return.star_count, size(return.shared_with_groups[..]))","pm.expect(return_star_count).to.be.at.least(return_statistics_commit_count)
pm.expect(return_star_count).to.be.at.least(return_shared_with_groups_size_array)","/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT"
get+users_{user_id}_starred_projects,statistics.commit_count,"return.statistics.commit_count one of { 0, 1 }
return.statistics.commit_count <= return.statistics.storage_size
return.statistics.commit_count <= return.statistics.repository_size
return.statistics.commit_count >= return.statistics.lfs_objects_size","daikon.inv.unary.scalar.OneOfScalar
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.statistics.commit_count)
(return.statistics.commit_count, return.statistics.storage_size)
(return.statistics.commit_count, return.statistics.repository_size)
(return.statistics.commit_count, return.statistics.lfs_objects_size)","pm.expect([0, 1, 0].includes(return_statistics_commit_count)).to.be.true
pm.expect(return_statistics_commit_count).to.be.lte(return_statistics_storage_size)
pm.expect(return_statistics_commit_count).to.be.lte(return_statistics_repository_size)
pm.expect(return_statistics_commit_count).to.be.at.least(return_statistics_lfs_objects_size)","/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT"
get+users_{user_id}_starred_projects,statistics.lfs_objects_size,"return.statistics.lfs_objects_size == return.statistics.job_artifacts_size
return.statistics.lfs_objects_size == return.statistics.packages_size
return.statistics.lfs_objects_size == return.statistics.snippets_size
return.statistics.lfs_objects_size == 0
return.statistics.lfs_objects_size <= size(return.tag_list[])","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.OneOfScalar
daikon.inv.binary.twoScalar.IntLessEqual","(return.statistics.lfs_objects_size, return.statistics.job_artifacts_size)
(return.statistics.lfs_objects_size, return.statistics.packages_size)
(return.statistics.lfs_objects_size, return.statistics.snippets_size)
(return.statistics.lfs_objects_size)
(return.statistics.lfs_objects_size, size(return.tag_list[..]))","pm.expect(return_statistics_lfs_objects_size).to.eql(return_statistics_job_artifacts_size)
pm.expect(return_statistics_lfs_objects_size).to.eql(return_statistics_packages_size)
pm.expect(return_statistics_lfs_objects_size).to.eql(return_statistics_snippets_size)
pm.expect([0].includes(return_statistics_lfs_objects_size)).to.be.true
pm.expect(return_statistics_lfs_objects_size).to.be.lte(return_tag_list_size_array)","/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT"
get+users_{user_id}_starred_projects,statistics.repository_size,"return.statistics.repository_size >= 0
return.statistics.repository_size >= return.statistics.wiki_size
return.statistics.repository_size >= return.statistics.lfs_objects_size","daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.statistics.repository_size)
(return.statistics.repository_size, return.statistics.wiki_size)
(return.statistics.repository_size, return.statistics.lfs_objects_size)","pm.expect(return_statistics_repository_size).to.be.at.least(0)
pm.expect(return_statistics_repository_size).to.be.at.least(return_statistics_wiki_size)
pm.expect(return_statistics_repository_size).to.be.at.least(return_statistics_lfs_objects_size)","/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT"
get+users_{user_id}_starred_projects,statistics.storage_size,"return.statistics.storage_size >= 0
return.statistics.storage_size >= return.statistics.repository_size
return.statistics.storage_size >= return.statistics.wiki_size
return.statistics.storage_size >= return.statistics.lfs_objects_size
return.statistics.storage_size >= size(return.shared_with_groups[])","daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.statistics.storage_size)
(return.statistics.storage_size, return.statistics.repository_size)
(return.statistics.storage_size, return.statistics.wiki_size)
(return.statistics.storage_size, return.statistics.lfs_objects_size)
(return.statistics.storage_size, size(return.shared_with_groups[..]))","pm.expect(return_statistics_storage_size).to.be.at.least(0)
pm.expect(return_statistics_storage_size).to.be.at.least(return_statistics_repository_size)
pm.expect(return_statistics_storage_size).to.be.at.least(return_statistics_wiki_size)
pm.expect(return_statistics_storage_size).to.be.at.least(return_statistics_lfs_objects_size)
pm.expect(return_statistics_storage_size).to.be.at.least(return_shared_with_groups_size_array)","/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT"
get+users_{user_id}_starred_projects,statistics.wiki_size,"return.statistics.wiki_size one of { 0, 41943 }
return.statistics.wiki_size >= return.statistics.lfs_objects_size","daikon.inv.unary.scalar.OneOfScalar
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.statistics.wiki_size)
(return.statistics.wiki_size, return.statistics.lfs_objects_size)","pm.expect([0, 41943, 0].includes(return_statistics_wiki_size)).to.be.true
pm.expect(return_statistics_wiki_size).to.be.at.least(return_statistics_lfs_objects_size)","/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT"
get+users_{user_id}_starred_projects,tag_list,"size(return.tag_list[]) one of { 0, 1, 2 }",daikon.inv.unary.scalar.OneOfScalar,(size(return.tag_list[..])),"pm.expect([0, 1, 2].includes(return_tag_list_size_array)).to.be.true",/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
get+users_{user_id}_starred_projects,visibility,"input.visibility == return.visibility
return.visibility one of { ""internal"", ""private"", ""public"" }","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.OneOfString","(input.visibility, return.visibility)
(return.visibility)","pm.expect(input_visibility).to.eql(return_visibility)
pm.expect([""internal"", ""private"", ""public""].includes(return_visibility)).to.be.true","/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT"
get+users_{user_id}_starred_projects,web_url,"return.web_url is a substring of return.readme_url
return.path_with_namespace is a substring of return.web_url","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return.web_url, return.readme_url)
(return.web_url, return.path_with_namespace)","pm.expect(return_readme_url.includes(return_web_url)).to.be.true
pm.expect(return_web_url.includes(return_path_with_namespace)).to.be.true","/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT
/users/{user_id}/starred_projects&/users/{user_id}/starred_projects&get&200():::EXIT"
post+projects,_links.self,"return._links.self is a substring of return._links.issues
return._links.self is a substring of return._links.merge_requests
return._links.self is a substring of return._links.repo_branches
return._links.self is a substring of return._links.labels
return._links.self is a substring of return._links.events
return._links.self is a substring of return._links.members","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return._links.self, return._links.issues)
(return._links.self, return._links.merge_requests)
(return._links.self, return._links.repo_branches)
(return._links.self, return._links.labels)
(return._links.self, return._links.events)
(return._links.self, return._links.members)","pm.expect(return__links_issues.includes(return__links_self)).to.be.true
pm.expect(return__links_merge_requests.includes(return__links_self)).to.be.true
pm.expect(return__links_repo_branches.includes(return__links_self)).to.be.true
pm.expect(return__links_labels.includes(return__links_self)).to.be.true
pm.expect(return__links_events.includes(return__links_self)).to.be.true
pm.expect(return__links_members.includes(return__links_self)).to.be.true","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT"
post+projects,allow_merge_on_skipped_pipeline,input.allow_merge_on_skipped_pipeline == return.allow_merge_on_skipped_pipeline,daikon.inv.binary.twoScalar.IntEqual,"(input.allow_merge_on_skipped_pipeline, return.allow_merge_on_skipped_pipeline)",pm.expect(input_allow_merge_on_skipped_pipeline).to.eql(return_allow_merge_on_skipped_pipeline),/projects&/projects&post&201():::EXIT
post+projects,archived,"return.archived == return.service_desk_enabled
return.archived == false","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.OneOfScalar","(return.archived, return.service_desk_enabled)
(return.archived)","pm.expect(return_archived).to.eql(return_service_desk_enabled)
pm.expect(return_archived).to.eql(false)","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT"
post+projects,auto_devops_deploy_strategy,"input.auto_devops_deploy_strategy == return.auto_devops_deploy_strategy
return.auto_devops_deploy_strategy one of { ""continuous"", ""manual"", ""timed_incremental"" }","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.OneOfString","(input.auto_devops_deploy_strategy, return.auto_devops_deploy_strategy)
(return.auto_devops_deploy_strategy)","pm.expect(input_auto_devops_deploy_strategy).to.eql(return_auto_devops_deploy_strategy)
pm.expect([""continuous"", ""manual"", ""timed_incremental""].includes(return_auto_devops_deploy_strategy)).to.be.true","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT"
post+projects,auto_devops_enabled,input.auto_devops_enabled == return.auto_devops_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.auto_devops_enabled, return.auto_devops_enabled)",pm.expect(input_auto_devops_enabled).to.eql(return_auto_devops_enabled),/projects&/projects&post&201():::EXIT
post+projects,autoclose_referenced_issues,input.autoclose_referenced_issues == return.autoclose_referenced_issues,daikon.inv.binary.twoScalar.IntEqual,"(input.autoclose_referenced_issues, return.autoclose_referenced_issues)",pm.expect(input_autoclose_referenced_issues).to.eql(return_autoclose_referenced_issues),/projects&/projects&post&201():::EXIT
post+projects,ci_default_git_depth,return.ci_default_git_depth == 20,daikon.inv.unary.scalar.OneOfScalar,(return.ci_default_git_depth),pm.expect([20].includes(return_ci_default_git_depth)).to.be.true,/projects&/projects&post&201():::EXIT
post+projects,ci_forward_deployment_enabled,return.ci_forward_deployment_enabled == true,daikon.inv.unary.scalar.OneOfScalar,(return.ci_forward_deployment_enabled),pm.expect(return_ci_forward_deployment_enabled).to.eql(true),/projects&/projects&post&201():::EXIT
post+projects,container_registry_enabled,input.container_registry_enabled == return.container_registry_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.container_registry_enabled, return.container_registry_enabled)",pm.expect(input_container_registry_enabled).to.eql(return_container_registry_enabled),/projects&/projects&post&201():::EXIT
post+projects,created_at,"LENGTH(return.created_at)==24
return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.created_at)
(return.created_at)","pm.expect(return_created_at).to.have.length(24)
pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT"
post+projects,creator_id,return.creator_id <= return.namespace.id,daikon.inv.binary.twoScalar.IntLessEqual,"(return.creator_id, return.namespace.id)",pm.expect(return_creator_id).to.be.lte(return_namespace_id),/projects&/projects&post&201():::EXIT
post+projects,default_branch,return.default_branch is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.default_branch, return.readme_url)",pm.expect(return_readme_url.includes(return_default_branch)).to.be.true,/projects&/projects&post&201():::EXIT
post+projects,description,input.description == return.description,daikon.inv.binary.twoString.StringEqual,"(input.description, return.description)",pm.expect(input_description).to.eql(return_description),/projects&/projects&post&201():::EXIT
post+projects,forks_count,"return.forks_count == return.star_count
return.forks_count == size(return.shared_with_groups[])
return.forks_count == size(return.shared_with_groups[])
return.forks_count <= size(return.tag_list[])","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntLessEqual","(return.forks_count, return.star_count)
(return.forks_count, size(return.shared_with_groups[..]))
(return.forks_count, size(return.shared_with_groups[..]))
(return.forks_count, size(return.tag_list[..]))","pm.expect(return_forks_count).to.eql(return_star_count)
pm.expect(return_forks_count).to.eql(return_shared_with_groups_size_array)
pm.expect(return_forks_count).to.eql(return_shared_with_groups_size_array)
pm.expect(return_forks_count).to.be.lte(return_tag_list_size_array)","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT"
post+projects,http_url_to_repo,return.web_url is a substring of return.http_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.http_url_to_repo, return.web_url)",pm.expect(return_http_url_to_repo.includes(return_web_url)).to.be.true,/projects&/projects&post&201():::EXIT
post+projects,import_status,"return.import_status == ""none""
LENGTH(return.import_status)==4","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.import_status)
(return.import_status)","pm.expect([""none""].includes(return_import_status)).to.be.true
pm.expect(return_import_status).to.have.length(4)","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT"
post+projects,last_activity_at,"LENGTH(return.last_activity_at)==24
return.last_activity_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.last_activity_at)
(return.last_activity_at)","pm.expect(return_last_activity_at).to.have.length(24)
pm.expect(return_last_activity_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT"
post+projects,merge_method,"input.merge_method == return.merge_method
return.merge_method one of { ""ff"", ""merge"", ""rebase_merge"" }","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.OneOfString","(input.merge_method, return.merge_method)
(return.merge_method)","pm.expect(input_merge_method).to.eql(return_merge_method)
pm.expect([""ff"", ""merge"", ""rebase_merge""].includes(return_merge_method)).to.be.true","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT"
post+projects,name,"input.name == return.name
return.name is a substring of return.name_with_namespace","daikon.inv.binary.twoString.StringEqual
daikon.inv.binary.twoString.StdString$SubString","(input.name, return.name)
(return.name, return.name_with_namespace)","pm.expect(input_name).to.eql(return_name)
pm.expect(return_name_with_namespace.includes(return_name)).to.be.true","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT"
post+projects,name_with_namespace,"input.name is a substring of return.name_with_namespace
return.namespace.name is a substring of return.name_with_namespace","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(input.name, return.name_with_namespace)
(return.name_with_namespace, return.namespace.name)","pm.expect(return_name_with_namespace.includes(input_name)).to.be.true
pm.expect(return_name_with_namespace.includes(return_namespace_name)).to.be.true","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT"
post+projects,namespace.id,"input.namespace_id == return.namespace.id
return.namespace.id >= 1","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.LowerBound","(input.namespace_id, return.namespace.id)
(return.namespace.id)","pm.expect(input_namespace_id).to.eql(return_namespace_id)
pm.expect(return_namespace_id).to.be.at.least(1)","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT"
post+projects,namespace.kind,"return.namespace.kind one of { ""group"", ""user"" }",daikon.inv.unary.string.OneOfString,(return.namespace.kind),"pm.expect([""group"", ""user""].includes(return_namespace_kind)).to.be.true",/projects&/projects&post&201():::EXIT
post+projects,namespace.path,return.namespace.path is a substring of return.namespace.full_path,daikon.inv.binary.twoString.StdString$SubString,"(return.namespace.path, return.namespace.full_path)",pm.expect(return_namespace_full_path.includes(return_namespace_path)).to.be.true,/projects&/projects&post&201():::EXIT
post+projects,only_allow_merge_if_all_discussions_are_resolved,input.only_allow_merge_if_all_discussions_are_resolved == return.only_allow_merge_if_all_discussions_are_resolved,daikon.inv.binary.twoScalar.IntEqual,"(input.only_allow_merge_if_all_discussions_are_resolved, return.only_allow_merge_if_all_discussions_are_resolved)",pm.expect(input_only_allow_merge_if_all_discussions_are_resolved).to.eql(return_only_allow_merge_if_all_discussions_are_resolved),/projects&/projects&post&201():::EXIT
post+projects,only_allow_merge_if_pipeline_succeeds,input.only_allow_merge_if_pipeline_succeeds == return.only_allow_merge_if_pipeline_succeeds,daikon.inv.binary.twoScalar.IntEqual,"(input.only_allow_merge_if_pipeline_succeeds, return.only_allow_merge_if_pipeline_succeeds)",pm.expect(input_only_allow_merge_if_pipeline_succeeds).to.eql(return_only_allow_merge_if_pipeline_succeeds),/projects&/projects&post&201():::EXIT
post+projects,open_issues_count,"return.open_issues_count == return.forks_count
return.open_issues_count <= size(return.tag_list[])","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntLessEqual","(return.open_issues_count, return.forks_count)
(return.open_issues_count, size(return.tag_list[..]))","pm.expect(return_open_issues_count).to.eql(return_forks_count)
pm.expect(return_open_issues_count).to.be.lte(return_tag_list_size_array)","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT"
post+projects,owner.id,"return.owner.id == return.creator_id
return.owner.id <= return.namespace.id","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntLessEqual","(return.owner.id, return.creator_id)
(return.owner.id, return.namespace.id)","pm.expect(return_owner_id).to.eql(return_creator_id)
pm.expect(return_owner_id).to.be.lte(return_namespace_id)","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT"
post+projects,owner.name,"return.owner.name == return.namespace.name
return.owner.name is a substring of return.name_with_namespace","daikon.inv.binary.twoString.StringEqual
daikon.inv.binary.twoString.StdString$SubString","(return.owner.name, return.namespace.name)
(return.owner.name, return.name_with_namespace)","pm.expect(return_owner_name).to.eql(return_namespace_name)
pm.expect(return_name_with_namespace.includes(return_owner_name)).to.be.true","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT"
post+projects,packages_enabled,input.packages_enabled == return.packages_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.packages_enabled, return.packages_enabled)",pm.expect(input_packages_enabled).to.eql(return_packages_enabled),/projects&/projects&post&201():::EXIT
post+projects,path,"input.path == return.path
return.path is a substring of return.path_with_namespace","daikon.inv.binary.twoString.StringEqual
daikon.inv.binary.twoString.StdString$SubString","(input.path, return.path)
(return.path, return.path_with_namespace)","pm.expect(input_path).to.eql(return_path)
pm.expect(return_path_with_namespace.includes(return_path)).to.be.true","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT"
post+projects,path_with_namespace,"input.path is a substring of return.path_with_namespace
return.namespace.full_path is a substring of return.path_with_namespace","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(input.path, return.path_with_namespace)
(return.path_with_namespace, return.namespace.full_path)","pm.expect(return_path_with_namespace.includes(input_path)).to.be.true
pm.expect(return_path_with_namespace.includes(return_namespace_full_path)).to.be.true","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT"
post+projects,permissions,return.permissions == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions),pm.expect(return_permissions).to.be.null,/projects&/projects&post&201():::EXIT
post+projects,permissions.group_access,return.permissions.group_access == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.group_access),pm.expect(return_permissions_group_access).to.be.null,/projects&/projects&post&201():::EXIT
post+projects,permissions.project_access,return.permissions.project_access == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.project_access),pm.expect(return_permissions_project_access).to.be.null,/projects&/projects&post&201():::EXIT
post+projects,public_jobs,input.public_builds == return.public_jobs,daikon.inv.binary.twoScalar.IntEqual,"(input.public_builds, return.public_jobs)",pm.expect(input_public_builds).to.eql(return_public_jobs),/projects&/projects&post&201():::EXIT
post+projects,readme_url,input.default_branch is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(input.default_branch, return.readme_url)",pm.expect(return_readme_url.includes(input_default_branch)).to.be.true,/projects&/projects&post&201():::EXIT
post+projects,remove_source_branch_after_merge,input.remove_source_branch_after_merge == return.remove_source_branch_after_merge,daikon.inv.binary.twoScalar.IntEqual,"(input.remove_source_branch_after_merge, return.remove_source_branch_after_merge)",pm.expect(input_remove_source_branch_after_merge).to.eql(return_remove_source_branch_after_merge),/projects&/projects&post&201():::EXIT
post+projects,repository_storage,"input.repository_storage == return.repository_storage
return.repository_storage == ""default""
LENGTH(return.repository_storage)==7","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(input.repository_storage, return.repository_storage)
(return.repository_storage)
(return.repository_storage)","pm.expect(input_repository_storage).to.eql(return_repository_storage)
pm.expect([""default""].includes(return_repository_storage)).to.be.true
pm.expect(return_repository_storage).to.have.length(7)","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT"
post+projects,request_access_enabled,input.request_access_enabled == return.request_access_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.request_access_enabled, return.request_access_enabled)",pm.expect(input_request_access_enabled).to.eql(return_request_access_enabled),/projects&/projects&post&201():::EXIT
post+projects,resolve_outdated_diff_discussions,input.resolve_outdated_diff_discussions == return.resolve_outdated_diff_discussions,daikon.inv.binary.twoScalar.IntEqual,"(input.resolve_outdated_diff_discussions, return.resolve_outdated_diff_discussions)",pm.expect(input_resolve_outdated_diff_discussions).to.eql(return_resolve_outdated_diff_discussions),/projects&/projects&post&201():::EXIT
post+projects,runners_token,LENGTH(return.runners_token)==29,daikon.inv.unary.string.FixedLengthString,(return.runners_token),pm.expect(return_runners_token).to.have.length(29),/projects&/projects&post&201():::EXIT
post+projects,shared_runners_enabled,input.shared_runners_enabled == return.shared_runners_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.shared_runners_enabled, return.shared_runners_enabled)",pm.expect(input_shared_runners_enabled).to.eql(return_shared_runners_enabled),/projects&/projects&post&201():::EXIT
post+projects,shared_with_groups,return.shared_with_groups[] == [],daikon.inv.unary.sequence.OneOfSequence,(return.shared_with_groups[..]),pm.expect([[]].some(value => pm.expect(return_shared_with_groups_array).to.deep.equal(value).that)).to.be.true,/projects&/projects&post&201():::EXIT
post+projects,ssh_url_to_repo,return.path_with_namespace is a substring of return.ssh_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.ssh_url_to_repo, return.path_with_namespace)",pm.expect(return_ssh_url_to_repo.includes(return_path_with_namespace)).to.be.true,/projects&/projects&post&201():::EXIT
post+projects,statistics,return.statistics == null,daikon.inv.unary.scalar.OneOfScalar,(return.statistics),pm.expect(return_statistics).to.be.null,/projects&/projects&post&201():::EXIT
post+projects,tag_list,size(input.tag_list[]) == size(return.tag_list[]),daikon.inv.binary.twoScalar.IntEqual,"(size(input.tag_list[..]), size(return.tag_list[..]))",pm.expect(input_tag_list_size_array).to.eql(return_tag_list_size_array),/projects&/projects&post&201():::EXIT
post+projects,visibility,"input.visibility == return.visibility
return.visibility one of { ""internal"", ""private"", ""public"" }","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.OneOfString","(input.visibility, return.visibility)
(return.visibility)","pm.expect(input_visibility).to.eql(return_visibility)
pm.expect([""internal"", ""private"", ""public""].includes(return_visibility)).to.be.true","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT"
post+projects,web_url,"return.web_url is a substring of return.readme_url
return.path_with_namespace is a substring of return.web_url","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return.web_url, return.readme_url)
(return.web_url, return.path_with_namespace)","pm.expect(return_readme_url.includes(return_web_url)).to.be.true
pm.expect(return_web_url.includes(return_path_with_namespace)).to.be.true","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT"
post+projects_user_{user_id},_links.events,LENGTH(return._links.events)==49,daikon.inv.unary.string.FixedLengthString,(return._links.events),pm.expect(return__links_events).to.have.length(49),/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
post+projects_user_{user_id},_links.labels,LENGTH(return._links.labels)==49,daikon.inv.unary.string.FixedLengthString,(return._links.labels),pm.expect(return__links_labels).to.have.length(49),/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
post+projects_user_{user_id},_links.members,LENGTH(return._links.members)==50,daikon.inv.unary.string.FixedLengthString,(return._links.members),pm.expect(return__links_members).to.have.length(50),/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
post+projects_user_{user_id},_links.repo_branches,LENGTH(return._links.repo_branches)==62,daikon.inv.unary.string.FixedLengthString,(return._links.repo_branches),pm.expect(return__links_repo_branches).to.have.length(62),/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
post+projects_user_{user_id},_links.self,"LENGTH(return._links.self)==42
return._links.self is a substring of return._links.issues
return._links.self is a substring of return._links.merge_requests
return._links.self is a substring of return._links.repo_branches
return._links.self is a substring of return._links.labels
return._links.self is a substring of return._links.events
return._links.self is a substring of return._links.members","daikon.inv.unary.string.FixedLengthString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return._links.self)
(return._links.self, return._links.issues)
(return._links.self, return._links.merge_requests)
(return._links.self, return._links.repo_branches)
(return._links.self, return._links.labels)
(return._links.self, return._links.events)
(return._links.self, return._links.members)","pm.expect(return__links_self).to.have.length(42)
pm.expect(return__links_issues.includes(return__links_self)).to.be.true
pm.expect(return__links_merge_requests.includes(return__links_self)).to.be.true
pm.expect(return__links_repo_branches.includes(return__links_self)).to.be.true
pm.expect(return__links_labels.includes(return__links_self)).to.be.true
pm.expect(return__links_events.includes(return__links_self)).to.be.true
pm.expect(return__links_members.includes(return__links_self)).to.be.true","/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT"
post+projects_user_{user_id},allow_merge_on_skipped_pipeline,input.allow_merge_on_skipped_pipeline == return.allow_merge_on_skipped_pipeline,daikon.inv.binary.twoScalar.IntEqual,"(input.allow_merge_on_skipped_pipeline, return.allow_merge_on_skipped_pipeline)",pm.expect(input_allow_merge_on_skipped_pipeline).to.eql(return_allow_merge_on_skipped_pipeline),/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
post+projects_user_{user_id},archived,"return.archived == return.service_desk_enabled
return.archived == false","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.OneOfScalar","(return.archived, return.service_desk_enabled)
(return.archived)","pm.expect(return_archived).to.eql(return_service_desk_enabled)
pm.expect(return_archived).to.eql(false)","/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT"
post+projects_user_{user_id},auto_devops_deploy_strategy,"input.auto_devops_deploy_strategy == return.auto_devops_deploy_strategy
return.auto_devops_deploy_strategy one of { ""continuous"", ""manual"", ""timed_incremental"" }","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.OneOfString","(input.auto_devops_deploy_strategy, return.auto_devops_deploy_strategy)
(return.auto_devops_deploy_strategy)","pm.expect(input_auto_devops_deploy_strategy).to.eql(return_auto_devops_deploy_strategy)
pm.expect([""continuous"", ""manual"", ""timed_incremental""].includes(return_auto_devops_deploy_strategy)).to.be.true","/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT"
post+projects_user_{user_id},auto_devops_enabled,input.auto_devops_enabled == return.auto_devops_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.auto_devops_enabled, return.auto_devops_enabled)",pm.expect(input_auto_devops_enabled).to.eql(return_auto_devops_enabled),/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
post+projects_user_{user_id},autoclose_referenced_issues,input.autoclose_referenced_issues == return.autoclose_referenced_issues,daikon.inv.binary.twoScalar.IntEqual,"(input.autoclose_referenced_issues, return.autoclose_referenced_issues)",pm.expect(input_autoclose_referenced_issues).to.eql(return_autoclose_referenced_issues),/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
post+projects_user_{user_id},ci_default_git_depth,return.ci_default_git_depth == 20,daikon.inv.unary.scalar.OneOfScalar,(return.ci_default_git_depth),pm.expect([20].includes(return_ci_default_git_depth)).to.be.true,/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
post+projects_user_{user_id},ci_forward_deployment_enabled,return.ci_forward_deployment_enabled == true,daikon.inv.unary.scalar.OneOfScalar,(return.ci_forward_deployment_enabled),pm.expect(return_ci_forward_deployment_enabled).to.eql(true),/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
post+projects_user_{user_id},container_registry_enabled,input.container_registry_enabled == return.container_registry_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.container_registry_enabled, return.container_registry_enabled)",pm.expect(input_container_registry_enabled).to.eql(return_container_registry_enabled),/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
post+projects_user_{user_id},created_at,"return.created_at == return.last_activity_at
LENGTH(return.created_at)==24
return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.created_at, return.last_activity_at)
(return.created_at)
(return.created_at)","pm.expect(return_created_at).to.eql(return_last_activity_at)
pm.expect(return_created_at).to.have.length(24)
pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)","/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT"
post+projects_user_{user_id},creator_id,input.user_id == return.creator_id,daikon.inv.binary.twoScalar.IntEqual,"(input.user_id, return.creator_id)",pm.expect(input_user_id).to.eql(return_creator_id),/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
post+projects_user_{user_id},default_branch,"return.default_branch == ""main""
LENGTH(return.default_branch)==4
return.default_branch is a substring of return.readme_url","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString
daikon.inv.binary.twoString.StdString$SubString","(return.default_branch)
(return.default_branch)
(return.default_branch, return.readme_url)","pm.expect([""main""].includes(return_default_branch)).to.be.true
pm.expect(return_default_branch).to.have.length(4)
pm.expect(return_readme_url.includes(return_default_branch)).to.be.true","/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT"
post+projects_user_{user_id},description,input.description == return.description,daikon.inv.binary.twoString.StringEqual,"(input.description, return.description)",pm.expect(input_description).to.eql(return_description),/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
post+projects_user_{user_id},forks_count,"return.forks_count == return.star_count
return.forks_count == size(return.shared_with_groups[])
return.forks_count == size(return.shared_with_groups[])
return.forks_count <= size(return.tag_list[])","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntLessEqual","(return.forks_count, return.star_count)
(return.forks_count, size(return.shared_with_groups[..]))
(return.forks_count, size(return.shared_with_groups[..]))
(return.forks_count, size(return.tag_list[..]))","pm.expect(return_forks_count).to.eql(return_star_count)
pm.expect(return_forks_count).to.eql(return_shared_with_groups_size_array)
pm.expect(return_forks_count).to.eql(return_shared_with_groups_size_array)
pm.expect(return_forks_count).to.be.lte(return_tag_list_size_array)","/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT"
post+projects_user_{user_id},http_url_to_repo,return.web_url is a substring of return.http_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.http_url_to_repo, return.web_url)",pm.expect(return_http_url_to_repo.includes(return_web_url)).to.be.true,/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
post+projects_user_{user_id},import_status,"return.import_status == ""none""
LENGTH(return.import_status)==4","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.import_status)
(return.import_status)","pm.expect([""none""].includes(return_import_status)).to.be.true
pm.expect(return_import_status).to.have.length(4)","/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT"
post+projects_user_{user_id},jobs_enabled,input.jobs_enabled == return.jobs_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.jobs_enabled, return.jobs_enabled)",pm.expect(input_jobs_enabled).to.eql(return_jobs_enabled),/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
post+projects_user_{user_id},merge_method,"input.merge_method == return.merge_method
return.merge_method one of { ""ff"", ""merge"", ""rebase_merge"" }","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.OneOfString","(input.merge_method, return.merge_method)
(return.merge_method)","pm.expect(input_merge_method).to.eql(return_merge_method)
pm.expect([""ff"", ""merge"", ""rebase_merge""].includes(return_merge_method)).to.be.true","/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT"
post+projects_user_{user_id},merge_requests_enabled,return.merge_requests_enabled == return.can_create_merge_request_in,daikon.inv.binary.twoScalar.IntEqual,"(return.merge_requests_enabled, return.can_create_merge_request_in)",pm.expect(return_merge_requests_enabled).to.eql(return_can_create_merge_request_in),/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
post+projects_user_{user_id},name,input.name == return.name,daikon.inv.binary.twoString.StringEqual,"(input.name, return.name)",pm.expect(input_name).to.eql(return_name),/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
post+projects_user_{user_id},name_with_namespace,input.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(input.name, return.name_with_namespace)",pm.expect(return_name_with_namespace.includes(input_name)).to.be.true,/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
post+projects_user_{user_id},namespace.id,"return.namespace.id >= 1
input.user_id <= return.namespace.id
return.namespace.id >= size(return.tag_list[])","daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.namespace.id)
(input.user_id, return.namespace.id)
(return.namespace.id, size(return.tag_list[..]))","pm.expect(return_namespace_id).to.be.at.least(1)
pm.expect(input_user_id).to.be.lte(return_namespace_id)
pm.expect(return_namespace_id).to.be.at.least(return_tag_list_size_array)","/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT"
post+projects_user_{user_id},namespace.kind,"return.namespace.kind == ""user""
LENGTH(return.namespace.kind)==4","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.namespace.kind)
(return.namespace.kind)","pm.expect([""user""].includes(return_namespace_kind)).to.be.true
pm.expect(return_namespace_kind).to.have.length(4)","/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT"
post+projects_user_{user_id},namespace.path,return.namespace.path == return.namespace.full_path,daikon.inv.binary.twoString.StringEqual,"(return.namespace.path, return.namespace.full_path)",pm.expect(return_namespace_path).to.eql(return_namespace_full_path),/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
post+projects_user_{user_id},only_allow_merge_if_all_discussions_are_resolved,input.only_allow_merge_if_all_discussions_are_resolved == return.only_allow_merge_if_all_discussions_are_resolved,daikon.inv.binary.twoScalar.IntEqual,"(input.only_allow_merge_if_all_discussions_are_resolved, return.only_allow_merge_if_all_discussions_are_resolved)",pm.expect(input_only_allow_merge_if_all_discussions_are_resolved).to.eql(return_only_allow_merge_if_all_discussions_are_resolved),/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
post+projects_user_{user_id},only_allow_merge_if_pipeline_succeeds,input.only_allow_merge_if_pipeline_succeeds == return.only_allow_merge_if_pipeline_succeeds,daikon.inv.binary.twoScalar.IntEqual,"(input.only_allow_merge_if_pipeline_succeeds, return.only_allow_merge_if_pipeline_succeeds)",pm.expect(input_only_allow_merge_if_pipeline_succeeds).to.eql(return_only_allow_merge_if_pipeline_succeeds),/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
post+projects_user_{user_id},open_issues_count,"return.open_issues_count == return.forks_count
return.open_issues_count <= size(return.tag_list[])","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntLessEqual","(return.open_issues_count, return.forks_count)
(return.open_issues_count, size(return.tag_list[..]))","pm.expect(return_open_issues_count).to.eql(return_forks_count)
pm.expect(return_open_issues_count).to.be.lte(return_tag_list_size_array)","/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT"
post+projects_user_{user_id},owner.id,input.user_id == return.owner.id,daikon.inv.binary.twoScalar.IntEqual,"(input.user_id, return.owner.id)",pm.expect(input_user_id).to.eql(return_owner_id),/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
post+projects_user_{user_id},owner.name,"return.owner.name == return.namespace.name
return.owner.name is a substring of return.name_with_namespace","daikon.inv.binary.twoString.StringEqual
daikon.inv.binary.twoString.StdString$SubString","(return.owner.name, return.namespace.name)
(return.owner.name, return.name_with_namespace)","pm.expect(return_owner_name).to.eql(return_namespace_name)
pm.expect(return_name_with_namespace.includes(return_owner_name)).to.be.true","/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT"
post+projects_user_{user_id},packages_enabled,input.packages_enabled == return.packages_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.packages_enabled, return.packages_enabled)",pm.expect(input_packages_enabled).to.eql(return_packages_enabled),/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
post+projects_user_{user_id},path,"input.path == return.path
return.path is a substring of return.path_with_namespace","daikon.inv.binary.twoString.StringEqual
daikon.inv.binary.twoString.StdString$SubString","(input.path, return.path)
(return.path, return.path_with_namespace)","pm.expect(input_path).to.eql(return_path)
pm.expect(return_path_with_namespace.includes(return_path)).to.be.true","/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT"
post+projects_user_{user_id},path_with_namespace,"input.path is a substring of return.path_with_namespace
return.namespace.path is a substring of return.path_with_namespace","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(input.path, return.path_with_namespace)
(return.path_with_namespace, return.namespace.path)","pm.expect(return_path_with_namespace.includes(input_path)).to.be.true
pm.expect(return_path_with_namespace.includes(return_namespace_path)).to.be.true","/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT"
post+projects_user_{user_id},permissions,return.permissions == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions),pm.expect(return_permissions).to.be.null,/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
post+projects_user_{user_id},permissions.group_access,return.permissions.group_access == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.group_access),pm.expect(return_permissions_group_access).to.be.null,/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
post+projects_user_{user_id},permissions.project_access,return.permissions.project_access == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.project_access),pm.expect(return_permissions_project_access).to.be.null,/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
post+projects_user_{user_id},public_jobs,input.public_builds == return.public_jobs,daikon.inv.binary.twoScalar.IntEqual,"(input.public_builds, return.public_jobs)",pm.expect(input_public_builds).to.eql(return_public_jobs),/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
post+projects_user_{user_id},remove_source_branch_after_merge,input.remove_source_branch_after_merge == return.remove_source_branch_after_merge,daikon.inv.binary.twoScalar.IntEqual,"(input.remove_source_branch_after_merge, return.remove_source_branch_after_merge)",pm.expect(input_remove_source_branch_after_merge).to.eql(return_remove_source_branch_after_merge),/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
post+projects_user_{user_id},repository_storage,"return.repository_storage == ""default""
LENGTH(return.repository_storage)==7","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.repository_storage)
(return.repository_storage)","pm.expect([""default""].includes(return_repository_storage)).to.be.true
pm.expect(return_repository_storage).to.have.length(7)","/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT"
post+projects_user_{user_id},request_access_enabled,input.request_access_enabled == return.request_access_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.request_access_enabled, return.request_access_enabled)",pm.expect(input_request_access_enabled).to.eql(return_request_access_enabled),/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
post+projects_user_{user_id},resolve_outdated_diff_discussions,input.resolve_outdated_diff_discussions == return.resolve_outdated_diff_discussions,daikon.inv.binary.twoScalar.IntEqual,"(input.resolve_outdated_diff_discussions, return.resolve_outdated_diff_discussions)",pm.expect(input_resolve_outdated_diff_discussions).to.eql(return_resolve_outdated_diff_discussions),/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
post+projects_user_{user_id},runners_token,LENGTH(return.runners_token)==29,daikon.inv.unary.string.FixedLengthString,(return.runners_token),pm.expect(return_runners_token).to.have.length(29),/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
post+projects_user_{user_id},shared_runners_enabled,input.shared_runners_enabled == return.shared_runners_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.shared_runners_enabled, return.shared_runners_enabled)",pm.expect(input_shared_runners_enabled).to.eql(return_shared_runners_enabled),/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
post+projects_user_{user_id},shared_with_groups,return.shared_with_groups[] == [],daikon.inv.unary.sequence.OneOfSequence,(return.shared_with_groups[..]),pm.expect([[]].some(value => pm.expect(return_shared_with_groups_array).to.deep.equal(value).that)).to.be.true,/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
post+projects_user_{user_id},ssh_url_to_repo,return.path_with_namespace is a substring of return.ssh_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.ssh_url_to_repo, return.path_with_namespace)",pm.expect(return_ssh_url_to_repo.includes(return_path_with_namespace)).to.be.true,/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
post+projects_user_{user_id},statistics,return.statistics == null,daikon.inv.unary.scalar.OneOfScalar,(return.statistics),pm.expect(return_statistics).to.be.null,/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
post+projects_user_{user_id},suggestion_commit_message,input.suggestion_commit_message == return.suggestion_commit_message,daikon.inv.binary.twoString.StringEqual,"(input.suggestion_commit_message, return.suggestion_commit_message)",pm.expect(input_suggestion_commit_message).to.eql(return_suggestion_commit_message),/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
post+projects_user_{user_id},tag_list,"input.tag_list[] == return.tag_list[]
input.tag_list[] == return.tag_list[] (elementwise)
input.user_id >= size(return.tag_list[])","daikon.inv.binary.twoSequence.SeqSeqStringEqual
daikon.inv.binary.twoSequence.PairwiseStringEqual
daikon.inv.binary.twoScalar.IntGreaterEqual","(input.tag_list[..], return.tag_list[..])
(input.tag_list[..], return.tag_list[..])
(input.user_id, size(return.tag_list[..]))","pm.expect(input_tag_list_array).to.eql(return_tag_list_array)
pm.expect(input_tag_list_array).to.eql(return_tag_list_array)
pm.expect(input_user_id).to.be.at.least(return_tag_list_size_array)","/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT"
post+projects_user_{user_id},visibility,"input.visibility == return.visibility
return.visibility one of { ""internal"", ""private"", ""public"" }","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.OneOfString","(input.visibility, return.visibility)
(return.visibility)","pm.expect(input_visibility).to.eql(return_visibility)
pm.expect([""internal"", ""private"", ""public""].includes(return_visibility)).to.be.true","/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT"
post+projects_user_{user_id},web_url,"return.web_url is a substring of return.readme_url
return.path_with_namespace is a substring of return.web_url","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return.web_url, return.readme_url)
(return.web_url, return.path_with_namespace)","pm.expect(return_readme_url.includes(return_web_url)).to.be.true
pm.expect(return_web_url.includes(return_path_with_namespace)).to.be.true","/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT
/projects/user/{user_id}&/projects/user/{user_id}&post&201():::EXIT"
post+projects_{id}_archive,_links.self,"return._links.self is a substring of return._links.issues
return._links.self is a substring of return._links.merge_requests
return._links.self is a substring of return._links.repo_branches
return._links.self is a substring of return._links.labels
return._links.self is a substring of return._links.events
return._links.self is a substring of return._links.members","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return._links.self, return._links.issues)
(return._links.self, return._links.merge_requests)
(return._links.self, return._links.repo_branches)
(return._links.self, return._links.labels)
(return._links.self, return._links.events)
(return._links.self, return._links.members)","pm.expect(return__links_issues.includes(return__links_self)).to.be.true
pm.expect(return__links_merge_requests.includes(return__links_self)).to.be.true
pm.expect(return__links_repo_branches.includes(return__links_self)).to.be.true
pm.expect(return__links_labels.includes(return__links_self)).to.be.true
pm.expect(return__links_events.includes(return__links_self)).to.be.true
pm.expect(return__links_members.includes(return__links_self)).to.be.true","/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT"
post+projects_{id}_archive,can_create_merge_request_in,return.can_create_merge_request_in == false,daikon.inv.unary.scalar.OneOfScalar,(return.can_create_merge_request_in),pm.expect(return_can_create_merge_request_in).to.eql(false),/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT
post+projects_{id}_archive,created_at,"return.created_at == return.last_activity_at
LENGTH(return.created_at)==24
return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.created_at, return.last_activity_at)
(return.created_at)
(return.created_at)","pm.expect(return_created_at).to.eql(return_last_activity_at)
pm.expect(return_created_at).to.have.length(24)
pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)","/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT"
post+projects_{id}_archive,default_branch,return.default_branch is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.default_branch, return.readme_url)",pm.expect(return_readme_url.includes(return_default_branch)).to.be.true,/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT
post+projects_{id}_archive,http_url_to_repo,return.web_url is a substring of return.http_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.http_url_to_repo, return.web_url)",pm.expect(return_http_url_to_repo.includes(return_web_url)).to.be.true,/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT
post+projects_{id}_archive,id,input.id == return.id,daikon.inv.binary.twoScalar.IntEqual,"(input.id, return.id)",pm.expect(input_id).to.eql(return_id),/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT
post+projects_{id}_archive,license,return.license == null,daikon.inv.unary.scalar.OneOfScalar,(return.license),pm.expect(return_license).to.be.null,/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT
post+projects_{id}_archive,name,return.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.name, return.name_with_namespace)",pm.expect(return_name_with_namespace.includes(return_name)).to.be.true,/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT
post+projects_{id}_archive,namespace.path,return.namespace.path == return.namespace.full_path,daikon.inv.binary.twoString.StringEqual,"(return.namespace.path, return.namespace.full_path)",pm.expect(return_namespace_path).to.eql(return_namespace_full_path),/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT
post+projects_{id}_archive,open_issues_count,"return.open_issues_count == size(return.shared_with_groups[])
return.open_issues_count == size(return.shared_with_groups[])
return.open_issues_count <= return.forks_count
return.open_issues_count <= return.star_count","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual","(return.open_issues_count, size(return.shared_with_groups[..]))
(return.open_issues_count, size(return.shared_with_groups[..]))
(return.open_issues_count, return.forks_count)
(return.open_issues_count, return.star_count)","pm.expect(return_open_issues_count).to.eql(return_shared_with_groups_size_array)
pm.expect(return_open_issues_count).to.eql(return_shared_with_groups_size_array)
pm.expect(return_open_issues_count).to.be.lte(return_forks_count)
pm.expect(return_open_issues_count).to.be.lte(return_star_count)","/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT"
post+projects_{id}_archive,owner.id,return.owner.id == return.creator_id,daikon.inv.binary.twoScalar.IntEqual,"(return.owner.id, return.creator_id)",pm.expect(return_owner_id).to.eql(return_creator_id),/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT
post+projects_{id}_archive,owner.name,"return.owner.name == return.namespace.name
return.owner.name is a substring of return.name_with_namespace","daikon.inv.binary.twoString.StringEqual
daikon.inv.binary.twoString.StdString$SubString","(return.owner.name, return.namespace.name)
(return.owner.name, return.name_with_namespace)","pm.expect(return_owner_name).to.eql(return_namespace_name)
pm.expect(return_name_with_namespace.includes(return_owner_name)).to.be.true","/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT"
post+projects_{id}_archive,path,return.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path, return.path_with_namespace)",pm.expect(return_path_with_namespace.includes(return_path)).to.be.true,/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT
post+projects_{id}_archive,path_with_namespace,return.namespace.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path_with_namespace, return.namespace.path)",pm.expect(return_path_with_namespace.includes(return_namespace_path)).to.be.true,/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT
post+projects_{id}_archive,permissions,return.permissions == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions),pm.expect(return_permissions).to.be.null,/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT
post+projects_{id}_archive,permissions.group_access,return.permissions.group_access == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.group_access),pm.expect(return_permissions_group_access).to.be.null,/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT
post+projects_{id}_archive,permissions.project_access,return.permissions.project_access == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.project_access),pm.expect(return_permissions_project_access).to.be.null,/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT
post+projects_{id}_archive,shared_with_groups,return.shared_with_groups[] == [],daikon.inv.unary.sequence.OneOfSequence,(return.shared_with_groups[..]),pm.expect([[]].some(value => pm.expect(return_shared_with_groups_array).to.deep.equal(value).that)).to.be.true,/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT
post+projects_{id}_archive,ssh_url_to_repo,return.path_with_namespace is a substring of return.ssh_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.ssh_url_to_repo, return.path_with_namespace)",pm.expect(return_ssh_url_to_repo.includes(return_path_with_namespace)).to.be.true,/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT
post+projects_{id}_archive,star_count,return.star_count >= 0,daikon.inv.unary.scalar.LowerBound,(return.star_count),pm.expect(return_star_count).to.be.at.least(0),/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT
post+projects_{id}_archive,visibility,"return.visibility one of { ""internal"", ""private"", ""public"" }",daikon.inv.unary.string.OneOfString,(return.visibility),"pm.expect([""internal"", ""private"", ""public""].includes(return_visibility)).to.be.true",/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT
post+projects_{id}_archive,web_url,"return.web_url is a substring of return.readme_url
return.path_with_namespace is a substring of return.web_url","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return.web_url, return.readme_url)
(return.web_url, return.path_with_namespace)","pm.expect(return_readme_url.includes(return_web_url)).to.be.true
pm.expect(return_web_url.includes(return_path_with_namespace)).to.be.true","/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT
/projects/{id}/archive&/projects/{id}/archive&post&201():::EXIT"
post+projects_{id}_fork,_links.events,LENGTH(return._links.events)==49,daikon.inv.unary.string.FixedLengthString,(return._links.events),pm.expect(return__links_events).to.have.length(49),/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
post+projects_{id}_fork,_links.labels,LENGTH(return._links.labels)==49,daikon.inv.unary.string.FixedLengthString,(return._links.labels),pm.expect(return__links_labels).to.have.length(49),/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
post+projects_{id}_fork,_links.members,LENGTH(return._links.members)==50,daikon.inv.unary.string.FixedLengthString,(return._links.members),pm.expect(return__links_members).to.have.length(50),/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
post+projects_{id}_fork,_links.repo_branches,LENGTH(return._links.repo_branches)==62,daikon.inv.unary.string.FixedLengthString,(return._links.repo_branches),pm.expect(return__links_repo_branches).to.have.length(62),/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
post+projects_{id}_fork,_links.self,"LENGTH(return._links.self)==42
return._links.self is a substring of return._links.issues
return._links.self is a substring of return._links.merge_requests
return._links.self is a substring of return._links.repo_branches
return._links.self is a substring of return._links.labels
return._links.self is a substring of return._links.events
return._links.self is a substring of return._links.members","daikon.inv.unary.string.FixedLengthString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return._links.self)
(return._links.self, return._links.issues)
(return._links.self, return._links.merge_requests)
(return._links.self, return._links.repo_branches)
(return._links.self, return._links.labels)
(return._links.self, return._links.events)
(return._links.self, return._links.members)","pm.expect(return__links_self).to.have.length(42)
pm.expect(return__links_issues.includes(return__links_self)).to.be.true
pm.expect(return__links_merge_requests.includes(return__links_self)).to.be.true
pm.expect(return__links_repo_branches.includes(return__links_self)).to.be.true
pm.expect(return__links_labels.includes(return__links_self)).to.be.true
pm.expect(return__links_events.includes(return__links_self)).to.be.true
pm.expect(return__links_members.includes(return__links_self)).to.be.true","/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT"
post+projects_{id}_fork,auto_devops_deploy_strategy,"return.auto_devops_deploy_strategy == ""continuous""
LENGTH(return.auto_devops_deploy_strategy)==10","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.auto_devops_deploy_strategy)
(return.auto_devops_deploy_strategy)","pm.expect([""continuous""].includes(return_auto_devops_deploy_strategy)).to.be.true
pm.expect(return_auto_devops_deploy_strategy).to.have.length(10)","/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT"
post+projects_{id}_fork,created_at,"return.created_at == return.last_activity_at
LENGTH(return.created_at)==24
return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.created_at, return.last_activity_at)
(return.created_at)
(return.created_at)","pm.expect(return_created_at).to.eql(return_last_activity_at)
pm.expect(return_created_at).to.have.length(24)
pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)","/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT"
post+projects_{id}_fork,creator_id,"input.namespace_id == return.creator_id
return.creator_id == return.namespace.id
return.creator_id == 1","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.OneOfScalar","(input.namespace_id, return.creator_id)
(return.creator_id, return.namespace.id)
(return.creator_id)","pm.expect(input_namespace_id).to.eql(return_creator_id)
pm.expect(return_creator_id).to.eql(return_namespace_id)
pm.expect([1].includes(return_creator_id)).to.be.true","/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT"
post+projects_{id}_fork,default_branch,"return.default_branch == ""main""
LENGTH(return.default_branch)==4","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.default_branch)
(return.default_branch)","pm.expect([""main""].includes(return_default_branch)).to.be.true
pm.expect(return_default_branch).to.have.length(4)","/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT"
post+projects_{id}_fork,http_url_to_repo,return.web_url is a substring of return.http_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.http_url_to_repo, return.web_url)",pm.expect(return_http_url_to_repo.includes(return_web_url)).to.be.true,/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
post+projects_{id}_fork,id,input.id < return.id,daikon.inv.binary.twoScalar.IntLessThan,"(input.id, return.id)",pm.expect(input_id).to.be.lessThan(return_id),/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
post+projects_{id}_fork,import_status,"return.import_status == ""scheduled""
LENGTH(return.import_status)==9","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.import_status)
(return.import_status)","pm.expect([""scheduled""].includes(return_import_status)).to.be.true
pm.expect(return_import_status).to.have.length(9)","/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT"
post+projects_{id}_fork,merge_method,"return.merge_method == ""merge""
LENGTH(return.merge_method)==5
return.merge_method is a substring of return._links.merge_requests","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString
daikon.inv.binary.twoString.StdString$SubString","(return.merge_method)
(return.merge_method)
(return.merge_method, return._links.merge_requests)","pm.expect([""merge""].includes(return_merge_method)).to.be.true
pm.expect(return_merge_method).to.have.length(5)
pm.expect(return__links_merge_requests.includes(return_merge_method)).to.be.true","/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT"
post+projects_{id}_fork,merge_requests_enabled,return.merge_requests_enabled == return.can_create_merge_request_in,daikon.inv.binary.twoScalar.IntEqual,"(return.merge_requests_enabled, return.can_create_merge_request_in)",pm.expect(return_merge_requests_enabled).to.eql(return_can_create_merge_request_in),/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
post+projects_{id}_fork,name,"input.name == return.name
return.name is a substring of return.name_with_namespace","daikon.inv.binary.twoString.StringEqual
daikon.inv.binary.twoString.StdString$SubString","(input.name, return.name)
(return.name, return.name_with_namespace)","pm.expect(input_name).to.eql(return_name)
pm.expect(return_name_with_namespace.includes(return_name)).to.be.true","/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT"
post+projects_{id}_fork,name_with_namespace,input.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(input.name, return.name_with_namespace)",pm.expect(return_name_with_namespace.includes(input_name)).to.be.true,/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
post+projects_{id}_fork,namespace.kind,"return.namespace.kind == ""user""
LENGTH(return.namespace.kind)==4","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.namespace.kind)
(return.namespace.kind)","pm.expect([""user""].includes(return_namespace_kind)).to.be.true
pm.expect(return_namespace_kind).to.have.length(4)","/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT"
post+projects_{id}_fork,namespace.path,"return.namespace.path == return.namespace.full_path
return.namespace.path == ""root""
LENGTH(return.namespace.path)==4","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.namespace.path, return.namespace.full_path)
(return.namespace.path)
(return.namespace.path)","pm.expect(return_namespace_path).to.eql(return_namespace_full_path)
pm.expect([""root""].includes(return_namespace_path)).to.be.true
pm.expect(return_namespace_path).to.have.length(4)","/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT"
post+projects_{id}_fork,open_issues_count,"return.open_issues_count == return.forks_count
return.open_issues_count == return.star_count
return.open_issues_count == size(return.tag_list[])
return.open_issues_count == size(return.tag_list[])
return.open_issues_count == size(return.shared_with_groups[])
return.open_issues_count == size(return.shared_with_groups[])","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual","(return.open_issues_count, return.forks_count)
(return.open_issues_count, return.star_count)
(return.open_issues_count, size(return.tag_list[..]))
(return.open_issues_count, size(return.tag_list[..]))
(return.open_issues_count, size(return.shared_with_groups[..]))
(return.open_issues_count, size(return.shared_with_groups[..]))","pm.expect(return_open_issues_count).to.eql(return_forks_count)
pm.expect(return_open_issues_count).to.eql(return_star_count)
pm.expect(return_open_issues_count).to.eql(return_tag_list_size_array)
pm.expect(return_open_issues_count).to.eql(return_tag_list_size_array)
pm.expect(return_open_issues_count).to.eql(return_shared_with_groups_size_array)
pm.expect(return_open_issues_count).to.eql(return_shared_with_groups_size_array)","/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT"
post+projects_{id}_fork,owner.id,return.owner.id == return.creator_id,daikon.inv.binary.twoScalar.IntEqual,"(return.owner.id, return.creator_id)",pm.expect(return_owner_id).to.eql(return_creator_id),/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
post+projects_{id}_fork,owner.name,"return.owner.name == return.namespace.name
return.owner.name == ""Administrator""
LENGTH(return.owner.name)==13
return.owner.name is a substring of return.name_with_namespace","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString
daikon.inv.binary.twoString.StdString$SubString","(return.owner.name, return.namespace.name)
(return.owner.name)
(return.owner.name)
(return.owner.name, return.name_with_namespace)","pm.expect(return_owner_name).to.eql(return_namespace_name)
pm.expect([""Administrator""].includes(return_owner_name)).to.be.true
pm.expect(return_owner_name).to.have.length(13)
pm.expect(return_name_with_namespace.includes(return_owner_name)).to.be.true","/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT"
post+projects_{id}_fork,path,return.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path, return.path_with_namespace)",pm.expect(return_path_with_namespace.includes(return_path)).to.be.true,/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
post+projects_{id}_fork,path_with_namespace,"input.path is a substring of return.path_with_namespace
return.namespace.path is a substring of return.path_with_namespace","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(input.path, return.path_with_namespace)
(return.path_with_namespace, return.namespace.path)","pm.expect(return_path_with_namespace.includes(input_path)).to.be.true
pm.expect(return_path_with_namespace.includes(return_namespace_path)).to.be.true","/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT"
post+projects_{id}_fork,permissions,return.permissions == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions),pm.expect(return_permissions).to.be.null,/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
post+projects_{id}_fork,permissions.group_access,return.permissions.group_access == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.group_access),pm.expect(return_permissions_group_access).to.be.null,/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
post+projects_{id}_fork,permissions.project_access,return.permissions.project_access == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.project_access),pm.expect(return_permissions_project_access).to.be.null,/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
post+projects_{id}_fork,repository_storage,"return.repository_storage == ""default""
LENGTH(return.repository_storage)==7","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.repository_storage)
(return.repository_storage)","pm.expect([""default""].includes(return_repository_storage)).to.be.true
pm.expect(return_repository_storage).to.have.length(7)","/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT"
post+projects_{id}_fork,resolve_outdated_diff_discussions,"return.resolve_outdated_diff_discussions == return.archived
return.resolve_outdated_diff_discussions == return.only_allow_merge_if_pipeline_succeeds
return.resolve_outdated_diff_discussions == return.only_allow_merge_if_all_discussions_are_resolved
return.resolve_outdated_diff_discussions == return.service_desk_enabled
return.resolve_outdated_diff_discussions == false","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.OneOfScalar","(return.resolve_outdated_diff_discussions, return.archived)
(return.resolve_outdated_diff_discussions, return.only_allow_merge_if_pipeline_succeeds)
(return.resolve_outdated_diff_discussions, return.only_allow_merge_if_all_discussions_are_resolved)
(return.resolve_outdated_diff_discussions, return.service_desk_enabled)
(return.resolve_outdated_diff_discussions)","pm.expect(return_resolve_outdated_diff_discussions).to.eql(return_archived)
pm.expect(return_resolve_outdated_diff_discussions).to.eql(return_only_allow_merge_if_pipeline_succeeds)
pm.expect(return_resolve_outdated_diff_discussions).to.eql(return_only_allow_merge_if_all_discussions_are_resolved)
pm.expect(return_resolve_outdated_diff_discussions).to.eql(return_service_desk_enabled)
pm.expect(return_resolve_outdated_diff_discussions).to.eql(false)","/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT"
post+projects_{id}_fork,runners_token,LENGTH(return.runners_token)==29,daikon.inv.unary.string.FixedLengthString,(return.runners_token),pm.expect(return_runners_token).to.have.length(29),/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
post+projects_{id}_fork,shared_with_groups,return.shared_with_groups[] == [],daikon.inv.unary.sequence.OneOfSequence,(return.shared_with_groups[..]),pm.expect([[]].some(value => pm.expect(return_shared_with_groups_array).to.deep.equal(value).that)).to.be.true,/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
post+projects_{id}_fork,ssh_url_to_repo,return.path_with_namespace is a substring of return.ssh_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.ssh_url_to_repo, return.path_with_namespace)",pm.expect(return_ssh_url_to_repo.includes(return_path_with_namespace)).to.be.true,/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
post+projects_{id}_fork,statistics,return.statistics == null,daikon.inv.unary.scalar.OneOfScalar,(return.statistics),pm.expect(return_statistics).to.be.null,/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
post+projects_{id}_fork,tag_list,return.tag_list[] == [],daikon.inv.unary.stringsequence.OneOfStringSequence,(return.tag_list[..]),pm.expect([[]].some(value => pm.expect(return_tag_list_array).to.deep.equal(value).that)).to.be.true,/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
post+projects_{id}_fork,web_url,return.path_with_namespace is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.path_with_namespace)",pm.expect(return_web_url.includes(return_path_with_namespace)).to.be.true,/projects/{id}/fork&/projects/{id}/fork&post&201():::EXIT
post+projects_{id}_hooks,created_at,"LENGTH(return.created_at)==24
return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.created_at)
(return.created_at)","pm.expect(return_created_at).to.have.length(24)
pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)","/projects/{id}/hooks&/projects/{id}/hooks&post&201():::EXIT
/projects/{id}/hooks&/projects/{id}/hooks&post&201():::EXIT"
post+projects_{id}_hooks,enable_ssl_verification,"return.enable_ssl_verification one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.enable_ssl_verification),"pm.expect([""false"", ""true""].includes(return_enable_ssl_verification)).to.be.true",/projects/{id}/hooks&/projects/{id}/hooks&post&201():::EXIT
post+projects_{id}_hooks,id,return.id is Numeric,daikon.inv.unary.string.IsNumeric,(return.id),"pm.expect(return_id).to.match(/^[+-]{0,1}(0|([0-9](\d*|\d{0,2}(,\d{3})*)))?(\.\d*[0-9])?$/)",/projects/{id}/hooks&/projects/{id}/hooks&post&201():::EXIT
post+projects_{id}_hooks,issues_events,"return.issues_events one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.issues_events),"pm.expect([""false"", ""true""].includes(return_issues_events)).to.be.true",/projects/{id}/hooks&/projects/{id}/hooks&post&201():::EXIT
post+projects_{id}_hooks,merge_requests_events,"return.merge_requests_events one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.merge_requests_events),"pm.expect([""false"", ""true""].includes(return_merge_requests_events)).to.be.true",/projects/{id}/hooks&/projects/{id}/hooks&post&201():::EXIT
post+projects_{id}_hooks,note_events,"return.note_events one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.note_events),"pm.expect([""false"", ""true""].includes(return_note_events)).to.be.true",/projects/{id}/hooks&/projects/{id}/hooks&post&201():::EXIT
post+projects_{id}_hooks,pipeline_events,"return.pipeline_events one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.pipeline_events),"pm.expect([""false"", ""true""].includes(return_pipeline_events)).to.be.true",/projects/{id}/hooks&/projects/{id}/hooks&post&201():::EXIT
post+projects_{id}_hooks,project_id,return.project_id is Numeric,daikon.inv.unary.string.IsNumeric,(return.project_id),"pm.expect(return_project_id).to.match(/^[+-]{0,1}(0|([0-9](\d*|\d{0,2}(,\d{3})*)))?(\.\d*[0-9])?$/)",/projects/{id}/hooks&/projects/{id}/hooks&post&201():::EXIT
post+projects_{id}_hooks,push_events,"return.push_events one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.push_events),"pm.expect([""false"", ""true""].includes(return_push_events)).to.be.true",/projects/{id}/hooks&/projects/{id}/hooks&post&201():::EXIT
post+projects_{id}_hooks,tag_push_events,"return.tag_push_events one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.tag_push_events),"pm.expect([""false"", ""true""].includes(return_tag_push_events)).to.be.true",/projects/{id}/hooks&/projects/{id}/hooks&post&201():::EXIT
post+projects_{id}_hooks,url,input.url == return.url,daikon.inv.binary.twoString.StringEqual,"(input.url, return.url)",pm.expect(input_url).to.eql(return_url),/projects/{id}/hooks&/projects/{id}/hooks&post&201():::EXIT
post+projects_{id}_hooks,wiki_page_events,"return.wiki_page_events one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.wiki_page_events),"pm.expect([""false"", ""true""].includes(return_wiki_page_events)).to.be.true",/projects/{id}/hooks&/projects/{id}/hooks&post&201():::EXIT
post+projects_{id}_share,expires_at,input.expires_at == return.expires_at,daikon.inv.binary.twoString.StringEqual,"(input.expires_at, return.expires_at)",pm.expect(input_expires_at).to.eql(return_expires_at),/projects/{id}/share&/projects/{id}/share&post&201():::EXIT
post+projects_{id}_share,group_access,input.group_access == return.group_access,daikon.inv.binary.twoString.StringEqual,"(input.group_access, return.group_access)",pm.expect(input_group_access).to.eql(return_group_access),/projects/{id}/share&/projects/{id}/share&post&201():::EXIT
post+projects_{id}_share,group_id,return.group_id is Numeric,daikon.inv.unary.string.IsNumeric,(return.group_id),"pm.expect(return_group_id).to.match(/^[+-]{0,1}(0|([0-9](\d*|\d{0,2}(,\d{3})*)))?(\.\d*[0-9])?$/)",/projects/{id}/share&/projects/{id}/share&post&201():::EXIT
post+projects_{id}_share,id,return.id is Numeric,daikon.inv.unary.string.IsNumeric,(return.id),"pm.expect(return_id).to.match(/^[+-]{0,1}(0|([0-9](\d*|\d{0,2}(,\d{3})*)))?(\.\d*[0-9])?$/)",/projects/{id}/share&/projects/{id}/share&post&201():::EXIT
post+projects_{id}_share,project_id,return.project_id is Numeric,daikon.inv.unary.string.IsNumeric,(return.project_id),"pm.expect(return_project_id).to.match(/^[+-]{0,1}(0|([0-9](\d*|\d{0,2}(,\d{3})*)))?(\.\d*[0-9])?$/)",/projects/{id}/share&/projects/{id}/share&post&201():::EXIT
post+projects_{id}_star,_links.self,"return._links.self is a substring of return._links.issues
return._links.self is a substring of return._links.merge_requests
return._links.self is a substring of return._links.repo_branches
return._links.self is a substring of return._links.labels
return._links.self is a substring of return._links.events
return._links.self is a substring of return._links.members","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return._links.self, return._links.issues)
(return._links.self, return._links.merge_requests)
(return._links.self, return._links.repo_branches)
(return._links.self, return._links.labels)
(return._links.self, return._links.events)
(return._links.self, return._links.members)","pm.expect(return__links_issues.includes(return__links_self)).to.be.true
pm.expect(return__links_merge_requests.includes(return__links_self)).to.be.true
pm.expect(return__links_repo_branches.includes(return__links_self)).to.be.true
pm.expect(return__links_labels.includes(return__links_self)).to.be.true
pm.expect(return__links_events.includes(return__links_self)).to.be.true
pm.expect(return__links_members.includes(return__links_self)).to.be.true","/projects/{id}/star&/projects/{id}/star&post&201():::EXIT
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT"
post+projects_{id}_star,created_at,"LENGTH(return.created_at)==24
return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.created_at)
(return.created_at)","pm.expect(return_created_at).to.have.length(24)
pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)","/projects/{id}/star&/projects/{id}/star&post&201():::EXIT
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT"
post+projects_{id}_star,default_branch,return.default_branch is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.default_branch, return.readme_url)",pm.expect(return_readme_url.includes(return_default_branch)).to.be.true,/projects/{id}/star&/projects/{id}/star&post&201():::EXIT
post+projects_{id}_star,forks_count,return.forks_count >= 0,daikon.inv.unary.scalar.LowerBound,(return.forks_count),pm.expect(return_forks_count).to.be.at.least(0),/projects/{id}/star&/projects/{id}/star&post&201():::EXIT
post+projects_{id}_star,http_url_to_repo,return.web_url is a substring of return.http_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.http_url_to_repo, return.web_url)",pm.expect(return_http_url_to_repo.includes(return_web_url)).to.be.true,/projects/{id}/star&/projects/{id}/star&post&201():::EXIT
post+projects_{id}_star,id,input.id == return.id,daikon.inv.binary.twoScalar.IntEqual,"(input.id, return.id)",pm.expect(input_id).to.eql(return_id),/projects/{id}/star&/projects/{id}/star&post&201():::EXIT
post+projects_{id}_star,license,return.license == null,daikon.inv.unary.scalar.OneOfScalar,(return.license),pm.expect(return_license).to.be.null,/projects/{id}/star&/projects/{id}/star&post&201():::EXIT
post+projects_{id}_star,merge_requests_enabled,return.merge_requests_enabled == return.can_create_merge_request_in,daikon.inv.binary.twoScalar.IntEqual,"(return.merge_requests_enabled, return.can_create_merge_request_in)",pm.expect(return_merge_requests_enabled).to.eql(return_can_create_merge_request_in),/projects/{id}/star&/projects/{id}/star&post&201():::EXIT
post+projects_{id}_star,name,return.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.name, return.name_with_namespace)",pm.expect(return_name_with_namespace.includes(return_name)).to.be.true,/projects/{id}/star&/projects/{id}/star&post&201():::EXIT
post+projects_{id}_star,name_with_namespace,return.namespace.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.name_with_namespace, return.namespace.name)",pm.expect(return_name_with_namespace.includes(return_namespace_name)).to.be.true,/projects/{id}/star&/projects/{id}/star&post&201():::EXIT
post+projects_{id}_star,namespace.kind,"return.namespace.kind == ""user""
LENGTH(return.namespace.kind)==4","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.namespace.kind)
(return.namespace.kind)","pm.expect([""user""].includes(return_namespace_kind)).to.be.true
pm.expect(return_namespace_kind).to.have.length(4)","/projects/{id}/star&/projects/{id}/star&post&201():::EXIT
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT"
post+projects_{id}_star,namespace.path,return.namespace.path == return.namespace.full_path,daikon.inv.binary.twoString.StringEqual,"(return.namespace.path, return.namespace.full_path)",pm.expect(return_namespace_path).to.eql(return_namespace_full_path),/projects/{id}/star&/projects/{id}/star&post&201():::EXIT
post+projects_{id}_star,open_issues_count,"return.open_issues_count == size(return.shared_with_groups[])
return.open_issues_count == size(return.shared_with_groups[])
return.open_issues_count <= return.forks_count","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntLessEqual","(return.open_issues_count, size(return.shared_with_groups[..]))
(return.open_issues_count, size(return.shared_with_groups[..]))
(return.open_issues_count, return.forks_count)","pm.expect(return_open_issues_count).to.eql(return_shared_with_groups_size_array)
pm.expect(return_open_issues_count).to.eql(return_shared_with_groups_size_array)
pm.expect(return_open_issues_count).to.be.lte(return_forks_count)","/projects/{id}/star&/projects/{id}/star&post&201():::EXIT
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT"
post+projects_{id}_star,path,return.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path, return.path_with_namespace)",pm.expect(return_path_with_namespace.includes(return_path)).to.be.true,/projects/{id}/star&/projects/{id}/star&post&201():::EXIT
post+projects_{id}_star,path_with_namespace,return.namespace.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path_with_namespace, return.namespace.path)",pm.expect(return_path_with_namespace.includes(return_namespace_path)).to.be.true,/projects/{id}/star&/projects/{id}/star&post&201():::EXIT
post+projects_{id}_star,shared_with_groups,return.shared_with_groups[] == [],daikon.inv.unary.sequence.OneOfSequence,(return.shared_with_groups[..]),pm.expect([[]].some(value => pm.expect(return_shared_with_groups_array).to.deep.equal(value).that)).to.be.true,/projects/{id}/star&/projects/{id}/star&post&201():::EXIT
post+projects_{id}_star,ssh_url_to_repo,return.path_with_namespace is a substring of return.ssh_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.ssh_url_to_repo, return.path_with_namespace)",pm.expect(return_ssh_url_to_repo.includes(return_path_with_namespace)).to.be.true,/projects/{id}/star&/projects/{id}/star&post&201():::EXIT
post+projects_{id}_star,web_url,"return.web_url is a substring of return.readme_url
return.path_with_namespace is a substring of return.web_url","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return.web_url, return.readme_url)
(return.web_url, return.path_with_namespace)","pm.expect(return_readme_url.includes(return_web_url)).to.be.true
pm.expect(return_web_url.includes(return_path_with_namespace)).to.be.true","/projects/{id}/star&/projects/{id}/star&post&201():::EXIT
/projects/{id}/star&/projects/{id}/star&post&201():::EXIT"
post+projects_{id}_unarchive,_links.self,"return._links.self is a substring of return._links.issues
return._links.self is a substring of return._links.merge_requests
return._links.self is a substring of return._links.repo_branches
return._links.self is a substring of return._links.labels
return._links.self is a substring of return._links.events
return._links.self is a substring of return._links.members","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return._links.self, return._links.issues)
(return._links.self, return._links.merge_requests)
(return._links.self, return._links.repo_branches)
(return._links.self, return._links.labels)
(return._links.self, return._links.events)
(return._links.self, return._links.members)","pm.expect(return__links_issues.includes(return__links_self)).to.be.true
pm.expect(return__links_merge_requests.includes(return__links_self)).to.be.true
pm.expect(return__links_repo_branches.includes(return__links_self)).to.be.true
pm.expect(return__links_labels.includes(return__links_self)).to.be.true
pm.expect(return__links_events.includes(return__links_self)).to.be.true
pm.expect(return__links_members.includes(return__links_self)).to.be.true","/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT"
post+projects_{id}_unarchive,created_at,"LENGTH(return.created_at)==24
return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.created_at)
(return.created_at)","pm.expect(return_created_at).to.have.length(24)
pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)","/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT"
post+projects_{id}_unarchive,default_branch,return.default_branch is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.default_branch, return.readme_url)",pm.expect(return_readme_url.includes(return_default_branch)).to.be.true,/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT
post+projects_{id}_unarchive,http_url_to_repo,return.web_url is a substring of return.http_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.http_url_to_repo, return.web_url)",pm.expect(return_http_url_to_repo.includes(return_web_url)).to.be.true,/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT
post+projects_{id}_unarchive,id,input.id == return.id,daikon.inv.binary.twoScalar.IntEqual,"(input.id, return.id)",pm.expect(input_id).to.eql(return_id),/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT
post+projects_{id}_unarchive,license,return.license == null,daikon.inv.unary.scalar.OneOfScalar,(return.license),pm.expect(return_license).to.be.null,/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT
post+projects_{id}_unarchive,merge_requests_enabled,return.merge_requests_enabled == return.can_create_merge_request_in,daikon.inv.binary.twoScalar.IntEqual,"(return.merge_requests_enabled, return.can_create_merge_request_in)",pm.expect(return_merge_requests_enabled).to.eql(return_can_create_merge_request_in),/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT
post+projects_{id}_unarchive,name,return.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.name, return.name_with_namespace)",pm.expect(return_name_with_namespace.includes(return_name)).to.be.true,/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT
post+projects_{id}_unarchive,namespace.path,return.namespace.path == return.namespace.full_path,daikon.inv.binary.twoString.StringEqual,"(return.namespace.path, return.namespace.full_path)",pm.expect(return_namespace_path).to.eql(return_namespace_full_path),/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT
post+projects_{id}_unarchive,open_issues_count,"return.open_issues_count == size(return.shared_with_groups[])
return.open_issues_count == size(return.shared_with_groups[])
return.open_issues_count <= return.forks_count
return.open_issues_count <= return.star_count","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual","(return.open_issues_count, size(return.shared_with_groups[..]))
(return.open_issues_count, size(return.shared_with_groups[..]))
(return.open_issues_count, return.forks_count)
(return.open_issues_count, return.star_count)","pm.expect(return_open_issues_count).to.eql(return_shared_with_groups_size_array)
pm.expect(return_open_issues_count).to.eql(return_shared_with_groups_size_array)
pm.expect(return_open_issues_count).to.be.lte(return_forks_count)
pm.expect(return_open_issues_count).to.be.lte(return_star_count)","/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT"
post+projects_{id}_unarchive,owner.id,return.owner.id == return.creator_id,daikon.inv.binary.twoScalar.IntEqual,"(return.owner.id, return.creator_id)",pm.expect(return_owner_id).to.eql(return_creator_id),/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT
post+projects_{id}_unarchive,owner.name,"return.owner.name == return.namespace.name
return.owner.name is a substring of return.name_with_namespace","daikon.inv.binary.twoString.StringEqual
daikon.inv.binary.twoString.StdString$SubString","(return.owner.name, return.namespace.name)
(return.owner.name, return.name_with_namespace)","pm.expect(return_owner_name).to.eql(return_namespace_name)
pm.expect(return_name_with_namespace.includes(return_owner_name)).to.be.true","/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT"
post+projects_{id}_unarchive,path,return.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path, return.path_with_namespace)",pm.expect(return_path_with_namespace.includes(return_path)).to.be.true,/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT
post+projects_{id}_unarchive,path_with_namespace,return.namespace.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path_with_namespace, return.namespace.path)",pm.expect(return_path_with_namespace.includes(return_namespace_path)).to.be.true,/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT
post+projects_{id}_unarchive,permissions,return.permissions == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions),pm.expect(return_permissions).to.be.null,/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT
post+projects_{id}_unarchive,permissions.group_access,return.permissions.group_access == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.group_access),pm.expect(return_permissions_group_access).to.be.null,/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT
post+projects_{id}_unarchive,permissions.project_access,return.permissions.project_access == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.project_access),pm.expect(return_permissions_project_access).to.be.null,/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT
post+projects_{id}_unarchive,shared_with_groups,return.shared_with_groups[] == [],daikon.inv.unary.sequence.OneOfSequence,(return.shared_with_groups[..]),pm.expect([[]].some(value => pm.expect(return_shared_with_groups_array).to.deep.equal(value).that)).to.be.true,/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT
post+projects_{id}_unarchive,ssh_url_to_repo,return.path_with_namespace is a substring of return.ssh_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.ssh_url_to_repo, return.path_with_namespace)",pm.expect(return_ssh_url_to_repo.includes(return_path_with_namespace)).to.be.true,/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT
post+projects_{id}_unarchive,visibility,"return.visibility one of { ""internal"", ""private"", ""public"" }",daikon.inv.unary.string.OneOfString,(return.visibility),"pm.expect([""internal"", ""private"", ""public""].includes(return_visibility)).to.be.true",/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT
post+projects_{id}_unarchive,web_url,"return.web_url is a substring of return.readme_url
return.path_with_namespace is a substring of return.web_url","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return.web_url, return.readme_url)
(return.web_url, return.path_with_namespace)","pm.expect(return_readme_url.includes(return_web_url)).to.be.true
pm.expect(return_web_url.includes(return_path_with_namespace)).to.be.true","/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT
/projects/{id}/unarchive&/projects/{id}/unarchive&post&201():::EXIT"
post+projects_{id}_unstar,_links.self,"return._links.self is a substring of return._links.issues
return._links.self is a substring of return._links.merge_requests
return._links.self is a substring of return._links.repo_branches
return._links.self is a substring of return._links.labels
return._links.self is a substring of return._links.events
return._links.self is a substring of return._links.members","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return._links.self, return._links.issues)
(return._links.self, return._links.merge_requests)
(return._links.self, return._links.repo_branches)
(return._links.self, return._links.labels)
(return._links.self, return._links.events)
(return._links.self, return._links.members)","pm.expect(return__links_issues.includes(return__links_self)).to.be.true
pm.expect(return__links_merge_requests.includes(return__links_self)).to.be.true
pm.expect(return__links_repo_branches.includes(return__links_self)).to.be.true
pm.expect(return__links_labels.includes(return__links_self)).to.be.true
pm.expect(return__links_events.includes(return__links_self)).to.be.true
pm.expect(return__links_members.includes(return__links_self)).to.be.true","/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT"
post+projects_{id}_unstar,archived,return.archived == false,daikon.inv.unary.scalar.OneOfScalar,(return.archived),pm.expect(return_archived).to.eql(false),/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT
post+projects_{id}_unstar,created_at,"return.created_at == return.last_activity_at
LENGTH(return.created_at)==24
return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.created_at, return.last_activity_at)
(return.created_at)
(return.created_at)","pm.expect(return_created_at).to.eql(return_last_activity_at)
pm.expect(return_created_at).to.have.length(24)
pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)","/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT"
post+projects_{id}_unstar,creator_id,"return.creator_id <= return.namespace.id
return.creator_id >= size(return.tag_list[])","daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.creator_id, return.namespace.id)
(return.creator_id, size(return.tag_list[..]))","pm.expect(return_creator_id).to.be.lte(return_namespace_id)
pm.expect(return_creator_id).to.be.at.least(return_tag_list_size_array)","/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT"
post+projects_{id}_unstar,default_branch,return.default_branch is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.default_branch, return.readme_url)",pm.expect(return_readme_url.includes(return_default_branch)).to.be.true,/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT
post+projects_{id}_unstar,forks_count,"return.forks_count >= 0
return.forks_count >= size(return.shared_with_groups[])","daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.forks_count)
(return.forks_count, size(return.shared_with_groups[..]))","pm.expect(return_forks_count).to.be.at.least(0)
pm.expect(return_forks_count).to.be.at.least(return_shared_with_groups_size_array)","/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT"
post+projects_{id}_unstar,http_url_to_repo,return.web_url is a substring of return.http_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.http_url_to_repo, return.web_url)",pm.expect(return_http_url_to_repo.includes(return_web_url)).to.be.true,/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT
post+projects_{id}_unstar,id,input.id == return.id,daikon.inv.binary.twoScalar.IntEqual,"(input.id, return.id)",pm.expect(input_id).to.eql(return_id),/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT
post+projects_{id}_unstar,import_status,"return.import_status one of { ""finished"", ""none"" }",daikon.inv.unary.string.OneOfString,(return.import_status),"pm.expect([""finished"", ""none""].includes(return_import_status)).to.be.true",/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT
post+projects_{id}_unstar,license,return.license == null,daikon.inv.unary.scalar.OneOfScalar,(return.license),pm.expect(return_license).to.be.null,/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT
post+projects_{id}_unstar,merge_method,"return.merge_method one of { ""ff"", ""merge"", ""rebase_merge"" }",daikon.inv.unary.string.OneOfString,(return.merge_method),"pm.expect([""ff"", ""merge"", ""rebase_merge""].includes(return_merge_method)).to.be.true",/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT
post+projects_{id}_unstar,merge_requests_enabled,return.merge_requests_enabled == return.can_create_merge_request_in,daikon.inv.binary.twoScalar.IntEqual,"(return.merge_requests_enabled, return.can_create_merge_request_in)",pm.expect(return_merge_requests_enabled).to.eql(return_can_create_merge_request_in),/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT
post+projects_{id}_unstar,name,return.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.name, return.name_with_namespace)",pm.expect(return_name_with_namespace.includes(return_name)).to.be.true,/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT
post+projects_{id}_unstar,name_with_namespace,return.namespace.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.name_with_namespace, return.namespace.name)",pm.expect(return_name_with_namespace.includes(return_namespace_name)).to.be.true,/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT
post+projects_{id}_unstar,namespace.id,"input.id > return.namespace.id
return.namespace.id >= size(return.tag_list[])","daikon.inv.binary.twoScalar.IntGreaterThan
daikon.inv.binary.twoScalar.IntGreaterEqual","(input.id, return.namespace.id)
(return.namespace.id, size(return.tag_list[..]))","pm.expect(input_id).to.be.greaterThan(return_namespace_id)
pm.expect(return_namespace_id).to.be.at.least(return_tag_list_size_array)","/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT"
post+projects_{id}_unstar,namespace.kind,"return.namespace.kind == ""user""
LENGTH(return.namespace.kind)==4","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.namespace.kind)
(return.namespace.kind)","pm.expect([""user""].includes(return_namespace_kind)).to.be.true
pm.expect(return_namespace_kind).to.have.length(4)","/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT"
post+projects_{id}_unstar,namespace.path,return.namespace.path == return.namespace.full_path,daikon.inv.binary.twoString.StringEqual,"(return.namespace.path, return.namespace.full_path)",pm.expect(return_namespace_path).to.eql(return_namespace_full_path),/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT
post+projects_{id}_unstar,open_issues_count,"return.open_issues_count == size(return.shared_with_groups[])
return.open_issues_count <= return.forks_count
return.open_issues_count <= return.star_count
return.open_issues_count <= size(return.tag_list[])","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual","(return.open_issues_count, size(return.shared_with_groups[..]))
(return.open_issues_count, return.forks_count)
(return.open_issues_count, return.star_count)
(return.open_issues_count, size(return.tag_list[..]))","pm.expect(return_open_issues_count).to.eql(return_shared_with_groups_size_array)
pm.expect(return_open_issues_count).to.be.lte(return_forks_count)
pm.expect(return_open_issues_count).to.be.lte(return_star_count)
pm.expect(return_open_issues_count).to.be.lte(return_tag_list_size_array)","/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT"
post+projects_{id}_unstar,path,return.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path, return.path_with_namespace)",pm.expect(return_path_with_namespace.includes(return_path)).to.be.true,/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT
post+projects_{id}_unstar,path_with_namespace,return.namespace.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path_with_namespace, return.namespace.path)",pm.expect(return_path_with_namespace.includes(return_namespace_path)).to.be.true,/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT
post+projects_{id}_unstar,shared_with_groups,return.shared_with_groups[] == [],daikon.inv.unary.sequence.OneOfSequence,(return.shared_with_groups[..]),pm.expect([[]].some(value => pm.expect(return_shared_with_groups_array).to.deep.equal(value).that)).to.be.true,/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT
post+projects_{id}_unstar,ssh_url_to_repo,return.path_with_namespace is a substring of return.ssh_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.ssh_url_to_repo, return.path_with_namespace)",pm.expect(return_ssh_url_to_repo.includes(return_path_with_namespace)).to.be.true,/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT
post+projects_{id}_unstar,star_count,return.star_count >= 0,daikon.inv.unary.scalar.LowerBound,(return.star_count),pm.expect(return_star_count).to.be.at.least(0),/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT
post+projects_{id}_unstar,tag_list,size(return.tag_list[]) >= size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(size(return.tag_list[..]), size(return.shared_with_groups[..]))",pm.expect(return_tag_list_size_array).to.be.at.least(return_shared_with_groups_size_array),/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT
post+projects_{id}_unstar,visibility,"return.visibility one of { ""internal"", ""private"", ""public"" }",daikon.inv.unary.string.OneOfString,(return.visibility),"pm.expect([""internal"", ""private"", ""public""].includes(return_visibility)).to.be.true",/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT
post+projects_{id}_unstar,web_url,"return.web_url is a substring of return.readme_url
return.path_with_namespace is a substring of return.web_url","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return.web_url, return.readme_url)
(return.web_url, return.path_with_namespace)","pm.expect(return_readme_url.includes(return_web_url)).to.be.true
pm.expect(return_web_url.includes(return_path_with_namespace)).to.be.true","/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT
/projects/{id}/unstar&/projects/{id}/unstar&post&201():::EXIT"
put+projects_{id},_links.events,LENGTH(return._links.events)==49,daikon.inv.unary.string.FixedLengthString,(return._links.events),pm.expect(return__links_events).to.have.length(49),/projects/{id}&/projects/{id}&put&200():::EXIT
put+projects_{id},_links.labels,LENGTH(return._links.labels)==49,daikon.inv.unary.string.FixedLengthString,(return._links.labels),pm.expect(return__links_labels).to.have.length(49),/projects/{id}&/projects/{id}&put&200():::EXIT
put+projects_{id},_links.members,LENGTH(return._links.members)==50,daikon.inv.unary.string.FixedLengthString,(return._links.members),pm.expect(return__links_members).to.have.length(50),/projects/{id}&/projects/{id}&put&200():::EXIT
put+projects_{id},_links.repo_branches,LENGTH(return._links.repo_branches)==62,daikon.inv.unary.string.FixedLengthString,(return._links.repo_branches),pm.expect(return__links_repo_branches).to.have.length(62),/projects/{id}&/projects/{id}&put&200():::EXIT
put+projects_{id},_links.self,"LENGTH(return._links.self)==42
return._links.self is a substring of return._links.issues
return._links.self is a substring of return._links.merge_requests
return._links.self is a substring of return._links.repo_branches
return._links.self is a substring of return._links.labels
return._links.self is a substring of return._links.events
return._links.self is a substring of return._links.members","daikon.inv.unary.string.FixedLengthString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return._links.self)
(return._links.self, return._links.issues)
(return._links.self, return._links.merge_requests)
(return._links.self, return._links.repo_branches)
(return._links.self, return._links.labels)
(return._links.self, return._links.events)
(return._links.self, return._links.members)","pm.expect(return__links_self).to.have.length(42)
pm.expect(return__links_issues.includes(return__links_self)).to.be.true
pm.expect(return__links_merge_requests.includes(return__links_self)).to.be.true
pm.expect(return__links_repo_branches.includes(return__links_self)).to.be.true
pm.expect(return__links_labels.includes(return__links_self)).to.be.true
pm.expect(return__links_events.includes(return__links_self)).to.be.true
pm.expect(return__links_members.includes(return__links_self)).to.be.true","/projects/{id}&/projects/{id}&put&200():::EXIT
/projects/{id}&/projects/{id}&put&200():::EXIT
/projects/{id}&/projects/{id}&put&200():::EXIT
/projects/{id}&/projects/{id}&put&200():::EXIT
/projects/{id}&/projects/{id}&put&200():::EXIT
/projects/{id}&/projects/{id}&put&200():::EXIT
/projects/{id}&/projects/{id}&put&200():::EXIT"
put+projects_{id},allow_merge_on_skipped_pipeline,input.allow_merge_on_skipped_pipeline == return.allow_merge_on_skipped_pipeline,daikon.inv.binary.twoScalar.IntEqual,"(input.allow_merge_on_skipped_pipeline, return.allow_merge_on_skipped_pipeline)",pm.expect(input_allow_merge_on_skipped_pipeline).to.eql(return_allow_merge_on_skipped_pipeline),/projects/{id}&/projects/{id}&put&200():::EXIT
put+projects_{id},archived,"return.archived == return.service_desk_enabled
return.archived == false","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.OneOfScalar","(return.archived, return.service_desk_enabled)
(return.archived)","pm.expect(return_archived).to.eql(return_service_desk_enabled)
pm.expect(return_archived).to.eql(false)","/projects/{id}&/projects/{id}&put&200():::EXIT
/projects/{id}&/projects/{id}&put&200():::EXIT"
put+projects_{id},auto_devops_deploy_strategy,"input.auto_devops_deploy_strategy == return.auto_devops_deploy_strategy
return.auto_devops_deploy_strategy one of { ""continuous"", ""manual"", ""timed_incremental"" }","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.OneOfString","(input.auto_devops_deploy_strategy, return.auto_devops_deploy_strategy)
(return.auto_devops_deploy_strategy)","pm.expect(input_auto_devops_deploy_strategy).to.eql(return_auto_devops_deploy_strategy)
pm.expect([""continuous"", ""manual"", ""timed_incremental""].includes(return_auto_devops_deploy_strategy)).to.be.true","/projects/{id}&/projects/{id}&put&200():::EXIT
/projects/{id}&/projects/{id}&put&200():::EXIT"
put+projects_{id},auto_devops_enabled,input.auto_devops_enabled == return.auto_devops_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.auto_devops_enabled, return.auto_devops_enabled)",pm.expect(input_auto_devops_enabled).to.eql(return_auto_devops_enabled),/projects/{id}&/projects/{id}&put&200():::EXIT
put+projects_{id},autoclose_referenced_issues,input.autoclose_referenced_issues == return.autoclose_referenced_issues,daikon.inv.binary.twoScalar.IntEqual,"(input.autoclose_referenced_issues, return.autoclose_referenced_issues)",pm.expect(input_autoclose_referenced_issues).to.eql(return_autoclose_referenced_issues),/projects/{id}&/projects/{id}&put&200():::EXIT
put+projects_{id},ci_default_git_depth,input.ci_default_git_depth == return.ci_default_git_depth,daikon.inv.binary.twoScalar.IntEqual,"(input.ci_default_git_depth, return.ci_default_git_depth)",pm.expect(input_ci_default_git_depth).to.eql(return_ci_default_git_depth),/projects/{id}&/projects/{id}&put&200():::EXIT
put+projects_{id},ci_forward_deployment_enabled,input.ci_forward_deployment_enabled == return.ci_forward_deployment_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.ci_forward_deployment_enabled, return.ci_forward_deployment_enabled)",pm.expect(input_ci_forward_deployment_enabled).to.eql(return_ci_forward_deployment_enabled),/projects/{id}&/projects/{id}&put&200():::EXIT
put+projects_{id},container_registry_enabled,input.container_registry_enabled == return.container_registry_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.container_registry_enabled, return.container_registry_enabled)",pm.expect(input_container_registry_enabled).to.eql(return_container_registry_enabled),/projects/{id}&/projects/{id}&put&200():::EXIT
put+projects_{id},created_at,"return.created_at == return.last_activity_at
LENGTH(return.created_at)==24
return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.created_at, return.last_activity_at)
(return.created_at)
(return.created_at)","pm.expect(return_created_at).to.eql(return_last_activity_at)
pm.expect(return_created_at).to.have.length(24)
pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)","/projects/{id}&/projects/{id}&put&200():::EXIT
/projects/{id}&/projects/{id}&put&200():::EXIT
/projects/{id}&/projects/{id}&put&200():::EXIT"
put+projects_{id},creator_id,"return.creator_id >= 1
return.creator_id <= return.namespace.id
return.creator_id >= size(return.tag_list[])","daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.creator_id)
(return.creator_id, return.namespace.id)
(return.creator_id, size(return.tag_list[..]))","pm.expect(return_creator_id).to.be.at.least(1)
pm.expect(return_creator_id).to.be.lte(return_namespace_id)
pm.expect(return_creator_id).to.be.at.least(return_tag_list_size_array)","/projects/{id}&/projects/{id}&put&200():::EXIT
/projects/{id}&/projects/{id}&put&200():::EXIT
/projects/{id}&/projects/{id}&put&200():::EXIT"
put+projects_{id},default_branch,return.default_branch is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.default_branch, return.readme_url)",pm.expect(return_readme_url.includes(return_default_branch)).to.be.true,/projects/{id}&/projects/{id}&put&200():::EXIT
put+projects_{id},description,input.description == return.description,daikon.inv.binary.twoString.StringEqual,"(input.description, return.description)",pm.expect(input_description).to.eql(return_description),/projects/{id}&/projects/{id}&put&200():::EXIT
put+projects_{id},http_url_to_repo,return.web_url is a substring of return.http_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.http_url_to_repo, return.web_url)",pm.expect(return_http_url_to_repo.includes(return_web_url)).to.be.true,/projects/{id}&/projects/{id}&put&200():::EXIT
put+projects_{id},id,input.id == return.id,daikon.inv.binary.twoScalar.IntEqual,"(input.id, return.id)",pm.expect(input_id).to.eql(return_id),/projects/{id}&/projects/{id}&put&200():::EXIT
put+projects_{id},jobs_enabled,input.jobs_enabled == return.jobs_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.jobs_enabled, return.jobs_enabled)",pm.expect(input_jobs_enabled).to.eql(return_jobs_enabled),/projects/{id}&/projects/{id}&put&200():::EXIT
put+projects_{id},merge_method,"input.merge_method == return.merge_method
return.merge_method one of { ""ff"", ""merge"", ""rebase_merge"" }","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.OneOfString","(input.merge_method, return.merge_method)
(return.merge_method)","pm.expect(input_merge_method).to.eql(return_merge_method)
pm.expect([""ff"", ""merge"", ""rebase_merge""].includes(return_merge_method)).to.be.true","/projects/{id}&/projects/{id}&put&200():::EXIT
/projects/{id}&/projects/{id}&put&200():::EXIT"
put+projects_{id},merge_requests_enabled,return.merge_requests_enabled == return.can_create_merge_request_in,daikon.inv.binary.twoScalar.IntEqual,"(return.merge_requests_enabled, return.can_create_merge_request_in)",pm.expect(return_merge_requests_enabled).to.eql(return_can_create_merge_request_in),/projects/{id}&/projects/{id}&put&200():::EXIT
put+projects_{id},name,"input.name == return.name
return.name is a substring of return.name_with_namespace","daikon.inv.binary.twoString.StringEqual
daikon.inv.binary.twoString.StdString$SubString","(input.name, return.name)
(return.name, return.name_with_namespace)","pm.expect(input_name).to.eql(return_name)
pm.expect(return_name_with_namespace.includes(return_name)).to.be.true","/projects/{id}&/projects/{id}&put&200():::EXIT
/projects/{id}&/projects/{id}&put&200():::EXIT"
put+projects_{id},name_with_namespace,input.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(input.name, return.name_with_namespace)",pm.expect(return_name_with_namespace.includes(input_name)).to.be.true,/projects/{id}&/projects/{id}&put&200():::EXIT
put+projects_{id},namespace.id,"return.namespace.id >= 1
input.id > return.namespace.id
return.namespace.id >= size(return.tag_list[])","daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.twoScalar.IntGreaterThan
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.namespace.id)
(input.id, return.namespace.id)
(return.namespace.id, size(return.tag_list[..]))","pm.expect(return_namespace_id).to.be.at.least(1)
pm.expect(input_id).to.be.greaterThan(return_namespace_id)
pm.expect(return_namespace_id).to.be.at.least(return_tag_list_size_array)","/projects/{id}&/projects/{id}&put&200():::EXIT
/projects/{id}&/projects/{id}&put&200():::EXIT
/projects/{id}&/projects/{id}&put&200():::EXIT"
put+projects_{id},namespace.kind,"return.namespace.kind == ""user""
LENGTH(return.namespace.kind)==4","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.namespace.kind)
(return.namespace.kind)","pm.expect([""user""].includes(return_namespace_kind)).to.be.true
pm.expect(return_namespace_kind).to.have.length(4)","/projects/{id}&/projects/{id}&put&200():::EXIT
/projects/{id}&/projects/{id}&put&200():::EXIT"
put+projects_{id},namespace.path,return.namespace.path == return.namespace.full_path,daikon.inv.binary.twoString.StringEqual,"(return.namespace.path, return.namespace.full_path)",pm.expect(return_namespace_path).to.eql(return_namespace_full_path),/projects/{id}&/projects/{id}&put&200():::EXIT
put+projects_{id},only_allow_merge_if_all_discussions_are_resolved,input.only_allow_merge_if_all_discussions_are_resolved == return.only_allow_merge_if_all_discussions_are_resolved,daikon.inv.binary.twoScalar.IntEqual,"(input.only_allow_merge_if_all_discussions_are_resolved, return.only_allow_merge_if_all_discussions_are_resolved)",pm.expect(input_only_allow_merge_if_all_discussions_are_resolved).to.eql(return_only_allow_merge_if_all_discussions_are_resolved),/projects/{id}&/projects/{id}&put&200():::EXIT
put+projects_{id},only_allow_merge_if_pipeline_succeeds,input.only_allow_merge_if_pipeline_succeeds == return.only_allow_merge_if_pipeline_succeeds,daikon.inv.binary.twoScalar.IntEqual,"(input.only_allow_merge_if_pipeline_succeeds, return.only_allow_merge_if_pipeline_succeeds)",pm.expect(input_only_allow_merge_if_pipeline_succeeds).to.eql(return_only_allow_merge_if_pipeline_succeeds),/projects/{id}&/projects/{id}&put&200():::EXIT
put+projects_{id},open_issues_count,"return.open_issues_count == return.forks_count
return.open_issues_count == return.star_count
return.open_issues_count == size(return.shared_with_groups[])
return.open_issues_count == size(return.shared_with_groups[])
return.open_issues_count <= size(return.tag_list[])","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntLessEqual","(return.open_issues_count, return.forks_count)
(return.open_issues_count, return.star_count)
(return.open_issues_count, size(return.shared_with_groups[..]))
(return.open_issues_count, size(return.shared_with_groups[..]))
(return.open_issues_count, size(return.tag_list[..]))","pm.expect(return_open_issues_count).to.eql(return_forks_count)
pm.expect(return_open_issues_count).to.eql(return_star_count)
pm.expect(return_open_issues_count).to.eql(return_shared_with_groups_size_array)
pm.expect(return_open_issues_count).to.eql(return_shared_with_groups_size_array)
pm.expect(return_open_issues_count).to.be.lte(return_tag_list_size_array)","/projects/{id}&/projects/{id}&put&200():::EXIT
/projects/{id}&/projects/{id}&put&200():::EXIT
/projects/{id}&/projects/{id}&put&200():::EXIT
/projects/{id}&/projects/{id}&put&200():::EXIT
/projects/{id}&/projects/{id}&put&200():::EXIT"
put+projects_{id},owner.id,return.owner.id == return.creator_id,daikon.inv.binary.twoScalar.IntEqual,"(return.owner.id, return.creator_id)",pm.expect(return_owner_id).to.eql(return_creator_id),/projects/{id}&/projects/{id}&put&200():::EXIT
put+projects_{id},owner.name,"return.owner.name == return.namespace.name
return.owner.name is a substring of return.name_with_namespace","daikon.inv.binary.twoString.StringEqual
daikon.inv.binary.twoString.StdString$SubString","(return.owner.name, return.namespace.name)
(return.owner.name, return.name_with_namespace)","pm.expect(return_owner_name).to.eql(return_namespace_name)
pm.expect(return_name_with_namespace.includes(return_owner_name)).to.be.true","/projects/{id}&/projects/{id}&put&200():::EXIT
/projects/{id}&/projects/{id}&put&200():::EXIT"
put+projects_{id},packages_enabled,input.packages_enabled == return.packages_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.packages_enabled, return.packages_enabled)",pm.expect(input_packages_enabled).to.eql(return_packages_enabled),/projects/{id}&/projects/{id}&put&200():::EXIT
put+projects_{id},path,"input.path == return.path
return.path is a substring of return.path_with_namespace","daikon.inv.binary.twoString.StringEqual
daikon.inv.binary.twoString.StdString$SubString","(input.path, return.path)
(return.path, return.path_with_namespace)","pm.expect(input_path).to.eql(return_path)
pm.expect(return_path_with_namespace.includes(return_path)).to.be.true","/projects/{id}&/projects/{id}&put&200():::EXIT
/projects/{id}&/projects/{id}&put&200():::EXIT"
put+projects_{id},path_with_namespace,"input.path is a substring of return.path_with_namespace
return.namespace.path is a substring of return.path_with_namespace","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(input.path, return.path_with_namespace)
(return.path_with_namespace, return.namespace.path)","pm.expect(return_path_with_namespace.includes(input_path)).to.be.true
pm.expect(return_path_with_namespace.includes(return_namespace_path)).to.be.true","/projects/{id}&/projects/{id}&put&200():::EXIT
/projects/{id}&/projects/{id}&put&200():::EXIT"
put+projects_{id},permissions,return.permissions == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions),pm.expect(return_permissions).to.be.null,/projects/{id}&/projects/{id}&put&200():::EXIT
put+projects_{id},permissions.group_access,return.permissions.group_access == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.group_access),pm.expect(return_permissions_group_access).to.be.null,/projects/{id}&/projects/{id}&put&200():::EXIT
put+projects_{id},permissions.project_access,return.permissions.project_access == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.project_access),pm.expect(return_permissions_project_access).to.be.null,/projects/{id}&/projects/{id}&put&200():::EXIT
put+projects_{id},public_jobs,input.public_builds == return.public_jobs,daikon.inv.binary.twoScalar.IntEqual,"(input.public_builds, return.public_jobs)",pm.expect(input_public_builds).to.eql(return_public_jobs),/projects/{id}&/projects/{id}&put&200():::EXIT
put+projects_{id},remove_source_branch_after_merge,input.remove_source_branch_after_merge == return.remove_source_branch_after_merge,daikon.inv.binary.twoScalar.IntEqual,"(input.remove_source_branch_after_merge, return.remove_source_branch_after_merge)",pm.expect(input_remove_source_branch_after_merge).to.eql(return_remove_source_branch_after_merge),/projects/{id}&/projects/{id}&put&200():::EXIT
put+projects_{id},repository_storage,"return.repository_storage == ""default""
LENGTH(return.repository_storage)==7","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.repository_storage)
(return.repository_storage)","pm.expect([""default""].includes(return_repository_storage)).to.be.true
pm.expect(return_repository_storage).to.have.length(7)","/projects/{id}&/projects/{id}&put&200():::EXIT
/projects/{id}&/projects/{id}&put&200():::EXIT"
put+projects_{id},request_access_enabled,input.request_access_enabled == return.request_access_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.request_access_enabled, return.request_access_enabled)",pm.expect(input_request_access_enabled).to.eql(return_request_access_enabled),/projects/{id}&/projects/{id}&put&200():::EXIT
put+projects_{id},resolve_outdated_diff_discussions,input.resolve_outdated_diff_discussions == return.resolve_outdated_diff_discussions,daikon.inv.binary.twoScalar.IntEqual,"(input.resolve_outdated_diff_discussions, return.resolve_outdated_diff_discussions)",pm.expect(input_resolve_outdated_diff_discussions).to.eql(return_resolve_outdated_diff_discussions),/projects/{id}&/projects/{id}&put&200():::EXIT
put+projects_{id},runners_token,LENGTH(return.runners_token)==29,daikon.inv.unary.string.FixedLengthString,(return.runners_token),pm.expect(return_runners_token).to.have.length(29),/projects/{id}&/projects/{id}&put&200():::EXIT
put+projects_{id},shared_runners_enabled,input.shared_runners_enabled == return.shared_runners_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.shared_runners_enabled, return.shared_runners_enabled)",pm.expect(input_shared_runners_enabled).to.eql(return_shared_runners_enabled),/projects/{id}&/projects/{id}&put&200():::EXIT
put+projects_{id},shared_with_groups,return.shared_with_groups[] == [],daikon.inv.unary.sequence.OneOfSequence,(return.shared_with_groups[..]),pm.expect([[]].some(value => pm.expect(return_shared_with_groups_array).to.deep.equal(value).that)).to.be.true,/projects/{id}&/projects/{id}&put&200():::EXIT
put+projects_{id},ssh_url_to_repo,return.path_with_namespace is a substring of return.ssh_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.ssh_url_to_repo, return.path_with_namespace)",pm.expect(return_ssh_url_to_repo.includes(return_path_with_namespace)).to.be.true,/projects/{id}&/projects/{id}&put&200():::EXIT
put+projects_{id},statistics,return.statistics == null,daikon.inv.unary.scalar.OneOfScalar,(return.statistics),pm.expect(return_statistics).to.be.null,/projects/{id}&/projects/{id}&put&200():::EXIT
put+projects_{id},suggestion_commit_message,input.suggestion_commit_message == return.suggestion_commit_message,daikon.inv.binary.twoString.StringEqual,"(input.suggestion_commit_message, return.suggestion_commit_message)",pm.expect(input_suggestion_commit_message).to.eql(return_suggestion_commit_message),/projects/{id}&/projects/{id}&put&200():::EXIT
put+projects_{id},tag_list,"input.tag_list[] == return.tag_list[]
input.tag_list[] == return.tag_list[] (elementwise)","daikon.inv.binary.twoSequence.SeqSeqStringEqual
daikon.inv.binary.twoSequence.PairwiseStringEqual","(input.tag_list[..], return.tag_list[..])
(input.tag_list[..], return.tag_list[..])","pm.expect(input_tag_list_array).to.eql(return_tag_list_array)
pm.expect(input_tag_list_array).to.eql(return_tag_list_array)","/projects/{id}&/projects/{id}&put&200():::EXIT
/projects/{id}&/projects/{id}&put&200():::EXIT"
put+projects_{id},visibility,"input.visibility == return.visibility
return.visibility one of { ""internal"", ""private"", ""public"" }","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.OneOfString","(input.visibility, return.visibility)
(return.visibility)","pm.expect(input_visibility).to.eql(return_visibility)
pm.expect([""internal"", ""private"", ""public""].includes(return_visibility)).to.be.true","/projects/{id}&/projects/{id}&put&200():::EXIT
/projects/{id}&/projects/{id}&put&200():::EXIT"
put+projects_{id},web_url,"return.web_url is a substring of return.readme_url
return.path_with_namespace is a substring of return.web_url","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return.web_url, return.readme_url)
(return.web_url, return.path_with_namespace)","pm.expect(return_readme_url.includes(return_web_url)).to.be.true
pm.expect(return_web_url.includes(return_path_with_namespace)).to.be.true","/projects/{id}&/projects/{id}&put&200():::EXIT
/projects/{id}&/projects/{id}&put&200():::EXIT"
put+projects_{id}_hooks_{hook_id},created_at,"LENGTH(return.created_at)==24
return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.created_at)
(return.created_at)","pm.expect(return_created_at).to.have.length(24)
pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)","/projects/{id}/hooks/{hook_id}&/projects/{id}/hooks/{hook_id}&put&200():::EXIT
/projects/{id}/hooks/{hook_id}&/projects/{id}/hooks/{hook_id}&put&200():::EXIT"
put+projects_{id}_hooks_{hook_id},enable_ssl_verification,"return.enable_ssl_verification one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.enable_ssl_verification),"pm.expect([""false"", ""true""].includes(return_enable_ssl_verification)).to.be.true",/projects/{id}/hooks/{hook_id}&/projects/{id}/hooks/{hook_id}&put&200():::EXIT
put+projects_{id}_hooks_{hook_id},id,return.id is Numeric,daikon.inv.unary.string.IsNumeric,(return.id),"pm.expect(return_id).to.match(/^[+-]{0,1}(0|([0-9](\d*|\d{0,2}(,\d{3})*)))?(\.\d*[0-9])?$/)",/projects/{id}/hooks/{hook_id}&/projects/{id}/hooks/{hook_id}&put&200():::EXIT
put+projects_{id}_hooks_{hook_id},issues_events,"return.issues_events one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.issues_events),"pm.expect([""false"", ""true""].includes(return_issues_events)).to.be.true",/projects/{id}/hooks/{hook_id}&/projects/{id}/hooks/{hook_id}&put&200():::EXIT
put+projects_{id}_hooks_{hook_id},merge_requests_events,"return.merge_requests_events one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.merge_requests_events),"pm.expect([""false"", ""true""].includes(return_merge_requests_events)).to.be.true",/projects/{id}/hooks/{hook_id}&/projects/{id}/hooks/{hook_id}&put&200():::EXIT
put+projects_{id}_hooks_{hook_id},note_events,"return.note_events one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.note_events),"pm.expect([""false"", ""true""].includes(return_note_events)).to.be.true",/projects/{id}/hooks/{hook_id}&/projects/{id}/hooks/{hook_id}&put&200():::EXIT
put+projects_{id}_hooks_{hook_id},pipeline_events,"return.pipeline_events one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.pipeline_events),"pm.expect([""false"", ""true""].includes(return_pipeline_events)).to.be.true",/projects/{id}/hooks/{hook_id}&/projects/{id}/hooks/{hook_id}&put&200():::EXIT
put+projects_{id}_hooks_{hook_id},project_id,return.project_id is Numeric,daikon.inv.unary.string.IsNumeric,(return.project_id),"pm.expect(return_project_id).to.match(/^[+-]{0,1}(0|([0-9](\d*|\d{0,2}(,\d{3})*)))?(\.\d*[0-9])?$/)",/projects/{id}/hooks/{hook_id}&/projects/{id}/hooks/{hook_id}&put&200():::EXIT
put+projects_{id}_hooks_{hook_id},push_events,"return.push_events one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.push_events),"pm.expect([""false"", ""true""].includes(return_push_events)).to.be.true",/projects/{id}/hooks/{hook_id}&/projects/{id}/hooks/{hook_id}&put&200():::EXIT
put+projects_{id}_hooks_{hook_id},tag_push_events,"return.tag_push_events one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.tag_push_events),"pm.expect([""false"", ""true""].includes(return_tag_push_events)).to.be.true",/projects/{id}/hooks/{hook_id}&/projects/{id}/hooks/{hook_id}&put&200():::EXIT
put+projects_{id}_hooks_{hook_id},url,input.url == return.url,daikon.inv.binary.twoString.StringEqual,"(input.url, return.url)",pm.expect(input_url).to.eql(return_url),/projects/{id}/hooks/{hook_id}&/projects/{id}/hooks/{hook_id}&put&200():::EXIT
put+projects_{id}_hooks_{hook_id},wiki_page_events,"return.wiki_page_events one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.wiki_page_events),"pm.expect([""false"", ""true""].includes(return_wiki_page_events)).to.be.true",/projects/{id}/hooks/{hook_id}&/projects/{id}/hooks/{hook_id}&put&200():::EXIT
put+projects_{id}_transfer,_links.self,"return._links.self is a substring of return._links.issues
return._links.self is a substring of return._links.merge_requests
return._links.self is a substring of return._links.repo_branches
return._links.self is a substring of return._links.labels
return._links.self is a substring of return._links.events
return._links.self is a substring of return._links.members","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return._links.self, return._links.issues)
(return._links.self, return._links.merge_requests)
(return._links.self, return._links.repo_branches)
(return._links.self, return._links.labels)
(return._links.self, return._links.events)
(return._links.self, return._links.members)","pm.expect(return__links_issues.includes(return__links_self)).to.be.true
pm.expect(return__links_merge_requests.includes(return__links_self)).to.be.true
pm.expect(return__links_repo_branches.includes(return__links_self)).to.be.true
pm.expect(return__links_labels.includes(return__links_self)).to.be.true
pm.expect(return__links_events.includes(return__links_self)).to.be.true
pm.expect(return__links_members.includes(return__links_self)).to.be.true","/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT"
put+projects_{id}_transfer,container_expiration_policy.cadence,"return.container_expiration_policy.cadence == ""1d""
LENGTH(return.container_expiration_policy.cadence)==2","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.container_expiration_policy.cadence)
(return.container_expiration_policy.cadence)","pm.expect([""1d""].includes(return_container_expiration_policy_cadence)).to.be.true
pm.expect(return_container_expiration_policy_cadence).to.have.length(2)","/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT"
put+projects_{id}_transfer,container_expiration_policy.keep_n,return.container_expiration_policy.keep_n == 10,daikon.inv.unary.scalar.OneOfScalar,(return.container_expiration_policy.keep_n),pm.expect([10].includes(return_container_expiration_policy_keep_n)).to.be.true,/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
put+projects_{id}_transfer,container_expiration_policy.name_regex,"return.container_expiration_policy.name_regex == "".*""
LENGTH(return.container_expiration_policy.name_regex)==2","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.container_expiration_policy.name_regex)
(return.container_expiration_policy.name_regex)","pm.expect(["".*""].includes(return_container_expiration_policy_name_regex)).to.be.true
pm.expect(return_container_expiration_policy_name_regex).to.have.length(2)","/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT"
put+projects_{id}_transfer,container_expiration_policy.next_run_at,"LENGTH(return.container_expiration_policy.next_run_at)==24
return.container_expiration_policy.next_run_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.container_expiration_policy.next_run_at)
(return.container_expiration_policy.next_run_at)","pm.expect(return_container_expiration_policy_next_run_at).to.have.length(24)
pm.expect(return_container_expiration_policy_next_run_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)","/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT"
put+projects_{id}_transfer,container_expiration_policy.older_than,"return.container_expiration_policy.older_than == ""90d""
LENGTH(return.container_expiration_policy.older_than)==3","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.container_expiration_policy.older_than)
(return.container_expiration_policy.older_than)","pm.expect([""90d""].includes(return_container_expiration_policy_older_than)).to.be.true
pm.expect(return_container_expiration_policy_older_than).to.have.length(3)","/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT"
put+projects_{id}_transfer,created_at,"LENGTH(return.created_at)==24
return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.created_at)
(return.created_at)","pm.expect(return_created_at).to.have.length(24)
pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)","/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT"
put+projects_{id}_transfer,creator_id,"return.creator_id <= return.forked_from_project.namespace.id
return.creator_id >= size(return.shared_with_groups[])
return.creator_id >= size(return.forked_from_project.tag_list[])","daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.creator_id, return.forked_from_project.namespace.id)
(return.creator_id, size(return.shared_with_groups[..]))
(return.creator_id, size(return.forked_from_project.tag_list[..]))","pm.expect(return_creator_id).to.be.lte(return_forked_from_project_namespace_id)
pm.expect(return_creator_id).to.be.at.least(return_shared_with_groups_size_array)
pm.expect(return_creator_id).to.be.at.least(return_forked_from_project_tag_list_size_array)","/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT"
put+projects_{id}_transfer,default_branch,"return.default_branch == return.forked_from_project.default_branch
return.default_branch is a substring of return.readme_url","daikon.inv.binary.twoString.StringEqual
daikon.inv.binary.twoString.StdString$SubString","(return.default_branch, return.forked_from_project.default_branch)
(return.default_branch, return.readme_url)","pm.expect(return_default_branch).to.eql(return_forked_from_project_default_branch)
pm.expect(return_readme_url.includes(return_default_branch)).to.be.true","/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT"
put+projects_{id}_transfer,description,return.description == return.forked_from_project.description,daikon.inv.binary.twoString.StringEqual,"(return.description, return.forked_from_project.description)",pm.expect(return_description).to.eql(return_forked_from_project_description),/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
put+projects_{id}_transfer,forked_from_project.created_at,"return.forked_from_project.created_at == return.forked_from_project.last_activity_at
LENGTH(return.forked_from_project.created_at)==24
return.forked_from_project.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.forked_from_project.created_at, return.forked_from_project.last_activity_at)
(return.forked_from_project.created_at)
(return.forked_from_project.created_at)","pm.expect(return_forked_from_project_created_at).to.eql(return_forked_from_project_last_activity_at)
pm.expect(return_forked_from_project_created_at).to.have.length(24)
pm.expect(return_forked_from_project_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)","/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT"
put+projects_{id}_transfer,forked_from_project.forks_count,"return.forked_from_project.forks_count >= size(return.shared_with_groups[])
return.forked_from_project.forks_count >= size(return.forked_from_project.tag_list[])","daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.forked_from_project.forks_count, size(return.shared_with_groups[..]))
(return.forked_from_project.forks_count, size(return.forked_from_project.tag_list[..]))","pm.expect(return_forked_from_project_forks_count).to.be.at.least(return_shared_with_groups_size_array)
pm.expect(return_forked_from_project_forks_count).to.be.at.least(return_forked_from_project_tag_list_size_array)","/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT"
put+projects_{id}_transfer,forked_from_project.http_url_to_repo,return.forked_from_project.web_url is a substring of return.forked_from_project.http_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.forked_from_project.http_url_to_repo, return.forked_from_project.web_url)",pm.expect(return_forked_from_project_http_url_to_repo.includes(return_forked_from_project_web_url)).to.be.true,/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
put+projects_{id}_transfer,forked_from_project.id,"input.id > return.forked_from_project.id
return.forked_from_project.id > return.forked_from_project.star_count","daikon.inv.binary.twoScalar.IntGreaterThan
daikon.inv.binary.twoScalar.IntGreaterThan","(input.id, return.forked_from_project.id)
(return.forked_from_project.id, return.forked_from_project.star_count)","pm.expect(input_id).to.be.greaterThan(return_forked_from_project_id)
pm.expect(return_forked_from_project_id).to.be.greaterThan(return_forked_from_project_star_count)","/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT"
put+projects_{id}_transfer,forked_from_project.name,return.forked_from_project.name is a substring of return.forked_from_project.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.forked_from_project.name, return.forked_from_project.name_with_namespace)",pm.expect(return_forked_from_project_name_with_namespace.includes(return_forked_from_project_name)).to.be.true,/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
put+projects_{id}_transfer,forked_from_project.name_with_namespace,return.forked_from_project.namespace.name is a substring of return.forked_from_project.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.forked_from_project.name_with_namespace, return.forked_from_project.namespace.name)",pm.expect(return_forked_from_project_name_with_namespace.includes(return_forked_from_project_namespace_name)).to.be.true,/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
put+projects_{id}_transfer,forked_from_project.namespace.id,"return.forked_from_project.namespace.id >= 1
return.forked_from_project.namespace.id >= size(return.shared_with_groups[])
return.forked_from_project.namespace.id >= size(return.forked_from_project.tag_list[])","daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.forked_from_project.namespace.id)
(return.forked_from_project.namespace.id, size(return.shared_with_groups[..]))
(return.forked_from_project.namespace.id, size(return.forked_from_project.tag_list[..]))","pm.expect(return_forked_from_project_namespace_id).to.be.at.least(1)
pm.expect(return_forked_from_project_namespace_id).to.be.at.least(return_shared_with_groups_size_array)
pm.expect(return_forked_from_project_namespace_id).to.be.at.least(return_forked_from_project_tag_list_size_array)","/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT"
put+projects_{id}_transfer,forked_from_project.namespace.kind,"return.forked_from_project.namespace.kind one of { ""group"", ""user"" }",daikon.inv.unary.string.OneOfString,(return.forked_from_project.namespace.kind),"pm.expect([""group"", ""user""].includes(return_forked_from_project_namespace_kind)).to.be.true",/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
put+projects_{id}_transfer,forked_from_project.namespace.path,return.forked_from_project.namespace.path is a substring of return.forked_from_project.namespace.full_path,daikon.inv.binary.twoString.StdString$SubString,"(return.forked_from_project.namespace.path, return.forked_from_project.namespace.full_path)",pm.expect(return_forked_from_project_namespace_full_path.includes(return_forked_from_project_namespace_path)).to.be.true,/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
put+projects_{id}_transfer,forked_from_project.path,return.forked_from_project.path is a substring of return.forked_from_project.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.forked_from_project.path, return.forked_from_project.path_with_namespace)",pm.expect(return_forked_from_project_path_with_namespace.includes(return_forked_from_project_path)).to.be.true,/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
put+projects_{id}_transfer,forked_from_project.path_with_namespace,"return.forked_from_project.path_with_namespace is a substring of return.forked_from_project.ssh_url_to_repo
return.forked_from_project.path_with_namespace is a substring of return.forked_from_project.web_url
return.forked_from_project.namespace.full_path is a substring of return.forked_from_project.path_with_namespace","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return.forked_from_project.path_with_namespace, return.forked_from_project.ssh_url_to_repo)
(return.forked_from_project.path_with_namespace, return.forked_from_project.web_url)
(return.forked_from_project.path_with_namespace, return.forked_from_project.namespace.full_path)","pm.expect(return_forked_from_project_ssh_url_to_repo.includes(return_forked_from_project_path_with_namespace)).to.be.true
pm.expect(return_forked_from_project_web_url.includes(return_forked_from_project_path_with_namespace)).to.be.true
pm.expect(return_forked_from_project_path_with_namespace.includes(return_forked_from_project_namespace_full_path)).to.be.true","/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT"
put+projects_{id}_transfer,forked_from_project.star_count,return.forked_from_project.star_count >= 0,daikon.inv.unary.scalar.LowerBound,(return.forked_from_project.star_count),pm.expect(return_forked_from_project_star_count).to.be.at.least(0),/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
put+projects_{id}_transfer,forks_count,return.forks_count <= return.forked_from_project.forks_count,daikon.inv.binary.twoScalar.IntLessEqual,"(return.forks_count, return.forked_from_project.forks_count)",pm.expect(return_forks_count).to.be.lte(return_forked_from_project_forks_count),/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
put+projects_{id}_transfer,http_url_to_repo,return.web_url is a substring of return.http_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.http_url_to_repo, return.web_url)",pm.expect(return_http_url_to_repo.includes(return_web_url)).to.be.true,/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
put+projects_{id}_transfer,id,input.id == return.id,daikon.inv.binary.twoScalar.IntEqual,"(input.id, return.id)",pm.expect(input_id).to.eql(return_id),/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
put+projects_{id}_transfer,import_status,"return.import_status one of { ""finished"", ""none"" }",daikon.inv.unary.string.OneOfString,(return.import_status),"pm.expect([""finished"", ""none""].includes(return_import_status)).to.be.true",/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
put+projects_{id}_transfer,license,"return.license == return.forked_from_project.license
return.license == null","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.OneOfScalar","(return.license, return.forked_from_project.license)
(return.license)","pm.expect(return_license).to.eql(return_forked_from_project_license)
pm.expect(return_license).to.be.null","/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT"
put+projects_{id}_transfer,name,return.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.name, return.name_with_namespace)",pm.expect(return_name_with_namespace.includes(return_name)).to.be.true,/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
put+projects_{id}_transfer,namespace.id,input.namespace == return.namespace.id,daikon.inv.binary.twoScalar.IntEqual,"(input.namespace, return.namespace.id)",pm.expect(input_namespace).to.eql(return_namespace_id),/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
put+projects_{id}_transfer,open_issues_count,"return.open_issues_count == size(return.compliance_frameworks[])
return.open_issues_count == size(return.compliance_frameworks[])
return.open_issues_count <= return.forks_count
return.open_issues_count <= return.star_count
return.open_issues_count <= return.forked_from_project.forks_count
return.open_issues_count <= return.forked_from_project.star_count
return.open_issues_count <= size(return.shared_with_groups[])
return.open_issues_count <= size(return.forked_from_project.tag_list[])","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual","(return.open_issues_count, size(return.compliance_frameworks[..]))
(return.open_issues_count, size(return.compliance_frameworks[..]))
(return.open_issues_count, return.forks_count)
(return.open_issues_count, return.star_count)
(return.open_issues_count, return.forked_from_project.forks_count)
(return.open_issues_count, return.forked_from_project.star_count)
(return.open_issues_count, size(return.shared_with_groups[..]))
(return.open_issues_count, size(return.forked_from_project.tag_list[..]))","pm.expect(return_open_issues_count).to.eql(return_compliance_frameworks_size_array)
pm.expect(return_open_issues_count).to.eql(return_compliance_frameworks_size_array)
pm.expect(return_open_issues_count).to.be.lte(return_forks_count)
pm.expect(return_open_issues_count).to.be.lte(return_star_count)
pm.expect(return_open_issues_count).to.be.lte(return_forked_from_project_forks_count)
pm.expect(return_open_issues_count).to.be.lte(return_forked_from_project_star_count)
pm.expect(return_open_issues_count).to.be.lte(return_shared_with_groups_size_array)
pm.expect(return_open_issues_count).to.be.lte(return_forked_from_project_tag_list_size_array)","/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT"
put+projects_{id}_transfer,owner.id,"input.namespace >= return.owner.id
return.owner.id <= return.container_expiration_policy.keep_n
return.owner.id > size(return.forked_from_project.tag_list[])","daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntGreaterThan","(input.namespace, return.owner.id)
(return.owner.id, return.container_expiration_policy.keep_n)
(return.owner.id, size(return.forked_from_project.tag_list[..]))","pm.expect(input_namespace).to.be.at.least(return_owner_id)
pm.expect(return_owner_id).to.be.lte(return_container_expiration_policy_keep_n)
pm.expect(return_owner_id).to.be.greaterThan(return_forked_from_project_tag_list_size_array)","/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT"
put+projects_{id}_transfer,owner.name,"return.owner.name == return.namespace.name
return.owner.name is a substring of return.name_with_namespace","daikon.inv.binary.twoString.StringEqual
daikon.inv.binary.twoString.StdString$SubString","(return.owner.name, return.namespace.name)
(return.owner.name, return.name_with_namespace)","pm.expect(return_owner_name).to.eql(return_namespace_name)
pm.expect(return_name_with_namespace.includes(return_owner_name)).to.be.true","/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT"
put+projects_{id}_transfer,path,return.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path, return.path_with_namespace)",pm.expect(return_path_with_namespace.includes(return_path)).to.be.true,/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
put+projects_{id}_transfer,path_with_namespace,return.namespace.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path_with_namespace, return.namespace.path)",pm.expect(return_path_with_namespace.includes(return_namespace_path)).to.be.true,/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
put+projects_{id}_transfer,permissions,return.permissions == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions),pm.expect(return_permissions).to.be.null,/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
put+projects_{id}_transfer,permissions.group_access,return.permissions.group_access == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.group_access),pm.expect(return_permissions_group_access).to.be.null,/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
put+projects_{id}_transfer,permissions.project_access,return.permissions.project_access == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.project_access),pm.expect(return_permissions_project_access).to.be.null,/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
put+projects_{id}_transfer,repository_storage,"return.repository_storage == ""default""
LENGTH(return.repository_storage)==7","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.repository_storage)
(return.repository_storage)","pm.expect([""default""].includes(return_repository_storage)).to.be.true
pm.expect(return_repository_storage).to.have.length(7)","/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT"
put+projects_{id}_transfer,ssh_url_to_repo,return.path_with_namespace is a substring of return.ssh_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.ssh_url_to_repo, return.path_with_namespace)",pm.expect(return_ssh_url_to_repo.includes(return_path_with_namespace)).to.be.true,/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
put+projects_{id}_transfer,statistics,return.statistics == null,daikon.inv.unary.scalar.OneOfScalar,(return.statistics),pm.expect(return_statistics).to.be.null,/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
put+projects_{id}_transfer,web_url,"return.web_url is a substring of return.readme_url
return.path_with_namespace is a substring of return.web_url","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return.web_url, return.readme_url)
(return.web_url, return.path_with_namespace)","pm.expect(return_readme_url.includes(return_web_url)).to.be.true
pm.expect(return_web_url.includes(return_path_with_namespace)).to.be.true","/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT
/projects/{id}/transfer&/projects/{id}/transfer&put&200():::EXIT"
