pptname,invariant,invariantType,variables,postmanAssertion,endpoint,tp,fp,enter,bug,invariantDescription,group,api
/api/v1/holidays&Holidays&200&holidays&provinces():::EXIT,LENGTH(return.id)==2,daikon.inv.unary.string.FixedLengthString,(return.id),pm.expect(return_id).to.have.length(2),get+api_v1_holidays,1,,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,holidays.provinces.id,Canada Holidays API
/api/v1/holidays&Holidays&200&holidays&provinces():::EXIT,return.nextHoliday == null,daikon.inv.unary.scalar.OneOfScalar,(return.nextHoliday),pm.expect(return_nextHoliday).to.be.null,get+api_v1_holidays,1,,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",holidays.provinces.nextHoliday,Canada Holidays API
/api/v1/holidays&Holidays&200&holidays&provinces():::EXIT,return.holidays == null,daikon.inv.unary.scalar.OneOfScalar,(return.holidays),pm.expect(return_holidays).to.be.null,get+api_v1_holidays,1,,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",holidays.provinces.holidays,Canada Holidays API
/api/v1/holidays&Holidays&200&holidays&provinces():::EXIT,return.sourceLink is Url,daikon.inv.unary.string.IsUrl,(return.sourceLink),"pm.expect(return_sourceLink).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",get+api_v1_holidays,1,,,,Indicates that the value of a string variable is always a URL. Represented as x is Url.,holidays.provinces.sourceLink,Canada Holidays API
/api/v1/holidays&Holidays&200&holidays&provinces():::EXIT,return.optional == 1,daikon.inv.unary.scalar.OneOfScalar,(return.optional),pm.expect([1].includes(return_optional)).to.be.true,get+api_v1_holidays,1,,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",holidays.provinces.optional,Canada Holidays API
/api/v1/holidays&Holidays&200&holidays():::EXIT,return.id >= 1,daikon.inv.unary.scalar.LowerBound,(return.id),pm.expect(return_id).to.be.at.least(1),get+api_v1_holidays,1,,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",holidays.id,Canada Holidays API
/api/v1/holidays&Holidays&200&holidays():::EXIT,return.date is a Date. Format: YYYY/MM/DD,daikon.inv.unary.string.dates.IsDateYYYYMMDD,(return.date),pm.expect(return_date).to.match(/^(?:1\d{3}|20[01234][0-9]|2050|9999)[-/.](?:0[1-9]|1[012])[-/.](?:0[1-9]|[12][0-9]|3[01])$/),get+api_v1_holidays,1,,,,"Indicates that the value of a string variable is always a date following the format YYYY/MM/DD or YYYY-MM-DD (the separator can be ""/"" or ""-""). Represented as x is a Date. Format YYYY/MM/DD.",holidays.date,Canada Holidays API
/api/v1/holidays&Holidays&200&holidays():::EXIT,"return.federal one of { 0, 1 }",daikon.inv.unary.scalar.OneOfScalar,(return.federal),"pm.expect([0, 1, 0].includes(return_federal)).to.be.true",get+api_v1_holidays,1,,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",holidays.federal,Canada Holidays API
/api/v1/holidays&Holidays&200&holidays():::EXIT,return.observedDate is a Date. Format: YYYY/MM/DD,daikon.inv.unary.string.dates.IsDateYYYYMMDD,(return.observedDate),pm.expect(return_observedDate).to.match(/^(?:1\d{3}|20[01234][0-9]|2050|9999)[-/.](?:0[1-9]|1[012])[-/.](?:0[1-9]|[12][0-9]|3[01])$/),get+api_v1_holidays,1,,,,"Indicates that the value of a string variable is always a date following the format YYYY/MM/DD or YYYY-MM-DD (the separator can be ""/"" or ""-""). Represented as x is a Date. Format YYYY/MM/DD.",holidays.observedDate,Canada Holidays API
/api/v1/holidays&Holidays&200&holidays():::EXIT,return.id >= return.federal,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.id, return.federal)",pm.expect(return_id).to.be.at.least(return_federal),get+api_v1_holidays,1,,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,holidays.id,Canada Holidays API
/api/v1/holidays/{holidayId}&Holiday&200&holiday&provinces():::EXIT,LENGTH(return.id)==2,daikon.inv.unary.string.FixedLengthString,(return.id),pm.expect(return_id).to.have.length(2),get+api_v1_holidays_{holidayId},1,,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,holiday.provinces.id,Canada Holidays API
/api/v1/holidays/{holidayId}&Holiday&200&holiday&provinces():::EXIT,return.nextHoliday == null,daikon.inv.unary.scalar.OneOfScalar,(return.nextHoliday),pm.expect(return_nextHoliday).to.be.null,get+api_v1_holidays_{holidayId},1,,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",holiday.provinces.nextHoliday,Canada Holidays API
/api/v1/holidays/{holidayId}&Holiday&200&holiday&provinces():::EXIT,return.holidays == null,daikon.inv.unary.scalar.OneOfScalar,(return.holidays),pm.expect(return_holidays).to.be.null,get+api_v1_holidays_{holidayId},1,,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",holiday.provinces.holidays,Canada Holidays API
/api/v1/holidays/{holidayId}&Holiday&200&holiday&provinces():::EXIT,return.sourceLink is Url,daikon.inv.unary.string.IsUrl,(return.sourceLink),"pm.expect(return_sourceLink).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",get+api_v1_holidays_{holidayId},1,,,,Indicates that the value of a string variable is always a URL. Represented as x is Url.,holiday.provinces.sourceLink,Canada Holidays API
/api/v1/holidays/{holidayId}&Holiday&200&holiday&provinces():::EXIT,return.optional == 1,daikon.inv.unary.scalar.OneOfScalar,(return.optional),pm.expect([1].includes(return_optional)).to.be.true,get+api_v1_holidays_{holidayId},1,,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",holiday.provinces.optional,Canada Holidays API
/api/v1/holidays/{holidayId}&Holiday&200():::EXIT,input.holidayId == return.holiday.id,daikon.inv.binary.twoScalar.IntEqual,"(input.holidayId, return.holiday.id)",pm.expect(input_holidayId).to.eql(return_holiday_id),get+api_v1_holidays_{holidayId},1,,,,Represents an invariant of == between two long scalars. Prints as x == y.,holiday.id,Canada Holidays API
/api/v1/holidays/{holidayId}&Holiday&200():::EXIT,return.holiday.date is a Date. Format: YYYY/MM/DD,daikon.inv.unary.string.dates.IsDateYYYYMMDD,(return.holiday.date),pm.expect(return_holiday_date).to.match(/^(?:1\d{3}|20[01234][0-9]|2050|9999)[-/.](?:0[1-9]|1[012])[-/.](?:0[1-9]|[12][0-9]|3[01])$/),get+api_v1_holidays_{holidayId},1,,,,"Indicates that the value of a string variable is always a date following the format YYYY/MM/DD or YYYY-MM-DD (the separator can be ""/"" or ""-""). Represented as x is a Date. Format YYYY/MM/DD.",holiday.date,Canada Holidays API
/api/v1/holidays/{holidayId}&Holiday&200():::EXIT,"return.holiday.federal one of { 0, 1 }",daikon.inv.unary.scalar.OneOfScalar,(return.holiday.federal),"pm.expect([0, 1, 0].includes(return_holiday_federal)).to.be.true",get+api_v1_holidays_{holidayId},1,,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",holiday.federal,Canada Holidays API
/api/v1/holidays/{holidayId}&Holiday&200():::EXIT,return.holiday.observedDate is a Date. Format: YYYY/MM/DD,daikon.inv.unary.string.dates.IsDateYYYYMMDD,(return.holiday.observedDate),pm.expect(return_holiday_observedDate).to.match(/^(?:1\d{3}|20[01234][0-9]|2050|9999)[-/.](?:0[1-9]|1[012])[-/.](?:0[1-9]|[12][0-9]|3[01])$/),get+api_v1_holidays_{holidayId},1,,,,"Indicates that the value of a string variable is always a date following the format YYYY/MM/DD or YYYY-MM-DD (the separator can be ""/"" or ""-""). Represented as x is a Date. Format YYYY/MM/DD.",holiday.observedDate,Canada Holidays API
/api/v1/holidays/{holidayId}&Holiday&200():::EXIT,input.holidayId >= return.holiday.federal,daikon.inv.binary.twoScalar.IntGreaterEqual,"(input.holidayId, return.holiday.federal)",pm.expect(input_holidayId).to.be.at.least(return_holiday_federal),get+api_v1_holidays_{holidayId},1,,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,holiday.federal,Canada Holidays API
/api/v1/provinces&Provinces&200&provinces():::EXIT,LENGTH(return.id)==2,daikon.inv.unary.string.FixedLengthString,(return.id),pm.expect(return_id).to.have.length(2),get+api_v1_provinces,1,,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,provinces.id,Canada Holidays API
/api/v1/provinces&Provinces&200&provinces():::EXIT,return.sourceLink is Url,daikon.inv.unary.string.IsUrl,(return.sourceLink),"pm.expect(return_sourceLink).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",get+api_v1_provinces,1,,,,Indicates that the value of a string variable is always a URL. Represented as x is Url.,provinces.sourceLink,Canada Holidays API
/api/v1/provinces&Provinces&200():::EXIT,size(return.provinces[]) == 13,daikon.inv.unary.scalar.OneOfScalar,(size(return.provinces[..])),pm.expect([13].includes(return_provinces_size_array)).to.be.true,get+api_v1_provinces,1,,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",provinces,Canada Holidays API
/api/v1/provinces/{provinceId}&Province&200():::EXIT,input.provinceId == return.province.id,daikon.inv.binary.twoString.StringEqual,"(input.provinceId, return.province.id)",pm.expect(input_provinceId).to.eql(return_province_id),get+api_v1_provinces_{provinceId},1,,,,Represents an invariant of == between two String scalars. Prints as x == y.,province.id,Canada Holidays API
/api/v1/provinces/{provinceId}&Province&200():::EXIT,return.province.sourceLink is Url,daikon.inv.unary.string.IsUrl,(return.province.sourceLink),"pm.expect(return_province_sourceLink).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",get+api_v1_provinces_{provinceId},1,,,,Indicates that the value of a string variable is always a URL. Represented as x is Url.,province.sourceLink,Canada Holidays API