endpoint,group,invariant,invariantType,variables,postmanAssertion,pptname
get+api_v1_holidays,holidays.date,return.date is a Date. Format: YYYY/MM/DD,daikon.inv.unary.string.dates.IsDateYYYYMMDD,(return.date),pm.expect(return_date).to.match(/^(?:1\d{3}|20[01234][0-9]|2050|9999)[-/.](?:0[1-9]|1[012])[-/.](?:0[1-9]|[12][0-9]|3[01])$/),/api/v1/holidays&Holidays&200&holidays():::EXIT
get+api_v1_holidays,holidays.federal,"return.federal one of { 0, 1 }",daikon.inv.unary.scalar.OneOfScalar,(return.federal),"pm.expect([0, 1, 0].includes(return_federal)).to.be.true",/api/v1/holidays&Holidays&200&holidays():::EXIT
get+api_v1_holidays,holidays.id,"return.id >= 1
return.id >= return.federal","daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.id)
(return.id, return.federal)","pm.expect(return_id).to.be.at.least(1)
pm.expect(return_id).to.be.at.least(return_federal)","/api/v1/holidays&Holidays&200&holidays():::EXIT
/api/v1/holidays&Holidays&200&holidays():::EXIT"
get+api_v1_holidays,holidays.observedDate,return.observedDate is a Date. Format: YYYY/MM/DD,daikon.inv.unary.string.dates.IsDateYYYYMMDD,(return.observedDate),pm.expect(return_observedDate).to.match(/^(?:1\d{3}|20[01234][0-9]|2050|9999)[-/.](?:0[1-9]|1[012])[-/.](?:0[1-9]|[12][0-9]|3[01])$/),/api/v1/holidays&Holidays&200&holidays():::EXIT
get+api_v1_holidays,holidays.provinces.holidays,return.holidays == null,daikon.inv.unary.scalar.OneOfScalar,(return.holidays),pm.expect(return_holidays).to.be.null,/api/v1/holidays&Holidays&200&holidays&provinces():::EXIT
get+api_v1_holidays,holidays.provinces.id,LENGTH(return.id)==2,daikon.inv.unary.string.FixedLengthString,(return.id),pm.expect(return_id).to.have.length(2),/api/v1/holidays&Holidays&200&holidays&provinces():::EXIT
get+api_v1_holidays,holidays.provinces.nextHoliday,return.nextHoliday == null,daikon.inv.unary.scalar.OneOfScalar,(return.nextHoliday),pm.expect(return_nextHoliday).to.be.null,/api/v1/holidays&Holidays&200&holidays&provinces():::EXIT
get+api_v1_holidays,holidays.provinces.optional,return.optional == 1,daikon.inv.unary.scalar.OneOfScalar,(return.optional),pm.expect([1].includes(return_optional)).to.be.true,/api/v1/holidays&Holidays&200&holidays&provinces():::EXIT
get+api_v1_holidays,holidays.provinces.sourceLink,return.sourceLink is Url,daikon.inv.unary.string.IsUrl,(return.sourceLink),"pm.expect(return_sourceLink).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",/api/v1/holidays&Holidays&200&holidays&provinces():::EXIT
get+api_v1_holidays_{holidayId},holiday.date,return.holiday.date is a Date. Format: YYYY/MM/DD,daikon.inv.unary.string.dates.IsDateYYYYMMDD,(return.holiday.date),pm.expect(return_holiday_date).to.match(/^(?:1\d{3}|20[01234][0-9]|2050|9999)[-/.](?:0[1-9]|1[012])[-/.](?:0[1-9]|[12][0-9]|3[01])$/),/api/v1/holidays/{holidayId}&Holiday&200():::EXIT
get+api_v1_holidays_{holidayId},holiday.federal,"return.holiday.federal one of { 0, 1 }
input.holidayId >= return.holiday.federal","daikon.inv.unary.scalar.OneOfScalar
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.holiday.federal)
(input.holidayId, return.holiday.federal)","pm.expect([0, 1, 0].includes(return_holiday_federal)).to.be.true
pm.expect(input_holidayId).to.be.at.least(return_holiday_federal)","/api/v1/holidays/{holidayId}&Holiday&200():::EXIT
/api/v1/holidays/{holidayId}&Holiday&200():::EXIT"
get+api_v1_holidays_{holidayId},holiday.id,input.holidayId == return.holiday.id,daikon.inv.binary.twoScalar.IntEqual,"(input.holidayId, return.holiday.id)",pm.expect(input_holidayId).to.eql(return_holiday_id),/api/v1/holidays/{holidayId}&Holiday&200():::EXIT
get+api_v1_holidays_{holidayId},holiday.observedDate,return.holiday.observedDate is a Date. Format: YYYY/MM/DD,daikon.inv.unary.string.dates.IsDateYYYYMMDD,(return.holiday.observedDate),pm.expect(return_holiday_observedDate).to.match(/^(?:1\d{3}|20[01234][0-9]|2050|9999)[-/.](?:0[1-9]|1[012])[-/.](?:0[1-9]|[12][0-9]|3[01])$/),/api/v1/holidays/{holidayId}&Holiday&200():::EXIT
get+api_v1_holidays_{holidayId},holiday.provinces.holidays,return.holidays == null,daikon.inv.unary.scalar.OneOfScalar,(return.holidays),pm.expect(return_holidays).to.be.null,/api/v1/holidays/{holidayId}&Holiday&200&holiday&provinces():::EXIT
get+api_v1_holidays_{holidayId},holiday.provinces.id,LENGTH(return.id)==2,daikon.inv.unary.string.FixedLengthString,(return.id),pm.expect(return_id).to.have.length(2),/api/v1/holidays/{holidayId}&Holiday&200&holiday&provinces():::EXIT
get+api_v1_holidays_{holidayId},holiday.provinces.nextHoliday,return.nextHoliday == null,daikon.inv.unary.scalar.OneOfScalar,(return.nextHoliday),pm.expect(return_nextHoliday).to.be.null,/api/v1/holidays/{holidayId}&Holiday&200&holiday&provinces():::EXIT
get+api_v1_holidays_{holidayId},holiday.provinces.optional,return.optional == 1,daikon.inv.unary.scalar.OneOfScalar,(return.optional),pm.expect([1].includes(return_optional)).to.be.true,/api/v1/holidays/{holidayId}&Holiday&200&holiday&provinces():::EXIT
get+api_v1_holidays_{holidayId},holiday.provinces.sourceLink,return.sourceLink is Url,daikon.inv.unary.string.IsUrl,(return.sourceLink),"pm.expect(return_sourceLink).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",/api/v1/holidays/{holidayId}&Holiday&200&holiday&provinces():::EXIT
get+api_v1_provinces,provinces,size(return.provinces[]) == 13,daikon.inv.unary.scalar.OneOfScalar,(size(return.provinces[..])),pm.expect([13].includes(return_provinces_size_array)).to.be.true,/api/v1/provinces&Provinces&200():::EXIT
get+api_v1_provinces,provinces.id,LENGTH(return.id)==2,daikon.inv.unary.string.FixedLengthString,(return.id),pm.expect(return_id).to.have.length(2),/api/v1/provinces&Provinces&200&provinces():::EXIT
get+api_v1_provinces,provinces.sourceLink,return.sourceLink is Url,daikon.inv.unary.string.IsUrl,(return.sourceLink),"pm.expect(return_sourceLink).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",/api/v1/provinces&Provinces&200&provinces():::EXIT
get+api_v1_provinces_{provinceId},province.id,input.provinceId == return.province.id,daikon.inv.binary.twoString.StringEqual,"(input.provinceId, return.province.id)",pm.expect(input_provinceId).to.eql(return_province_id),/api/v1/provinces/{provinceId}&Province&200():::EXIT
get+api_v1_provinces_{provinceId},province.sourceLink,return.province.sourceLink is Url,daikon.inv.unary.string.IsUrl,(return.province.sourceLink),"pm.expect(return_province_sourceLink).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",/api/v1/provinces/{provinceId}&Province&200():::EXIT
