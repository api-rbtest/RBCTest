pptname,invariant,invariantType,variables,postmanAssertion,endpoint,tp,fp,enter,invariantDescription,Unnamed: 10,group,api
/projects/{id}/repository/commits&/projects/{id}/repository/commits&get&200%array():::EXIT,size(return.array[]) == 20,daikon.inv.unary.scalar.OneOfScalar,(size(return.array[..])),pm.expect([20].includes(return_array_size_array)).to.be.true,get+projects_{id}_repository_commits,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,array,GitLab Commit API
/projects/{id}/repository/commits&/projects/{id}/repository/commits&get&200():::EXIT,LENGTH(return.authored_date)==29,daikon.inv.unary.string.FixedLengthString,(return.authored_date),pm.expect(return_authored_date).to.have.length(29),get+projects_{id}_repository_commits,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,authored_date,GitLab Commit API
/projects/{id}/repository/commits&/projects/{id}/repository/commits&get&200():::EXIT,return.authored_date is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.authored_date),"pm.expect(return_authored_date).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+projects_{id}_repository_commits,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,authored_date,GitLab Commit API
/projects/{id}/repository/commits&/projects/{id}/repository/commits&get&200():::EXIT,LENGTH(return.created_at)==29,daikon.inv.unary.string.FixedLengthString,(return.created_at),pm.expect(return_created_at).to.have.length(29),get+projects_{id}_repository_commits,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,created_at,GitLab Commit API
/projects/{id}/repository/commits&/projects/{id}/repository/commits&get&200():::EXIT,return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.created_at),"pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+projects_{id}_repository_commits,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,created_at,GitLab Commit API
/projects/{id}/repository/commits&/projects/{id}/repository/commits&get&200():::EXIT,LENGTH(return.id)==40,daikon.inv.unary.string.FixedLengthString,(return.id),pm.expect(return_id).to.have.length(40),get+projects_{id}_repository_commits,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,id,GitLab Commit API
/projects/{id}/repository/commits&/projects/{id}/repository/commits&get&200():::EXIT,LENGTH(return.short_id)==8,daikon.inv.unary.string.FixedLengthString,(return.short_id),pm.expect(return_short_id).to.have.length(8),get+projects_{id}_repository_commits,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,short_id,GitLab Commit API
/projects/{id}/repository/commits&/projects/{id}/repository/commits&get&200():::EXIT,All the elements of return.parent_ids[] have LENGTH=40,daikon.inv.unary.stringsequence.SequenceFixedLengthString,(return.parent_ids[..]),pm.expect(return_parent_ids_array.every(element => element.length === 40)).to.be.true,get+projects_{id}_repository_commits,1.0,,,Indicates that all the elements of an array of strings have a fixed length n. Represented as All the elements of x have LENGTH=n.,,parent_ids,GitLab Commit API
/projects/{id}/repository/commits&/projects/{id}/repository/commits&get&200():::EXIT,"size(return.parent_ids[]) one of { 1, 2 }",daikon.inv.unary.scalar.OneOfScalar,(size(return.parent_ids[..])),"pm.expect([1, 2, 0].includes(return_parent_ids_size_array)).to.be.true",get+projects_{id}_repository_commits,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,parent_ids,GitLab Commit API
/projects/{id}/repository/commits&/projects/{id}/repository/commits&get&200():::EXIT,return.short_id is a substring of return.id,daikon.inv.binary.twoString.StdString$SubString,"(return.id, return.short_id)",pm.expect(return_id.includes(return_short_id)).to.be.true,get+projects_{id}_repository_commits,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,id,GitLab Commit API
/projects/{id}/repository/commits&/projects/{id}/repository/commits&get&200():::EXIT,return.title is a substring of return.message,daikon.inv.binary.twoString.StdString$SubString,"(return.message, return.title)",pm.expect(return_message.includes(return_title)).to.be.true,get+projects_{id}_repository_commits,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,message,GitLab Commit API
/projects/{id}/repository/commits/{sha}/comments&/projects/{id}/repository/commits/{sha}/comments&get&200():::EXIT,LENGTH(return.author.avatar_url)==113,daikon.inv.unary.string.FixedLengthString,(return.author.avatar_url),pm.expect(return_author_avatar_url).to.have.length(113),get+projects_{id}_repository_commits_{sha}_comments,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,author.avatar_url,GitLab Commit API
/projects/{id}/repository/commits/{sha}/comments&/projects/{id}/repository/commits/{sha}/comments&get&200():::EXIT,return.author.avatar_url is Url,daikon.inv.unary.string.IsUrl,(return.author.avatar_url),"pm.expect(return_author_avatar_url).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",get+projects_{id}_repository_commits_{sha}_comments,1.0,,,Indicates that the value of a string variable is always a URL. Represented as x is Url.,,author.avatar_url,GitLab Commit API
/projects/{id}/repository/commits/{sha}/comments&/projects/{id}/repository/commits/{sha}/comments&get&200():::EXIT,"return.author.state == ""active""",daikon.inv.unary.string.OneOfString,(return.author.state),"pm.expect([""active""].includes(return_author_state)).to.be.true",get+projects_{id}_repository_commits_{sha}_comments,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,author.state,GitLab Commit API
/projects/{id}/repository/commits/{sha}/comments&/projects/{id}/repository/commits/{sha}/comments&get&200():::EXIT,LENGTH(return.author.state)==6,daikon.inv.unary.string.FixedLengthString,(return.author.state),pm.expect(return_author_state).to.have.length(6),get+projects_{id}_repository_commits_{sha}_comments,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,author.state,GitLab Commit API
/projects/{id}/repository/commits/{sha}/comments&/projects/{id}/repository/commits/{sha}/comments&get&200():::EXIT,return.author.id >= 1,daikon.inv.unary.scalar.LowerBound,(return.author.id),pm.expect(return_author_id).to.be.at.least(1),get+projects_{id}_repository_commits_{sha}_comments,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,author.id,GitLab Commit API
/projects/{id}/repository/commits/{sha}/comments&/projects/{id}/repository/commits/{sha}/comments&get&200():::EXIT,LENGTH(return.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.created_at),pm.expect(return_created_at).to.have.length(24),get+projects_{id}_repository_commits_{sha}_comments,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,created_at,GitLab Commit API
/projects/{id}/repository/commits/{sha}/comments&/projects/{id}/repository/commits/{sha}/comments&get&200():::EXIT,return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.created_at),"pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+projects_{id}_repository_commits_{sha}_comments,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,created_at,GitLab Commit API
/projects/{id}/repository/commits/{sha}/comments&/projects/{id}/repository/commits/{sha}/comments&get&200():::EXIT,return.author.username is a substring of return.author.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.author.web_url, return.author.username)",pm.expect(return_author_web_url.includes(return_author_username)).to.be.true,get+projects_{id}_repository_commits_{sha}_comments,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,author.web_url,GitLab Commit API
/projects/{id}/repository/commits/{sha}/merge_requests&/projects/{id}/repository/commits/{sha}/merge_requests&get&200%array():::EXIT,size(return.array[]) >= 2,daikon.inv.unary.scalar.LowerBound,(size(return.array[..])),pm.expect(return_array_size_array).to.be.at.least(2),get+projects_{id}_repository_commits_{sha}_merge_requests,,1.0,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,array,GitLab Commit API
/projects/{id}/repository/commits/{sha}/merge_requests&/projects/{id}/repository/commits/{sha}/merge_requests&get&200():::EXIT,return.project_id == return.target_project_id,daikon.inv.binary.twoScalar.IntEqual,"(return.project_id, return.target_project_id)",pm.expect(return_project_id).to.eql(return_target_project_id),get+projects_{id}_repository_commits_{sha}_merge_requests,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,project_id,GitLab Commit API
/projects/{id}/repository/commits/{sha}/merge_requests&/projects/{id}/repository/commits/{sha}/merge_requests&get&200():::EXIT,return.downvotes == return.time_stats.total_time_spent,daikon.inv.binary.twoScalar.IntEqual,"(return.downvotes, return.time_stats.total_time_spent)",pm.expect(return_downvotes).to.eql(return_time_stats_total_time_spent),get+projects_{id}_repository_commits_{sha}_merge_requests,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,downvotes,GitLab Commit API
/projects/{id}/repository/commits/{sha}/merge_requests&/projects/{id}/repository/commits/{sha}/merge_requests&get&200():::EXIT,"return.state one of { ""closed"", ""merged"", ""opened"" }",daikon.inv.unary.string.OneOfString,(return.state),"pm.expect([""closed"", ""merged"", ""opened""].includes(return_state)).to.be.true",get+projects_{id}_repository_commits_{sha}_merge_requests,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,state,GitLab Commit API
/projects/{id}/repository/commits/{sha}/merge_requests&/projects/{id}/repository/commits/{sha}/merge_requests&get&200():::EXIT,LENGTH(return.state)==6,daikon.inv.unary.string.FixedLengthString,(return.state),pm.expect(return_state).to.have.length(6),get+projects_{id}_repository_commits_{sha}_merge_requests,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,state,GitLab Commit API
/projects/{id}/repository/commits/{sha}/merge_requests&/projects/{id}/repository/commits/{sha}/merge_requests&get&200():::EXIT,LENGTH(return.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.created_at),pm.expect(return_created_at).to.have.length(24),get+projects_{id}_repository_commits_{sha}_merge_requests,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,created_at,GitLab Commit API
/projects/{id}/repository/commits/{sha}/merge_requests&/projects/{id}/repository/commits/{sha}/merge_requests&get&200():::EXIT,return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.created_at),"pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+projects_{id}_repository_commits_{sha}_merge_requests,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,created_at,GitLab Commit API
/projects/{id}/repository/commits/{sha}/merge_requests&/projects/{id}/repository/commits/{sha}/merge_requests&get&200():::EXIT,LENGTH(return.updated_at)==24,daikon.inv.unary.string.FixedLengthString,(return.updated_at),pm.expect(return_updated_at).to.have.length(24),get+projects_{id}_repository_commits_{sha}_merge_requests,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,updated_at,GitLab Commit API
/projects/{id}/repository/commits/{sha}/merge_requests&/projects/{id}/repository/commits/{sha}/merge_requests&get&200():::EXIT,return.updated_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.updated_at),"pm.expect(return_updated_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+projects_{id}_repository_commits_{sha}_merge_requests,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,updated_at,GitLab Commit API
/projects/{id}/repository/commits/{sha}/merge_requests&/projects/{id}/repository/commits/{sha}/merge_requests&get&200():::EXIT,"return.upvotes one of { 0, 1, 2 }",daikon.inv.unary.scalar.OneOfScalar,(return.upvotes),"pm.expect([0, 1, 2].includes(return_upvotes)).to.be.true",get+projects_{id}_repository_commits_{sha}_merge_requests,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,upvotes,GitLab Commit API
/projects/{id}/repository/commits/{sha}/merge_requests&/projects/{id}/repository/commits/{sha}/merge_requests&get&200():::EXIT,return.downvotes == 0,daikon.inv.unary.scalar.OneOfScalar,(return.downvotes),pm.expect([0].includes(return_downvotes)).to.be.true,get+projects_{id}_repository_commits_{sha}_merge_requests,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,downvotes,GitLab Commit API
/projects/{id}/repository/commits/{sha}/merge_requests&/projects/{id}/repository/commits/{sha}/merge_requests&get&200():::EXIT,"return.author.state one of { ""active"", ""blocked"" }",daikon.inv.unary.string.OneOfString,(return.author.state),"pm.expect([""active"", ""blocked""].includes(return_author_state)).to.be.true",get+projects_{id}_repository_commits_{sha}_merge_requests,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,author.state,GitLab Commit API
/projects/{id}/repository/commits/{sha}/merge_requests&/projects/{id}/repository/commits/{sha}/merge_requests&get&200():::EXIT,"return.merge_when_pipeline_succeeds one of { 0, 1 }",daikon.inv.unary.scalar.OneOfScalar,(return.merge_when_pipeline_succeeds),"pm.expect([0, 1, 0].includes(return_merge_when_pipeline_succeeds)).to.be.true",get+projects_{id}_repository_commits_{sha}_merge_requests,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,merge_when_pipeline_succeeds,GitLab Commit API
/projects/{id}/repository/commits/{sha}/merge_requests&/projects/{id}/repository/commits/{sha}/merge_requests&get&200():::EXIT,"return.merge_status one of { ""can_be_merged"", ""cannot_be_merged"", ""cannot_be_merged_recheck"" }",daikon.inv.unary.string.OneOfString,(return.merge_status),"pm.expect([""can_be_merged"", ""cannot_be_merged"", ""cannot_be_merged_recheck""].includes(return_merge_status)).to.be.true",get+projects_{id}_repository_commits_{sha}_merge_requests,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,merge_status,GitLab Commit API
/projects/{id}/repository/commits/{sha}/merge_requests&/projects/{id}/repository/commits/{sha}/merge_requests&get&200():::EXIT,LENGTH(return.sha)==40,daikon.inv.unary.string.FixedLengthString,(return.sha),pm.expect(return_sha).to.have.length(40),get+projects_{id}_repository_commits_{sha}_merge_requests,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,sha,GitLab Commit API
/projects/{id}/repository/commits/{sha}/merge_requests&/projects/{id}/repository/commits/{sha}/merge_requests&get&200():::EXIT,LENGTH(return.merge_commit_sha)==40,daikon.inv.unary.string.FixedLengthString,(return.merge_commit_sha),pm.expect(return_merge_commit_sha).to.have.length(40),get+projects_{id}_repository_commits_{sha}_merge_requests,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,merge_commit_sha,GitLab Commit API
/projects/{id}/repository/commits/{sha}/merge_requests&/projects/{id}/repository/commits/{sha}/merge_requests&get&200():::EXIT,LENGTH(return.squash_commit_sha)==40,daikon.inv.unary.string.FixedLengthString,(return.squash_commit_sha),pm.expect(return_squash_commit_sha).to.have.length(40),get+projects_{id}_repository_commits_{sha}_merge_requests,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,squash_commit_sha,GitLab Commit API
/projects/{id}/repository/commits/{sha}/merge_requests&/projects/{id}/repository/commits/{sha}/merge_requests&get&200():::EXIT,return.user_notes_count >= 0,daikon.inv.unary.scalar.LowerBound,(return.user_notes_count),pm.expect(return_user_notes_count).to.be.at.least(0),get+projects_{id}_repository_commits_{sha}_merge_requests,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,user_notes_count,GitLab Commit API
/projects/{id}/repository/commits/{sha}/merge_requests&/projects/{id}/repository/commits/{sha}/merge_requests&get&200():::EXIT,"return.discussion_locked == ""true""",daikon.inv.unary.string.OneOfString,(return.discussion_locked),"pm.expect([""true""].includes(return_discussion_locked)).to.be.true",get+projects_{id}_repository_commits_{sha}_merge_requests,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,discussion_locked,GitLab Commit API
/projects/{id}/repository/commits/{sha}/merge_requests&/projects/{id}/repository/commits/{sha}/merge_requests&get&200():::EXIT,LENGTH(return.discussion_locked)==4,daikon.inv.unary.string.FixedLengthString,(return.discussion_locked),pm.expect(return_discussion_locked).to.have.length(4),get+projects_{id}_repository_commits_{sha}_merge_requests,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,discussion_locked,GitLab Commit API
/projects/{id}/repository/commits/{sha}/merge_requests&/projects/{id}/repository/commits/{sha}/merge_requests&get&200():::EXIT,"return.should_remove_source_branch one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.should_remove_source_branch),"pm.expect([""false"", ""true""].includes(return_should_remove_source_branch)).to.be.true",get+projects_{id}_repository_commits_{sha}_merge_requests,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,should_remove_source_branch,GitLab Commit API
/projects/{id}/repository/commits/{sha}/merge_requests&/projects/{id}/repository/commits/{sha}/merge_requests&get&200():::EXIT,"return.time_stats.time_estimate one of { 0, 57600 }",daikon.inv.unary.scalar.OneOfScalar,(return.time_stats.time_estimate),"pm.expect([0, 57600, 0].includes(return_time_stats_time_estimate)).to.be.true",get+projects_{id}_repository_commits_{sha}_merge_requests,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,time_stats.time_estimate,GitLab Commit API
/projects/{id}/repository/commits/{sha}/merge_requests&/projects/{id}/repository/commits/{sha}/merge_requests&get&200():::EXIT,"return.time_stats.human_time_estimate == ""16h""",daikon.inv.unary.string.OneOfString,(return.time_stats.human_time_estimate),"pm.expect([""16h""].includes(return_time_stats_human_time_estimate)).to.be.true",get+projects_{id}_repository_commits_{sha}_merge_requests,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,time_stats.human_time_estimate,GitLab Commit API
/projects/{id}/repository/commits/{sha}/merge_requests&/projects/{id}/repository/commits/{sha}/merge_requests&get&200():::EXIT,return.id > return.project_id,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.id, return.project_id)",pm.expect(return_id).to.be.greaterThan(return_project_id),get+projects_{id}_repository_commits_{sha}_merge_requests,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,id,GitLab Commit API
/projects/{id}/repository/commits/{sha}/merge_requests&/projects/{id}/repository/commits/{sha}/merge_requests&get&200():::EXIT,return.id > return.author.id,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.id, return.author.id)",pm.expect(return_id).to.be.greaterThan(return_author_id),get+projects_{id}_repository_commits_{sha}_merge_requests,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,id,GitLab Commit API
/projects/{id}/repository/commits/{sha}/merge_requests&/projects/{id}/repository/commits/{sha}/merge_requests&get&200():::EXIT,return.id > return.source_project_id,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.id, return.source_project_id)",pm.expect(return_id).to.be.greaterThan(return_source_project_id),get+projects_{id}_repository_commits_{sha}_merge_requests,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,id,GitLab Commit API
/projects/{id}/repository/commits/{sha}/merge_requests&/projects/{id}/repository/commits/{sha}/merge_requests&get&200():::EXIT,return.iid < return.author.id,daikon.inv.binary.twoScalar.IntLessThan,"(return.iid, return.author.id)",pm.expect(return_iid).to.be.lessThan(return_author_id),get+projects_{id}_repository_commits_{sha}_merge_requests,1.0,,,Represents an invariant of < between two long scalars. Prints as x < y.,,iid,GitLab Commit API
/projects/{id}/repository/commits/{sha}/merge_requests&/projects/{id}/repository/commits/{sha}/merge_requests&get&200():::EXIT,return.iid > size(return.labels[]),daikon.inv.binary.twoScalar.IntGreaterThan,"(return.iid, size(return.labels[..]))",pm.expect(return_iid).to.be.greaterThan(return_labels_size_array),get+projects_{id}_repository_commits_{sha}_merge_requests,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,iid,GitLab Commit API
/projects/{id}/repository/commits/{sha}/merge_requests&/projects/{id}/repository/commits/{sha}/merge_requests&get&200():::EXIT,return.project_id <= return.source_project_id,daikon.inv.binary.twoScalar.IntLessEqual,"(return.project_id, return.source_project_id)",pm.expect(return_project_id).to.be.lte(return_source_project_id),get+projects_{id}_repository_commits_{sha}_merge_requests,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,project_id,GitLab Commit API
/projects/{id}/repository/commits/{sha}/merge_requests&/projects/{id}/repository/commits/{sha}/merge_requests&get&200():::EXIT,return.upvotes >= return.downvotes,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.upvotes, return.downvotes)",pm.expect(return_upvotes).to.be.at.least(return_downvotes),get+projects_{id}_repository_commits_{sha}_merge_requests,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,upvotes,GitLab Commit API
/projects/{id}/repository/commits/{sha}/merge_requests&/projects/{id}/repository/commits/{sha}/merge_requests&get&200():::EXIT,return.downvotes <= return.merge_when_pipeline_succeeds,daikon.inv.binary.twoScalar.IntLessEqual,"(return.downvotes, return.merge_when_pipeline_succeeds)",pm.expect(return_downvotes).to.be.lte(return_merge_when_pipeline_succeeds),get+projects_{id}_repository_commits_{sha}_merge_requests,,1.0,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,downvotes,GitLab Commit API
/projects/{id}/repository/commits/{sha}/merge_requests&/projects/{id}/repository/commits/{sha}/merge_requests&get&200():::EXIT,return.downvotes <= return.user_notes_count,daikon.inv.binary.twoScalar.IntLessEqual,"(return.downvotes, return.user_notes_count)",pm.expect(return_downvotes).to.be.lte(return_user_notes_count),get+projects_{id}_repository_commits_{sha}_merge_requests,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,downvotes,GitLab Commit API
/projects/{id}/repository/commits/{sha}/merge_requests&/projects/{id}/repository/commits/{sha}/merge_requests&get&200():::EXIT,return.downvotes <= return.time_stats.time_estimate,daikon.inv.binary.twoScalar.IntLessEqual,"(return.downvotes, return.time_stats.time_estimate)",pm.expect(return_downvotes).to.be.lte(return_time_stats_time_estimate),get+projects_{id}_repository_commits_{sha}_merge_requests,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,downvotes,GitLab Commit API
/projects/{id}/repository/commits/{sha}/merge_requests&/projects/{id}/repository/commits/{sha}/merge_requests&get&200():::EXIT,return.downvotes <= size(return.labels[]),daikon.inv.binary.twoScalar.IntLessEqual,"(return.downvotes, size(return.labels[..]))",pm.expect(return_downvotes).to.be.lte(return_labels_size_array),get+projects_{id}_repository_commits_{sha}_merge_requests,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,downvotes,GitLab Commit API
/projects/{id}/repository/commits/{sha}/merge_requests&/projects/{id}/repository/commits/{sha}/merge_requests&get&200():::EXIT,return.author.username is a substring of return.author.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.author.web_url, return.author.username)",pm.expect(return_author_web_url.includes(return_author_username)).to.be.true,get+projects_{id}_repository_commits_{sha}_merge_requests,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,author.web_url,GitLab Commit API
/projects/{id}/repository/commits/{sha}/refs&/projects/{id}/repository/commits/{sha}/refs&get&200():::EXIT,"return.type one of { ""branch"", ""tag"" }",daikon.inv.unary.string.OneOfString,(return.type),"pm.expect([""branch"", ""tag""].includes(return_type)).to.be.true",get+projects_{id}_repository_commits_{sha}_refs,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,type,GitLab Commit API
/projects/{id}/repository/commits/{sha}/signature&/projects/{id}/repository/commits/{sha}/signature&get&200():::EXIT,"return.signature_type == ""PGP""",daikon.inv.unary.string.OneOfString,(return.signature_type),"pm.expect([""PGP""].includes(return_signature_type)).to.be.true",get+projects_{id}_repository_commits_{sha}_signature,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,signature_type,GitLab Commit API
/projects/{id}/repository/commits/{sha}/signature&/projects/{id}/repository/commits/{sha}/signature&get&200():::EXIT,LENGTH(return.signature_type)==3,daikon.inv.unary.string.FixedLengthString,(return.signature_type),pm.expect(return_signature_type).to.have.length(3),get+projects_{id}_repository_commits_{sha}_signature,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,signature_type,GitLab Commit API
/projects/{id}/repository/commits/{sha}/signature&/projects/{id}/repository/commits/{sha}/signature&get&200():::EXIT,"return.verification_status == ""unknown_key""",daikon.inv.unary.string.OneOfString,(return.verification_status),"pm.expect([""unknown_key""].includes(return_verification_status)).to.be.true",get+projects_{id}_repository_commits_{sha}_signature,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,verification_status,GitLab Commit API
/projects/{id}/repository/commits/{sha}/signature&/projects/{id}/repository/commits/{sha}/signature&get&200():::EXIT,LENGTH(return.verification_status)==11,daikon.inv.unary.string.FixedLengthString,(return.verification_status),pm.expect(return_verification_status).to.have.length(11),get+projects_{id}_repository_commits_{sha}_signature,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,verification_status,GitLab Commit API
/projects/{id}/repository/commits/{sha}/signature&/projects/{id}/repository/commits/{sha}/signature&get&200():::EXIT,"return.commit_source == ""gitaly""",daikon.inv.unary.string.OneOfString,(return.commit_source),"pm.expect([""gitaly""].includes(return_commit_source)).to.be.true",get+projects_{id}_repository_commits_{sha}_signature,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,commit_source,GitLab Commit API
/projects/{id}/repository/commits/{sha}/signature&/projects/{id}/repository/commits/{sha}/signature&get&200():::EXIT,LENGTH(return.commit_source)==6,daikon.inv.unary.string.FixedLengthString,(return.commit_source),pm.expect(return_commit_source).to.have.length(6),get+projects_{id}_repository_commits_{sha}_signature,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,commit_source,GitLab Commit API
/projects/{id}/repository/commits/{sha}/signature&/projects/{id}/repository/commits/{sha}/signature&get&200():::EXIT,return.x509_certificate == null,daikon.inv.unary.scalar.OneOfScalar,(return.x509_certificate),pm.expect(return_x509_certificate).to.be.null,get+projects_{id}_repository_commits_{sha}_signature,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,x509_certificate,GitLab Commit API
/projects/{id}/repository/commits/{sha}/signature&/projects/{id}/repository/commits/{sha}/signature&get&200():::EXIT,return.x509_certificate.x509_issuer == null,daikon.inv.unary.scalar.OneOfScalar,(return.x509_certificate.x509_issuer),pm.expect(return_x509_certificate_x509_issuer).to.be.null,get+projects_{id}_repository_commits_{sha}_signature,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,x509_certificate.x509_issuer,GitLab Commit API
/projects/{id}/repository/commits/{sha}/statuses&/projects/{id}/repository/commits/{sha}/statuses&get&200%array():::EXIT,"size(return.array[]) one of { 1, 2, 8 }",daikon.inv.unary.scalar.OneOfScalar,(size(return.array[..])),"pm.expect([1, 2, 8].includes(return_array_size_array)).to.be.true",get+projects_{id}_repository_commits_{sha}_statuses,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,array,GitLab Commit API
/projects/{id}/repository/commits/{sha}/statuses&/projects/{id}/repository/commits/{sha}/statuses&get&200%array():::EXIT,input.per_page >= size(return.array[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(input.per_page, size(return.array[..]))",pm.expect(input_per_page).to.be.at.least(return_array_size_array),get+projects_{id}_repository_commits_{sha}_statuses,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,array,GitLab Commit API
/projects/{id}/repository/commits/{sha}/statuses&/projects/{id}/repository/commits/{sha}/statuses&get&200():::EXIT,input.sha == return.sha,daikon.inv.binary.twoString.StringEqual,"(input.sha, return.sha)",pm.expect(input_sha).to.eql(return_sha),get+projects_{id}_repository_commits_{sha}_statuses,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,sha,GitLab Commit API
/projects/{id}/repository/commits/{sha}/statuses&/projects/{id}/repository/commits/{sha}/statuses&get&200():::EXIT,LENGTH(return.author.avatar_url)==113,daikon.inv.unary.string.FixedLengthString,(return.author.avatar_url),pm.expect(return_author_avatar_url).to.have.length(113),get+projects_{id}_repository_commits_{sha}_statuses,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,author.avatar_url,GitLab Commit API
/projects/{id}/repository/commits/{sha}/statuses&/projects/{id}/repository/commits/{sha}/statuses&get&200():::EXIT,return.author.avatar_url is Url,daikon.inv.unary.string.IsUrl,(return.author.avatar_url),"pm.expect(return_author_avatar_url).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",get+projects_{id}_repository_commits_{sha}_statuses,1.0,,,Indicates that the value of a string variable is always a URL. Represented as x is Url.,,author.avatar_url,GitLab Commit API
/projects/{id}/repository/commits/{sha}/statuses&/projects/{id}/repository/commits/{sha}/statuses&get&200():::EXIT,"return.author.state == ""active""",daikon.inv.unary.string.OneOfString,(return.author.state),"pm.expect([""active""].includes(return_author_state)).to.be.true",get+projects_{id}_repository_commits_{sha}_statuses,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,author.state,GitLab Commit API
/projects/{id}/repository/commits/{sha}/statuses&/projects/{id}/repository/commits/{sha}/statuses&get&200():::EXIT,LENGTH(return.author.state)==6,daikon.inv.unary.string.FixedLengthString,(return.author.state),pm.expect(return_author_state).to.have.length(6),get+projects_{id}_repository_commits_{sha}_statuses,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,author.state,GitLab Commit API
/projects/{id}/repository/commits/{sha}/statuses&/projects/{id}/repository/commits/{sha}/statuses&get&200():::EXIT,return.author.id >= 1,daikon.inv.unary.scalar.LowerBound,(return.author.id),pm.expect(return_author_id).to.be.at.least(1),get+projects_{id}_repository_commits_{sha}_statuses,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,author.id,GitLab Commit API
/projects/{id}/repository/commits/{sha}/statuses&/projects/{id}/repository/commits/{sha}/statuses&get&200():::EXIT,LENGTH(return.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.created_at),pm.expect(return_created_at).to.have.length(24),get+projects_{id}_repository_commits_{sha}_statuses,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,created_at,GitLab Commit API
/projects/{id}/repository/commits/{sha}/statuses&/projects/{id}/repository/commits/{sha}/statuses&get&200():::EXIT,return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.created_at),"pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+projects_{id}_repository_commits_{sha}_statuses,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,created_at,GitLab Commit API
/projects/{id}/repository/commits/{sha}/statuses&/projects/{id}/repository/commits/{sha}/statuses&get&200():::EXIT,LENGTH(return.finished_at)==24,daikon.inv.unary.string.FixedLengthString,(return.finished_at),pm.expect(return_finished_at).to.have.length(24),get+projects_{id}_repository_commits_{sha}_statuses,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,finished_at,GitLab Commit API
/projects/{id}/repository/commits/{sha}/statuses&/projects/{id}/repository/commits/{sha}/statuses&get&200():::EXIT,return.finished_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.finished_at),"pm.expect(return_finished_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+projects_{id}_repository_commits_{sha}_statuses,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,finished_at,GitLab Commit API
/projects/{id}/repository/commits/{sha}/statuses&/projects/{id}/repository/commits/{sha}/statuses&get&200():::EXIT,return.id is Numeric,daikon.inv.unary.string.IsNumeric,(return.id),"pm.expect(return_id).to.match(/^[+-]{0,1}(0|([0-9](\d*|\d{0,2}(,\d{3})*)))?(\.\d*[0-9])?$/)",get+projects_{id}_repository_commits_{sha}_statuses,1.0,,,Indicates that the characters of a string variable are always numeric. Represented as x is Numeric.,,id,GitLab Commit API
/projects/{id}/repository/commits/{sha}/statuses&/projects/{id}/repository/commits/{sha}/statuses&get&200():::EXIT,LENGTH(return.started_at)==24,daikon.inv.unary.string.FixedLengthString,(return.started_at),pm.expect(return_started_at).to.have.length(24),get+projects_{id}_repository_commits_{sha}_statuses,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,started_at,GitLab Commit API
/projects/{id}/repository/commits/{sha}/statuses&/projects/{id}/repository/commits/{sha}/statuses&get&200():::EXIT,return.started_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.started_at),"pm.expect(return_started_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+projects_{id}_repository_commits_{sha}_statuses,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,started_at,GitLab Commit API
/projects/{id}/repository/commits/{sha}/statuses&/projects/{id}/repository/commits/{sha}/statuses&get&200():::EXIT,return.coverage is Numeric,daikon.inv.unary.string.IsNumeric,(return.coverage),"pm.expect(return_coverage).to.match(/^[+-]{0,1}(0|([0-9](\d*|\d{0,2}(,\d{3})*)))?(\.\d*[0-9])?$/)",get+projects_{id}_repository_commits_{sha}_statuses,1.0,,,Indicates that the characters of a string variable are always numeric. Represented as x is Numeric.,,coverage,GitLab Commit API
/projects/{id}/repository/commits/{sha}/statuses&/projects/{id}/repository/commits/{sha}/statuses&get&200():::EXIT,return.author.username is a substring of return.author.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.author.web_url, return.author.username)",pm.expect(return_author_web_url.includes(return_author_username)).to.be.true,get+projects_{id}_repository_commits_{sha}_statuses,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,author.web_url,GitLab Commit API
/projects/{id}/repository/commits&/projects/{id}/repository/commits&post&201():::EXIT,input.branch == return.last_pipeline.ref,daikon.inv.binary.twoString.StringEqual,"(input.branch, return.last_pipeline.ref)",pm.expect(input_branch).to.eql(return_last_pipeline_ref),post+projects_{id}_repository_commits,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,last_pipeline.ref,GitLab Commit API
/projects/{id}/repository/commits&/projects/{id}/repository/commits&post&201():::EXIT,input.commit_message == return.message,daikon.inv.binary.twoString.StringEqual,"(input.commit_message, return.message)",pm.expect(input_commit_message).to.eql(return_message),post+projects_{id}_repository_commits,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,message,GitLab Commit API
/projects/{id}/repository/commits&/projects/{id}/repository/commits&post&201():::EXIT,input.commit_message == return.title,daikon.inv.binary.twoString.StringEqual,"(input.commit_message, return.title)",pm.expect(input_commit_message).to.eql(return_title),post+projects_{id}_repository_commits,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,title,GitLab Commit API
/projects/{id}/repository/commits&/projects/{id}/repository/commits&post&201():::EXIT,input.author_email == return.author_email,daikon.inv.binary.twoString.StringEqual,"(input.author_email, return.author_email)",pm.expect(input_author_email).to.eql(return_author_email),post+projects_{id}_repository_commits,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,author_email,GitLab Commit API
/projects/{id}/repository/commits&/projects/{id}/repository/commits&post&201():::EXIT,input.author_name == return.author_name,daikon.inv.binary.twoString.StringEqual,"(input.author_name, return.author_name)",pm.expect(input_author_name).to.eql(return_author_name),post+projects_{id}_repository_commits,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,author_name,GitLab Commit API
/projects/{id}/repository/commits&/projects/{id}/repository/commits&post&201():::EXIT,return.authored_date == return.committed_date,daikon.inv.binary.twoString.StringEqual,"(return.authored_date, return.committed_date)",pm.expect(return_authored_date).to.eql(return_committed_date),post+projects_{id}_repository_commits,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,authored_date,GitLab Commit API
/projects/{id}/repository/commits&/projects/{id}/repository/commits&post&201():::EXIT,return.authored_date == return.created_at,daikon.inv.binary.twoString.StringEqual,"(return.authored_date, return.created_at)",pm.expect(return_authored_date).to.eql(return_created_at),post+projects_{id}_repository_commits,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,authored_date,GitLab Commit API
/projects/{id}/repository/commits&/projects/{id}/repository/commits&post&201():::EXIT,return.id == return.last_pipeline.sha,daikon.inv.binary.twoString.StringEqual,"(return.id, return.last_pipeline.sha)",pm.expect(return_id).to.eql(return_last_pipeline_sha),post+projects_{id}_repository_commits,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,id,GitLab Commit API
/projects/{id}/repository/commits&/projects/{id}/repository/commits&post&201():::EXIT,return.last_pipeline.status == return.status,daikon.inv.binary.twoString.StringEqual,"(return.last_pipeline.status, return.status)",pm.expect(return_last_pipeline_status).to.eql(return_status),post+projects_{id}_repository_commits,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,last_pipeline.status,GitLab Commit API
/projects/{id}/repository/commits&/projects/{id}/repository/commits&post&201():::EXIT,size(input.actions[]) == size(return.parent_ids[]),daikon.inv.binary.twoScalar.IntEqual,"(size(input.actions[..]), size(return.parent_ids[..]))",pm.expect(input_actions_size_array).to.eql(return_parent_ids_size_array),post+projects_{id}_repository_commits,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,parent_ids,GitLab Commit API
/projects/{id}/repository/commits&/projects/{id}/repository/commits&post&201():::EXIT,size(input.actions[]) == size(return.parent_ids[]),daikon.inv.binary.twoScalar.IntEqual,"(size(input.actions[..]), size(return.parent_ids[..]))",pm.expect(input_actions_size_array).to.eql(return_parent_ids_size_array),post+projects_{id}_repository_commits,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,parent_ids,GitLab Commit API
/projects/{id}/repository/commits&/projects/{id}/repository/commits&post&201():::EXIT,LENGTH(return.authored_date)==29,daikon.inv.unary.string.FixedLengthString,(return.authored_date),pm.expect(return_authored_date).to.have.length(29),post+projects_{id}_repository_commits,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,authored_date,GitLab Commit API
/projects/{id}/repository/commits&/projects/{id}/repository/commits&post&201():::EXIT,return.authored_date is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.authored_date),"pm.expect(return_authored_date).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",post+projects_{id}_repository_commits,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,authored_date,GitLab Commit API
/projects/{id}/repository/commits&/projects/{id}/repository/commits&post&201():::EXIT,return.committer_email is Email,daikon.inv.unary.string.IsEmail,(return.committer_email),"pm.expect(return_committer_email).to.match(/^(?:[A-Za-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[A-Za-z0-9!#$%&'*+/=?^_`{|}~-]+)*|""(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*"")@(?:(?:[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?\.)+[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9]^[0-9]?|[A-Za-z0-9-]*[A-Za-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])$/)",post+projects_{id}_repository_commits,1.0,,,Indicates that a string variable consistently holds values that match the format of an email address.,,committer_email,GitLab Commit API
/projects/{id}/repository/commits&/projects/{id}/repository/commits&post&201():::EXIT,LENGTH(return.id)==40,daikon.inv.unary.string.FixedLengthString,(return.id),pm.expect(return_id).to.have.length(40),post+projects_{id}_repository_commits,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,id,GitLab Commit API
/projects/{id}/repository/commits&/projects/{id}/repository/commits&post&201():::EXIT,All the elements of return.parent_ids[] have LENGTH=40,daikon.inv.unary.stringsequence.SequenceFixedLengthString,(return.parent_ids[..]),pm.expect(return_parent_ids_array.every(element => element.length === 40)).to.be.true,post+projects_{id}_repository_commits,1.0,,,Indicates that all the elements of an array of strings have a fixed length n. Represented as All the elements of x have LENGTH=n.,,parent_ids,GitLab Commit API
/projects/{id}/repository/commits&/projects/{id}/repository/commits&post&201():::EXIT,LENGTH(return.short_id)==8,daikon.inv.unary.string.FixedLengthString,(return.short_id),pm.expect(return_short_id).to.have.length(8),post+projects_{id}_repository_commits,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,short_id,GitLab Commit API
/projects/{id}/repository/commits&/projects/{id}/repository/commits&post&201():::EXIT,"return.stats.additions one of { 0, 1 }",daikon.inv.unary.scalar.OneOfScalar,(return.stats.additions),"pm.expect([0, 1, 0].includes(return_stats_additions)).to.be.true",post+projects_{id}_repository_commits,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,stats.additions,GitLab Commit API
/projects/{id}/repository/commits&/projects/{id}/repository/commits&post&201():::EXIT,return.stats.deletions >= 0,daikon.inv.unary.scalar.LowerBound,(return.stats.deletions),pm.expect(return_stats_deletions).to.be.at.least(0),post+projects_{id}_repository_commits,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,stats.deletions,GitLab Commit API
/projects/{id}/repository/commits&/projects/{id}/repository/commits&post&201():::EXIT,return.stats.total >= 0,daikon.inv.unary.scalar.LowerBound,(return.stats.total),pm.expect(return_stats_total).to.be.at.least(0),post+projects_{id}_repository_commits,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,stats.total,GitLab Commit API
/projects/{id}/repository/commits&/projects/{id}/repository/commits&post&201():::EXIT,"return.last_pipeline.id one of { 114, 123 }",daikon.inv.unary.scalar.OneOfScalar,(return.last_pipeline.id),"pm.expect([114, 123, 0].includes(return_last_pipeline_id)).to.be.true",post+projects_{id}_repository_commits,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,last_pipeline.id,GitLab Commit API
/projects/{id}/repository/commits&/projects/{id}/repository/commits&post&201():::EXIT,"return.last_pipeline.ref one of { ""1028-improve-docs-on-the-filter-block"", ""35-repasse-sur-doc-et-code-pour-finaliser-la-v1-du-projet"" }",daikon.inv.unary.string.OneOfString,(return.last_pipeline.ref),"pm.expect([""1028-improve-docs-on-the-filter-block"", ""35-repasse-sur-doc-et-code-pour-finaliser-la-v1-du-projet""].includes(return_last_pipeline_ref)).to.be.true",post+projects_{id}_repository_commits,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,last_pipeline.ref,GitLab Commit API
/projects/{id}/repository/commits&/projects/{id}/repository/commits&post&201():::EXIT,"return.last_pipeline.sha one of { ""19cba437e0f8c5b5476d4be819264f764939ffe6"", ""94d5b52f93a6a16c4bff10be923b98118438f547"" }",daikon.inv.unary.string.OneOfString,(return.last_pipeline.sha),"pm.expect([""19cba437e0f8c5b5476d4be819264f764939ffe6"", ""94d5b52f93a6a16c4bff10be923b98118438f547""].includes(return_last_pipeline_sha)).to.be.true",post+projects_{id}_repository_commits,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,last_pipeline.sha,GitLab Commit API
/projects/{id}/repository/commits&/projects/{id}/repository/commits&post&201():::EXIT,LENGTH(return.last_pipeline.sha)==40,daikon.inv.unary.string.FixedLengthString,(return.last_pipeline.sha),pm.expect(return_last_pipeline_sha).to.have.length(40),post+projects_{id}_repository_commits,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,last_pipeline.sha,GitLab Commit API
/projects/{id}/repository/commits&/projects/{id}/repository/commits&post&201():::EXIT,"return.status == ""failed""",daikon.inv.unary.string.OneOfString,(return.status),"pm.expect([""failed""].includes(return_status)).to.be.true",post+projects_{id}_repository_commits,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,status,GitLab Commit API
/projects/{id}/repository/commits&/projects/{id}/repository/commits&post&201():::EXIT,LENGTH(return.status)==6,daikon.inv.unary.string.FixedLengthString,(return.status),pm.expect(return_status).to.have.length(6),post+projects_{id}_repository_commits,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,status,GitLab Commit API
/projects/{id}/repository/commits&/projects/{id}/repository/commits&post&201():::EXIT,input.start_sha in return.parent_ids[],daikon.inv.binary.sequenceString.MemberString,"(input.start_sha, return.parent_ids[..])",pm.expect(return_parent_ids_array.includes(input_start_sha)).to.be.true,post+projects_{id}_repository_commits,1.0,,,Represents String scalars that are always members of a sequence of String values. Prints as x in y[] where x is a String scalar and y[] is a sequence of String.,,parent_ids,GitLab Commit API
/projects/{id}/repository/commits&/projects/{id}/repository/commits&post&201():::EXIT,return.short_id is a substring of return.id,daikon.inv.binary.twoString.StdString$SubString,"(return.id, return.short_id)",pm.expect(return_id.includes(return_short_id)).to.be.true,post+projects_{id}_repository_commits,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,id,GitLab Commit API
/projects/{id}/repository/commits&/projects/{id}/repository/commits&post&201():::EXIT,return.id is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.id, return.web_url)",pm.expect(return_web_url.includes(return_id)).to.be.true,post+projects_{id}_repository_commits,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,web_url,GitLab Commit API
/projects/{id}/repository/commits&/projects/{id}/repository/commits&post&201():::EXIT,return.short_id is a substring of return.last_pipeline.sha,daikon.inv.binary.twoString.StdString$SubString,"(return.short_id, return.last_pipeline.sha)",pm.expect(return_last_pipeline_sha.includes(return_short_id)).to.be.true,post+projects_{id}_repository_commits,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,short_id,GitLab Commit API
/projects/{id}/repository/commits&/projects/{id}/repository/commits&post&201():::EXIT,return.stats.additions <= return.stats.total,daikon.inv.binary.twoScalar.IntLessEqual,"(return.stats.additions, return.stats.total)",pm.expect(return_stats_additions).to.be.lte(return_stats_total),post+projects_{id}_repository_commits,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,stats.additions,GitLab Commit API
/projects/{id}/repository/commits&/projects/{id}/repository/commits&post&201():::EXIT,return.stats.additions <= size(input.actions[]),daikon.inv.binary.twoScalar.IntLessEqual,"(return.stats.additions, size(input.actions[..]))",pm.expect(return_stats_additions).to.be.lte(input_actions_size_array),post+projects_{id}_repository_commits,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,stats.additions,GitLab Commit API
/projects/{id}/repository/commits&/projects/{id}/repository/commits&post&201():::EXIT,return.stats.deletions <= return.stats.total,daikon.inv.binary.twoScalar.IntLessEqual,"(return.stats.deletions, return.stats.total)",pm.expect(return_stats_deletions).to.be.lte(return_stats_total),post+projects_{id}_repository_commits,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,stats.deletions,GitLab Commit API
/projects/{id}/repository/commits&/projects/{id}/repository/commits&post&201():::EXIT,return.last_pipeline.sha is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.last_pipeline.sha, return.web_url)",pm.expect(return_web_url.includes(return_last_pipeline_sha)).to.be.true,post+projects_{id}_repository_commits,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,web_url,GitLab Commit API
/projects/{id}/statuses/{sha}&/projects/{id}/statuses/{sha}&post&201():::EXIT,input.state == return.status,daikon.inv.binary.twoString.StringEqual,"(input.state, return.status)",pm.expect(input_state).to.eql(return_status),post+projects_{id}_statuses_{sha},1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,status,GitLab Commit API
/projects/{id}/statuses/{sha}&/projects/{id}/statuses/{sha}&post&201():::EXIT,input.ref == return.ref,daikon.inv.binary.twoString.StringEqual,"(input.ref, return.ref)",pm.expect(input_ref).to.eql(return_ref),post+projects_{id}_statuses_{sha},1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,ref,GitLab Commit API
/projects/{id}/statuses/{sha}&/projects/{id}/statuses/{sha}&post&201():::EXIT,input.target_url == return.target_url,daikon.inv.binary.twoString.StringEqual,"(input.target_url, return.target_url)",pm.expect(input_target_url).to.eql(return_target_url),post+projects_{id}_statuses_{sha},1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,target_url,GitLab Commit API
/projects/{id}/statuses/{sha}&/projects/{id}/statuses/{sha}&post&201():::EXIT,input.description == return.description,daikon.inv.binary.twoString.StringEqual,"(input.description, return.description)",pm.expect(input_description).to.eql(return_description),post+projects_{id}_statuses_{sha},1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,description,GitLab Commit API
/projects/{id}/statuses/{sha}&/projects/{id}/statuses/{sha}&post&201():::EXIT,input.name == return.name,daikon.inv.binary.twoString.StringEqual,"(input.name, return.name)",pm.expect(input_name).to.eql(return_name),post+projects_{id}_statuses_{sha},1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,name,GitLab Commit API
/projects/{id}/statuses/{sha}&/projects/{id}/statuses/{sha}&post&201():::EXIT,return.allow_failure == false,daikon.inv.unary.scalar.OneOfScalar,(return.allow_failure),pm.expect(return_allow_failure).to.eql(false),post+projects_{id}_statuses_{sha},1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,allow_failure,GitLab Commit API
/projects/{id}/statuses/{sha}&/projects/{id}/statuses/{sha}&post&201():::EXIT,"return.author.web_url == ""http://localhost:30000/root""",daikon.inv.unary.string.OneOfString,(return.author.web_url),"pm.expect([""http://localhost:30000/root""].includes(return_author_web_url)).to.be.true",post+projects_{id}_statuses_{sha},,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,author.web_url,GitLab Commit API
/projects/{id}/statuses/{sha}&/projects/{id}/statuses/{sha}&post&201():::EXIT,LENGTH(return.author.web_url)==27,daikon.inv.unary.string.FixedLengthString,(return.author.web_url),pm.expect(return_author_web_url).to.have.length(27),post+projects_{id}_statuses_{sha},,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,author.web_url,GitLab Commit API
/projects/{id}/statuses/{sha}&/projects/{id}/statuses/{sha}&post&201():::EXIT,"return.author.avatar_url == ""https://www.gravatar.com/avatar/258d8dc916db8cea2cafb6c3cd0cb0246efe061421dbd83ec3a350428cabda4f?s=80&d=identicon""",daikon.inv.unary.string.OneOfString,(return.author.avatar_url),"pm.expect([""https://www.gravatar.com/avatar/258d8dc916db8cea2cafb6c3cd0cb0246efe061421dbd83ec3a350428cabda4f?s=80&d=identicon""].includes(return_author_avatar_url)).to.be.true",post+projects_{id}_statuses_{sha},,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,author.avatar_url,GitLab Commit API
/projects/{id}/statuses/{sha}&/projects/{id}/statuses/{sha}&post&201():::EXIT,LENGTH(return.author.avatar_url)==113,daikon.inv.unary.string.FixedLengthString,(return.author.avatar_url),pm.expect(return_author_avatar_url).to.have.length(113),post+projects_{id}_statuses_{sha},,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,author.avatar_url,GitLab Commit API
/projects/{id}/statuses/{sha}&/projects/{id}/statuses/{sha}&post&201():::EXIT,return.author.avatar_url is Url,daikon.inv.unary.string.IsUrl,(return.author.avatar_url),"pm.expect(return_author_avatar_url).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",post+projects_{id}_statuses_{sha},1.0,,,Indicates that the value of a string variable is always a URL. Represented as x is Url.,,author.avatar_url,GitLab Commit API
/projects/{id}/statuses/{sha}&/projects/{id}/statuses/{sha}&post&201():::EXIT,"return.author.username == ""root""",daikon.inv.unary.string.OneOfString,(return.author.username),"pm.expect([""root""].includes(return_author_username)).to.be.true",post+projects_{id}_statuses_{sha},,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,author.username,GitLab Commit API
/projects/{id}/statuses/{sha}&/projects/{id}/statuses/{sha}&post&201():::EXIT,LENGTH(return.author.username)==4,daikon.inv.unary.string.FixedLengthString,(return.author.username),pm.expect(return_author_username).to.have.length(4),post+projects_{id}_statuses_{sha},,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,author.username,GitLab Commit API
/projects/{id}/statuses/{sha}&/projects/{id}/statuses/{sha}&post&201():::EXIT,"return.author.state == ""active""",daikon.inv.unary.string.OneOfString,(return.author.state),"pm.expect([""active""].includes(return_author_state)).to.be.true",post+projects_{id}_statuses_{sha},1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,author.state,GitLab Commit API
/projects/{id}/statuses/{sha}&/projects/{id}/statuses/{sha}&post&201():::EXIT,LENGTH(return.author.state)==6,daikon.inv.unary.string.FixedLengthString,(return.author.state),pm.expect(return_author_state).to.have.length(6),post+projects_{id}_statuses_{sha},1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,author.state,GitLab Commit API
/projects/{id}/statuses/{sha}&/projects/{id}/statuses/{sha}&post&201():::EXIT,"return.author.name == ""Administrator""",daikon.inv.unary.string.OneOfString,(return.author.name),"pm.expect([""Administrator""].includes(return_author_name)).to.be.true",post+projects_{id}_statuses_{sha},,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,author.name,GitLab Commit API
/projects/{id}/statuses/{sha}&/projects/{id}/statuses/{sha}&post&201():::EXIT,LENGTH(return.author.name)==13,daikon.inv.unary.string.FixedLengthString,(return.author.name),pm.expect(return_author_name).to.have.length(13),post+projects_{id}_statuses_{sha},,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,author.name,GitLab Commit API
/projects/{id}/statuses/{sha}&/projects/{id}/statuses/{sha}&post&201():::EXIT,return.author.id == 1,daikon.inv.unary.scalar.OneOfScalar,(return.author.id),pm.expect([1].includes(return_author_id)).to.be.true,post+projects_{id}_statuses_{sha},,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,author.id,GitLab Commit API
/projects/{id}/statuses/{sha}&/projects/{id}/statuses/{sha}&post&201():::EXIT,LENGTH(return.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.created_at),pm.expect(return_created_at).to.have.length(24),post+projects_{id}_statuses_{sha},1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,created_at,GitLab Commit API
/projects/{id}/statuses/{sha}&/projects/{id}/statuses/{sha}&post&201():::EXIT,return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.created_at),"pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",post+projects_{id}_statuses_{sha},1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,created_at,GitLab Commit API
/projects/{id}/statuses/{sha}&/projects/{id}/statuses/{sha}&post&201():::EXIT,LENGTH(return.finished_at)==24,daikon.inv.unary.string.FixedLengthString,(return.finished_at),pm.expect(return_finished_at).to.have.length(24),post+projects_{id}_statuses_{sha},1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,finished_at,GitLab Commit API
/projects/{id}/statuses/{sha}&/projects/{id}/statuses/{sha}&post&201():::EXIT,return.finished_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.finished_at),"pm.expect(return_finished_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",post+projects_{id}_statuses_{sha},1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,finished_at,GitLab Commit API
/projects/{id}/statuses/{sha}&/projects/{id}/statuses/{sha}&post&201():::EXIT,LENGTH(return.id)==3,daikon.inv.unary.string.FixedLengthString,(return.id),pm.expect(return_id).to.have.length(3),post+projects_{id}_statuses_{sha},,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,id,GitLab Commit API
/projects/{id}/statuses/{sha}&/projects/{id}/statuses/{sha}&post&201():::EXIT,return.id is Numeric,daikon.inv.unary.string.IsNumeric,(return.id),"pm.expect(return_id).to.match(/^[+-]{0,1}(0|([0-9](\d*|\d{0,2}(,\d{3})*)))?(\.\d*[0-9])?$/)",post+projects_{id}_statuses_{sha},1.0,,,Indicates that the characters of a string variable are always numeric. Represented as x is Numeric.,,id,GitLab Commit API
/projects/{id}/statuses/{sha}&/projects/{id}/statuses/{sha}&post&201():::EXIT,LENGTH(return.sha)==40,daikon.inv.unary.string.FixedLengthString,(return.sha),pm.expect(return_sha).to.have.length(40),post+projects_{id}_statuses_{sha},1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,sha,GitLab Commit API
/projects/{id}/statuses/{sha}&/projects/{id}/statuses/{sha}&post&201():::EXIT,LENGTH(return.started_at)==24,daikon.inv.unary.string.FixedLengthString,(return.started_at),pm.expect(return_started_at).to.have.length(24),post+projects_{id}_statuses_{sha},1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,started_at,GitLab Commit API
/projects/{id}/statuses/{sha}&/projects/{id}/statuses/{sha}&post&201():::EXIT,return.started_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.started_at),"pm.expect(return_started_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",post+projects_{id}_statuses_{sha},1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,started_at,GitLab Commit API
/projects/{id}/statuses/{sha}&/projects/{id}/statuses/{sha}&post&201():::EXIT,return.coverage is Numeric,daikon.inv.unary.string.IsNumeric,(return.coverage),"pm.expect(return_coverage).to.match(/^[+-]{0,1}(0|([0-9](\d*|\d{0,2}(,\d{3})*)))?(\.\d*[0-9])?$/)",post+projects_{id}_statuses_{sha},1.0,,,Indicates that the characters of a string variable are always numeric. Represented as x is Numeric.,,coverage,GitLab Commit API
/projects/{id}/statuses/{sha}&/projects/{id}/statuses/{sha}&post&201():::EXIT,input.sha is a substring of return.sha,daikon.inv.binary.twoString.StdString$SubString,"(input.sha, return.sha)",pm.expect(return_sha.includes(input_sha)).to.be.true,post+projects_{id}_statuses_{sha},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,sha,GitLab Commit API
/projects/{id}/statuses/{sha}&/projects/{id}/statuses/{sha}&post&201():::EXIT,return.author.username is a substring of return.author.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.author.web_url, return.author.username)",pm.expect(return_author_web_url.includes(return_author_username)).to.be.true,post+projects_{id}_statuses_{sha},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,author.web_url,GitLab Commit API
/projects&/projects&get&200%array():::EXIT,input.id_after > size(return.array[]),daikon.inv.binary.twoScalar.IntGreaterThan,"(input.id_after, size(return.array[..]))",pm.expect(input_id_after).to.be.greaterThan(return_array_size_array),get+projects,,1.0,,Represents an invariant of > between two long scalars. Prints as x > y.,,array,GitLab Commit API
/projects&/projects&get&200&shared_with_groups():::EXIT,"return.group_id one of { 176, 1070 }",daikon.inv.unary.scalar.OneOfScalar,(return.group_id),"pm.expect([176, 1070, 0].includes(return_group_id)).to.be.true",get+projects,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,shared_with_groups.group_id,GitLab Commit API
/projects&/projects&get&200&shared_with_groups():::EXIT,"return.group_name one of { ""effortlessly"", ""myjane"" }",daikon.inv.unary.string.OneOfString,(return.group_name),"pm.expect([""effortlessly"", ""myjane""].includes(return_group_name)).to.be.true",get+projects,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,shared_with_groups.group_name,GitLab Commit API
/projects&/projects&get&200&shared_with_groups():::EXIT,"return.group_full_path one of { ""myjane"", ""salubriousness"" }",daikon.inv.unary.string.OneOfString,(return.group_full_path),"pm.expect([""myjane"", ""salubriousness""].includes(return_group_full_path)).to.be.true",get+projects,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,shared_with_groups.group_full_path,GitLab Commit API
/projects&/projects&get&200&shared_with_groups():::EXIT,"return.group_access_level one of { 20, 30 }",daikon.inv.unary.scalar.OneOfScalar,(return.group_access_level),"pm.expect([20, 30, 0].includes(return_group_access_level)).to.be.true",get+projects,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,shared_with_groups.group_access_level,GitLab Commit API
/projects&/projects&get&200():::EXIT,input.archived == return.archived,daikon.inv.binary.twoScalar.IntEqual,"(input.archived, return.archived)",pm.expect(input_archived).to.eql(return_archived),get+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,archived,GitLab Commit API
/projects&/projects&get&200():::EXIT,input.simple == return.service_desk_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.simple, return.service_desk_enabled)",pm.expect(input_simple).to.eql(return_service_desk_enabled),get+projects,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,service_desk_enabled,GitLab Commit API
/projects&/projects&get&200():::EXIT,input.visibility == return.visibility,daikon.inv.binary.twoString.StringEqual,"(input.visibility, return.visibility)",pm.expect(input_visibility).to.eql(return_visibility),get+projects,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,visibility,GitLab Commit API
/projects&/projects&get&200():::EXIT,return.owner.name == return.namespace.name,daikon.inv.binary.twoString.StringEqual,"(return.owner.name, return.namespace.name)",pm.expect(return_owner_name).to.eql(return_namespace_name),get+projects,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,owner.name,GitLab Commit API
/projects&/projects&get&200():::EXIT,return.permissions.project_access.access_level == return.permissions.group_access.access_level,daikon.inv.binary.twoScalar.IntEqual,"(return.permissions.project_access.access_level, return.permissions.group_access.access_level)",pm.expect(return_permissions_project_access_access_level).to.eql(return_permissions_group_access_access_level),get+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,permissions.project_access.access_level,GitLab Commit API
/projects&/projects&get&200():::EXIT,return.permissions.project_access.notification_level == return.permissions.group_access.notification_level,daikon.inv.binary.twoScalar.IntEqual,"(return.permissions.project_access.notification_level, return.permissions.group_access.notification_level)",pm.expect(return_permissions_project_access_notification_level).to.eql(return_permissions_group_access_notification_level),get+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,permissions.project_access.notification_level,GitLab Commit API
/projects&/projects&get&200():::EXIT,return.statistics.lfs_objects_size == return.statistics.job_artifacts_size,daikon.inv.binary.twoScalar.IntEqual,"(return.statistics.lfs_objects_size, return.statistics.job_artifacts_size)",pm.expect(return_statistics_lfs_objects_size).to.eql(return_statistics_job_artifacts_size),get+projects,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,statistics.job_artifacts_size,GitLab Commit API
/projects&/projects&get&200():::EXIT,return.statistics.lfs_objects_size == return.statistics.packages_size,daikon.inv.binary.twoScalar.IntEqual,"(return.statistics.lfs_objects_size, return.statistics.packages_size)",pm.expect(return_statistics_lfs_objects_size).to.eql(return_statistics_packages_size),get+projects,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,statistics.lfs_objects_size,GitLab Commit API
/projects&/projects&get&200():::EXIT,return.statistics.lfs_objects_size == return.statistics.snippets_size,daikon.inv.binary.twoScalar.IntEqual,"(return.statistics.lfs_objects_size, return.statistics.snippets_size)",pm.expect(return_statistics_lfs_objects_size).to.eql(return_statistics_snippets_size),get+projects,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,statistics.lfs_objects_size,GitLab Commit API
/projects&/projects&get&200():::EXIT,"return.visibility one of { ""internal"", ""private"", ""public"" }",daikon.inv.unary.string.OneOfString,(return.visibility),"pm.expect([""internal"", ""private"", ""public""].includes(return_visibility)).to.be.true",get+projects,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,visibility,GitLab Commit API
/projects&/projects&get&200():::EXIT,return.owner.id >= 1,daikon.inv.unary.scalar.LowerBound,(return.owner.id),pm.expect(return_owner_id).to.be.at.least(1),get+projects,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,owner.id,GitLab Commit API
/projects&/projects&get&200():::EXIT,return.open_issues_count >= 0,daikon.inv.unary.scalar.LowerBound,(return.open_issues_count),pm.expect(return_open_issues_count).to.be.at.least(0),get+projects,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,open_issues_count,GitLab Commit API
/projects&/projects&get&200():::EXIT,LENGTH(return.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.created_at),pm.expect(return_created_at).to.have.length(24),get+projects,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,created_at,GitLab Commit API
/projects&/projects&get&200():::EXIT,return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.created_at),"pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+projects,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,created_at,GitLab Commit API
/projects&/projects&get&200():::EXIT,LENGTH(return.last_activity_at)==24,daikon.inv.unary.string.FixedLengthString,(return.last_activity_at),pm.expect(return_last_activity_at).to.have.length(24),get+projects,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,last_activity_at,GitLab Commit API
/projects&/projects&get&200():::EXIT,return.last_activity_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.last_activity_at),"pm.expect(return_last_activity_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+projects,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,last_activity_at,GitLab Commit API
/projects&/projects&get&200():::EXIT,return.creator_id >= 1,daikon.inv.unary.scalar.LowerBound,(return.creator_id),pm.expect(return_creator_id).to.be.at.least(1),get+projects,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,creator_id,GitLab Commit API
/projects&/projects&get&200():::EXIT,return.namespace.id >= 1,daikon.inv.unary.scalar.LowerBound,(return.namespace.id),pm.expect(return_namespace_id).to.be.at.least(1),get+projects,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,namespace.id,GitLab Commit API
/projects&/projects&get&200():::EXIT,"return.namespace.kind one of { ""group"", ""user"" }",daikon.inv.unary.string.OneOfString,(return.namespace.kind),"pm.expect([""group"", ""user""].includes(return_namespace_kind)).to.be.true",get+projects,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,namespace.kind,GitLab Commit API
/projects&/projects&get&200():::EXIT,"return.import_status one of { ""finished"", ""none"" }",daikon.inv.unary.string.OneOfString,(return.import_status),"pm.expect([""finished"", ""none""].includes(return_import_status)).to.be.true",get+projects,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,import_status,GitLab Commit API
/projects&/projects&get&200():::EXIT,return.permissions.project_access.access_level == 50,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.project_access.access_level),pm.expect([50].includes(return_permissions_project_access_access_level)).to.be.true,get+projects,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,permissions.project_access.access_level,GitLab Commit API
/projects&/projects&get&200():::EXIT,return.permissions.project_access.notification_level == 3,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.project_access.notification_level),pm.expect([3].includes(return_permissions_project_access_notification_level)).to.be.true,get+projects,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,permissions.project_access.notification_level,GitLab Commit API
/projects&/projects&get&200():::EXIT,return.permissions.group_access.access_level == 50,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.group_access.access_level),pm.expect([50].includes(return_permissions_group_access_access_level)).to.be.true,get+projects,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,permissions.group_access.access_level,GitLab Commit API
/projects&/projects&get&200():::EXIT,return.permissions.group_access.notification_level == 3,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.group_access.notification_level),pm.expect([3].includes(return_permissions_group_access_notification_level)).to.be.true,get+projects,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,permissions.group_access.notification_level,GitLab Commit API
/projects&/projects&get&200():::EXIT,"return.avatar_url one of { ""https://gitlab.com/gropoutoux/bvcbvc/-/avatar"", ""https://gitlab.com/uploads/-/system/project/avatar/53268997/rect1.png"" }",daikon.inv.unary.string.OneOfString,(return.avatar_url),"pm.expect([""https://gitlab.com/gropoutoux/bvcbvc/-/avatar"", ""https://gitlab.com/uploads/-/system/project/avatar/53268997/rect1.png""].includes(return_avatar_url)).to.be.true",get+projects,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,avatar_url,GitLab Commit API
/projects&/projects&get&200():::EXIT,return.avatar_url is Url,daikon.inv.unary.string.IsUrl,(return.avatar_url),"pm.expect(return_avatar_url).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",get+projects,1.0,,,Indicates that the value of a string variable is always a URL. Represented as x is Url.,,avatar_url,GitLab Commit API
/projects&/projects&get&200():::EXIT,return.forks_count >= 0,daikon.inv.unary.scalar.LowerBound,(return.forks_count),pm.expect(return_forks_count).to.be.at.least(0),get+projects,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,forks_count,GitLab Commit API
/projects&/projects&get&200():::EXIT,return.star_count >= 0,daikon.inv.unary.scalar.LowerBound,(return.star_count),pm.expect(return_star_count).to.be.at.least(0),get+projects,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,star_count,GitLab Commit API
/projects&/projects&get&200():::EXIT,LENGTH(return.runners_token)==29,daikon.inv.unary.string.FixedLengthString,(return.runners_token),pm.expect(return_runners_token).to.have.length(29),get+projects,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,runners_token,GitLab Commit API
/projects&/projects&get&200():::EXIT,"return.merge_method one of { ""ff"", ""merge"", ""rebase_merge"" }",daikon.inv.unary.string.OneOfString,(return.merge_method),"pm.expect([""ff"", ""merge"", ""rebase_merge""].includes(return_merge_method)).to.be.true",get+projects,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,merge_method,GitLab Commit API
/projects&/projects&get&200():::EXIT,"return.auto_devops_deploy_strategy one of { ""continuous"", ""manual"", ""timed_incremental"" }",daikon.inv.unary.string.OneOfString,(return.auto_devops_deploy_strategy),"pm.expect([""continuous"", ""manual"", ""timed_incremental""].includes(return_auto_devops_deploy_strategy)).to.be.true",get+projects,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,auto_devops_deploy_strategy,GitLab Commit API
/projects&/projects&get&200():::EXIT,"return.repository_storage == ""default""",daikon.inv.unary.string.OneOfString,(return.repository_storage),"pm.expect([""default""].includes(return_repository_storage)).to.be.true",get+projects,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,repository_storage,GitLab Commit API
/projects&/projects&get&200():::EXIT,LENGTH(return.repository_storage)==7,daikon.inv.unary.string.FixedLengthString,(return.repository_storage),pm.expect(return_repository_storage).to.have.length(7),get+projects,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,repository_storage,GitLab Commit API
/projects&/projects&get&200():::EXIT,"return.external_authorization_classification_label == """"",daikon.inv.unary.string.OneOfString,(return.external_authorization_classification_label),"pm.expect([""""].includes(return_external_authorization_classification_label)).to.be.true",get+projects,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,external_authorization_classification_label,GitLab Commit API
/projects&/projects&get&200():::EXIT,LENGTH(return.external_authorization_classification_label)==0,daikon.inv.unary.string.FixedLengthString,(return.external_authorization_classification_label),pm.expect(return_external_authorization_classification_label).to.have.length(0),get+projects,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,external_authorization_classification_label,GitLab Commit API
/projects&/projects&get&200():::EXIT,return.service_desk_enabled == false,daikon.inv.unary.scalar.OneOfScalar,(return.service_desk_enabled),pm.expect(return_service_desk_enabled).to.eql(false),get+projects,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,service_desk_enabled,GitLab Commit API
/projects&/projects&get&200():::EXIT,return.statistics.commit_count >= 0,daikon.inv.unary.scalar.LowerBound,(return.statistics.commit_count),pm.expect(return_statistics_commit_count).to.be.at.least(0),get+projects,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,statistics.commit_count,GitLab Commit API
/projects&/projects&get&200():::EXIT,return.statistics.storage_size >= 0,daikon.inv.unary.scalar.LowerBound,(return.statistics.storage_size),pm.expect(return_statistics_storage_size).to.be.at.least(0),get+projects,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,statistics.storage_size,GitLab Commit API
/projects&/projects&get&200():::EXIT,return.statistics.repository_size >= 0,daikon.inv.unary.scalar.LowerBound,(return.statistics.repository_size),pm.expect(return_statistics_repository_size).to.be.at.least(0),get+projects,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,statistics.repository_size,GitLab Commit API
/projects&/projects&get&200():::EXIT,"return.statistics.wiki_size one of { 0, 41943 }",daikon.inv.unary.scalar.OneOfScalar,(return.statistics.wiki_size),"pm.expect([0, 41943, 0].includes(return_statistics_wiki_size)).to.be.true",get+projects,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,statistics.wiki_size,GitLab Commit API
/projects&/projects&get&200():::EXIT,return.statistics.lfs_objects_size == 0,daikon.inv.unary.scalar.OneOfScalar,(return.statistics.lfs_objects_size),pm.expect([0].includes(return_statistics_lfs_objects_size)).to.be.true,get+projects,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,statistics.lfs_objects_size,GitLab Commit API
/projects&/projects&get&200():::EXIT,"size(return.shared_with_groups[]) one of { 0, 1 }",daikon.inv.unary.scalar.OneOfScalar,(size(return.shared_with_groups[..])),"pm.expect([0, 1, 0].includes(return_shared_with_groups_size_array)).to.be.true",get+projects,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,shared_with_groups,GitLab Commit API
/projects&/projects&get&200():::EXIT,input.id_after < return.id,daikon.inv.binary.twoScalar.IntLessThan,"(input.id_after, return.id)",pm.expect(input_id_after).to.be.lessThan(return_id),get+projects,1.0,,,Represents an invariant of < between two long scalars. Prints as x < y.,,id,GitLab Commit API
/projects&/projects&get&200():::EXIT,input.id_before > return.id,daikon.inv.binary.twoScalar.IntGreaterThan,"(input.id_before, return.id)",pm.expect(input_id_before).to.be.greaterThan(return_id),get+projects,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,id,GitLab Commit API
/projects&/projects&get&200():::EXIT,input.id_before > return.owner.id,daikon.inv.binary.twoScalar.IntGreaterThan,"(input.id_before, return.owner.id)",pm.expect(input_id_before).to.be.greaterThan(return_owner_id),get+projects,,1.0,,Represents an invariant of > between two long scalars. Prints as x > y.,,owner.id,GitLab Commit API
/projects&/projects&get&200():::EXIT,input.id_before > return.creator_id,daikon.inv.binary.twoScalar.IntGreaterThan,"(input.id_before, return.creator_id)",pm.expect(input_id_before).to.be.greaterThan(return_creator_id),get+projects,,1.0,,Represents an invariant of > between two long scalars. Prints as x > y.,,creator_id,GitLab Commit API
/projects&/projects&get&200():::EXIT,return.id > return.open_issues_count,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.id, return.open_issues_count)",pm.expect(return_id).to.be.greaterThan(return_open_issues_count),get+projects,,1.0,,Represents an invariant of > between two long scalars. Prints as x > y.,,id,GitLab Commit API
/projects&/projects&get&200():::EXIT,return.id > return.forks_count,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.id, return.forks_count)",pm.expect(return_id).to.be.greaterThan(return_forks_count),get+projects,,1.0,,Represents an invariant of > between two long scalars. Prints as x > y.,,id,GitLab Commit API
/projects&/projects&get&200():::EXIT,return.id > return.star_count,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.id, return.star_count)",pm.expect(return_id).to.be.greaterThan(return_star_count),get+projects,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,id,GitLab Commit API
/projects&/projects&get&200():::EXIT,return.id > size(return.tag_list[]),daikon.inv.binary.twoScalar.IntGreaterThan,"(return.id, size(return.tag_list[..]))",pm.expect(return_id).to.be.greaterThan(return_tag_list_size_array),get+projects,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,tag_list,GitLab Commit API
/projects&/projects&get&200():::EXIT,return.default_branch is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.default_branch, return.readme_url)",pm.expect(return_readme_url.includes(return_default_branch)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,default_branch,GitLab Commit API
/projects&/projects&get&200():::EXIT,return.path_with_namespace is a substring of return.ssh_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.ssh_url_to_repo, return.path_with_namespace)",pm.expect(return_ssh_url_to_repo.includes(return_path_with_namespace)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Commit API
/projects&/projects&get&200():::EXIT,return.web_url is a substring of return.http_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.http_url_to_repo, return.web_url)",pm.expect(return_http_url_to_repo.includes(return_web_url)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,web_url,GitLab Commit API
/projects&/projects&get&200():::EXIT,return.web_url is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.readme_url)",pm.expect(return_readme_url.includes(return_web_url)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,web_url,GitLab Commit API
/projects&/projects&get&200():::EXIT,return.path_with_namespace is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.path_with_namespace)",pm.expect(return_web_url.includes(return_path_with_namespace)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Commit API
/projects&/projects&get&200():::EXIT,return.owner.id > size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntGreaterThan,"(return.owner.id, size(return.shared_with_groups[..]))",pm.expect(return_owner_id).to.be.greaterThan(return_shared_with_groups_size_array),get+projects,,1.0,,Represents an invariant of > between two long scalars. Prints as x > y.,,owner.id,GitLab Commit API
/projects&/projects&get&200():::EXIT,return.owner.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.owner.name, return.name_with_namespace)",pm.expect(return_name_with_namespace.includes(return_owner_name)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,name_with_namespace,GitLab Commit API
/projects&/projects&get&200():::EXIT,return.owner.name is a substring of return.avatar_url,daikon.inv.binary.twoString.StdString$SubString,"(return.owner.name, return.avatar_url)",pm.expect(return_avatar_url.includes(return_owner_name)).to.be.true,get+projects,,1.0,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,owner.name,GitLab Commit API
/projects&/projects&get&200():::EXIT,return.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.name, return.name_with_namespace)",pm.expect(return_name_with_namespace.includes(return_name)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,name_with_namespace,GitLab Commit API
/projects&/projects&get&200():::EXIT,return.namespace.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.name_with_namespace, return.namespace.name)",pm.expect(return_name_with_namespace.includes(return_namespace_name)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,name_with_namespace,GitLab Commit API
/projects&/projects&get&200():::EXIT,return.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path, return.path_with_namespace)",pm.expect(return_path_with_namespace.includes(return_path)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Commit API
/projects&/projects&get&200():::EXIT,return.namespace.full_path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path_with_namespace, return.namespace.full_path)",pm.expect(return_path_with_namespace.includes(return_namespace_full_path)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Commit API
/projects&/projects&get&200():::EXIT,return.open_issues_count >= return.statistics.lfs_objects_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.open_issues_count, return.statistics.lfs_objects_size)",pm.expect(return_open_issues_count).to.be.at.least(return_statistics_lfs_objects_size),get+projects,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,open_issues_count,GitLab Commit API
/projects&/projects&get&200():::EXIT,return.creator_id >= size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.creator_id, size(return.shared_with_groups[..]))",pm.expect(return_creator_id).to.be.at.least(return_shared_with_groups_size_array),get+projects,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,creator_id,GitLab Commit API
/projects&/projects&get&200():::EXIT,return.namespace.id > size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntGreaterThan,"(return.namespace.id, size(return.shared_with_groups[..]))",pm.expect(return_namespace_id).to.be.greaterThan(return_shared_with_groups_size_array),get+projects,,1.0,,Represents an invariant of > between two long scalars. Prints as x > y.,,namespace.id,GitLab Commit API
/projects&/projects&get&200():::EXIT,return.namespace.path is a substring of return.namespace.full_path,daikon.inv.binary.twoString.StdString$SubString,"(return.namespace.path, return.namespace.full_path)",pm.expect(return_namespace_full_path.includes(return_namespace_path)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,namespace.path,GitLab Commit API
/projects&/projects&get&200():::EXIT,return.permissions.group_access.notification_level >= return.forks_count,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.permissions.group_access.notification_level, return.forks_count)",pm.expect(return_permissions_group_access_notification_level).to.be.at.least(return_forks_count),get+projects,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,permissions.group_access.notification_level,GitLab Commit API
/projects&/projects&get&200():::EXIT,return.permissions.group_access.notification_level >= size(return.tag_list[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.permissions.group_access.notification_level, size(return.tag_list[..]))",pm.expect(return_permissions_group_access_notification_level).to.be.at.least(return_tag_list_size_array),get+projects,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,tag_list,GitLab Commit API
/projects&/projects&get&200():::EXIT,return.forks_count >= return.statistics.lfs_objects_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.forks_count, return.statistics.lfs_objects_size)",pm.expect(return_forks_count).to.be.at.least(return_statistics_lfs_objects_size),get+projects,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,forks_count,GitLab Commit API
/projects&/projects&get&200():::EXIT,return.star_count >= return.statistics.lfs_objects_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.star_count, return.statistics.lfs_objects_size)",pm.expect(return_star_count).to.be.at.least(return_statistics_lfs_objects_size),get+projects,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,star_count,GitLab Commit API
/projects&/projects&get&200():::EXIT,return.statistics.commit_count >= return.statistics.lfs_objects_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.commit_count, return.statistics.lfs_objects_size)",pm.expect(return_statistics_commit_count).to.be.at.least(return_statistics_lfs_objects_size),get+projects,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,statistics.commit_count,GitLab Commit API
/projects&/projects&get&200():::EXIT,return.statistics.commit_count >= size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.commit_count, size(return.shared_with_groups[..]))",pm.expect(return_statistics_commit_count).to.be.at.least(return_shared_with_groups_size_array),get+projects,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,statistics.commit_count,GitLab Commit API
/projects&/projects&get&200():::EXIT,return.statistics.storage_size >= return.statistics.repository_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.storage_size, return.statistics.repository_size)",pm.expect(return_statistics_storage_size).to.be.at.least(return_statistics_repository_size),get+projects,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,statistics.storage_size,GitLab Commit API
/projects&/projects&get&200():::EXIT,return.statistics.storage_size >= return.statistics.wiki_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.storage_size, return.statistics.wiki_size)",pm.expect(return_statistics_storage_size).to.be.at.least(return_statistics_wiki_size),get+projects,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,statistics.storage_size,GitLab Commit API
/projects&/projects&get&200():::EXIT,return.statistics.storage_size >= return.statistics.lfs_objects_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.storage_size, return.statistics.lfs_objects_size)",pm.expect(return_statistics_storage_size).to.be.at.least(return_statistics_lfs_objects_size),get+projects,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,statistics.storage_size,GitLab Commit API
/projects&/projects&get&200():::EXIT,return.statistics.storage_size >= size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.storage_size, size(return.shared_with_groups[..]))",pm.expect(return_statistics_storage_size).to.be.at.least(return_shared_with_groups_size_array),get+projects,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,statistics.storage_size,GitLab Commit API
/projects&/projects&get&200():::EXIT,return.statistics.repository_size >= return.statistics.lfs_objects_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.repository_size, return.statistics.lfs_objects_size)",pm.expect(return_statistics_repository_size).to.be.at.least(return_statistics_lfs_objects_size),get+projects,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,statistics.repository_size,GitLab Commit API
/projects&/projects&get&200():::EXIT,return.statistics.repository_size >= size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.repository_size, size(return.shared_with_groups[..]))",pm.expect(return_statistics_repository_size).to.be.at.least(return_shared_with_groups_size_array),get+projects,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,statistics.repository_size,GitLab Commit API
/projects&/projects&get&200():::EXIT,return.statistics.wiki_size >= return.statistics.lfs_objects_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.wiki_size, return.statistics.lfs_objects_size)",pm.expect(return_statistics_wiki_size).to.be.at.least(return_statistics_lfs_objects_size),get+projects,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,statistics.wiki_size,GitLab Commit API
/projects&/projects&get&200():::EXIT,return.statistics.lfs_objects_size <= size(return.tag_list[]),daikon.inv.binary.twoScalar.IntLessEqual,"(return.statistics.lfs_objects_size, size(return.tag_list[..]))",pm.expect(return_statistics_lfs_objects_size).to.be.lte(return_tag_list_size_array),get+projects,,1.0,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,tag_list,GitLab Commit API
/projects&/projects&get&200():::EXIT,return.statistics.lfs_objects_size <= size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntLessEqual,"(return.statistics.lfs_objects_size, size(return.shared_with_groups[..]))",pm.expect(return_statistics_lfs_objects_size).to.be.lte(return_shared_with_groups_size_array),get+projects,,1.0,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,statistics.lfs_objects_size,GitLab Commit API
/projects&/projects&get&200():::EXIT,return._links.self is a substring of return._links.issues,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.issues)",pm.expect(return__links_issues.includes(return__links_self)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Commit API
/projects&/projects&get&200():::EXIT,return._links.self is a substring of return._links.merge_requests,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.merge_requests)",pm.expect(return__links_merge_requests.includes(return__links_self)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Commit API
/projects&/projects&get&200():::EXIT,return._links.self is a substring of return._links.repo_branches,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.repo_branches)",pm.expect(return__links_repo_branches.includes(return__links_self)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Commit API
/projects&/projects&get&200():::EXIT,return._links.self is a substring of return._links.labels,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.labels)",pm.expect(return__links_labels.includes(return__links_self)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Commit API
/projects&/projects&get&200():::EXIT,return._links.self is a substring of return._links.events,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.events)",pm.expect(return__links_events.includes(return__links_self)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Commit API
/projects&/projects&get&200():::EXIT,return._links.self is a substring of return._links.members,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.members)",pm.expect(return__links_members.includes(return__links_self)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Commit API
/projects&/projects&post&201():::EXIT,input.allow_merge_on_skipped_pipeline == return.allow_merge_on_skipped_pipeline,daikon.inv.binary.twoScalar.IntEqual,"(input.allow_merge_on_skipped_pipeline, return.allow_merge_on_skipped_pipeline)",pm.expect(input_allow_merge_on_skipped_pipeline).to.eql(return_allow_merge_on_skipped_pipeline),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,allow_merge_on_skipped_pipeline,GitLab Commit API
/projects&/projects&post&201():::EXIT,input.auto_devops_deploy_strategy == return.auto_devops_deploy_strategy,daikon.inv.binary.twoString.StringEqual,"(input.auto_devops_deploy_strategy, return.auto_devops_deploy_strategy)",pm.expect(input_auto_devops_deploy_strategy).to.eql(return_auto_devops_deploy_strategy),post+projects,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,auto_devops_deploy_strategy,GitLab Commit API
/projects&/projects&post&201():::EXIT,input.auto_devops_enabled == return.auto_devops_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.auto_devops_enabled, return.auto_devops_enabled)",pm.expect(input_auto_devops_enabled).to.eql(return_auto_devops_enabled),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,auto_devops_enabled,GitLab Commit API
/projects&/projects&post&201():::EXIT,input.autoclose_referenced_issues == return.autoclose_referenced_issues,daikon.inv.binary.twoScalar.IntEqual,"(input.autoclose_referenced_issues, return.autoclose_referenced_issues)",pm.expect(input_autoclose_referenced_issues).to.eql(return_autoclose_referenced_issues),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,autoclose_referenced_issues,GitLab Commit API
/projects&/projects&post&201():::EXIT,input.container_registry_enabled == return.container_registry_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.container_registry_enabled, return.container_registry_enabled)",pm.expect(input_container_registry_enabled).to.eql(return_container_registry_enabled),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,container_registry_enabled,GitLab Commit API
/projects&/projects&post&201():::EXIT,input.description == return.description,daikon.inv.binary.twoString.StringEqual,"(input.description, return.description)",pm.expect(input_description).to.eql(return_description),post+projects,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,description,GitLab Commit API
/projects&/projects&post&201():::EXIT,input.merge_method == return.merge_method,daikon.inv.binary.twoString.StringEqual,"(input.merge_method, return.merge_method)",pm.expect(input_merge_method).to.eql(return_merge_method),post+projects,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,merge_method,GitLab Commit API
/projects&/projects&post&201():::EXIT,input.name == return.name,daikon.inv.binary.twoString.StringEqual,"(input.name, return.name)",pm.expect(input_name).to.eql(return_name),post+projects,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,name,GitLab Commit API
/projects&/projects&post&201():::EXIT,input.namespace_id == return.namespace.id,daikon.inv.binary.twoScalar.IntEqual,"(input.namespace_id, return.namespace.id)",pm.expect(input_namespace_id).to.eql(return_namespace_id),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,namespace.id,GitLab Commit API
/projects&/projects&post&201():::EXIT,input.only_allow_merge_if_all_discussions_are_resolved == return.only_allow_merge_if_all_discussions_are_resolved,daikon.inv.binary.twoScalar.IntEqual,"(input.only_allow_merge_if_all_discussions_are_resolved, return.only_allow_merge_if_all_discussions_are_resolved)",pm.expect(input_only_allow_merge_if_all_discussions_are_resolved).to.eql(return_only_allow_merge_if_all_discussions_are_resolved),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,only_allow_merge_if_all_discussions_are_resolved,GitLab Commit API
/projects&/projects&post&201():::EXIT,input.only_allow_merge_if_pipeline_succeeds == return.only_allow_merge_if_pipeline_succeeds,daikon.inv.binary.twoScalar.IntEqual,"(input.only_allow_merge_if_pipeline_succeeds, return.only_allow_merge_if_pipeline_succeeds)",pm.expect(input_only_allow_merge_if_pipeline_succeeds).to.eql(return_only_allow_merge_if_pipeline_succeeds),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,only_allow_merge_if_pipeline_succeeds,GitLab Commit API
/projects&/projects&post&201():::EXIT,input.packages_enabled == return.packages_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.packages_enabled, return.packages_enabled)",pm.expect(input_packages_enabled).to.eql(return_packages_enabled),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,packages_enabled,GitLab Commit API
/projects&/projects&post&201():::EXIT,input.path == return.path,daikon.inv.binary.twoString.StringEqual,"(input.path, return.path)",pm.expect(input_path).to.eql(return_path),post+projects,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,path,GitLab Commit API
/projects&/projects&post&201():::EXIT,input.public_builds == return.public_jobs,daikon.inv.binary.twoScalar.IntEqual,"(input.public_builds, return.public_jobs)",pm.expect(input_public_builds).to.eql(return_public_jobs),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,public_jobs,GitLab Commit API
/projects&/projects&post&201():::EXIT,input.remove_source_branch_after_merge == return.remove_source_branch_after_merge,daikon.inv.binary.twoScalar.IntEqual,"(input.remove_source_branch_after_merge, return.remove_source_branch_after_merge)",pm.expect(input_remove_source_branch_after_merge).to.eql(return_remove_source_branch_after_merge),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,remove_source_branch_after_merge,GitLab Commit API
/projects&/projects&post&201():::EXIT,input.repository_storage == return.repository_storage,daikon.inv.binary.twoString.StringEqual,"(input.repository_storage, return.repository_storage)",pm.expect(input_repository_storage).to.eql(return_repository_storage),post+projects,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,repository_storage,GitLab Commit API
/projects&/projects&post&201():::EXIT,input.request_access_enabled == return.request_access_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.request_access_enabled, return.request_access_enabled)",pm.expect(input_request_access_enabled).to.eql(return_request_access_enabled),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,request_access_enabled,GitLab Commit API
/projects&/projects&post&201():::EXIT,input.resolve_outdated_diff_discussions == return.resolve_outdated_diff_discussions,daikon.inv.binary.twoScalar.IntEqual,"(input.resolve_outdated_diff_discussions, return.resolve_outdated_diff_discussions)",pm.expect(input_resolve_outdated_diff_discussions).to.eql(return_resolve_outdated_diff_discussions),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,resolve_outdated_diff_discussions,GitLab Commit API
/projects&/projects&post&201():::EXIT,input.shared_runners_enabled == return.shared_runners_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.shared_runners_enabled, return.shared_runners_enabled)",pm.expect(input_shared_runners_enabled).to.eql(return_shared_runners_enabled),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,shared_runners_enabled,GitLab Commit API
/projects&/projects&post&201():::EXIT,input.visibility == return.visibility,daikon.inv.binary.twoString.StringEqual,"(input.visibility, return.visibility)",pm.expect(input_visibility).to.eql(return_visibility),post+projects,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,visibility,GitLab Commit API
/projects&/projects&post&201():::EXIT,return.owner.id == return.creator_id,daikon.inv.binary.twoScalar.IntEqual,"(return.owner.id, return.creator_id)",pm.expect(return_owner_id).to.eql(return_creator_id),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,owner.id,GitLab Commit API
/projects&/projects&post&201():::EXIT,return.owner.name == return.namespace.name,daikon.inv.binary.twoString.StringEqual,"(return.owner.name, return.namespace.name)",pm.expect(return_owner_name).to.eql(return_namespace_name),post+projects,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,owner.name,GitLab Commit API
/projects&/projects&post&201():::EXIT,return.open_issues_count == return.forks_count,daikon.inv.binary.twoScalar.IntEqual,"(return.open_issues_count, return.forks_count)",pm.expect(return_open_issues_count).to.eql(return_forks_count),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,open_issues_count,GitLab Commit API
/projects&/projects&post&201():::EXIT,return.merge_requests_enabled == return.can_create_merge_request_in,daikon.inv.binary.twoScalar.IntEqual,"(return.merge_requests_enabled, return.can_create_merge_request_in)",pm.expect(return_merge_requests_enabled).to.eql(return_can_create_merge_request_in),post+projects,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,merge_requests_enabled,GitLab Commit API
/projects&/projects&post&201():::EXIT,return.archived == return.service_desk_enabled,daikon.inv.binary.twoScalar.IntEqual,"(return.archived, return.service_desk_enabled)",pm.expect(return_archived).to.eql(return_service_desk_enabled),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,archived,GitLab Commit API
/projects&/projects&post&201():::EXIT,return.forks_count == return.star_count,daikon.inv.binary.twoScalar.IntEqual,"(return.forks_count, return.star_count)",pm.expect(return_forks_count).to.eql(return_star_count),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,forks_count,GitLab Commit API
/projects&/projects&post&201():::EXIT,return.forks_count == size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntEqual,"(return.forks_count, size(return.shared_with_groups[..]))",pm.expect(return_forks_count).to.eql(return_shared_with_groups_size_array),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,forks_count,GitLab Commit API
/projects&/projects&post&201():::EXIT,return.forks_count == size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntEqual,"(return.forks_count, size(return.shared_with_groups[..]))",pm.expect(return_forks_count).to.eql(return_shared_with_groups_size_array),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,forks_count,GitLab Commit API
/projects&/projects&post&201():::EXIT,size(input.tag_list[]) == size(return.tag_list[]),daikon.inv.binary.twoScalar.IntEqual,"(size(input.tag_list[..]), size(return.tag_list[..]))",pm.expect(input_tag_list_size_array).to.eql(return_tag_list_size_array),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,tag_list,GitLab Commit API
/projects&/projects&post&201():::EXIT,"return.visibility one of { ""internal"", ""private"", ""public"" }",daikon.inv.unary.string.OneOfString,(return.visibility),"pm.expect([""internal"", ""private"", ""public""].includes(return_visibility)).to.be.true",post+projects,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,visibility,GitLab Commit API
/projects&/projects&post&201():::EXIT,return.open_issues_count == 0,daikon.inv.unary.scalar.OneOfScalar,(return.open_issues_count),pm.expect([0].includes(return_open_issues_count)).to.be.true,post+projects,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,open_issues_count,GitLab Commit API
/projects&/projects&post&201():::EXIT,LENGTH(return.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.created_at),pm.expect(return_created_at).to.have.length(24),post+projects,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,created_at,GitLab Commit API
/projects&/projects&post&201():::EXIT,return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.created_at),"pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",post+projects,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,created_at,GitLab Commit API
/projects&/projects&post&201():::EXIT,LENGTH(return.last_activity_at)==24,daikon.inv.unary.string.FixedLengthString,(return.last_activity_at),pm.expect(return_last_activity_at).to.have.length(24),post+projects,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,last_activity_at,GitLab Commit API
/projects&/projects&post&201():::EXIT,return.last_activity_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.last_activity_at),"pm.expect(return_last_activity_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",post+projects,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,last_activity_at,GitLab Commit API
/projects&/projects&post&201():::EXIT,return.namespace.id >= 1,daikon.inv.unary.scalar.LowerBound,(return.namespace.id),pm.expect(return_namespace_id).to.be.at.least(1),post+projects,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,namespace.id,GitLab Commit API
/projects&/projects&post&201():::EXIT,"return.namespace.kind one of { ""group"", ""user"" }",daikon.inv.unary.string.OneOfString,(return.namespace.kind),"pm.expect([""group"", ""user""].includes(return_namespace_kind)).to.be.true",post+projects,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,namespace.kind,GitLab Commit API
/projects&/projects&post&201():::EXIT,"return.import_status == ""none""",daikon.inv.unary.string.OneOfString,(return.import_status),"pm.expect([""none""].includes(return_import_status)).to.be.true",post+projects,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,import_status,GitLab Commit API
/projects&/projects&post&201():::EXIT,LENGTH(return.import_status)==4,daikon.inv.unary.string.FixedLengthString,(return.import_status),pm.expect(return_import_status).to.have.length(4),post+projects,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,import_status,GitLab Commit API
/projects&/projects&post&201():::EXIT,return.permissions == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions),pm.expect(return_permissions).to.be.null,post+projects,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,permissions,GitLab Commit API
/projects&/projects&post&201():::EXIT,return.permissions.project_access == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.project_access),pm.expect(return_permissions_project_access).to.be.null,post+projects,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,permissions.project_access,GitLab Commit API
/projects&/projects&post&201():::EXIT,return.permissions.group_access == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.group_access),pm.expect(return_permissions_group_access).to.be.null,post+projects,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,permissions.group_access,GitLab Commit API
/projects&/projects&post&201():::EXIT,return.archived == false,daikon.inv.unary.scalar.OneOfScalar,(return.archived),pm.expect(return_archived).to.eql(false),post+projects,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,archived,GitLab Commit API
/projects&/projects&post&201():::EXIT,LENGTH(return.runners_token)==29,daikon.inv.unary.string.FixedLengthString,(return.runners_token),pm.expect(return_runners_token).to.have.length(29),post+projects,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,runners_token,GitLab Commit API
/projects&/projects&post&201():::EXIT,return.ci_default_git_depth == 20,daikon.inv.unary.scalar.OneOfScalar,(return.ci_default_git_depth),pm.expect([20].includes(return_ci_default_git_depth)).to.be.true,post+projects,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,ci_default_git_depth,GitLab Commit API
/projects&/projects&post&201():::EXIT,return.ci_forward_deployment_enabled == true,daikon.inv.unary.scalar.OneOfScalar,(return.ci_forward_deployment_enabled),pm.expect(return_ci_forward_deployment_enabled).to.eql(true),post+projects,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,ci_forward_deployment_enabled,GitLab Commit API
/projects&/projects&post&201():::EXIT,return.shared_with_groups[] == [],daikon.inv.unary.sequence.OneOfSequence,(return.shared_with_groups[..]),pm.expect([[]].some(value => pm.expect(return_shared_with_groups_array).to.deep.equal(value).that)).to.be.true,post+projects,1.0,,,"Represents long[] variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,shared_with_groups,GitLab Commit API
/projects&/projects&post&201():::EXIT,"return.merge_method one of { ""ff"", ""merge"", ""rebase_merge"" }",daikon.inv.unary.string.OneOfString,(return.merge_method),"pm.expect([""ff"", ""merge"", ""rebase_merge""].includes(return_merge_method)).to.be.true",post+projects,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,merge_method,GitLab Commit API
/projects&/projects&post&201():::EXIT,"return.auto_devops_deploy_strategy one of { ""continuous"", ""manual"", ""timed_incremental"" }",daikon.inv.unary.string.OneOfString,(return.auto_devops_deploy_strategy),"pm.expect([""continuous"", ""manual"", ""timed_incremental""].includes(return_auto_devops_deploy_strategy)).to.be.true",post+projects,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,auto_devops_deploy_strategy,GitLab Commit API
/projects&/projects&post&201():::EXIT,"return.repository_storage == ""default""",daikon.inv.unary.string.OneOfString,(return.repository_storage),"pm.expect([""default""].includes(return_repository_storage)).to.be.true",post+projects,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,repository_storage,GitLab Commit API
/projects&/projects&post&201():::EXIT,LENGTH(return.repository_storage)==7,daikon.inv.unary.string.FixedLengthString,(return.repository_storage),pm.expect(return_repository_storage).to.have.length(7),post+projects,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,repository_storage,GitLab Commit API
/projects&/projects&post&201():::EXIT,return.statistics == null,daikon.inv.unary.scalar.OneOfScalar,(return.statistics),pm.expect(return_statistics).to.be.null,post+projects,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,statistics,GitLab Commit API
/projects&/projects&post&201():::EXIT,input.default_branch is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(input.default_branch, return.readme_url)",pm.expect(return_readme_url.includes(input_default_branch)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,readme_url,GitLab Commit API
/projects&/projects&post&201():::EXIT,input.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(input.name, return.name_with_namespace)",pm.expect(return_name_with_namespace.includes(input_name)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,name_with_namespace,GitLab Commit API
/projects&/projects&post&201():::EXIT,input.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(input.path, return.path_with_namespace)",pm.expect(return_path_with_namespace.includes(input_path)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Commit API
/projects&/projects&post&201():::EXIT,return.id > return.namespace.id,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.id, return.namespace.id)",pm.expect(return_id).to.be.greaterThan(return_namespace_id),post+projects,,1.0,,Represents an invariant of > between two long scalars. Prints as x > y.,,id,GitLab Commit API
/projects&/projects&post&201():::EXIT,return.default_branch is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.default_branch, return.readme_url)",pm.expect(return_readme_url.includes(return_default_branch)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,default_branch,GitLab Commit API
/projects&/projects&post&201():::EXIT,return.path_with_namespace is a substring of return.ssh_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.ssh_url_to_repo, return.path_with_namespace)",pm.expect(return_ssh_url_to_repo.includes(return_path_with_namespace)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Commit API
/projects&/projects&post&201():::EXIT,return.web_url is a substring of return.http_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.http_url_to_repo, return.web_url)",pm.expect(return_http_url_to_repo.includes(return_web_url)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,web_url,GitLab Commit API
/projects&/projects&post&201():::EXIT,return.web_url is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.readme_url)",pm.expect(return_readme_url.includes(return_web_url)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,web_url,GitLab Commit API
/projects&/projects&post&201():::EXIT,return.path_with_namespace is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.path_with_namespace)",pm.expect(return_web_url.includes(return_path_with_namespace)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Commit API
/projects&/projects&post&201():::EXIT,return.owner.id <= return.namespace.id,daikon.inv.binary.twoScalar.IntLessEqual,"(return.owner.id, return.namespace.id)",pm.expect(return_owner_id).to.be.lte(return_namespace_id),post+projects,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,owner.id,GitLab Commit API
/projects&/projects&post&201():::EXIT,return.owner.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.owner.name, return.name_with_namespace)",pm.expect(return_name_with_namespace.includes(return_owner_name)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,name_with_namespace,GitLab Commit API
/projects&/projects&post&201():::EXIT,return.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.name, return.name_with_namespace)",pm.expect(return_name_with_namespace.includes(return_name)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,name_with_namespace,GitLab Commit API
/projects&/projects&post&201():::EXIT,return.namespace.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.name_with_namespace, return.namespace.name)",pm.expect(return_name_with_namespace.includes(return_namespace_name)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,name_with_namespace,GitLab Commit API
/projects&/projects&post&201():::EXIT,return.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path, return.path_with_namespace)",pm.expect(return_path_with_namespace.includes(return_path)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Commit API
/projects&/projects&post&201():::EXIT,return.namespace.full_path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path_with_namespace, return.namespace.full_path)",pm.expect(return_path_with_namespace.includes(return_namespace_full_path)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,path_with_namespace,GitLab Commit API
/projects&/projects&post&201():::EXIT,return.open_issues_count <= size(return.tag_list[]),daikon.inv.binary.twoScalar.IntLessEqual,"(return.open_issues_count, size(return.tag_list[..]))",pm.expect(return_open_issues_count).to.be.lte(return_tag_list_size_array),post+projects,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,tag_list,GitLab Commit API
/projects&/projects&post&201():::EXIT,return.creator_id <= return.namespace.id,daikon.inv.binary.twoScalar.IntLessEqual,"(return.creator_id, return.namespace.id)",pm.expect(return_creator_id).to.be.lte(return_namespace_id),post+projects,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,creator_id,GitLab Commit API
/projects&/projects&post&201():::EXIT,return.namespace.path is a substring of return.namespace.full_path,daikon.inv.binary.twoString.StdString$SubString,"(return.namespace.path, return.namespace.full_path)",pm.expect(return_namespace_full_path.includes(return_namespace_path)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,namespace.path,GitLab Commit API
/projects&/projects&post&201():::EXIT,return.forks_count <= size(return.tag_list[]),daikon.inv.binary.twoScalar.IntLessEqual,"(return.forks_count, size(return.tag_list[..]))",pm.expect(return_forks_count).to.be.lte(return_tag_list_size_array),post+projects,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,tag_list,GitLab Commit API
/projects&/projects&post&201():::EXIT,return._links.self is a substring of return._links.issues,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.issues)",pm.expect(return__links_issues.includes(return__links_self)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Commit API
/projects&/projects&post&201():::EXIT,return._links.self is a substring of return._links.merge_requests,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.merge_requests)",pm.expect(return__links_merge_requests.includes(return__links_self)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Commit API
/projects&/projects&post&201():::EXIT,return._links.self is a substring of return._links.repo_branches,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.repo_branches)",pm.expect(return__links_repo_branches.includes(return__links_self)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Commit API
/projects&/projects&post&201():::EXIT,return._links.self is a substring of return._links.labels,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.labels)",pm.expect(return__links_labels.includes(return__links_self)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Commit API
/projects&/projects&post&201():::EXIT,return._links.self is a substring of return._links.events,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.events)",pm.expect(return__links_events.includes(return__links_self)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Commit API
/projects&/projects&post&201():::EXIT,return._links.self is a substring of return._links.members,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.members)",pm.expect(return__links_members.includes(return__links_self)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,_links.self,GitLab Commit API
