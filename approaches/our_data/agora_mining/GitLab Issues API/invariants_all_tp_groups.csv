endpoint,group,invariant,invariantType,variables,pptname,tp
get+groups,array,input.per_page >= size(return.array[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(input.per_page, size(return.array[..]))",/groups&/groups&get&200%array():::EXIT,1.0
get+groups,auto_devops_enabled,"return.auto_devops_enabled one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.auto_devops_enabled),/groups&/groups&get&200():::EXIT,1.0
get+groups,created_at,"LENGTH(return.created_at)==24
return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.created_at)
(return.created_at)","/groups&/groups&get&200():::EXIT
/groups&/groups&get&200():::EXIT",1.0
get+groups,default_branch_protection,"return.default_branch_protection one of { 0, 1, 2 }",daikon.inv.unary.scalar.OneOfScalar,(return.default_branch_protection),/groups&/groups&get&200():::EXIT,1.0
get+groups,emails_disabled,"return.emails_disabled one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.emails_disabled),/groups&/groups&get&200():::EXIT,1.0
get+groups,full_path,"return.path is a substring of return.full_path
return.full_path is a substring of return.web_url","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return.full_path, return.path)
(return.full_path, return.web_url)","/groups&/groups&get&200():::EXIT
/groups&/groups&get&200():::EXIT",1.0
get+groups,mentions_disabled,"return.mentions_disabled one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.mentions_disabled),/groups&/groups&get&200():::EXIT,1.0
get+groups,name,return.name is a substring of return.full_name,daikon.inv.binary.twoString.StdString$SubString,"(return.full_name, return.name)",/groups&/groups&get&200():::EXIT,1.0
get+groups,project_creation_level,"return.project_creation_level one of { ""developer"", ""maintainer"", ""noone"" }",daikon.inv.unary.string.OneOfString,(return.project_creation_level),/groups&/groups&get&200():::EXIT,1.0
get+groups,statistics.job_artifacts_size,"return.statistics.job_artifacts_size == return.statistics.lfs_objects_size
return.statistics.job_artifacts_size == return.statistics.packages_size
return.statistics.job_artifacts_size == return.statistics.snippets_size
return.statistics.job_artifacts_size == 0
return.default_branch_protection >= return.statistics.job_artifacts_size
return.statistics.job_artifacts_size <= return.statistics.repository_size
return.statistics.job_artifacts_size <= return.statistics.wiki_size
return.statistics.job_artifacts_size <= return.two_factor_grace_period","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.OneOfScalar
daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual","(return.statistics.job_artifacts_size, return.statistics.lfs_objects_size)
(return.statistics.job_artifacts_size, return.statistics.packages_size)
(return.statistics.job_artifacts_size, return.statistics.snippets_size)
(return.statistics.job_artifacts_size)
(return.default_branch_protection, return.statistics.job_artifacts_size)
(return.statistics.job_artifacts_size, return.statistics.repository_size)
(return.statistics.job_artifacts_size, return.statistics.wiki_size)
(return.statistics.job_artifacts_size, return.two_factor_grace_period)","/groups&/groups&get&200():::EXIT
/groups&/groups&get&200():::EXIT
/groups&/groups&get&200():::EXIT
/groups&/groups&get&200():::EXIT
/groups&/groups&get&200():::EXIT
/groups&/groups&get&200():::EXIT
/groups&/groups&get&200():::EXIT
/groups&/groups&get&200():::EXIT",1.0
get+groups,statistics.repository_size,"return.statistics.repository_size >= 0
return.statistics.repository_size >= return.statistics.wiki_size","daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.statistics.repository_size)
(return.statistics.repository_size, return.statistics.wiki_size)","/groups&/groups&get&200():::EXIT
/groups&/groups&get&200():::EXIT",1.0
get+groups,statistics.storage_size,"return.statistics.storage_size >= 0
return.statistics.job_artifacts_size <= return.statistics.storage_size
return.statistics.repository_size <= return.statistics.storage_size
return.statistics.storage_size >= return.statistics.wiki_size","daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.statistics.storage_size)
(return.statistics.job_artifacts_size, return.statistics.storage_size)
(return.statistics.repository_size, return.statistics.storage_size)
(return.statistics.storage_size, return.statistics.wiki_size)","/groups&/groups&get&200():::EXIT
/groups&/groups&get&200():::EXIT
/groups&/groups&get&200():::EXIT
/groups&/groups&get&200():::EXIT",1.0
get+groups,statistics.wiki_size,return.statistics.wiki_size >= 0,daikon.inv.unary.scalar.LowerBound,(return.statistics.wiki_size),/groups&/groups&get&200():::EXIT,1.0
get+groups,subgroup_creation_level,"return.subgroup_creation_level one of { ""maintainer"", ""owner"" }",daikon.inv.unary.string.OneOfString,(return.subgroup_creation_level),/groups&/groups&get&200():::EXIT,1.0
get+groups,two_factor_grace_period,return.two_factor_grace_period >= 0,daikon.inv.unary.scalar.LowerBound,(return.two_factor_grace_period),/groups&/groups&get&200():::EXIT,1.0
get+groups,visibility,"return.visibility one of { ""internal"", ""private"", ""public"" }",daikon.inv.unary.string.OneOfString,(return.visibility),/groups&/groups&get&200():::EXIT,1.0
get+groups_{id}_issues,_links.self,"return._links.self is a substring of return._links.award_emoji
return._links.self is a substring of return._links.notes
return._links.project is a substring of return._links.self","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return._links.award_emoji, return._links.self)
(return._links.notes, return._links.self)
(return._links.project, return._links.self)","/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT",1.0
get+groups_{id}_issues,assignee.state,"return.assignee.state == return.author.state
return.assignee.state == ""active""
LENGTH(return.assignee.state)==6","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.assignee.state, return.author.state)
(return.assignee.state)
(return.assignee.state)","/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT",1.0
get+groups_{id}_issues,assignee.web_url,return.assignee.username is a substring of return.assignee.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.assignee.web_url, return.assignee.username)",/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,1.0
get+groups_{id}_issues,assignees.web_url,return.username is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.username)",/groups/{id}/issues&/groups/{id}/issues&get&200&assignees():::EXIT,1.0
get+groups_{id}_issues,author.state,"return.author.state == return.closed_by.state
return.author.state == ""active""
LENGTH(return.author.state)==6","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.author.state, return.closed_by.state)
(return.author.state)
(return.author.state)","/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT",1.0
get+groups_{id}_issues,author.web_url,return.author.username is a substring of return.author.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.author.web_url, return.author.username)",/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,1.0
get+groups_{id}_issues,closed_by.state,"return.closed_by.state == ""active""
LENGTH(return.closed_by.state)==6","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.closed_by.state)
(return.closed_by.state)","/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT",1.0
get+groups_{id}_issues,confidential,input.confidential == return.confidential,daikon.inv.binary.twoScalar.IntEqual,"(input.confidential, return.confidential)",/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,1.0
get+groups_{id}_issues,created_at,"LENGTH(return.created_at)==24
return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.created_at)
(return.created_at)","/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT",1.0
get+groups_{id}_issues,downvotes,"return.downvotes == return.merge_requests_count
return.downvotes == return.task_completion_status.count
return.downvotes == return.task_completion_status.completed_count
return.downvotes == return.upvotes
return.downvotes == return.user_notes_count
return.downvotes == 0
return.downvotes <= return.time_stats.time_estimate
return.downvotes <= return.time_stats.total_time_spent
return.downvotes <= size(return.assignees[])","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.OneOfScalar
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual","(return.downvotes, return.merge_requests_count)
(return.downvotes, return.task_completion_status.count)
(return.downvotes, return.task_completion_status.completed_count)
(return.downvotes, return.upvotes)
(return.downvotes, return.user_notes_count)
(return.downvotes)
(return.downvotes, return.time_stats.time_estimate)
(return.downvotes, return.time_stats.total_time_spent)
(return.downvotes, size(return.assignees[..]))","/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT",1.0
get+groups_{id}_issues,due_date,return.due_date is a Date. Format: YYYY/MM/DD,daikon.inv.unary.string.dates.IsDateYYYYMMDD,(return.due_date),/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,1.0
get+groups_{id}_issues,has_tasks,return.has_tasks == false,daikon.inv.unary.scalar.OneOfScalar,(return.has_tasks),/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,1.0
get+groups_{id}_issues,iid,"return.iid >= 1
return.iid >= size(input.assignee_username[])
return.iid >= size(return.assignees[])","daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.iid)
(return.iid, size(input.assignee_username[..]))
(return.iid, size(return.assignees[..]))","/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT",1.0
get+groups_{id}_issues,milestone,return.milestone == null,daikon.inv.unary.scalar.OneOfScalar,(return.milestone),/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,1.0
get+groups_{id}_issues,references.full,return.references.relative is a substring of return.references.full,daikon.inv.binary.twoString.StdString$SubString,"(return.references.full, return.references.relative)",/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,1.0
get+groups_{id}_issues,references.relative,return.references.short is a substring of return.references.relative,daikon.inv.binary.twoString.StdString$SubString,"(return.references.relative, return.references.short)",/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,1.0
get+groups_{id}_issues,state,"input.state == return.state
return.state one of { ""closed"", ""opened"" }
LENGTH(return.state)==6","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(input.state, return.state)
(return.state)
(return.state)","/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT",1.0
get+groups_{id}_issues,time_stats.time_estimate,return.time_stats.time_estimate >= 0,daikon.inv.unary.scalar.LowerBound,(return.time_stats.time_estimate),/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,1.0
get+groups_{id}_issues,time_stats.total_time_spent,return.time_stats.total_time_spent >= 0,daikon.inv.unary.scalar.LowerBound,(return.time_stats.total_time_spent),/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,1.0
get+groups_{id}_issues,updated_at,"LENGTH(return.updated_at)==24
return.updated_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.updated_at)
(return.updated_at)","/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT",1.0
get+issues,_links.self,"return._links.self is a substring of return._links.award_emoji
return._links.self is a substring of return._links.notes
return._links.project is a substring of return._links.self","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return._links.award_emoji, return._links.self)
(return._links.notes, return._links.self)
(return._links.project, return._links.self)","/issues&/issues&get&200():::EXIT
/issues&/issues&get&200():::EXIT
/issues&/issues&get&200():::EXIT",1.0
get+issues,assignee.avatar_url,"LENGTH(return.assignee.avatar_url)==81
return.assignee.avatar_url is Url","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.IsUrl","(return.assignee.avatar_url)
(return.assignee.avatar_url)","/issues&/issues&get&200():::EXIT
/issues&/issues&get&200():::EXIT",1.0
get+issues,assignee.state,"return.assignee.state == return.author.state
return.assignee.state == return.closed_by.state
return.assignee.state == ""active""
LENGTH(return.assignee.state)==6","daikon.inv.binary.twoString.StringEqual
daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.assignee.state, return.author.state)
(return.assignee.state, return.closed_by.state)
(return.assignee.state)
(return.assignee.state)","/issues&/issues&get&200():::EXIT
/issues&/issues&get&200():::EXIT
/issues&/issues&get&200():::EXIT
/issues&/issues&get&200():::EXIT",1.0
get+issues,assignee.web_url,return.assignee.username is a substring of return.assignee.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.assignee.web_url, return.assignee.username)",/issues&/issues&get&200():::EXIT,1.0
get+issues,assignees.web_url,return.username is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.username)",/issues&/issues&get&200&assignees():::EXIT,1.0
get+issues,author.avatar_url,"LENGTH(return.author.avatar_url)==81
return.author.avatar_url is Url","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.IsUrl","(return.author.avatar_url)
(return.author.avatar_url)","/issues&/issues&get&200():::EXIT
/issues&/issues&get&200():::EXIT",1.0
get+issues,author.state,"return.author.state == return.closed_by.state
return.author.state == ""active""
LENGTH(return.author.state)==6","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.author.state, return.closed_by.state)
(return.author.state)
(return.author.state)","/issues&/issues&get&200():::EXIT
/issues&/issues&get&200():::EXIT
/issues&/issues&get&200():::EXIT",1.0
get+issues,author.web_url,return.author.username is a substring of return.author.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.author.web_url, return.author.username)",/issues&/issues&get&200():::EXIT,1.0
get+issues,closed_at,"LENGTH(return.closed_at)==24
return.closed_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.closed_at)
(return.closed_at)","/issues&/issues&get&200():::EXIT
/issues&/issues&get&200():::EXIT",1.0
get+issues,closed_by.avatar_url,"LENGTH(return.closed_by.avatar_url)==81
return.closed_by.avatar_url is Url","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.IsUrl","(return.closed_by.avatar_url)
(return.closed_by.avatar_url)","/issues&/issues&get&200():::EXIT
/issues&/issues&get&200():::EXIT",1.0
get+issues,closed_by.state,"return.closed_by.state == ""active""
LENGTH(return.closed_by.state)==6","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.closed_by.state)
(return.closed_by.state)","/issues&/issues&get&200():::EXIT
/issues&/issues&get&200():::EXIT",1.0
get+issues,closed_by.username,return.closed_by.username is a substring of return.closed_by.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.closed_by.username, return.closed_by.web_url)",/issues&/issues&get&200():::EXIT,1.0
get+issues,confidential,input.confidential == return.confidential,daikon.inv.binary.twoScalar.IntEqual,"(input.confidential, return.confidential)",/issues&/issues&get&200():::EXIT,1.0
get+issues,created_at,"LENGTH(return.created_at)==24
return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.created_at)
(return.created_at)","/issues&/issues&get&200():::EXIT
/issues&/issues&get&200():::EXIT",1.0
get+issues,downvotes,"return.downvotes == return.merge_requests_count
return.downvotes == return.task_completion_status.count
return.downvotes == return.task_completion_status.completed_count
return.downvotes == return.upvotes
return.downvotes == return.user_notes_count
return.downvotes == 0
return.downvotes <= return.time_stats.time_estimate
return.downvotes <= return.time_stats.total_time_spent
return.downvotes <= size(return.assignees[])","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.OneOfScalar
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual","(return.downvotes, return.merge_requests_count)
(return.downvotes, return.task_completion_status.count)
(return.downvotes, return.task_completion_status.completed_count)
(return.downvotes, return.upvotes)
(return.downvotes, return.user_notes_count)
(return.downvotes)
(return.downvotes, return.time_stats.time_estimate)
(return.downvotes, return.time_stats.total_time_spent)
(return.downvotes, size(return.assignees[..]))","/issues&/issues&get&200():::EXIT
/issues&/issues&get&200():::EXIT
/issues&/issues&get&200():::EXIT
/issues&/issues&get&200():::EXIT
/issues&/issues&get&200():::EXIT
/issues&/issues&get&200():::EXIT
/issues&/issues&get&200():::EXIT
/issues&/issues&get&200():::EXIT
/issues&/issues&get&200():::EXIT",1.0
get+issues,due_date,return.due_date is a Date. Format: YYYY/MM/DD,daikon.inv.unary.string.dates.IsDateYYYYMMDD,(return.due_date),/issues&/issues&get&200():::EXIT,1.0
get+issues,has_tasks,return.has_tasks == false,daikon.inv.unary.scalar.OneOfScalar,(return.has_tasks),/issues&/issues&get&200():::EXIT,1.0
get+issues,iid,"return.iid == input.iids[][return.closed_by.id]
return.iid >= 1
return.iid in input.iids[][]
return.iid >= size(input.assignee_username[])
return.iid >= size(return.assignees[])","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.sequenceScalar.Member
daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.iid, input.iids[][return.closed_by.id])
(return.iid)
(input.iids[][..], return.iid)
(return.iid, size(input.assignee_username[..]))
(return.iid, size(return.assignees[..]))","/issues&/issues&get&200():::EXIT
/issues&/issues&get&200():::EXIT
/issues&/issues&get&200():::EXIT
/issues&/issues&get&200():::EXIT
/issues&/issues&get&200():::EXIT",1.0
get+issues,input.iids[][closed_by.id -1],input.iids[][return.closed_by.id -1] == input.iids[][return.downvotes],daikon.inv.binary.twoScalar.IntEqual,"(input.iids[][return.closed_by.id -1], input.iids[][return.downvotes])",/issues&/issues&get&200():::EXIT,1.0
get+issues,input.iids[][downvotes],input.iids[][return.downvotes] == input.iids[][return.time_stats.time_estimate],daikon.inv.binary.twoScalar.IntEqual,"(input.iids[][return.downvotes], input.iids[][return.time_stats.time_estimate])",/issues&/issues&get&200():::EXIT,1.0
get+issues,milestone,return.milestone == null,daikon.inv.unary.scalar.OneOfScalar,(return.milestone),/issues&/issues&get&200():::EXIT,1.0
get+issues,references.full,return.references.relative is a substring of return.references.full,daikon.inv.binary.twoString.StdString$SubString,"(return.references.full, return.references.relative)",/issues&/issues&get&200():::EXIT,1.0
get+issues,references.relative,return.references.relative == return.references.short,daikon.inv.binary.twoString.StringEqual,"(return.references.relative, return.references.short)",/issues&/issues&get&200():::EXIT,1.0
get+issues,state,"return.state one of { ""closed"", ""opened"" }
LENGTH(return.state)==6","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.state)
(return.state)","/issues&/issues&get&200():::EXIT
/issues&/issues&get&200():::EXIT",1.0
get+issues,time_stats.time_estimate,return.time_stats.time_estimate >= 0,daikon.inv.unary.scalar.LowerBound,(return.time_stats.time_estimate),/issues&/issues&get&200():::EXIT,1.0
get+issues,time_stats.total_time_spent,return.time_stats.total_time_spent >= 0,daikon.inv.unary.scalar.LowerBound,(return.time_stats.total_time_spent),/issues&/issues&get&200():::EXIT,1.0
get+issues,updated_at,"LENGTH(return.updated_at)==24
return.updated_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.updated_at)
(return.updated_at)","/issues&/issues&get&200():::EXIT
/issues&/issues&get&200():::EXIT",1.0
get+issues_{id},_links.self,"return._links.self is a substring of return._links.award_emoji
return._links.self is a substring of return._links.notes
return._links.project is a substring of return._links.self","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return._links.award_emoji, return._links.self)
(return._links.notes, return._links.self)
(return._links.project, return._links.self)","/issues/{id}&/issues/{id}&get&200():::EXIT
/issues/{id}&/issues/{id}&get&200():::EXIT
/issues/{id}&/issues/{id}&get&200():::EXIT",1.0
get+issues_{id},assignee.web_url,return.assignee.username is a substring of return.assignee.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.assignee.web_url, return.assignee.username)",/issues/{id}&/issues/{id}&get&200():::EXIT,1.0
get+issues_{id},assignees,"size(return.assignees[]) one of { 0, 1 }",daikon.inv.unary.scalar.OneOfScalar,(size(return.assignees[..])),/issues/{id}&/issues/{id}&get&200():::EXIT,1.0
get+issues_{id},assignees.state,"return.state == ""active""
LENGTH(return.state)==6","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.state)
(return.state)","/issues/{id}&/issues/{id}&get&200&assignees():::EXIT
/issues/{id}&/issues/{id}&get&200&assignees():::EXIT",1.0
get+issues_{id},assignees.web_url,return.username is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.username)",/issues/{id}&/issues/{id}&get&200&assignees():::EXIT,1.0
get+issues_{id},author.avatar_url,"LENGTH(return.author.avatar_url)==81
return.author.avatar_url is Url","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.IsUrl","(return.author.avatar_url)
(return.author.avatar_url)","/issues/{id}&/issues/{id}&get&200():::EXIT
/issues/{id}&/issues/{id}&get&200():::EXIT",1.0
get+issues_{id},author.id,"input.id > return.author.id
return.author.id >= size(return.assignees[])","daikon.inv.binary.twoScalar.IntGreaterThan
daikon.inv.binary.twoScalar.IntGreaterEqual","(input.id, return.author.id)
(return.author.id, size(return.assignees[..]))","/issues/{id}&/issues/{id}&get&200():::EXIT
/issues/{id}&/issues/{id}&get&200():::EXIT",1.0
get+issues_{id},author.state,"return.author.state == return.closed_by.state
return.author.state == ""active""
LENGTH(return.author.state)==6","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.author.state, return.closed_by.state)
(return.author.state)
(return.author.state)","/issues/{id}&/issues/{id}&get&200():::EXIT
/issues/{id}&/issues/{id}&get&200():::EXIT
/issues/{id}&/issues/{id}&get&200():::EXIT",1.0
get+issues_{id},author.web_url,return.author.username is a substring of return.author.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.author.web_url, return.author.username)",/issues/{id}&/issues/{id}&get&200():::EXIT,1.0
get+issues_{id},created_at,"LENGTH(return.created_at)==24
return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.created_at)
(return.created_at)","/issues/{id}&/issues/{id}&get&200():::EXIT
/issues/{id}&/issues/{id}&get&200():::EXIT",1.0
get+issues_{id},downvotes,"return.downvotes == return.merge_requests_count
return.downvotes == return.task_completion_status.count
return.downvotes == return.task_completion_status.completed_count
return.downvotes == return.upvotes
return.downvotes == return.user_notes_count
return.downvotes == 0
return.downvotes <= return.time_stats.time_estimate
return.downvotes <= return.time_stats.total_time_spent
return.downvotes <= size(return.assignees[])","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.OneOfScalar
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual","(return.downvotes, return.merge_requests_count)
(return.downvotes, return.task_completion_status.count)
(return.downvotes, return.task_completion_status.completed_count)
(return.downvotes, return.upvotes)
(return.downvotes, return.user_notes_count)
(return.downvotes)
(return.downvotes, return.time_stats.time_estimate)
(return.downvotes, return.time_stats.total_time_spent)
(return.downvotes, size(return.assignees[..]))","/issues/{id}&/issues/{id}&get&200():::EXIT
/issues/{id}&/issues/{id}&get&200():::EXIT
/issues/{id}&/issues/{id}&get&200():::EXIT
/issues/{id}&/issues/{id}&get&200():::EXIT
/issues/{id}&/issues/{id}&get&200():::EXIT
/issues/{id}&/issues/{id}&get&200():::EXIT
/issues/{id}&/issues/{id}&get&200():::EXIT
/issues/{id}&/issues/{id}&get&200():::EXIT
/issues/{id}&/issues/{id}&get&200():::EXIT",1.0
get+issues_{id},due_date,return.due_date is a Date. Format: YYYY/MM/DD,daikon.inv.unary.string.dates.IsDateYYYYMMDD,(return.due_date),/issues/{id}&/issues/{id}&get&200():::EXIT,1.0
get+issues_{id},has_tasks,return.has_tasks == false,daikon.inv.unary.scalar.OneOfScalar,(return.has_tasks),/issues/{id}&/issues/{id}&get&200():::EXIT,1.0
get+issues_{id},id,input.id == return.id,daikon.inv.binary.twoScalar.IntEqual,"(input.id, return.id)",/issues/{id}&/issues/{id}&get&200():::EXIT,1.0
get+issues_{id},milestone,return.milestone == null,daikon.inv.unary.scalar.OneOfScalar,(return.milestone),/issues/{id}&/issues/{id}&get&200():::EXIT,1.0
get+issues_{id},references.full,return.references.relative is a substring of return.references.full,daikon.inv.binary.twoString.StdString$SubString,"(return.references.full, return.references.relative)",/issues/{id}&/issues/{id}&get&200():::EXIT,1.0
get+issues_{id},references.relative,return.references.relative == return.references.short,daikon.inv.binary.twoString.StringEqual,"(return.references.relative, return.references.short)",/issues/{id}&/issues/{id}&get&200():::EXIT,1.0
get+issues_{id},state,"return.state one of { ""closed"", ""opened"" }
LENGTH(return.state)==6","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.state)
(return.state)","/issues/{id}&/issues/{id}&get&200():::EXIT
/issues/{id}&/issues/{id}&get&200():::EXIT",1.0
get+issues_{id},updated_at,"LENGTH(return.updated_at)==24
return.updated_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.updated_at)
(return.updated_at)","/issues/{id}&/issues/{id}&get&200():::EXIT
/issues/{id}&/issues/{id}&get&200():::EXIT",1.0
get+projects,_links.self,"return._links.self is a substring of return._links.issues
return._links.self is a substring of return._links.merge_requests
return._links.self is a substring of return._links.repo_branches
return._links.self is a substring of return._links.labels
return._links.self is a substring of return._links.events
return._links.self is a substring of return._links.members","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return._links.self, return._links.issues)
(return._links.self, return._links.merge_requests)
(return._links.self, return._links.repo_branches)
(return._links.self, return._links.labels)
(return._links.self, return._links.events)
(return._links.self, return._links.members)","/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT",1.0
get+projects,archived,input.archived == return.archived,daikon.inv.binary.twoScalar.IntEqual,"(input.archived, return.archived)",/projects&/projects&get&200():::EXIT,1.0
get+projects,auto_devops_deploy_strategy,"return.auto_devops_deploy_strategy one of { ""continuous"", ""manual"", ""timed_incremental"" }",daikon.inv.unary.string.OneOfString,(return.auto_devops_deploy_strategy),/projects&/projects&get&200():::EXIT,1.0
get+projects,created_at,"LENGTH(return.created_at)==24
return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.created_at)
(return.created_at)","/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT",1.0
get+projects,default_branch,return.default_branch is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.default_branch, return.readme_url)",/projects&/projects&get&200():::EXIT,1.0
get+projects,external_authorization_classification_label,"return.external_authorization_classification_label == """"
LENGTH(return.external_authorization_classification_label)==0","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.external_authorization_classification_label)
(return.external_authorization_classification_label)","/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT",1.0
get+projects,last_activity_at,"LENGTH(return.last_activity_at)==24
return.last_activity_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.last_activity_at)
(return.last_activity_at)","/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT",1.0
get+projects,merge_method,"return.merge_method one of { ""ff"", ""merge"", ""rebase_merge"" }",daikon.inv.unary.string.OneOfString,(return.merge_method),/projects&/projects&get&200():::EXIT,1.0
get+projects,name_with_namespace,"return.owner.name is a substring of return.name_with_namespace
return.name is a substring of return.name_with_namespace
return.namespace.name is a substring of return.name_with_namespace","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return.owner.name, return.name_with_namespace)
(return.name, return.name_with_namespace)
(return.name_with_namespace, return.namespace.name)","/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT",1.0
get+projects,namespace.kind,"return.namespace.kind one of { ""group"", ""user"" }",daikon.inv.unary.string.OneOfString,(return.namespace.kind),/projects&/projects&get&200():::EXIT,1.0
get+projects,namespace.path,return.namespace.path is a substring of return.namespace.full_path,daikon.inv.binary.twoString.StdString$SubString,"(return.namespace.path, return.namespace.full_path)",/projects&/projects&get&200():::EXIT,1.0
get+projects,path_with_namespace,"return.path_with_namespace is a substring of return.ssh_url_to_repo
return.path_with_namespace is a substring of return.web_url
return.path is a substring of return.path_with_namespace
return.namespace.full_path is a substring of return.path_with_namespace","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return.ssh_url_to_repo, return.path_with_namespace)
(return.web_url, return.path_with_namespace)
(return.path, return.path_with_namespace)
(return.path_with_namespace, return.namespace.full_path)","/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT",1.0
get+projects,permissions.project_access.notification_level,"return.permissions.project_access.notification_level == return.permissions.group_access.notification_level
return.permissions.project_access.notification_level == 3","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.OneOfScalar","(return.permissions.project_access.notification_level, return.permissions.group_access.notification_level)
(return.permissions.project_access.notification_level)","/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT",1.0
get+projects,repository_storage,"return.repository_storage == ""default""
LENGTH(return.repository_storage)==7","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.repository_storage)
(return.repository_storage)","/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT",1.0
get+projects,runners_token,LENGTH(return.runners_token)==29,daikon.inv.unary.string.FixedLengthString,(return.runners_token),/projects&/projects&get&200():::EXIT,1.0
get+projects,visibility,"input.visibility == return.visibility
return.visibility one of { ""internal"", ""private"", ""public"" }","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.OneOfString","(input.visibility, return.visibility)
(return.visibility)","/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT",1.0
get+projects,web_url,"return.web_url is a substring of return.http_url_to_repo
return.web_url is a substring of return.readme_url","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return.http_url_to_repo, return.web_url)
(return.web_url, return.readme_url)","/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT",1.0
get+projects_{id}_issues,_links.self,"return._links.self is a substring of return._links.award_emoji
return._links.self is a substring of return._links.notes
return._links.project is a substring of return._links.self","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return._links.award_emoji, return._links.self)
(return._links.notes, return._links.self)
(return._links.project, return._links.self)","/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT",1.0
get+projects_{id}_issues,assignee.id,"return.assignee.id >= 1
input.per_page >= return.assignee.id
return.assignee.id >= size(input.assignee_username[])
return.assignee.id >= size(return.assignees[])","daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.assignee.id)
(input.per_page, return.assignee.id)
(return.assignee.id, size(input.assignee_username[..]))
(return.assignee.id, size(return.assignees[..]))","/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT",1.0
get+projects_{id}_issues,assignee.state,"return.assignee.state == return.author.state
return.assignee.state == return.closed_by.state
return.assignee.state == ""active""
LENGTH(return.assignee.state)==6","daikon.inv.binary.twoString.StringEqual
daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.assignee.state, return.author.state)
(return.assignee.state, return.closed_by.state)
(return.assignee.state)
(return.assignee.state)","/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT",1.0
get+projects_{id}_issues,assignee.web_url,return.assignee.username is a substring of return.assignee.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.assignee.web_url, return.assignee.username)",/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,1.0
get+projects_{id}_issues,assignees.id,"return.id >= 1
return.id >= size(input.assignee_username[])","daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.id)
(return.id, size(input.assignee_username[..]))","/projects/{id}/issues&/projects/{id}/issues&get&200&assignees():::EXIT
/projects/{id}/issues&/projects/{id}/issues&get&200&assignees():::EXIT",1.0
get+projects_{id}_issues,assignees.web_url,return.username is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.username)",/projects/{id}/issues&/projects/{id}/issues&get&200&assignees():::EXIT,1.0
get+projects_{id}_issues,author.avatar_url,"LENGTH(return.author.avatar_url)==81
return.author.avatar_url is Url","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.IsUrl","(return.author.avatar_url)
(return.author.avatar_url)","/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT",1.0
get+projects_{id}_issues,author.state,"return.author.state == return.closed_by.state
return.author.state == ""active""
LENGTH(return.author.state)==6","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.author.state, return.closed_by.state)
(return.author.state)
(return.author.state)","/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT",1.0
get+projects_{id}_issues,author.web_url,return.author.username is a substring of return.author.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.author.web_url, return.author.username)",/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,1.0
get+projects_{id}_issues,closed_at,"LENGTH(return.closed_at)==24
return.closed_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.closed_at)
(return.closed_at)","/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT",1.0
get+projects_{id}_issues,closed_by.id,"return.closed_by.id one of { 1, 6 }",daikon.inv.unary.scalar.OneOfScalar,(return.closed_by.id),/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,1.0
get+projects_{id}_issues,closed_by.state,"return.closed_by.state == ""active""
LENGTH(return.closed_by.state)==6","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.closed_by.state)
(return.closed_by.state)","/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT",1.0
get+projects_{id}_issues,confidential,input.confidential == return.confidential,daikon.inv.binary.twoScalar.IntEqual,"(input.confidential, return.confidential)",/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,1.0
get+projects_{id}_issues,created_at,"LENGTH(return.created_at)==24
return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.created_at)
(return.created_at)","/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT",1.0
get+projects_{id}_issues,downvotes,"return.downvotes == return.merge_requests_count
return.downvotes == return.task_completion_status.count
return.downvotes == return.task_completion_status.completed_count
return.downvotes == return.upvotes
return.downvotes == return.user_notes_count
return.downvotes == 0
input.author_id >= return.downvotes
return.downvotes <= return.time_stats.time_estimate
return.downvotes <= return.time_stats.total_time_spent
return.downvotes <= size(return.assignees[])","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.OneOfScalar
daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual","(return.downvotes, return.merge_requests_count)
(return.downvotes, return.task_completion_status.count)
(return.downvotes, return.task_completion_status.completed_count)
(return.downvotes, return.upvotes)
(return.downvotes, return.user_notes_count)
(return.downvotes)
(input.author_id, return.downvotes)
(return.downvotes, return.time_stats.time_estimate)
(return.downvotes, return.time_stats.total_time_spent)
(return.downvotes, size(return.assignees[..]))","/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT",1.0
get+projects_{id}_issues,due_date,return.due_date is a Date. Format: YYYY/MM/DD,daikon.inv.unary.string.dates.IsDateYYYYMMDD,(return.due_date),/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,1.0
get+projects_{id}_issues,has_tasks,return.has_tasks == false,daikon.inv.unary.scalar.OneOfScalar,(return.has_tasks),/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,1.0
get+projects_{id}_issues,id,input.per_page < return.id,daikon.inv.binary.twoScalar.IntLessThan,"(input.per_page, return.id)",/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,1.0
get+projects_{id}_issues,milestone,return.milestone == null,daikon.inv.unary.scalar.OneOfScalar,(return.milestone),/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,1.0
get+projects_{id}_issues,project_id,input.id == return.project_id,daikon.inv.binary.twoScalar.IntEqual,"(input.id, return.project_id)",/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,1.0
get+projects_{id}_issues,references.full,return.references.relative is a substring of return.references.full,daikon.inv.binary.twoString.StdString$SubString,"(return.references.full, return.references.relative)",/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,1.0
get+projects_{id}_issues,references.relative,return.references.relative == return.references.short,daikon.inv.binary.twoString.StringEqual,"(return.references.relative, return.references.short)",/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,1.0
get+projects_{id}_issues,state,"input.state == return.state
return.state one of { ""closed"", ""opened"" }
LENGTH(return.state)==6","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(input.state, return.state)
(return.state)
(return.state)","/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT",1.0
get+projects_{id}_issues,time_stats.time_estimate,return.time_stats.time_estimate >= 0,daikon.inv.unary.scalar.LowerBound,(return.time_stats.time_estimate),/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,1.0
get+projects_{id}_issues,time_stats.total_time_spent,return.time_stats.total_time_spent >= 0,daikon.inv.unary.scalar.LowerBound,(return.time_stats.total_time_spent),/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,1.0
get+projects_{id}_issues,updated_at,"LENGTH(return.updated_at)==24
return.updated_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.updated_at)
(return.updated_at)","/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT",1.0
get+projects_{id}_issues_{issue_iid},_links.self,"return._links.self is a substring of return._links.award_emoji
return._links.self is a substring of return._links.notes
return._links.project is a substring of return._links.self","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return._links.award_emoji, return._links.self)
(return._links.notes, return._links.self)
(return._links.project, return._links.self)","/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT",1.0
get+projects_{id}_issues_{issue_iid},assignee.id,return.assignee.id >= size(return.assignees[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.assignee.id, size(return.assignees[..]))",/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,1.0
get+projects_{id}_issues_{issue_iid},assignee.web_url,return.assignee.username is a substring of return.assignee.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.assignee.web_url, return.assignee.username)",/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,1.0
get+projects_{id}_issues_{issue_iid},assignees,"size(return.assignees[]) one of { 0, 1 }
return.assignees[] elements == return.assignees[return.closed_by.id -1]","daikon.inv.unary.scalar.OneOfScalar
daikon.inv.binary.sequenceScalar.SeqIntEqual","(size(return.assignees[..]))
(return.assignees[..], return.assignees[return.closed_by.id -1])","/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT",1.0
get+projects_{id}_issues_{issue_iid},assignees.state,"return.state == ""active""
LENGTH(return.state)==6","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.state)
(return.state)","/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200&assignees():::EXIT
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200&assignees():::EXIT",1.0
get+projects_{id}_issues_{issue_iid},assignees.web_url,return.username is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.username)",/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200&assignees():::EXIT,1.0
get+projects_{id}_issues_{issue_iid},author.name,return.author.name == return.closed_by.name,daikon.inv.binary.twoString.StringEqual,"(return.author.name, return.closed_by.name)",/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,1.0
get+projects_{id}_issues_{issue_iid},author.state,"return.author.state == return.closed_by.state
return.author.state == ""active""
LENGTH(return.author.state)==6","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.author.state, return.closed_by.state)
(return.author.state)
(return.author.state)","/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT",1.0
get+projects_{id}_issues_{issue_iid},author.username,"return.author.username == return.closed_by.username
return.author.username is a substring of return.closed_by.web_url","daikon.inv.binary.twoString.StringEqual
daikon.inv.binary.twoString.StdString$SubString","(return.author.username, return.closed_by.username)
(return.author.username, return.closed_by.web_url)","/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT",1.0
get+projects_{id}_issues_{issue_iid},author.web_url,"return.author.web_url == return.closed_by.web_url
return.author.username is a substring of return.author.web_url
return.closed_by.username is a substring of return.author.web_url","daikon.inv.binary.twoString.StringEqual
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return.author.web_url, return.closed_by.web_url)
(return.author.web_url, return.author.username)
(return.author.web_url, return.closed_by.username)","/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT",1.0
get+projects_{id}_issues_{issue_iid},created_at,"LENGTH(return.created_at)==24
return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.created_at)
(return.created_at)","/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT",1.0
get+projects_{id}_issues_{issue_iid},downvotes,"return.downvotes == return.merge_requests_count
return.downvotes == return.task_completion_status.count
return.downvotes == return.task_completion_status.completed_count
return.downvotes == return.upvotes
return.downvotes == return.user_notes_count
return.downvotes == 0
return.downvotes <= return.time_stats.time_estimate
return.downvotes <= return.time_stats.total_time_spent
return.downvotes <= size(return.assignees[])","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.OneOfScalar
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual","(return.downvotes, return.merge_requests_count)
(return.downvotes, return.task_completion_status.count)
(return.downvotes, return.task_completion_status.completed_count)
(return.downvotes, return.upvotes)
(return.downvotes, return.user_notes_count)
(return.downvotes)
(return.downvotes, return.time_stats.time_estimate)
(return.downvotes, return.time_stats.total_time_spent)
(return.downvotes, size(return.assignees[..]))","/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT",1.0
get+projects_{id}_issues_{issue_iid},due_date,return.due_date is a Date. Format: YYYY/MM/DD,daikon.inv.unary.string.dates.IsDateYYYYMMDD,(return.due_date),/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,1.0
get+projects_{id}_issues_{issue_iid},has_tasks,return.has_tasks == false,daikon.inv.unary.scalar.OneOfScalar,(return.has_tasks),/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,1.0
get+projects_{id}_issues_{issue_iid},iid,input.issue_iid == return.iid,daikon.inv.binary.twoScalar.IntEqual,"(input.issue_iid, return.iid)",/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,1.0
get+projects_{id}_issues_{issue_iid},milestone,return.milestone == null,daikon.inv.unary.scalar.OneOfScalar,(return.milestone),/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,1.0
get+projects_{id}_issues_{issue_iid},project_id,input.id == return.project_id,daikon.inv.binary.twoScalar.IntEqual,"(input.id, return.project_id)",/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,1.0
get+projects_{id}_issues_{issue_iid},references.full,return.references.relative is a substring of return.references.full,daikon.inv.binary.twoString.StdString$SubString,"(return.references.full, return.references.relative)",/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,1.0
get+projects_{id}_issues_{issue_iid},references.relative,return.references.relative == return.references.short,daikon.inv.binary.twoString.StringEqual,"(return.references.relative, return.references.short)",/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,1.0
get+projects_{id}_issues_{issue_iid},state,"return.state one of { ""closed"", ""opened"" }
LENGTH(return.state)==6","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.state)
(return.state)","/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT",1.0
get+projects_{id}_issues_{issue_iid},time_stats.time_estimate,return.time_stats.time_estimate >= 0,daikon.inv.unary.scalar.LowerBound,(return.time_stats.time_estimate),/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,1.0
get+projects_{id}_issues_{issue_iid},updated_at,"LENGTH(return.updated_at)==24
return.updated_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.updated_at)
(return.updated_at)","/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT",1.0
get+projects_{id}_issues_{issue_iid}_closed_by,assignee.id,"return.assignee.id < return.id
return.assignee.id > return.task_completion_status.count
return.assignee.id > return.task_completion_status.completed_count
return.assignee.id > return.upvotes
return.assignee.id > return.user_notes_count","daikon.inv.binary.twoScalar.IntLessThan
daikon.inv.binary.twoScalar.IntGreaterThan
daikon.inv.binary.twoScalar.IntGreaterThan
daikon.inv.binary.twoScalar.IntGreaterThan
daikon.inv.binary.twoScalar.IntGreaterThan","(return.assignee.id, return.id)
(return.assignee.id, return.task_completion_status.count)
(return.assignee.id, return.task_completion_status.completed_count)
(return.assignee.id, return.upvotes)
(return.assignee.id, return.user_notes_count)","/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT",1.0
get+projects_{id}_issues_{issue_iid}_closed_by,author.id,"return.author.id >= 1
return.author.id < return.id
return.author.id > return.task_completion_status.count
return.author.id > return.task_completion_status.completed_count
return.author.id > return.upvotes
return.author.id > return.user_notes_count","daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.twoScalar.IntLessThan
daikon.inv.binary.twoScalar.IntGreaterThan
daikon.inv.binary.twoScalar.IntGreaterThan
daikon.inv.binary.twoScalar.IntGreaterThan
daikon.inv.binary.twoScalar.IntGreaterThan","(return.author.id)
(return.author.id, return.id)
(return.author.id, return.task_completion_status.count)
(return.author.id, return.task_completion_status.completed_count)
(return.author.id, return.upvotes)
(return.author.id, return.user_notes_count)","/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT",1.0
get+projects_{id}_issues_{issue_iid}_closed_by,created_at,"LENGTH(return.created_at)==24
return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.created_at)
(return.created_at)","/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT",1.0
get+projects_{id}_issues_{issue_iid}_closed_by,diff_refs,return.diff_refs == null,daikon.inv.unary.scalar.OneOfScalar,(return.diff_refs),/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,1.0
get+projects_{id}_issues_{issue_iid}_closed_by,downvotes,"return.downvotes == return.time_stats.time_estimate
return.downvotes == return.time_stats.total_time_spent
return.downvotes == 0
return.downvotes <= return.task_completion_status.count
return.downvotes <= return.task_completion_status.completed_count
return.downvotes <= return.upvotes
return.downvotes <= return.user_notes_count
return.downvotes <= size(return.labels[])","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.OneOfScalar
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual","(return.downvotes, return.time_stats.time_estimate)
(return.downvotes, return.time_stats.total_time_spent)
(return.downvotes)
(return.downvotes, return.task_completion_status.count)
(return.downvotes, return.task_completion_status.completed_count)
(return.downvotes, return.upvotes)
(return.downvotes, return.user_notes_count)
(return.downvotes, size(return.labels[..]))","/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT",1.0
get+projects_{id}_issues_{issue_iid}_closed_by,head_pipeline,return.head_pipeline == null,daikon.inv.unary.scalar.OneOfScalar,(return.head_pipeline),/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,1.0
get+projects_{id}_issues_{issue_iid}_closed_by,head_pipeline.detailed_status,return.head_pipeline.detailed_status == null,daikon.inv.unary.scalar.OneOfScalar,(return.head_pipeline.detailed_status),/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,1.0
get+projects_{id}_issues_{issue_iid}_closed_by,head_pipeline.user,return.head_pipeline.user == return.user,daikon.inv.binary.twoScalar.IntEqual,"(return.head_pipeline.user, return.user)",/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,1.0
get+projects_{id}_issues_{issue_iid}_closed_by,iid,"input.id > return.iid
return.iid < return.source_project_id
return.iid > return.task_completion_status.count
return.iid > return.task_completion_status.completed_count
return.iid > return.user_notes_count
return.iid > size(return.labels[])","daikon.inv.binary.twoScalar.IntGreaterThan
daikon.inv.binary.twoScalar.IntLessThan
daikon.inv.binary.twoScalar.IntGreaterThan
daikon.inv.binary.twoScalar.IntGreaterThan
daikon.inv.binary.twoScalar.IntGreaterThan
daikon.inv.binary.twoScalar.IntGreaterThan","(input.id, return.iid)
(return.iid, return.source_project_id)
(return.iid, return.task_completion_status.count)
(return.iid, return.task_completion_status.completed_count)
(return.iid, return.user_notes_count)
(return.iid, size(return.labels[..]))","/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT",1.0
get+projects_{id}_issues_{issue_iid}_closed_by,merge_commit_sha,LENGTH(return.merge_commit_sha)==40,daikon.inv.unary.string.FixedLengthString,(return.merge_commit_sha),/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,1.0
get+projects_{id}_issues_{issue_iid}_closed_by,merge_status,"return.merge_status one of { ""can_be_merged"", ""cannot_be_merged"", ""unchecked"" }",daikon.inv.unary.string.OneOfString,(return.merge_status),/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,1.0
get+projects_{id}_issues_{issue_iid}_closed_by,milestone.created_at,"LENGTH(return.milestone.created_at)==24
return.milestone.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.milestone.created_at)
(return.milestone.created_at)","/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT",1.0
get+projects_{id}_issues_{issue_iid}_closed_by,milestone.due_date,return.milestone.due_date is a Date. Format: YYYY/MM/DD,daikon.inv.unary.string.dates.IsDateYYYYMMDD,(return.milestone.due_date),/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,1.0
get+projects_{id}_issues_{issue_iid}_closed_by,milestone.iid,return.milestone.iid > return.upvotes,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.milestone.iid, return.upvotes)",/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,1.0
get+projects_{id}_issues_{issue_iid}_closed_by,milestone.project_id,"input.id == return.milestone.project_id
return.milestone.project_id == return.source_project_id","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual","(input.id, return.milestone.project_id)
(return.milestone.project_id, return.source_project_id)","/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT",1.0
get+projects_{id}_issues_{issue_iid}_closed_by,milestone.start_date,return.milestone.start_date is a Date. Format: YYYY/MM/DD,daikon.inv.unary.string.dates.IsDateYYYYMMDD,(return.milestone.start_date),/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,1.0
get+projects_{id}_issues_{issue_iid}_closed_by,milestone.state,"return.milestone.state one of { ""active"", ""closed"" }
LENGTH(return.milestone.state)==6","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.milestone.state)
(return.milestone.state)","/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT",1.0
get+projects_{id}_issues_{issue_iid}_closed_by,milestone.updated_at,"LENGTH(return.milestone.updated_at)==24
return.milestone.updated_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.milestone.updated_at)
(return.milestone.updated_at)","/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT",1.0
get+projects_{id}_issues_{issue_iid}_closed_by,pipeline,return.pipeline == null,daikon.inv.unary.scalar.OneOfScalar,(return.pipeline),/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,1.0
get+projects_{id}_issues_{issue_iid}_closed_by,project_id,input.id == return.project_id,daikon.inv.binary.twoScalar.IntEqual,"(input.id, return.project_id)",/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,1.0
get+projects_{id}_issues_{issue_iid}_closed_by,reference,"return.reference == return.references.relative
return.reference == return.references.short
return.reference is a substring of return.references.full","daikon.inv.binary.twoString.StringEqual
daikon.inv.binary.twoString.StringEqual
daikon.inv.binary.twoString.StdString$SubString","(return.reference, return.references.relative)
(return.reference, return.references.short)
(return.reference, return.references.full)","/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT",1.0
get+projects_{id}_issues_{issue_iid}_closed_by,sha,LENGTH(return.sha)==40,daikon.inv.unary.string.FixedLengthString,(return.sha),/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,1.0
get+projects_{id}_issues_{issue_iid}_closed_by,should_remove_source_branch,"return.should_remove_source_branch one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.should_remove_source_branch),/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,1.0
get+projects_{id}_issues_{issue_iid}_closed_by,source_project_id,input.id <= return.source_project_id,daikon.inv.binary.twoScalar.IntLessEqual,"(input.id, return.source_project_id)",/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,1.0
get+projects_{id}_issues_{issue_iid}_closed_by,squash_commit_sha,LENGTH(return.squash_commit_sha)==40,daikon.inv.unary.string.FixedLengthString,(return.squash_commit_sha),/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,1.0
get+projects_{id}_issues_{issue_iid}_closed_by,state,"return.state one of { ""closed"", ""merged"", ""opened"" }
LENGTH(return.state)==6","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.state)
(return.state)","/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT",1.0
get+projects_{id}_issues_{issue_iid}_closed_by,target_branch,"return.target_branch one of { ""develop"", ""main"", ""master"" }",daikon.inv.unary.string.OneOfString,(return.target_branch),/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,1.0
get+projects_{id}_issues_{issue_iid}_closed_by,target_project_id,input.id == return.target_project_id,daikon.inv.binary.twoScalar.IntEqual,"(input.id, return.target_project_id)",/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,1.0
get+projects_{id}_issues_{issue_iid}_closed_by,task_completion_status.completed_count,return.task_completion_status.completed_count >= 0,daikon.inv.unary.scalar.LowerBound,(return.task_completion_status.completed_count),/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,1.0
get+projects_{id}_issues_{issue_iid}_closed_by,task_completion_status.count,"return.task_completion_status.count >= 0
return.task_completion_status.count >= return.task_completion_status.completed_count","daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.task_completion_status.count)
(return.task_completion_status.count, return.task_completion_status.completed_count)","/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT",1.0
get+projects_{id}_issues_{issue_iid}_closed_by,updated_at,"LENGTH(return.updated_at)==24
return.updated_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.updated_at)
(return.updated_at)","/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT",1.0
get+projects_{id}_issues_{issue_iid}_closed_by,upvotes,"return.upvotes one of { 0, 1 }",daikon.inv.unary.scalar.OneOfScalar,(return.upvotes),/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,1.0
get+projects_{id}_issues_{issue_iid}_closed_by,user,return.user == null,daikon.inv.unary.scalar.OneOfScalar,(return.user),/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,1.0
get+projects_{id}_issues_{issue_iid}_closed_by,user_notes_count,"return.user_notes_count >= 0
input.issue_iid > return.user_notes_count","daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.twoScalar.IntGreaterThan","(return.user_notes_count)
(input.issue_iid, return.user_notes_count)","/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT",1.0
get+projects_{id}_issues_{issue_iid}_related_merge_requests,assignee.avatar_url,return.assignee.avatar_url is Url,daikon.inv.unary.string.IsUrl,(return.assignee.avatar_url),/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,1.0
get+projects_{id}_issues_{issue_iid}_related_merge_requests,assignee.id,"return.assignee.id < return.head_pipeline.id
return.assignee.id < return.id
return.assignee.id < return.pipeline.id
return.assignee.id > return.time_stats.total_time_spent","daikon.inv.binary.twoScalar.IntLessThan
daikon.inv.binary.twoScalar.IntLessThan
daikon.inv.binary.twoScalar.IntLessThan
daikon.inv.binary.twoScalar.IntGreaterThan","(return.assignee.id, return.head_pipeline.id)
(return.assignee.id, return.id)
(return.assignee.id, return.pipeline.id)
(return.assignee.id, return.time_stats.total_time_spent)","/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT",1.0
get+projects_{id}_issues_{issue_iid}_related_merge_requests,assignee.state,"return.assignee.state one of { ""active"", ""blocked"" }",daikon.inv.unary.string.OneOfString,(return.assignee.state),/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,1.0
get+projects_{id}_issues_{issue_iid}_related_merge_requests,assignee.web_url,"return.assignee.web_url is Url
return.assignee.username is a substring of return.assignee.web_url","daikon.inv.unary.string.IsUrl
daikon.inv.binary.twoString.StdString$SubString","(return.assignee.web_url)
(return.assignee.web_url, return.assignee.username)","/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT",1.0
get+projects_{id}_issues_{issue_iid}_related_merge_requests,author.avatar_url,return.author.avatar_url is Url,daikon.inv.unary.string.IsUrl,(return.author.avatar_url),/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,1.0
get+projects_{id}_issues_{issue_iid}_related_merge_requests,author.id,"return.author.id < return.head_pipeline.id
return.author.id < return.id
return.author.id < return.pipeline.id","daikon.inv.binary.twoScalar.IntLessThan
daikon.inv.binary.twoScalar.IntLessThan
daikon.inv.binary.twoScalar.IntLessThan","(return.author.id, return.head_pipeline.id)
(return.author.id, return.id)
(return.author.id, return.pipeline.id)","/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT",1.0
get+projects_{id}_issues_{issue_iid}_related_merge_requests,author.state,"return.author.state one of { ""active"", ""blocked"" }",daikon.inv.unary.string.OneOfString,(return.author.state),/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,1.0
get+projects_{id}_issues_{issue_iid}_related_merge_requests,author.web_url,"return.author.web_url is Url
return.author.username is a substring of return.author.web_url","daikon.inv.unary.string.IsUrl
daikon.inv.binary.twoString.StdString$SubString","(return.author.web_url)
(return.author.web_url, return.author.username)","/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT",1.0
get+projects_{id}_issues_{issue_iid}_related_merge_requests,closed_at,"LENGTH(return.closed_at)==24
return.closed_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.closed_at)
(return.closed_at)","/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT",1.0
get+projects_{id}_issues_{issue_iid}_related_merge_requests,created_at,"LENGTH(return.created_at)==24
return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.created_at)
(return.created_at)","/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT",1.0
get+projects_{id}_issues_{issue_iid}_related_merge_requests,diff_refs.base_sha,LENGTH(return.diff_refs.base_sha)==40,daikon.inv.unary.string.FixedLengthString,(return.diff_refs.base_sha),/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,1.0
get+projects_{id}_issues_{issue_iid}_related_merge_requests,diff_refs.head_sha,"return.diff_refs.head_sha == return.sha
LENGTH(return.diff_refs.head_sha)==40","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.FixedLengthString","(return.diff_refs.head_sha, return.sha)
(return.diff_refs.head_sha)","/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT",1.0
get+projects_{id}_issues_{issue_iid}_related_merge_requests,diff_refs.start_sha,LENGTH(return.diff_refs.start_sha)==40,daikon.inv.unary.string.FixedLengthString,(return.diff_refs.start_sha),/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,1.0
get+projects_{id}_issues_{issue_iid}_related_merge_requests,downvotes,"return.downvotes == return.time_stats.time_estimate
return.downvotes == 0
return.downvotes <= return.head_pipeline.duration
return.downvotes <= return.task_completion_status.count
return.downvotes <= return.task_completion_status.completed_count
return.downvotes <= return.time_stats.total_time_spent
return.downvotes <= return.upvotes
return.downvotes <= return.user_notes_count","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.OneOfScalar
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual","(return.downvotes, return.time_stats.time_estimate)
(return.downvotes)
(return.downvotes, return.head_pipeline.duration)
(return.downvotes, return.task_completion_status.count)
(return.downvotes, return.task_completion_status.completed_count)
(return.downvotes, return.time_stats.total_time_spent)
(return.downvotes, return.upvotes)
(return.downvotes, return.user_notes_count)","/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT",1.0
get+projects_{id}_issues_{issue_iid}_related_merge_requests,first_deployed_to_production_at,"LENGTH(return.first_deployed_to_production_at)==24
return.first_deployed_to_production_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.first_deployed_to_production_at)
(return.first_deployed_to_production_at)","/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT",1.0
get+projects_{id}_issues_{issue_iid}_related_merge_requests,head_pipeline.before_sha,LENGTH(return.head_pipeline.before_sha)==40,daikon.inv.unary.string.FixedLengthString,(return.head_pipeline.before_sha),/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,1.0
get+projects_{id}_issues_{issue_iid}_related_merge_requests,head_pipeline.coverage,return.head_pipeline.coverage is Numeric,daikon.inv.unary.string.IsNumeric,(return.head_pipeline.coverage),/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,1.0
get+projects_{id}_issues_{issue_iid}_related_merge_requests,head_pipeline.created_at,"LENGTH(return.head_pipeline.created_at)==24
return.head_pipeline.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.head_pipeline.created_at)
(return.head_pipeline.created_at)","/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT",1.0
get+projects_{id}_issues_{issue_iid}_related_merge_requests,head_pipeline.detailed_status.details_path,return.head_pipeline.detailed_status.details_path is a substring of return.head_pipeline.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.head_pipeline.detailed_status.details_path, return.head_pipeline.web_url)",/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,1.0
get+projects_{id}_issues_{issue_iid}_related_merge_requests,head_pipeline.detailed_status.favicon,return.head_pipeline.status is a substring of return.head_pipeline.detailed_status.favicon,daikon.inv.binary.twoString.StdString$SubString,"(return.head_pipeline.detailed_status.favicon, return.head_pipeline.status)",/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,1.0
get+projects_{id}_issues_{issue_iid}_related_merge_requests,head_pipeline.detailed_status.group,return.head_pipeline.status is a substring of return.head_pipeline.detailed_status.group,daikon.inv.binary.twoString.StdString$SubString,"(return.head_pipeline.detailed_status.group, return.head_pipeline.status)",/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,1.0
get+projects_{id}_issues_{issue_iid}_related_merge_requests,head_pipeline.detailed_status.has_details,return.head_pipeline.detailed_status.has_details == true,daikon.inv.unary.scalar.OneOfScalar,(return.head_pipeline.detailed_status.has_details),/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,1.0
get+projects_{id}_issues_{issue_iid}_related_merge_requests,head_pipeline.detailed_status.label,return.head_pipeline.detailed_status.tooltip is a substring of return.head_pipeline.detailed_status.label,daikon.inv.binary.twoString.StdString$SubString,"(return.head_pipeline.detailed_status.label, return.head_pipeline.detailed_status.tooltip)",/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,1.0
get+projects_{id}_issues_{issue_iid}_related_merge_requests,head_pipeline.duration,"return.head_pipeline.duration >= 0
return.head_pipeline.duration < return.milestone.id
return.head_pipeline.duration < return.milestone.project_id
return.head_pipeline.duration < return.project_id
return.head_pipeline.duration < return.source_project_id
return.head_pipeline.duration >= return.task_completion_status.count
return.head_pipeline.duration >= return.task_completion_status.completed_count
return.head_pipeline.duration >= return.time_stats.total_time_spent
return.head_pipeline.duration >= return.upvotes","daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.twoScalar.IntLessThan
daikon.inv.binary.twoScalar.IntLessThan
daikon.inv.binary.twoScalar.IntLessThan
daikon.inv.binary.twoScalar.IntLessThan
daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.head_pipeline.duration)
(return.head_pipeline.duration, return.milestone.id)
(return.head_pipeline.duration, return.milestone.project_id)
(return.head_pipeline.duration, return.project_id)
(return.head_pipeline.duration, return.source_project_id)
(return.head_pipeline.duration, return.task_completion_status.count)
(return.head_pipeline.duration, return.task_completion_status.completed_count)
(return.head_pipeline.duration, return.time_stats.total_time_spent)
(return.head_pipeline.duration, return.upvotes)","/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT",1.0
get+projects_{id}_issues_{issue_iid}_related_merge_requests,head_pipeline.finished_at,"LENGTH(return.head_pipeline.finished_at)==24
return.head_pipeline.finished_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.head_pipeline.finished_at)
(return.head_pipeline.finished_at)","/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT",1.0
get+projects_{id}_issues_{issue_iid}_related_merge_requests,head_pipeline.id,"input.issue_iid < return.head_pipeline.id
return.head_pipeline.id > return.head_pipeline.user.id
return.head_pipeline.id > return.id
return.head_pipeline.id > return.milestone.id
return.head_pipeline.id >= return.pipeline.id","daikon.inv.binary.twoScalar.IntLessThan
daikon.inv.binary.twoScalar.IntGreaterThan
daikon.inv.binary.twoScalar.IntGreaterThan
daikon.inv.binary.twoScalar.IntGreaterThan
daikon.inv.binary.twoScalar.IntGreaterEqual","(input.issue_iid, return.head_pipeline.id)
(return.head_pipeline.id, return.head_pipeline.user.id)
(return.head_pipeline.id, return.id)
(return.head_pipeline.id, return.milestone.id)
(return.head_pipeline.id, return.pipeline.id)","/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT",1.0
get+projects_{id}_issues_{issue_iid}_related_merge_requests,head_pipeline.sha,LENGTH(return.head_pipeline.sha)==40,daikon.inv.unary.string.FixedLengthString,(return.head_pipeline.sha),/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,1.0
get+projects_{id}_issues_{issue_iid}_related_merge_requests,head_pipeline.tag,"return.head_pipeline.tag == return.user.can_merge
return.head_pipeline.tag == false","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.OneOfScalar","(return.head_pipeline.tag, return.user.can_merge)
(return.head_pipeline.tag)","/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT",1.0
get+projects_{id}_issues_{issue_iid}_related_merge_requests,head_pipeline.updated_at,"LENGTH(return.head_pipeline.updated_at)==24
return.head_pipeline.updated_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.head_pipeline.updated_at)
(return.head_pipeline.updated_at)","/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT",1.0
get+projects_{id}_issues_{issue_iid}_related_merge_requests,head_pipeline.user.avatar_url,return.head_pipeline.user.avatar_url is Url,daikon.inv.unary.string.IsUrl,(return.head_pipeline.user.avatar_url),/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,1.0
get+projects_{id}_issues_{issue_iid}_related_merge_requests,head_pipeline.user.id,"return.head_pipeline.user.id < return.id
return.head_pipeline.user.id < return.pipeline.id","daikon.inv.binary.twoScalar.IntLessThan
daikon.inv.binary.twoScalar.IntLessThan","(return.head_pipeline.user.id, return.id)
(return.head_pipeline.user.id, return.pipeline.id)","/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT",1.0
get+projects_{id}_issues_{issue_iid}_related_merge_requests,head_pipeline.user.state,"return.head_pipeline.user.state one of { ""active"", ""blocked"" }",daikon.inv.unary.string.OneOfString,(return.head_pipeline.user.state),/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,1.0
get+projects_{id}_issues_{issue_iid}_related_merge_requests,head_pipeline.user.web_url,"return.head_pipeline.user.web_url is Url
return.head_pipeline.user.username is a substring of return.head_pipeline.user.web_url","daikon.inv.unary.string.IsUrl
daikon.inv.binary.twoString.StdString$SubString","(return.head_pipeline.user.web_url)
(return.head_pipeline.user.web_url, return.head_pipeline.user.username)","/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT",1.0
get+projects_{id}_issues_{issue_iid}_related_merge_requests,head_pipeline.web_url,return.head_pipeline.web_url is Url,daikon.inv.unary.string.IsUrl,(return.head_pipeline.web_url),/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,1.0
get+projects_{id}_issues_{issue_iid}_related_merge_requests,latest_build_finished_at,"LENGTH(return.latest_build_finished_at)==24
return.latest_build_finished_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.latest_build_finished_at)
(return.latest_build_finished_at)","/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT",1.0
get+projects_{id}_issues_{issue_iid}_related_merge_requests,latest_build_started_at,"LENGTH(return.latest_build_started_at)==24
return.latest_build_started_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.latest_build_started_at)
(return.latest_build_started_at)","/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT",1.0
get+projects_{id}_issues_{issue_iid}_related_merge_requests,merge_commit_sha,LENGTH(return.merge_commit_sha)==40,daikon.inv.unary.string.FixedLengthString,(return.merge_commit_sha),/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,1.0
get+projects_{id}_issues_{issue_iid}_related_merge_requests,merge_status,"return.merge_status one of { ""can_be_merged"", ""cannot_be_merged"", ""unchecked"" }",daikon.inv.unary.string.OneOfString,(return.merge_status),/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,1.0
get+projects_{id}_issues_{issue_iid}_related_merge_requests,milestone.created_at,"LENGTH(return.milestone.created_at)==24
return.milestone.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.milestone.created_at)
(return.milestone.created_at)","/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT",1.0
get+projects_{id}_issues_{issue_iid}_related_merge_requests,milestone.due_date,return.milestone.due_date is a Date. Format: YYYY/MM/DD,daikon.inv.unary.string.dates.IsDateYYYYMMDD,(return.milestone.due_date),/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,1.0
get+projects_{id}_issues_{issue_iid}_related_merge_requests,milestone.id,return.milestone.id < return.pipeline.id,daikon.inv.binary.twoScalar.IntLessThan,"(return.milestone.id, return.pipeline.id)",/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,1.0
get+projects_{id}_issues_{issue_iid}_related_merge_requests,milestone.project_id,"return.milestone.project_id == return.project_id
return.milestone.project_id < return.pipeline.id
return.milestone.project_id <= return.source_project_id","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntLessThan
daikon.inv.binary.twoScalar.IntLessEqual","(return.milestone.project_id, return.project_id)
(return.milestone.project_id, return.pipeline.id)
(return.milestone.project_id, return.source_project_id)","/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT",1.0
get+projects_{id}_issues_{issue_iid}_related_merge_requests,milestone.start_date,return.milestone.start_date is a Date. Format: YYYY/MM/DD,daikon.inv.unary.string.dates.IsDateYYYYMMDD,(return.milestone.start_date),/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,1.0
get+projects_{id}_issues_{issue_iid}_related_merge_requests,milestone.state,"return.milestone.state one of { ""active"", ""closed"" }
LENGTH(return.milestone.state)==6","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.milestone.state)
(return.milestone.state)","/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT",1.0
get+projects_{id}_issues_{issue_iid}_related_merge_requests,milestone.updated_at,"LENGTH(return.milestone.updated_at)==24
return.milestone.updated_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.milestone.updated_at)
(return.milestone.updated_at)","/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT",1.0
get+projects_{id}_issues_{issue_iid}_related_merge_requests,pipeline.id,"input.id < return.pipeline.id
return.pipeline.id > return.project_id
return.pipeline.id > return.source_project_id","daikon.inv.binary.twoScalar.IntLessThan
daikon.inv.binary.twoScalar.IntGreaterThan
daikon.inv.binary.twoScalar.IntGreaterThan","(input.id, return.pipeline.id)
(return.pipeline.id, return.project_id)
(return.pipeline.id, return.source_project_id)","/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT",1.0
get+projects_{id}_issues_{issue_iid}_related_merge_requests,pipeline.sha,LENGTH(return.pipeline.sha)==40,daikon.inv.unary.string.FixedLengthString,(return.pipeline.sha),/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,1.0
get+projects_{id}_issues_{issue_iid}_related_merge_requests,pipeline.web_url,return.pipeline.web_url is Url,daikon.inv.unary.string.IsUrl,(return.pipeline.web_url),/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,1.0
get+projects_{id}_issues_{issue_iid}_related_merge_requests,project_id,"return.project_id == return.target_project_id
return.project_id <= return.source_project_id","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntLessEqual","(return.project_id, return.target_project_id)
(return.project_id, return.source_project_id)","/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT",1.0
get+projects_{id}_issues_{issue_iid}_related_merge_requests,reference,"return.reference == return.references.relative
return.reference is a substring of return.references.full
return.references.short is a substring of return.reference","daikon.inv.binary.twoString.StringEqual
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return.reference, return.references.relative)
(return.reference, return.references.full)
(return.reference, return.references.short)","/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT",1.0
get+projects_{id}_issues_{issue_iid}_related_merge_requests,sha,LENGTH(return.sha)==40,daikon.inv.unary.string.FixedLengthString,(return.sha),/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,1.0
get+projects_{id}_issues_{issue_iid}_related_merge_requests,should_remove_source_branch,"return.should_remove_source_branch one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.should_remove_source_branch),/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,1.0
get+projects_{id}_issues_{issue_iid}_related_merge_requests,squash_commit_sha,LENGTH(return.squash_commit_sha)==40,daikon.inv.unary.string.FixedLengthString,(return.squash_commit_sha),/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,1.0
get+projects_{id}_issues_{issue_iid}_related_merge_requests,state,"return.state one of { ""closed"", ""merged"", ""opened"" }
LENGTH(return.state)==6","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.state)
(return.state)","/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT",1.0
get+projects_{id}_issues_{issue_iid}_related_merge_requests,task_completion_status.completed_count,return.task_completion_status.completed_count >= 0,daikon.inv.unary.scalar.LowerBound,(return.task_completion_status.completed_count),/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,1.0
get+projects_{id}_issues_{issue_iid}_related_merge_requests,task_completion_status.count,"return.task_completion_status.count >= 0
return.task_completion_status.count >= return.task_completion_status.completed_count","daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.task_completion_status.count)
(return.task_completion_status.count, return.task_completion_status.completed_count)","/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT",1.0
get+projects_{id}_issues_{issue_iid}_related_merge_requests,updated_at,"LENGTH(return.updated_at)==24
return.updated_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.updated_at)
(return.updated_at)","/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT",1.0
get+projects_{id}_issues_{issue_iid}_related_merge_requests,user_notes_count,return.user_notes_count >= 0,daikon.inv.unary.scalar.LowerBound,(return.user_notes_count),/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,1.0
get+projects_{id}_issues_{issue_iid}_related_merge_requests,web_url,return.web_url is Url,daikon.inv.unary.string.IsUrl,(return.web_url),/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,1.0
post+groups,auto_devops_enabled,"return.auto_devops_enabled one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.auto_devops_enabled),/groups&/groups&post&201():::EXIT,1.0
post+groups,created_at,"LENGTH(return.created_at)==24
return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.created_at)
(return.created_at)","/groups&/groups&post&201():::EXIT
/groups&/groups&post&201():::EXIT",1.0
post+groups,default_branch_protection,"return.default_branch_protection one of { 0, 1, 2 }",daikon.inv.unary.scalar.OneOfScalar,(return.default_branch_protection),/groups&/groups&post&201():::EXIT,1.0
post+groups,description,input.description == return.description,daikon.inv.binary.twoString.StringEqual,"(input.description, return.description)",/groups&/groups&post&201():::EXIT,1.0
post+groups,emails_disabled,"return.emails_disabled one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.emails_disabled),/groups&/groups&post&201():::EXIT,1.0
post+groups,lfs_enabled,input.lfs_enabled == return.lfs_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.lfs_enabled, return.lfs_enabled)",/groups&/groups&post&201():::EXIT,1.0
post+groups,mentions_disabled,"return.mentions_disabled one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.mentions_disabled),/groups&/groups&post&201():::EXIT,1.0
post+groups,name,input.name == return.name,daikon.inv.binary.twoString.StringEqual,"(input.name, return.name)",/groups&/groups&post&201():::EXIT,1.0
post+groups,path,input.path == return.path,daikon.inv.binary.twoString.StringEqual,"(input.path, return.path)",/groups&/groups&post&201():::EXIT,1.0
post+groups,project_creation_level,"input.project_creation_level == return.project_creation_level
return.project_creation_level one of { ""developer"", ""maintainer"", ""noone"" }","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.OneOfString","(input.project_creation_level, return.project_creation_level)
(return.project_creation_level)","/groups&/groups&post&201():::EXIT
/groups&/groups&post&201():::EXIT",1.0
post+groups,request_access_enabled,input.request_access_enabled == return.request_access_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.request_access_enabled, return.request_access_enabled)",/groups&/groups&post&201():::EXIT,1.0
post+groups,require_two_factor_authentication,input.require_two_factor_authentication == return.require_two_factor_authentication,daikon.inv.binary.twoScalar.IntEqual,"(input.require_two_factor_authentication, return.require_two_factor_authentication)",/groups&/groups&post&201():::EXIT,1.0
post+groups,share_with_group_lock,input.share_with_group_lock == return.share_with_group_lock,daikon.inv.binary.twoScalar.IntEqual,"(input.share_with_group_lock, return.share_with_group_lock)",/groups&/groups&post&201():::EXIT,1.0
post+groups,statistics,return.statistics == null,daikon.inv.unary.scalar.OneOfScalar,(return.statistics),/groups&/groups&post&201():::EXIT,1.0
post+groups,subgroup_creation_level,"input.subgroup_creation_level == return.subgroup_creation_level
return.subgroup_creation_level one of { ""maintainer"", ""owner"" }","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.OneOfString","(input.subgroup_creation_level, return.subgroup_creation_level)
(return.subgroup_creation_level)","/groups&/groups&post&201():::EXIT
/groups&/groups&post&201():::EXIT",1.0
post+groups,two_factor_grace_period,input.two_factor_grace_period == return.two_factor_grace_period,daikon.inv.binary.twoScalar.IntEqual,"(input.two_factor_grace_period, return.two_factor_grace_period)",/groups&/groups&post&201():::EXIT,1.0
post+groups,visibility,"input.visibility == return.visibility
return.visibility one of { ""internal"", ""private"", ""public"" }","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.OneOfString","(input.visibility, return.visibility)
(return.visibility)","/groups&/groups&post&201():::EXIT
/groups&/groups&post&201():::EXIT",1.0
post+groups,web_url,input.path is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(input.path, return.web_url)",/groups&/groups&post&201():::EXIT,1.0
post+projects,_links.self,"return._links.self is a substring of return._links.issues
return._links.self is a substring of return._links.merge_requests
return._links.self is a substring of return._links.repo_branches
return._links.self is a substring of return._links.labels
return._links.self is a substring of return._links.events
return._links.self is a substring of return._links.members","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return._links.self, return._links.issues)
(return._links.self, return._links.merge_requests)
(return._links.self, return._links.repo_branches)
(return._links.self, return._links.labels)
(return._links.self, return._links.events)
(return._links.self, return._links.members)","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT",1.0
post+projects,allow_merge_on_skipped_pipeline,input.allow_merge_on_skipped_pipeline == return.allow_merge_on_skipped_pipeline,daikon.inv.binary.twoScalar.IntEqual,"(input.allow_merge_on_skipped_pipeline, return.allow_merge_on_skipped_pipeline)",/projects&/projects&post&201():::EXIT,1.0
post+projects,archived,"return.archived == return.service_desk_enabled
return.archived == false","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.OneOfScalar","(return.archived, return.service_desk_enabled)
(return.archived)","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT",1.0
post+projects,auto_devops_deploy_strategy,"input.auto_devops_deploy_strategy == return.auto_devops_deploy_strategy
return.auto_devops_deploy_strategy one of { ""continuous"", ""manual"", ""timed_incremental"" }","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.OneOfString","(input.auto_devops_deploy_strategy, return.auto_devops_deploy_strategy)
(return.auto_devops_deploy_strategy)","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT",1.0
post+projects,auto_devops_enabled,input.auto_devops_enabled == return.auto_devops_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.auto_devops_enabled, return.auto_devops_enabled)",/projects&/projects&post&201():::EXIT,1.0
post+projects,autoclose_referenced_issues,input.autoclose_referenced_issues == return.autoclose_referenced_issues,daikon.inv.binary.twoScalar.IntEqual,"(input.autoclose_referenced_issues, return.autoclose_referenced_issues)",/projects&/projects&post&201():::EXIT,1.0
post+projects,ci_default_git_depth,return.ci_default_git_depth == 20,daikon.inv.unary.scalar.OneOfScalar,(return.ci_default_git_depth),/projects&/projects&post&201():::EXIT,1.0
post+projects,ci_forward_deployment_enabled,return.ci_forward_deployment_enabled == true,daikon.inv.unary.scalar.OneOfScalar,(return.ci_forward_deployment_enabled),/projects&/projects&post&201():::EXIT,1.0
post+projects,container_registry_enabled,input.container_registry_enabled == return.container_registry_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.container_registry_enabled, return.container_registry_enabled)",/projects&/projects&post&201():::EXIT,1.0
post+projects,created_at,"LENGTH(return.created_at)==24
return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.created_at)
(return.created_at)","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT",1.0
post+projects,creator_id,return.creator_id <= return.namespace.id,daikon.inv.binary.twoScalar.IntLessEqual,"(return.creator_id, return.namespace.id)",/projects&/projects&post&201():::EXIT,1.0
post+projects,default_branch,return.default_branch is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.default_branch, return.readme_url)",/projects&/projects&post&201():::EXIT,1.0
post+projects,description,input.description == return.description,daikon.inv.binary.twoString.StringEqual,"(input.description, return.description)",/projects&/projects&post&201():::EXIT,1.0
post+projects,forks_count,"return.forks_count == return.star_count
return.forks_count == size(return.shared_with_groups[])
return.forks_count == size(return.shared_with_groups[])","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual","(return.forks_count, return.star_count)
(return.forks_count, size(return.shared_with_groups[..]))
(return.forks_count, size(return.shared_with_groups[..]))","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT",1.0
post+projects,import_status,"return.import_status == ""none""
LENGTH(return.import_status)==4","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.import_status)
(return.import_status)","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT",1.0
post+projects,last_activity_at,"LENGTH(return.last_activity_at)==24
return.last_activity_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.last_activity_at)
(return.last_activity_at)","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT",1.0
post+projects,merge_method,"input.merge_method == return.merge_method
return.merge_method one of { ""ff"", ""merge"", ""rebase_merge"" }","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.OneOfString","(input.merge_method, return.merge_method)
(return.merge_method)","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT",1.0
post+projects,name,input.name == return.name,daikon.inv.binary.twoString.StringEqual,"(input.name, return.name)",/projects&/projects&post&201():::EXIT,1.0
post+projects,name_with_namespace,"input.name is a substring of return.name_with_namespace
return.owner.name is a substring of return.name_with_namespace
return.name is a substring of return.name_with_namespace
return.namespace.name is a substring of return.name_with_namespace","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(input.name, return.name_with_namespace)
(return.owner.name, return.name_with_namespace)
(return.name, return.name_with_namespace)
(return.name_with_namespace, return.namespace.name)","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT",1.0
post+projects,namespace.id,"input.namespace_id == return.namespace.id
return.namespace.id >= 1","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.LowerBound","(input.namespace_id, return.namespace.id)
(return.namespace.id)","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT",1.0
post+projects,namespace.kind,"return.namespace.kind one of { ""group"", ""user"" }",daikon.inv.unary.string.OneOfString,(return.namespace.kind),/projects&/projects&post&201():::EXIT,1.0
post+projects,namespace.path,return.namespace.path is a substring of return.namespace.full_path,daikon.inv.binary.twoString.StdString$SubString,"(return.namespace.path, return.namespace.full_path)",/projects&/projects&post&201():::EXIT,1.0
post+projects,only_allow_merge_if_all_discussions_are_resolved,input.only_allow_merge_if_all_discussions_are_resolved == return.only_allow_merge_if_all_discussions_are_resolved,daikon.inv.binary.twoScalar.IntEqual,"(input.only_allow_merge_if_all_discussions_are_resolved, return.only_allow_merge_if_all_discussions_are_resolved)",/projects&/projects&post&201():::EXIT,1.0
post+projects,only_allow_merge_if_pipeline_succeeds,input.only_allow_merge_if_pipeline_succeeds == return.only_allow_merge_if_pipeline_succeeds,daikon.inv.binary.twoScalar.IntEqual,"(input.only_allow_merge_if_pipeline_succeeds, return.only_allow_merge_if_pipeline_succeeds)",/projects&/projects&post&201():::EXIT,1.0
post+projects,owner.id,"return.owner.id == return.creator_id
return.owner.id <= return.namespace.id","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntLessEqual","(return.owner.id, return.creator_id)
(return.owner.id, return.namespace.id)","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT",1.0
post+projects,owner.name,return.owner.name == return.namespace.name,daikon.inv.binary.twoString.StringEqual,"(return.owner.name, return.namespace.name)",/projects&/projects&post&201():::EXIT,1.0
post+projects,packages_enabled,input.packages_enabled == return.packages_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.packages_enabled, return.packages_enabled)",/projects&/projects&post&201():::EXIT,1.0
post+projects,path,input.path == return.path,daikon.inv.binary.twoString.StringEqual,"(input.path, return.path)",/projects&/projects&post&201():::EXIT,1.0
post+projects,path_with_namespace,"input.path is a substring of return.path_with_namespace
return.path_with_namespace is a substring of return.ssh_url_to_repo
return.path_with_namespace is a substring of return.web_url
return.path is a substring of return.path_with_namespace
return.namespace.full_path is a substring of return.path_with_namespace","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(input.path, return.path_with_namespace)
(return.ssh_url_to_repo, return.path_with_namespace)
(return.web_url, return.path_with_namespace)
(return.path, return.path_with_namespace)
(return.path_with_namespace, return.namespace.full_path)","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT",1.0
post+projects,permissions,return.permissions == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions),/projects&/projects&post&201():::EXIT,1.0
post+projects,permissions.group_access,return.permissions.group_access == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.group_access),/projects&/projects&post&201():::EXIT,1.0
post+projects,permissions.project_access,return.permissions.project_access == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.project_access),/projects&/projects&post&201():::EXIT,1.0
post+projects,public_jobs,input.public_builds == return.public_jobs,daikon.inv.binary.twoScalar.IntEqual,"(input.public_builds, return.public_jobs)",/projects&/projects&post&201():::EXIT,1.0
post+projects,readme_url,input.default_branch is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(input.default_branch, return.readme_url)",/projects&/projects&post&201():::EXIT,1.0
post+projects,remove_source_branch_after_merge,input.remove_source_branch_after_merge == return.remove_source_branch_after_merge,daikon.inv.binary.twoScalar.IntEqual,"(input.remove_source_branch_after_merge, return.remove_source_branch_after_merge)",/projects&/projects&post&201():::EXIT,1.0
post+projects,repository_storage,"input.repository_storage == return.repository_storage
return.repository_storage == ""default""
LENGTH(return.repository_storage)==7","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(input.repository_storage, return.repository_storage)
(return.repository_storage)
(return.repository_storage)","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT",1.0
post+projects,request_access_enabled,input.request_access_enabled == return.request_access_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.request_access_enabled, return.request_access_enabled)",/projects&/projects&post&201():::EXIT,1.0
post+projects,resolve_outdated_diff_discussions,input.resolve_outdated_diff_discussions == return.resolve_outdated_diff_discussions,daikon.inv.binary.twoScalar.IntEqual,"(input.resolve_outdated_diff_discussions, return.resolve_outdated_diff_discussions)",/projects&/projects&post&201():::EXIT,1.0
post+projects,runners_token,LENGTH(return.runners_token)==29,daikon.inv.unary.string.FixedLengthString,(return.runners_token),/projects&/projects&post&201():::EXIT,1.0
post+projects,shared_runners_enabled,input.shared_runners_enabled == return.shared_runners_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.shared_runners_enabled, return.shared_runners_enabled)",/projects&/projects&post&201():::EXIT,1.0
post+projects,shared_with_groups,return.shared_with_groups[] == [],daikon.inv.unary.sequence.OneOfSequence,(return.shared_with_groups[..]),/projects&/projects&post&201():::EXIT,1.0
post+projects,statistics,return.statistics == null,daikon.inv.unary.scalar.OneOfScalar,(return.statistics),/projects&/projects&post&201():::EXIT,1.0
post+projects,tag_list,"size(input.tag_list[]) == size(return.tag_list[])
return.open_issues_count <= size(return.tag_list[])
return.forks_count <= size(return.tag_list[])","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual","(size(input.tag_list[..]), size(return.tag_list[..]))
(return.open_issues_count, size(return.tag_list[..]))
(return.forks_count, size(return.tag_list[..]))","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT",1.0
post+projects,visibility,"input.visibility == return.visibility
return.visibility one of { ""internal"", ""private"", ""public"" }","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.OneOfString","(input.visibility, return.visibility)
(return.visibility)","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT",1.0
post+projects,web_url,"return.web_url is a substring of return.http_url_to_repo
return.web_url is a substring of return.readme_url","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return.http_url_to_repo, return.web_url)
(return.web_url, return.readme_url)","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT",1.0
post+projects_{id}_issues,_links.self,"return._links.self is a substring of return._links.award_emoji
return._links.self is a substring of return._links.notes
return._links.project is a substring of return._links.self","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return._links.award_emoji, return._links.self)
(return._links.notes, return._links.self)
(return._links.project, return._links.self)","/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT",1.0
post+projects_{id}_issues,assignee.web_url,return.assignee.username is a substring of return.assignee.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.assignee.web_url, return.assignee.username)",/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,1.0
post+projects_{id}_issues,assignees.id,"input.assignee_ids[] elements == return.id
return.id in input.assignee_ids[]
return.id >= size(input.assignee_ids[])","daikon.inv.binary.sequenceScalar.SeqIntEqual
daikon.inv.binary.sequenceScalar.Member
daikon.inv.binary.twoScalar.IntGreaterEqual","(input.assignee_ids[..], return.id)
(input.assignee_ids[..], return.id)
(return.id, size(input.assignee_ids[..]))","/projects/{id}/issues&/projects/{id}/issues&post&201&assignees():::EXIT
/projects/{id}/issues&/projects/{id}/issues&post&201&assignees():::EXIT
/projects/{id}/issues&/projects/{id}/issues&post&201&assignees():::EXIT",1.0
post+projects_{id}_issues,assignees.state,"return.state == ""active""
LENGTH(return.state)==6","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.state)
(return.state)","/projects/{id}/issues&/projects/{id}/issues&post&201&assignees():::EXIT
/projects/{id}/issues&/projects/{id}/issues&post&201&assignees():::EXIT",1.0
post+projects_{id}_issues,assignees.web_url,return.username is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.username)",/projects/{id}/issues&/projects/{id}/issues&post&201&assignees():::EXIT,1.0
post+projects_{id}_issues,author.state,"return.author.state == ""active""
LENGTH(return.author.state)==6","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.author.state)
(return.author.state)","/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT",1.0
post+projects_{id}_issues,closed_by,return.closed_by == null,daikon.inv.unary.scalar.OneOfScalar,(return.closed_by),/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,1.0
post+projects_{id}_issues,confidential,input.confidential == return.confidential,daikon.inv.binary.twoScalar.IntEqual,"(input.confidential, return.confidential)",/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,1.0
post+projects_{id}_issues,created_at,"LENGTH(return.created_at)==24
return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.created_at)
(return.created_at)","/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT",1.0
post+projects_{id}_issues,description,input.description == return.description,daikon.inv.binary.twoString.StringEqual,"(input.description, return.description)",/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,1.0
post+projects_{id}_issues,downvotes,"return.downvotes == return.merge_requests_count
return.downvotes == return.task_completion_status.count
return.downvotes == return.task_completion_status.completed_count
return.downvotes == return.time_stats.time_estimate
return.downvotes == return.time_stats.total_time_spent
return.downvotes == return.upvotes
return.downvotes == return.user_notes_count
return.downvotes == 0
return.downvotes <= size(return.assignees[])","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.OneOfScalar
daikon.inv.binary.twoScalar.IntLessEqual","(return.downvotes, return.merge_requests_count)
(return.downvotes, return.task_completion_status.count)
(return.downvotes, return.task_completion_status.completed_count)
(return.downvotes, return.time_stats.time_estimate)
(return.downvotes, return.time_stats.total_time_spent)
(return.downvotes, return.upvotes)
(return.downvotes, return.user_notes_count)
(return.downvotes)
(return.downvotes, size(return.assignees[..]))","/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT",1.0
post+projects_{id}_issues,due_date,input.due_date == return.due_date,daikon.inv.binary.twoString.StringEqual,"(input.due_date, return.due_date)",/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,1.0
post+projects_{id}_issues,has_tasks,return.has_tasks == false,daikon.inv.unary.scalar.OneOfScalar,(return.has_tasks),/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,1.0
post+projects_{id}_issues,input.assignee_ids[author.id -1],input.assignee_ids[return.author.id -1] == input.assignee_ids[return.downvotes],daikon.inv.binary.twoScalar.IntEqual,"(input.assignee_ids[return.author.id -1], input.assignee_ids[return.downvotes])",/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,1.0
post+projects_{id}_issues,input.assignee_ids[downvotes],"input.assignee_ids[] elements == input.assignee_ids[return.downvotes]
size(input.assignee_ids[]) <= input.assignee_ids[return.downvotes]","daikon.inv.binary.sequenceScalar.SeqIntEqual
daikon.inv.binary.twoScalar.IntLessEqual","(input.assignee_ids[..], input.assignee_ids[return.downvotes])
(size(input.assignee_ids[..]), input.assignee_ids[return.downvotes])","/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT",1.0
post+projects_{id}_issues,milestone,return.milestone == null,daikon.inv.unary.scalar.OneOfScalar,(return.milestone),/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,1.0
post+projects_{id}_issues,project_id,input.id == return.project_id,daikon.inv.binary.twoScalar.IntEqual,"(input.id, return.project_id)",/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,1.0
post+projects_{id}_issues,references.full,return.references.relative is a substring of return.references.full,daikon.inv.binary.twoString.StdString$SubString,"(return.references.full, return.references.relative)",/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,1.0
post+projects_{id}_issues,references.relative,return.references.relative == return.references.short,daikon.inv.binary.twoString.StringEqual,"(return.references.relative, return.references.short)",/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,1.0
post+projects_{id}_issues,state,"return.state == ""opened""
LENGTH(return.state)==6","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.state)
(return.state)","/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT",1.0
post+projects_{id}_issues,subscribed,return.subscribed == true,daikon.inv.unary.scalar.OneOfScalar,(return.subscribed),/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,1.0
post+projects_{id}_issues,title,input.title == return.title,daikon.inv.binary.twoString.StringEqual,"(input.title, return.title)",/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,1.0
post+projects_{id}_issues,updated_at,"LENGTH(return.updated_at)==24
return.updated_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.updated_at)
(return.updated_at)","/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT",1.0
post+projects_{id}_issues_{issue_iid}_move,_links.self,"return._links.self is a substring of return._links.award_emoji
return._links.self is a substring of return._links.notes
return._links.project is a substring of return._links.self","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return._links.award_emoji, return._links.self)
(return._links.notes, return._links.self)
(return._links.project, return._links.self)","/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT",1.0
post+projects_{id}_issues_{issue_iid}_move,assignees,"return.assignees[] elements has only one value
size(return.assignees[]) one of { 0, 1 }
input.issue_iid > size(return.assignees[])","daikon.inv.unary.sequence.EltOneOf
daikon.inv.unary.scalar.OneOfScalar
daikon.inv.binary.twoScalar.IntGreaterThan","(return.assignees[..])
(size(return.assignees[..]))
(input.issue_iid, size(return.assignees[..]))","/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT",1.0
post+projects_{id}_issues_{issue_iid}_move,assignees.name,return.username == return.name,daikon.inv.binary.twoString.StringEqual,"(return.username, return.name)",/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201&assignees():::EXIT,1.0
post+projects_{id}_issues_{issue_iid}_move,author.avatar_url,"LENGTH(return.author.avatar_url)==81
return.author.avatar_url is Url","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.IsUrl","(return.author.avatar_url)
(return.author.avatar_url)","/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT",1.0
post+projects_{id}_issues_{issue_iid}_move,author.id,"return.author.id >= 1
return.author.id >= size(return.assignees[])","daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.author.id)
(return.author.id, size(return.assignees[..]))","/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT",1.0
post+projects_{id}_issues_{issue_iid}_move,author.state,"return.author.state == ""active""
LENGTH(return.author.state)==6","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.author.state)
(return.author.state)","/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT",1.0
post+projects_{id}_issues_{issue_iid}_move,author.web_url,return.author.username is a substring of return.author.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.author.web_url, return.author.username)",/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT,1.0
post+projects_{id}_issues_{issue_iid}_move,closed_by,return.closed_by == null,daikon.inv.unary.scalar.OneOfScalar,(return.closed_by),/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT,1.0
post+projects_{id}_issues_{issue_iid}_move,created_at,"LENGTH(return.created_at)==24
return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.created_at)
(return.created_at)","/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT",1.0
post+projects_{id}_issues_{issue_iid}_move,downvotes,"return.downvotes == return.merge_requests_count
return.downvotes == return.task_completion_status.count
return.downvotes == return.task_completion_status.completed_count
return.downvotes == return.time_stats.time_estimate
return.downvotes == return.time_stats.total_time_spent
return.downvotes == return.upvotes
return.downvotes == return.user_notes_count
return.downvotes == size(return.labels[])
return.downvotes == size(return.labels[])
return.downvotes <= size(return.assignees[])","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntLessEqual","(return.downvotes, return.merge_requests_count)
(return.downvotes, return.task_completion_status.count)
(return.downvotes, return.task_completion_status.completed_count)
(return.downvotes, return.time_stats.time_estimate)
(return.downvotes, return.time_stats.total_time_spent)
(return.downvotes, return.upvotes)
(return.downvotes, return.user_notes_count)
(return.downvotes, size(return.labels[..]))
(return.downvotes, size(return.labels[..]))
(return.downvotes, size(return.assignees[..]))","/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT",1.0
post+projects_{id}_issues_{issue_iid}_move,due_date,return.due_date is a Date. Format: YYYY/MM/DD,daikon.inv.unary.string.dates.IsDateYYYYMMDD,(return.due_date),/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT,1.0
post+projects_{id}_issues_{issue_iid}_move,has_tasks,return.has_tasks == false,daikon.inv.unary.scalar.OneOfScalar,(return.has_tasks),/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT,1.0
post+projects_{id}_issues_{issue_iid}_move,iid,return.iid > size(return.assignees[]),daikon.inv.binary.twoScalar.IntGreaterThan,"(return.iid, size(return.assignees[..]))",/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT,1.0
post+projects_{id}_issues_{issue_iid}_move,labels,return.labels[] == [],daikon.inv.unary.stringsequence.OneOfStringSequence,(return.labels[..]),/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT,1.0
post+projects_{id}_issues_{issue_iid}_move,milestone,return.milestone == null,daikon.inv.unary.scalar.OneOfScalar,(return.milestone),/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT,1.0
post+projects_{id}_issues_{issue_iid}_move,project_id,input.to_project_id == return.project_id,daikon.inv.binary.twoScalar.IntEqual,"(input.to_project_id, return.project_id)",/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT,1.0
post+projects_{id}_issues_{issue_iid}_move,references.full,return.references.relative is a substring of return.references.full,daikon.inv.binary.twoString.StdString$SubString,"(return.references.full, return.references.relative)",/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT,1.0
post+projects_{id}_issues_{issue_iid}_move,references.relative,return.references.short is a substring of return.references.relative,daikon.inv.binary.twoString.StdString$SubString,"(return.references.relative, return.references.short)",/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT,1.0
post+projects_{id}_issues_{issue_iid}_move,state,"return.state == ""opened""
LENGTH(return.state)==6","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.state)
(return.state)","/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT",1.0
post+projects_{id}_issues_{issue_iid}_move,subscribed,return.subscribed == true,daikon.inv.unary.scalar.OneOfScalar,(return.subscribed),/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT,1.0
post+projects_{id}_issues_{issue_iid}_move,updated_at,"LENGTH(return.updated_at)==24
return.updated_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.updated_at)
(return.updated_at)","/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT",1.0
post+projects_{id}_issues_{issue_iid}_subscribe,_links.self,"return._links.self is a substring of return._links.award_emoji
return._links.self is a substring of return._links.notes
return._links.project is a substring of return._links.self","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return._links.award_emoji, return._links.self)
(return._links.notes, return._links.self)
(return._links.project, return._links.self)","/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT",1.0
post+projects_{id}_issues_{issue_iid}_subscribe,assignee.id,return.assignee.id >= size(return.assignees[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.assignee.id, size(return.assignees[..]))",/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT,1.0
post+projects_{id}_issues_{issue_iid}_subscribe,assignee.web_url,return.assignee.username is a substring of return.assignee.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.assignee.web_url, return.assignee.username)",/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT,1.0
post+projects_{id}_issues_{issue_iid}_subscribe,assignees,"size(return.assignees[]) one of { 0, 1 }
input.issue_iid >= size(return.assignees[])","daikon.inv.unary.scalar.OneOfScalar
daikon.inv.binary.twoScalar.IntGreaterEqual","(size(return.assignees[..]))
(input.issue_iid, size(return.assignees[..]))","/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT",1.0
post+projects_{id}_issues_{issue_iid}_subscribe,assignees.avatar_url,"LENGTH(return.avatar_url)==81
return.avatar_url is Url","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.IsUrl","(return.avatar_url)
(return.avatar_url)","/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201&assignees():::EXIT
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201&assignees():::EXIT",1.0
post+projects_{id}_issues_{issue_iid}_subscribe,assignees.state,"return.state == ""active""
LENGTH(return.state)==6","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.state)
(return.state)","/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201&assignees():::EXIT
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201&assignees():::EXIT",1.0
post+projects_{id}_issues_{issue_iid}_subscribe,assignees.web_url,return.username is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.username)",/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201&assignees():::EXIT,1.0
post+projects_{id}_issues_{issue_iid}_subscribe,author.id,return.author.id >= size(return.assignees[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.author.id, size(return.assignees[..]))",/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT,1.0
post+projects_{id}_issues_{issue_iid}_subscribe,author.state,"return.author.state == ""active""
LENGTH(return.author.state)==6","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.author.state)
(return.author.state)","/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT",1.0
post+projects_{id}_issues_{issue_iid}_subscribe,author.web_url,return.author.username is a substring of return.author.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.author.web_url, return.author.username)",/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT,1.0
post+projects_{id}_issues_{issue_iid}_subscribe,closed_by,return.closed_by == null,daikon.inv.unary.scalar.OneOfScalar,(return.closed_by),/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT,1.0
post+projects_{id}_issues_{issue_iid}_subscribe,created_at,"LENGTH(return.created_at)==24
return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.created_at)
(return.created_at)","/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT",1.0
post+projects_{id}_issues_{issue_iid}_subscribe,downvotes,"return.downvotes == return.merge_requests_count
return.downvotes == return.task_completion_status.count
return.downvotes == return.task_completion_status.completed_count
return.downvotes == return.time_stats.time_estimate
return.downvotes == return.upvotes
return.downvotes == return.user_notes_count
return.downvotes == 0
return.downvotes <= return.time_stats.total_time_spent
return.downvotes <= size(return.assignees[])","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.OneOfScalar
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual","(return.downvotes, return.merge_requests_count)
(return.downvotes, return.task_completion_status.count)
(return.downvotes, return.task_completion_status.completed_count)
(return.downvotes, return.time_stats.time_estimate)
(return.downvotes, return.upvotes)
(return.downvotes, return.user_notes_count)
(return.downvotes)
(return.downvotes, return.time_stats.total_time_spent)
(return.downvotes, size(return.assignees[..]))","/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT",1.0
post+projects_{id}_issues_{issue_iid}_subscribe,due_date,return.due_date is a Date. Format: YYYY/MM/DD,daikon.inv.unary.string.dates.IsDateYYYYMMDD,(return.due_date),/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT,1.0
post+projects_{id}_issues_{issue_iid}_subscribe,has_tasks,return.has_tasks == false,daikon.inv.unary.scalar.OneOfScalar,(return.has_tasks),/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT,1.0
post+projects_{id}_issues_{issue_iid}_subscribe,iid,input.issue_iid == return.iid,daikon.inv.binary.twoScalar.IntEqual,"(input.issue_iid, return.iid)",/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT,1.0
post+projects_{id}_issues_{issue_iid}_subscribe,milestone,return.milestone == null,daikon.inv.unary.scalar.OneOfScalar,(return.milestone),/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT,1.0
post+projects_{id}_issues_{issue_iid}_subscribe,project_id,input.id == return.project_id,daikon.inv.binary.twoScalar.IntEqual,"(input.id, return.project_id)",/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT,1.0
post+projects_{id}_issues_{issue_iid}_subscribe,references.full,return.references.relative is a substring of return.references.full,daikon.inv.binary.twoString.StdString$SubString,"(return.references.full, return.references.relative)",/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT,1.0
post+projects_{id}_issues_{issue_iid}_subscribe,references.relative,return.references.relative == return.references.short,daikon.inv.binary.twoString.StringEqual,"(return.references.relative, return.references.short)",/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT,1.0
post+projects_{id}_issues_{issue_iid}_subscribe,subscribed,return.subscribed == true,daikon.inv.unary.scalar.OneOfScalar,(return.subscribed),/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT,1.0
post+projects_{id}_issues_{issue_iid}_subscribe,updated_at,"LENGTH(return.updated_at)==24
return.updated_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.updated_at)
(return.updated_at)","/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT",1.0
post+projects_{id}_issues_{issue_iid}_todo,action_name,"return.action_name == ""marked""
LENGTH(return.action_name)==6","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.action_name)
(return.action_name)","/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT",1.0
post+projects_{id}_issues_{issue_iid}_todo,author.avatar_url,"LENGTH(return.author.avatar_url)==81
return.author.avatar_url is Url","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.IsUrl","(return.author.avatar_url)
(return.author.avatar_url)","/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT",1.0
post+projects_{id}_issues_{issue_iid}_todo,author.state,"return.author.state == return.target.assignee.state
return.author.state == return.target.author.state
return.author.state == return.target.closed_by.state
return.author.state == ""active""
LENGTH(return.author.state)==6","daikon.inv.binary.twoString.StringEqual
daikon.inv.binary.twoString.StringEqual
daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.author.state, return.target.assignee.state)
(return.author.state, return.target.author.state)
(return.author.state, return.target.closed_by.state)
(return.author.state)
(return.author.state)","/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT",1.0
post+projects_{id}_issues_{issue_iid}_todo,author.web_url,return.author.username is a substring of return.author.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.author.web_url, return.author.username)",/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,1.0
post+projects_{id}_issues_{issue_iid}_todo,body,return.body == return.target.title,daikon.inv.binary.twoString.StringEqual,"(return.body, return.target.title)",/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,1.0
post+projects_{id}_issues_{issue_iid}_todo,created_at,"LENGTH(return.created_at)==24
return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.created_at)
(return.created_at)","/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT",1.0
post+projects_{id}_issues_{issue_iid}_todo,project.id,input.id == return.project.id,daikon.inv.binary.twoScalar.IntEqual,"(input.id, return.project.id)",/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,1.0
post+projects_{id}_issues_{issue_iid}_todo,project.name,return.project.name is a substring of return.project.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.project.name, return.project.name_with_namespace)",/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,1.0
post+projects_{id}_issues_{issue_iid}_todo,project.path,return.project.path is a substring of return.project.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.project.path, return.project.path_with_namespace)",/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,1.0
post+projects_{id}_issues_{issue_iid}_todo,project.path_with_namespace,"return.project.path_with_namespace is a substring of return.target.references.full
return.project.path_with_namespace is a substring of return.target_url","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return.project.path_with_namespace, return.target.references.full)
(return.project.path_with_namespace, return.target_url)","/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT",1.0
post+projects_{id}_issues_{issue_iid}_todo,state,"return.state == ""pending""
LENGTH(return.state)==7","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.state)
(return.state)","/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT",1.0
post+projects_{id}_issues_{issue_iid}_todo,target._links.award_emoji,return.target._links.self is a substring of return.target._links.award_emoji,daikon.inv.binary.twoString.StdString$SubString,"(return.target._links.award_emoji, return.target._links.self)",/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,1.0
post+projects_{id}_issues_{issue_iid}_todo,target._links.notes,return.target._links.self is a substring of return.target._links.notes,daikon.inv.binary.twoString.StdString$SubString,"(return.target._links.notes, return.target._links.self)",/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,1.0
post+projects_{id}_issues_{issue_iid}_todo,target._links.project,return.target._links.project is a substring of return.target._links.self,daikon.inv.binary.twoString.StdString$SubString,"(return.target._links.project, return.target._links.self)",/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,1.0
post+projects_{id}_issues_{issue_iid}_todo,target.assignee.state,"return.target.assignee.state == ""active""
LENGTH(return.target.assignee.state)==6","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.target.assignee.state)
(return.target.assignee.state)","/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT",1.0
post+projects_{id}_issues_{issue_iid}_todo,target.assignee.web_url,return.target.assignee.username is a substring of return.target.assignee.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.target.assignee.web_url, return.target.assignee.username)",/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,1.0
post+projects_{id}_issues_{issue_iid}_todo,target.assignees,"size(return.target.assignees[]) one of { 0, 1 }
input.issue_iid > size(return.target.assignees[])","daikon.inv.unary.scalar.OneOfScalar
daikon.inv.binary.twoScalar.IntGreaterThan","(size(return.target.assignees[..]))
(input.issue_iid, size(return.target.assignees[..]))","/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT",1.0
post+projects_{id}_issues_{issue_iid}_todo,target.assignees.state,"return.state == ""active""
LENGTH(return.state)==6","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.state)
(return.state)","/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201&target&assignees():::EXIT
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201&target&assignees():::EXIT",1.0
post+projects_{id}_issues_{issue_iid}_todo,target.assignees.web_url,return.username is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.username)",/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201&target&assignees():::EXIT,1.0
post+projects_{id}_issues_{issue_iid}_todo,target.author.avatar_url,"LENGTH(return.target.author.avatar_url)==81
return.target.author.avatar_url is Url","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.IsUrl","(return.target.author.avatar_url)
(return.target.author.avatar_url)","/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT",1.0
post+projects_{id}_issues_{issue_iid}_todo,target.author.id,"return.target.author.id >= 1
return.target.author.id >= size(return.target.assignees[])
return.target.author.id >= size(return.target.labels[])","daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.target.author.id)
(return.target.author.id, size(return.target.assignees[..]))
(return.target.author.id, size(return.target.labels[..]))","/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT",1.0
post+projects_{id}_issues_{issue_iid}_todo,target.author.web_url,return.target.author.username is a substring of return.target.author.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.target.author.web_url, return.target.author.username)",/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,1.0
post+projects_{id}_issues_{issue_iid}_todo,target.closed_by.state,"return.target.closed_by.state == ""active""",daikon.inv.unary.string.OneOfString,(return.target.closed_by.state),/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,1.0
post+projects_{id}_issues_{issue_iid}_todo,target.created_at,"LENGTH(return.target.created_at)==24
return.target.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.target.created_at)
(return.target.created_at)","/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT",1.0
post+projects_{id}_issues_{issue_iid}_todo,target.downvotes,"return.target.downvotes == return.target.merge_requests_count
return.target.downvotes == return.target.task_completion_status.count
return.target.downvotes == return.target.task_completion_status.completed_count
return.target.downvotes == return.target.time_stats.time_estimate
return.target.downvotes == return.target.time_stats.total_time_spent
return.target.downvotes == return.target.upvotes
return.target.downvotes == return.target.user_notes_count
return.target.downvotes == 0
return.target.downvotes <= size(return.target.assignees[])
return.target.downvotes <= size(return.target.labels[])","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.OneOfScalar
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual","(return.target.downvotes, return.target.merge_requests_count)
(return.target.downvotes, return.target.task_completion_status.count)
(return.target.downvotes, return.target.task_completion_status.completed_count)
(return.target.downvotes, return.target.time_stats.time_estimate)
(return.target.downvotes, return.target.time_stats.total_time_spent)
(return.target.downvotes, return.target.upvotes)
(return.target.downvotes, return.target.user_notes_count)
(return.target.downvotes)
(return.target.downvotes, size(return.target.assignees[..]))
(return.target.downvotes, size(return.target.labels[..]))","/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT",1.0
post+projects_{id}_issues_{issue_iid}_todo,target.due_date,return.target.due_date is a Date. Format: YYYY/MM/DD,daikon.inv.unary.string.dates.IsDateYYYYMMDD,(return.target.due_date),/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,1.0
post+projects_{id}_issues_{issue_iid}_todo,target.has_tasks,"return.target.has_tasks == return.target.subscribed
return.target.has_tasks == false","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.OneOfScalar","(return.target.has_tasks, return.target.subscribed)
(return.target.has_tasks)","/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT",1.0
post+projects_{id}_issues_{issue_iid}_todo,target.iid,input.issue_iid == return.target.iid,daikon.inv.binary.twoScalar.IntEqual,"(input.issue_iid, return.target.iid)",/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,1.0
post+projects_{id}_issues_{issue_iid}_todo,target.milestone,return.target.milestone == null,daikon.inv.unary.scalar.OneOfScalar,(return.target.milestone),/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,1.0
post+projects_{id}_issues_{issue_iid}_todo,target.project_id,input.id == return.target.project_id,daikon.inv.binary.twoScalar.IntEqual,"(input.id, return.target.project_id)",/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,1.0
post+projects_{id}_issues_{issue_iid}_todo,target.references.full,return.target.references.relative is a substring of return.target.references.full,daikon.inv.binary.twoString.StdString$SubString,"(return.target.references.full, return.target.references.relative)",/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,1.0
post+projects_{id}_issues_{issue_iid}_todo,target.references.relative,return.target.references.relative == return.target.references.short,daikon.inv.binary.twoString.StringEqual,"(return.target.references.relative, return.target.references.short)",/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,1.0
post+projects_{id}_issues_{issue_iid}_todo,target.state,"return.target.state one of { ""closed"", ""opened"" }
LENGTH(return.target.state)==6","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.target.state)
(return.target.state)","/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT",1.0
post+projects_{id}_issues_{issue_iid}_todo,target.updated_at,"LENGTH(return.target.updated_at)==24
return.target.updated_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.target.updated_at)
(return.target.updated_at)","/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT",1.0
post+projects_{id}_issues_{issue_iid}_todo,target.web_url,return.target.web_url == return.target_url,daikon.inv.binary.twoString.StringEqual,"(return.target.web_url, return.target_url)",/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,1.0
post+projects_{id}_issues_{issue_iid}_todo,target_type,"return.target_type == ""Issue""
LENGTH(return.target_type)==5","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.target_type)
(return.target_type)","/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT",1.0
post+projects_{id}_issues_{issue_iid}_unsubscribe,_links.self,"return._links.self is a substring of return._links.award_emoji
return._links.self is a substring of return._links.notes
return._links.project is a substring of return._links.self","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return._links.award_emoji, return._links.self)
(return._links.notes, return._links.self)
(return._links.project, return._links.self)","/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT",1.0
post+projects_{id}_issues_{issue_iid}_unsubscribe,assignee.username,return.assignee.username == return.assignee.name,daikon.inv.binary.twoString.StringEqual,"(return.assignee.username, return.assignee.name)",/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT,1.0
post+projects_{id}_issues_{issue_iid}_unsubscribe,assignee.web_url,return.assignee.username is a substring of return.assignee.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.assignee.web_url, return.assignee.username)",/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT,1.0
post+projects_{id}_issues_{issue_iid}_unsubscribe,assignees,"size(return.assignees[]) one of { 0, 1 }
input.issue_iid > size(return.assignees[])","daikon.inv.unary.scalar.OneOfScalar
daikon.inv.binary.twoScalar.IntGreaterThan","(size(return.assignees[..]))
(input.issue_iid, size(return.assignees[..]))","/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT",1.0
post+projects_{id}_issues_{issue_iid}_unsubscribe,assignees.name,return.username == return.name,daikon.inv.binary.twoString.StringEqual,"(return.username, return.name)",/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201&assignees():::EXIT,1.0
post+projects_{id}_issues_{issue_iid}_unsubscribe,assignees.state,"return.state == ""active""
LENGTH(return.state)==6","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.state)
(return.state)","/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201&assignees():::EXIT
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201&assignees():::EXIT",1.0
post+projects_{id}_issues_{issue_iid}_unsubscribe,assignees.web_url,return.username is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.username)",/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201&assignees():::EXIT,1.0
post+projects_{id}_issues_{issue_iid}_unsubscribe,author.id,"return.author.id < return.id
return.author.id >= size(return.assignees[])","daikon.inv.binary.twoScalar.IntLessThan
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.author.id, return.id)
(return.author.id, size(return.assignees[..]))","/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT",1.0
post+projects_{id}_issues_{issue_iid}_unsubscribe,author.state,"return.author.state == ""active""
LENGTH(return.author.state)==6","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.author.state)
(return.author.state)","/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT",1.0
post+projects_{id}_issues_{issue_iid}_unsubscribe,author.web_url,return.author.username is a substring of return.author.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.author.web_url, return.author.username)",/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT,1.0
post+projects_{id}_issues_{issue_iid}_unsubscribe,closed_by,return.closed_by == null,daikon.inv.unary.scalar.OneOfScalar,(return.closed_by),/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT,1.0
post+projects_{id}_issues_{issue_iid}_unsubscribe,created_at,"LENGTH(return.created_at)==24
return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.created_at)
(return.created_at)","/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT",1.0
post+projects_{id}_issues_{issue_iid}_unsubscribe,downvotes,"return.downvotes == return.merge_requests_count
return.downvotes == return.task_completion_status.count
return.downvotes == return.task_completion_status.completed_count
return.downvotes == return.time_stats.time_estimate
return.downvotes == return.upvotes
return.downvotes == return.user_notes_count
return.downvotes == 0
return.downvotes <= return.time_stats.total_time_spent
return.downvotes <= size(return.assignees[])","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.OneOfScalar
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual","(return.downvotes, return.merge_requests_count)
(return.downvotes, return.task_completion_status.count)
(return.downvotes, return.task_completion_status.completed_count)
(return.downvotes, return.time_stats.time_estimate)
(return.downvotes, return.upvotes)
(return.downvotes, return.user_notes_count)
(return.downvotes)
(return.downvotes, return.time_stats.total_time_spent)
(return.downvotes, size(return.assignees[..]))","/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT",1.0
post+projects_{id}_issues_{issue_iid}_unsubscribe,due_date,return.due_date is a Date. Format: YYYY/MM/DD,daikon.inv.unary.string.dates.IsDateYYYYMMDD,(return.due_date),/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT,1.0
post+projects_{id}_issues_{issue_iid}_unsubscribe,has_tasks,"return.has_tasks == return.subscribed
return.has_tasks == false","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.OneOfScalar","(return.has_tasks, return.subscribed)
(return.has_tasks)","/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT",1.0
post+projects_{id}_issues_{issue_iid}_unsubscribe,id,return.id > return.time_stats.total_time_spent,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.id, return.time_stats.total_time_spent)",/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT,1.0
post+projects_{id}_issues_{issue_iid}_unsubscribe,iid,input.issue_iid == return.iid,daikon.inv.binary.twoScalar.IntEqual,"(input.issue_iid, return.iid)",/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT,1.0
post+projects_{id}_issues_{issue_iid}_unsubscribe,milestone,return.milestone == null,daikon.inv.unary.scalar.OneOfScalar,(return.milestone),/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT,1.0
post+projects_{id}_issues_{issue_iid}_unsubscribe,project_id,input.id == return.project_id,daikon.inv.binary.twoScalar.IntEqual,"(input.id, return.project_id)",/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT,1.0
post+projects_{id}_issues_{issue_iid}_unsubscribe,references.full,return.references.relative is a substring of return.references.full,daikon.inv.binary.twoString.StdString$SubString,"(return.references.full, return.references.relative)",/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT,1.0
post+projects_{id}_issues_{issue_iid}_unsubscribe,references.relative,return.references.relative == return.references.short,daikon.inv.binary.twoString.StringEqual,"(return.references.relative, return.references.short)",/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT,1.0
post+projects_{id}_issues_{issue_iid}_unsubscribe,state,"return.state == ""opened""
LENGTH(return.state)==6","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.state)
(return.state)","/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT",1.0
post+projects_{id}_issues_{issue_iid}_unsubscribe,updated_at,"LENGTH(return.updated_at)==24
return.updated_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.updated_at)
(return.updated_at)","/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT",1.0
put+projects_{id}_issues_{issue_iid},_links.self,"return._links.self is a substring of return._links.award_emoji
return._links.self is a substring of return._links.notes
return._links.project is a substring of return._links.self","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return._links.award_emoji, return._links.self)
(return._links.notes, return._links.self)
(return._links.project, return._links.self)","/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT",1.0
put+projects_{id}_issues_{issue_iid},assignee.id,return.assignee.id >= size(return.assignees[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.assignee.id, size(return.assignees[..]))",/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,1.0
put+projects_{id}_issues_{issue_iid},assignee.web_url,return.assignee.username is a substring of return.assignee.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.assignee.web_url, return.assignee.username)",/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,1.0
put+projects_{id}_issues_{issue_iid},assignees.state,"return.state == ""active""
LENGTH(return.state)==6","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.state)
(return.state)","/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200&assignees():::EXIT
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200&assignees():::EXIT",1.0
put+projects_{id}_issues_{issue_iid},assignees.web_url,return.username is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.username)",/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200&assignees():::EXIT,1.0
put+projects_{id}_issues_{issue_iid},author.state,"return.author.state == return.closed_by.state
return.author.state == ""active""
LENGTH(return.author.state)==6","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.author.state, return.closed_by.state)
(return.author.state)
(return.author.state)","/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT",1.0
put+projects_{id}_issues_{issue_iid},author.web_url,return.author.username is a substring of return.author.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.author.web_url, return.author.username)",/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,1.0
put+projects_{id}_issues_{issue_iid},closed_at,"LENGTH(return.closed_at)==24
return.closed_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.closed_at)
(return.closed_at)","/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT",1.0
put+projects_{id}_issues_{issue_iid},closed_by.id,"return.closed_by.id >= 1
return.closed_by.id >= size(return.assignees[])","daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.closed_by.id)
(return.closed_by.id, size(return.assignees[..]))","/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT",1.0
put+projects_{id}_issues_{issue_iid},closed_by.username,return.closed_by.username is a substring of return.closed_by.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.closed_by.username, return.closed_by.web_url)",/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,1.0
put+projects_{id}_issues_{issue_iid},created_at,"LENGTH(return.created_at)==24
return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.created_at)
(return.created_at)","/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT",1.0
put+projects_{id}_issues_{issue_iid},description,input.description == return.description,daikon.inv.binary.twoString.StringEqual,"(input.description, return.description)",/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,1.0
put+projects_{id}_issues_{issue_iid},discussion_locked,input.discussion_locked == return.discussion_locked,daikon.inv.binary.twoScalar.IntEqual,"(input.discussion_locked, return.discussion_locked)",/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,1.0
put+projects_{id}_issues_{issue_iid},downvotes,"return.downvotes == return.merge_requests_count
return.downvotes == return.task_completion_status.count
return.downvotes == return.task_completion_status.completed_count
return.downvotes == return.upvotes
return.downvotes == return.user_notes_count
return.downvotes == 0
return.downvotes <= return.time_stats.time_estimate
return.downvotes <= return.time_stats.total_time_spent
return.downvotes <= size(return.assignees[])","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.OneOfScalar
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual","(return.downvotes, return.merge_requests_count)
(return.downvotes, return.task_completion_status.count)
(return.downvotes, return.task_completion_status.completed_count)
(return.downvotes, return.upvotes)
(return.downvotes, return.user_notes_count)
(return.downvotes)
(return.downvotes, return.time_stats.time_estimate)
(return.downvotes, return.time_stats.total_time_spent)
(return.downvotes, size(return.assignees[..]))","/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT",1.0
put+projects_{id}_issues_{issue_iid},has_tasks,return.has_tasks == false,daikon.inv.unary.scalar.OneOfScalar,(return.has_tasks),/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,1.0
put+projects_{id}_issues_{issue_iid},iid,input.issue_iid == return.iid,daikon.inv.binary.twoScalar.IntEqual,"(input.issue_iid, return.iid)",/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,1.0
put+projects_{id}_issues_{issue_iid},milestone,return.milestone == null,daikon.inv.unary.scalar.OneOfScalar,(return.milestone),/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,1.0
put+projects_{id}_issues_{issue_iid},project_id,input.id == return.project_id,daikon.inv.binary.twoScalar.IntEqual,"(input.id, return.project_id)",/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,1.0
put+projects_{id}_issues_{issue_iid},references.full,return.references.relative is a substring of return.references.full,daikon.inv.binary.twoString.StdString$SubString,"(return.references.full, return.references.relative)",/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,1.0
put+projects_{id}_issues_{issue_iid},references.relative,return.references.relative == return.references.short,daikon.inv.binary.twoString.StringEqual,"(return.references.relative, return.references.short)",/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,1.0
put+projects_{id}_issues_{issue_iid},state,"return.state one of { ""closed"", ""opened"" }
LENGTH(return.state)==6","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.state)
(return.state)","/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT",1.0
put+projects_{id}_issues_{issue_iid},title,input.title == return.title,daikon.inv.binary.twoString.StringEqual,"(input.title, return.title)",/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,1.0
put+projects_{id}_issues_{issue_iid},updated_at,"LENGTH(return.updated_at)==24
return.updated_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.updated_at)
(return.updated_at)","/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT",1.0
