pptname,invariant,invariantType,variables,postmanAssertion,endpoint,tp,fp,enter,invariantDescription,Unnamed: 10,groups,api,group
/groups/{id}/issues&/groups/{id}/issues&get&200%array():::EXIT,input.per_page >= size(return.array[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(input.per_page, size(return.array[..]))",pm.expect(input_per_page).to.be.at.least(return_array_size_array),get+groups_{id}_issues,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,array
/groups/{id}/issues&/groups/{id}/issues&get&200%array():::EXIT,size(input.assignee_username[]) <= size(return.array[]),daikon.inv.binary.twoScalar.IntLessEqual,"(size(input.assignee_username[..]), size(return.array[..]))",pm.expect(input_assignee_username_size_array).to.be.lte(return_array_size_array),get+groups_{id}_issues,,1.0,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,,GitLab Issues API,array
/groups/{id}/issues&/groups/{id}/issues&get&200&assignees():::EXIT,LENGTH(return.avatar_url)==81,daikon.inv.unary.string.FixedLengthString,(return.avatar_url),pm.expect(return_avatar_url).to.have.length(81),get+groups_{id}_issues,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,assignees.avatar_url
/groups/{id}/issues&/groups/{id}/issues&get&200&assignees():::EXIT,return.avatar_url is Url,daikon.inv.unary.string.IsUrl,(return.avatar_url),"pm.expect(return_avatar_url).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",get+groups_{id}_issues,1.0,,,Indicates that the value of a string variable is always a URL. Represented as x is Url.,,,GitLab Issues API,assignees.avatar_url
/groups/{id}/issues&/groups/{id}/issues&get&200&assignees():::EXIT,"return.state == ""active""",daikon.inv.unary.string.OneOfString,(return.state),"pm.expect([""active""].includes(return_state)).to.be.true",get+groups_{id}_issues,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,assignees.state
/groups/{id}/issues&/groups/{id}/issues&get&200&assignees():::EXIT,LENGTH(return.state)==6,daikon.inv.unary.string.FixedLengthString,(return.state),pm.expect(return_state).to.have.length(6),get+groups_{id}_issues,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,assignees.state
/groups/{id}/issues&/groups/{id}/issues&get&200&assignees():::EXIT,input.per_page > return.id,daikon.inv.binary.twoScalar.IntGreaterThan,"(input.per_page, return.id)",pm.expect(input_per_page).to.be.greaterThan(return_id),get+groups_{id}_issues,,1.0,,Represents an invariant of > between two long scalars. Prints as x > y.,,,GitLab Issues API,assignees.id
/groups/{id}/issues&/groups/{id}/issues&get&200&assignees():::EXIT,input.assignee_id >= return.id,daikon.inv.binary.twoScalar.IntGreaterEqual,"(input.assignee_id, return.id)",pm.expect(input_assignee_id).to.be.at.least(return_id),get+groups_{id}_issues,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,assignees.id
/groups/{id}/issues&/groups/{id}/issues&get&200&assignees():::EXIT,return.username is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.username)",pm.expect(return_web_url.includes(return_username)).to.be.true,get+groups_{id}_issues,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,assignees.web_url
/groups/{id}/issues&/groups/{id}/issues&get&200&assignees():::EXIT,return.id >= size(input.assignee_username[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.id, size(input.assignee_username[..]))",pm.expect(return_id).to.be.at.least(input_assignee_username_size_array),get+groups_{id}_issues,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,assignees.id
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,input.confidential == return.confidential,daikon.inv.binary.twoScalar.IntEqual,"(input.confidential, return.confidential)",pm.expect(input_confidential).to.eql(return_confidential),get+groups_{id}_issues,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,confidential
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,input.state == return.state,daikon.inv.binary.twoString.StringEqual,"(input.state, return.state)",pm.expect(input_state).to.eql(return_state),get+groups_{id}_issues,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,,GitLab Issues API,state
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,return.assignee.state == return.author.state,daikon.inv.binary.twoString.StringEqual,"(return.assignee.state, return.author.state)",pm.expect(return_assignee_state).to.eql(return_author_state),get+groups_{id}_issues,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,,GitLab Issues API,assignee.state
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,return.author.state == return.closed_by.state,daikon.inv.binary.twoString.StringEqual,"(return.author.state, return.closed_by.state)",pm.expect(return_author_state).to.eql(return_closed_by_state),get+groups_{id}_issues,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,,GitLab Issues API,author.state
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,return.closed_by.id == size(input.assignee_username[]),daikon.inv.binary.twoScalar.IntEqual,"(return.closed_by.id, size(input.assignee_username[..]))",pm.expect(return_closed_by_id).to.eql(input_assignee_username_size_array),get+groups_{id}_issues,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,closed_by.id
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,return.downvotes == return.merge_requests_count,daikon.inv.binary.twoScalar.IntEqual,"(return.downvotes, return.merge_requests_count)",pm.expect(return_downvotes).to.eql(return_merge_requests_count),get+groups_{id}_issues,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,downvotes
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,return.downvotes == return.task_completion_status.count,daikon.inv.binary.twoScalar.IntEqual,"(return.downvotes, return.task_completion_status.count)",pm.expect(return_downvotes).to.eql(return_task_completion_status_count),get+groups_{id}_issues,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,downvotes
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,return.downvotes == return.task_completion_status.completed_count,daikon.inv.binary.twoScalar.IntEqual,"(return.downvotes, return.task_completion_status.completed_count)",pm.expect(return_downvotes).to.eql(return_task_completion_status_completed_count),get+groups_{id}_issues,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,downvotes
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,return.downvotes == return.upvotes,daikon.inv.binary.twoScalar.IntEqual,"(return.downvotes, return.upvotes)",pm.expect(return_downvotes).to.eql(return_upvotes),get+groups_{id}_issues,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,downvotes
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,return.downvotes == return.user_notes_count,daikon.inv.binary.twoScalar.IntEqual,"(return.downvotes, return.user_notes_count)",pm.expect(return_downvotes).to.eql(return_user_notes_count),get+groups_{id}_issues,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,downvotes
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,LENGTH(return.assignee.avatar_url)==81,daikon.inv.unary.string.FixedLengthString,(return.assignee.avatar_url),pm.expect(return_assignee_avatar_url).to.have.length(81),get+groups_{id}_issues,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,assignee.avatar_url
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,return.assignee.avatar_url is Url,daikon.inv.unary.string.IsUrl,(return.assignee.avatar_url),"pm.expect(return_assignee_avatar_url).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",get+groups_{id}_issues,1.0,,,Indicates that the value of a string variable is always a URL. Represented as x is Url.,,,GitLab Issues API,assignee.avatar_url
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,"return.assignee.state == ""active""",daikon.inv.unary.string.OneOfString,(return.assignee.state),"pm.expect([""active""].includes(return_assignee_state)).to.be.true",get+groups_{id}_issues,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,assignee.state
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,LENGTH(return.assignee.state)==6,daikon.inv.unary.string.FixedLengthString,(return.assignee.state),pm.expect(return_assignee_state).to.have.length(6),get+groups_{id}_issues,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,assignee.state
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,LENGTH(return.author.avatar_url)==81,daikon.inv.unary.string.FixedLengthString,(return.author.avatar_url),pm.expect(return_author_avatar_url).to.have.length(81),get+groups_{id}_issues,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,author.avatar_url
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,return.author.avatar_url is Url,daikon.inv.unary.string.IsUrl,(return.author.avatar_url),"pm.expect(return_author_avatar_url).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",get+groups_{id}_issues,1.0,,,Indicates that the value of a string variable is always a URL. Represented as x is Url.,,,GitLab Issues API,author.avatar_url
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,"return.author.state == ""active""",daikon.inv.unary.string.OneOfString,(return.author.state),"pm.expect([""active""].includes(return_author_state)).to.be.true",get+groups_{id}_issues,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,author.state
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,LENGTH(return.author.state)==6,daikon.inv.unary.string.FixedLengthString,(return.author.state),pm.expect(return_author_state).to.have.length(6),get+groups_{id}_issues,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,author.state
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,return.author.id >= 1,daikon.inv.unary.scalar.LowerBound,(return.author.id),pm.expect(return_author_id).to.be.at.least(1),get+groups_{id}_issues,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,,GitLab Issues API,author.id
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,"return.closed_at one of { ""2025-06-15T10:46:18.318Z"", ""2025-06-15T11:06:19.689Z"", ""2025-06-15T11:12:02.208Z"" }",daikon.inv.unary.string.OneOfString,(return.closed_at),"pm.expect([""2025-06-15T10:46:18.318Z"", ""2025-06-15T11:06:19.689Z"", ""2025-06-15T11:12:02.208Z""].includes(return_closed_at)).to.be.true",get+groups_{id}_issues,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,closed_at
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,LENGTH(return.closed_at)==24,daikon.inv.unary.string.FixedLengthString,(return.closed_at),pm.expect(return_closed_at).to.have.length(24),get+groups_{id}_issues,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,closed_at
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,return.closed_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.closed_at),"pm.expect(return_closed_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+groups_{id}_issues,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,,GitLab Issues API,closed_at
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,"return.closed_by.avatar_url == ""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80&d=identicon""",daikon.inv.unary.string.OneOfString,(return.closed_by.avatar_url),"pm.expect([""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80&d=identicon""].includes(return_closed_by_avatar_url)).to.be.true",get+groups_{id}_issues,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,closed_by.avatar_url
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,LENGTH(return.closed_by.avatar_url)==81,daikon.inv.unary.string.FixedLengthString,(return.closed_by.avatar_url),pm.expect(return_closed_by_avatar_url).to.have.length(81),get+groups_{id}_issues,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,closed_by.avatar_url
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,return.closed_by.avatar_url is Url,daikon.inv.unary.string.IsUrl,(return.closed_by.avatar_url),"pm.expect(return_closed_by_avatar_url).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",get+groups_{id}_issues,1.0,,,Indicates that the value of a string variable is always a URL. Represented as x is Url.,,,GitLab Issues API,closed_by.avatar_url
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,return.closed_by.id == 1,daikon.inv.unary.scalar.OneOfScalar,(return.closed_by.id),pm.expect([1].includes(return_closed_by_id)).to.be.true,get+groups_{id}_issues,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,closed_by.id
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,"return.closed_by.name == ""Administrator""",daikon.inv.unary.string.OneOfString,(return.closed_by.name),"pm.expect([""Administrator""].includes(return_closed_by_name)).to.be.true",get+groups_{id}_issues,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,closed_by.name
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,LENGTH(return.closed_by.name)==13,daikon.inv.unary.string.FixedLengthString,(return.closed_by.name),pm.expect(return_closed_by_name).to.have.length(13),get+groups_{id}_issues,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,closed_by.name
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,"return.closed_by.state == ""active""",daikon.inv.unary.string.OneOfString,(return.closed_by.state),"pm.expect([""active""].includes(return_closed_by_state)).to.be.true",get+groups_{id}_issues,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,closed_by.state
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,LENGTH(return.closed_by.state)==6,daikon.inv.unary.string.FixedLengthString,(return.closed_by.state),pm.expect(return_closed_by_state).to.have.length(6),get+groups_{id}_issues,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,closed_by.state
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,"return.closed_by.username == ""root""",daikon.inv.unary.string.OneOfString,(return.closed_by.username),"pm.expect([""root""].includes(return_closed_by_username)).to.be.true",get+groups_{id}_issues,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,closed_by.username
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,LENGTH(return.closed_by.username)==4,daikon.inv.unary.string.FixedLengthString,(return.closed_by.username),pm.expect(return_closed_by_username).to.have.length(4),get+groups_{id}_issues,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,closed_by.username
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,"return.closed_by.web_url == ""http://localhost:30000/root""",daikon.inv.unary.string.OneOfString,(return.closed_by.web_url),"pm.expect([""http://localhost:30000/root""].includes(return_closed_by_web_url)).to.be.true",get+groups_{id}_issues,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,closed_by.web_url
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,LENGTH(return.closed_by.web_url)==27,daikon.inv.unary.string.FixedLengthString,(return.closed_by.web_url),pm.expect(return_closed_by_web_url).to.have.length(27),get+groups_{id}_issues,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,closed_by.web_url
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,LENGTH(return.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.created_at),pm.expect(return_created_at).to.have.length(24),get+groups_{id}_issues,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,created_at
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.created_at),"pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+groups_{id}_issues,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,,GitLab Issues API,created_at
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,return.downvotes == 0,daikon.inv.unary.scalar.OneOfScalar,(return.downvotes),pm.expect([0].includes(return_downvotes)).to.be.true,get+groups_{id}_issues,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,downvotes
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,return.due_date is a Date. Format: YYYY/MM/DD,daikon.inv.unary.string.dates.IsDateYYYYMMDD,(return.due_date),pm.expect(return_due_date).to.match(/^(?:1\d{3}|20[01234][0-9]|2050|9999)[-/.](?:0[1-9]|1[012])[-/.](?:0[1-9]|[12][0-9]|3[01])$/),get+groups_{id}_issues,1.0,,,"Indicates that the value of a string variable is always a date following the format YYYY/MM/DD or YYYY-MM-DD (the separator can be ""/"" or ""-""). Represented as x is a Date. Format YYYY/MM/DD.",,,GitLab Issues API,due_date
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,return.has_tasks == false,daikon.inv.unary.scalar.OneOfScalar,(return.has_tasks),pm.expect(return_has_tasks).to.eql(false),get+groups_{id}_issues,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,has_tasks
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,return.iid >= 1,daikon.inv.unary.scalar.LowerBound,(return.iid),pm.expect(return_iid).to.be.at.least(1),get+groups_{id}_issues,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,,GitLab Issues API,iid
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,return.milestone == null,daikon.inv.unary.scalar.OneOfScalar,(return.milestone),pm.expect(return_milestone).to.be.null,get+groups_{id}_issues,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,milestone
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,"return.moved_to_id one of { ""5228"", ""5235"", ""5237"" }",daikon.inv.unary.string.OneOfString,(return.moved_to_id),"pm.expect([""5228"", ""5235"", ""5237""].includes(return_moved_to_id)).to.be.true",get+groups_{id}_issues,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,moved_to_id
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,LENGTH(return.moved_to_id)==4,daikon.inv.unary.string.FixedLengthString,(return.moved_to_id),pm.expect(return_moved_to_id).to.have.length(4),get+groups_{id}_issues,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,moved_to_id
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,return.moved_to_id is Numeric,daikon.inv.unary.string.IsNumeric,(return.moved_to_id),"pm.expect(return_moved_to_id).to.match(/^[+-]{0,1}(0|([0-9](\d*|\d{0,2}(,\d{3})*)))?(\.\d*[0-9])?$/)",get+groups_{id}_issues,1.0,,,Indicates that the characters of a string variable are always numeric. Represented as x is Numeric.,,,GitLab Issues API,moved_to_id
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,"return.state one of { ""closed"", ""opened"" }",daikon.inv.unary.string.OneOfString,(return.state),"pm.expect([""closed"", ""opened""].includes(return_state)).to.be.true",get+groups_{id}_issues,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,state
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,LENGTH(return.state)==6,daikon.inv.unary.string.FixedLengthString,(return.state),pm.expect(return_state).to.have.length(6),get+groups_{id}_issues,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,state
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,return.time_stats.time_estimate >= 0,daikon.inv.unary.scalar.LowerBound,(return.time_stats.time_estimate),pm.expect(return_time_stats_time_estimate).to.be.at.least(0),get+groups_{id}_issues,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,,GitLab Issues API,time_stats.time_estimate
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,return.time_stats.total_time_spent >= 0,daikon.inv.unary.scalar.LowerBound,(return.time_stats.total_time_spent),pm.expect(return_time_stats_total_time_spent).to.be.at.least(0),get+groups_{id}_issues,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,,GitLab Issues API,time_stats.total_time_spent
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,LENGTH(return.updated_at)==24,daikon.inv.unary.string.FixedLengthString,(return.updated_at),pm.expect(return_updated_at).to.have.length(24),get+groups_{id}_issues,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,updated_at
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,return.updated_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.updated_at),"pm.expect(return_updated_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+groups_{id}_issues,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,,GitLab Issues API,updated_at
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,"size(return.assignees[]) one of { 0, 1 }",daikon.inv.unary.scalar.OneOfScalar,(size(return.assignees[..])),"pm.expect([0, 1, 0].includes(return_assignees_size_array)).to.be.true",get+groups_{id}_issues,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,assignees
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,input.per_page > return.assignee.id,daikon.inv.binary.twoScalar.IntGreaterThan,"(input.per_page, return.assignee.id)",pm.expect(input_per_page).to.be.greaterThan(return_assignee_id),get+groups_{id}_issues,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,,GitLab Issues API,assignee.id
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,input.assignee_id >= return.assignee.id,daikon.inv.binary.twoScalar.IntGreaterEqual,"(input.assignee_id, return.assignee.id)",pm.expect(input_assignee_id).to.be.at.least(return_assignee_id),get+groups_{id}_issues,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,assignee.id
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,input.author_id >= size(return.assignees[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(input.author_id, size(return.assignees[..]))",pm.expect(input_author_id).to.be.at.least(return_assignees_size_array),get+groups_{id}_issues,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,assignees
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,return._links.self is a substring of return._links.award_emoji,daikon.inv.binary.twoString.StdString$SubString,"(return._links.award_emoji, return._links.self)",pm.expect(return__links_award_emoji.includes(return__links_self)).to.be.true,get+groups_{id}_issues,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,_links.self
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,return._links.self is a substring of return._links.notes,daikon.inv.binary.twoString.StdString$SubString,"(return._links.notes, return._links.self)",pm.expect(return__links_notes.includes(return__links_self)).to.be.true,get+groups_{id}_issues,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,_links.self
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,return._links.project is a substring of return._links.self,daikon.inv.binary.twoString.StdString$SubString,"(return._links.project, return._links.self)",pm.expect(return__links_self.includes(return__links_project)).to.be.true,get+groups_{id}_issues,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,_links.self
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,return.assignee.username is a substring of return.assignee.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.assignee.web_url, return.assignee.username)",pm.expect(return_assignee_web_url.includes(return_assignee_username)).to.be.true,get+groups_{id}_issues,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,assignee.web_url
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,return.assignee.id >= size(input.assignee_username[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.assignee.id, size(input.assignee_username[..]))",pm.expect(return_assignee_id).to.be.at.least(input_assignee_username_size_array),get+groups_{id}_issues,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,assignee.id
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,return.assignee.id >= size(return.assignees[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.assignee.id, size(return.assignees[..]))",pm.expect(return_assignee_id).to.be.at.least(return_assignees_size_array),get+groups_{id}_issues,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,assignee.id
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,return.author.username is a substring of return.author.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.author.web_url, return.author.username)",pm.expect(return_author_web_url.includes(return_author_username)).to.be.true,get+groups_{id}_issues,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,author.web_url
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,return.author.id < return.id,daikon.inv.binary.twoScalar.IntLessThan,"(return.author.id, return.id)",pm.expect(return_author_id).to.be.lessThan(return_id),get+groups_{id}_issues,1.0,,,Represents an invariant of < between two long scalars. Prints as x < y.,,,GitLab Issues API,author.id
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,return.author.id < return.project_id,daikon.inv.binary.twoScalar.IntLessThan,"(return.author.id, return.project_id)",pm.expect(return_author_id).to.be.lessThan(return_project_id),get+groups_{id}_issues,1.0,,,Represents an invariant of < between two long scalars. Prints as x < y.,,,GitLab Issues API,author.id
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,return.author.id >= size(input.assignee_username[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.author.id, size(input.assignee_username[..]))",pm.expect(return_author_id).to.be.at.least(input_assignee_username_size_array),get+groups_{id}_issues,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,author.id
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,return.author.id >= size(return.assignees[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.author.id, size(return.assignees[..]))",pm.expect(return_author_id).to.be.at.least(return_assignees_size_array),get+groups_{id}_issues,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,author.id
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,return.closed_by.username is a substring of return.closed_by.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.closed_by.username, return.closed_by.web_url)",pm.expect(return_closed_by_web_url.includes(return_closed_by_username)).to.be.true,get+groups_{id}_issues,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,closed_by.username
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,return.downvotes <= return.time_stats.time_estimate,daikon.inv.binary.twoScalar.IntLessEqual,"(return.downvotes, return.time_stats.time_estimate)",pm.expect(return_downvotes).to.be.lte(return_time_stats_time_estimate),get+groups_{id}_issues,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,,GitLab Issues API,downvotes
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,return.downvotes <= return.time_stats.total_time_spent,daikon.inv.binary.twoScalar.IntLessEqual,"(return.downvotes, return.time_stats.total_time_spent)",pm.expect(return_downvotes).to.be.lte(return_time_stats_total_time_spent),get+groups_{id}_issues,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,,GitLab Issues API,downvotes
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,return.downvotes <= size(return.assignees[]),daikon.inv.binary.twoScalar.IntLessEqual,"(return.downvotes, size(return.assignees[..]))",pm.expect(return_downvotes).to.be.lte(return_assignees_size_array),get+groups_{id}_issues,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,,GitLab Issues API,downvotes
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,return.iid >= size(input.assignee_username[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.iid, size(input.assignee_username[..]))",pm.expect(return_iid).to.be.at.least(input_assignee_username_size_array),get+groups_{id}_issues,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,iid
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,return.iid >= size(return.assignees[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.iid, size(return.assignees[..]))",pm.expect(return_iid).to.be.at.least(return_assignees_size_array),get+groups_{id}_issues,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,iid
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,return.references.relative is a substring of return.references.full,daikon.inv.binary.twoString.StdString$SubString,"(return.references.full, return.references.relative)",pm.expect(return_references_full.includes(return_references_relative)).to.be.true,get+groups_{id}_issues,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,references.full
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,return.references.short is a substring of return.references.relative,daikon.inv.binary.twoString.StdString$SubString,"(return.references.relative, return.references.short)",pm.expect(return_references_relative.includes(return_references_short)).to.be.true,get+groups_{id}_issues,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,references.relative
/groups/{id}/issues&/groups/{id}/issues&get&200():::EXIT,size(input.assignee_username[]) >= size(return.assignees[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(size(input.assignee_username[..]), size(return.assignees[..]))",pm.expect(input_assignee_username_size_array).to.be.at.least(return_assignees_size_array),get+groups_{id}_issues,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,assignees
/issues&/issues&get&200%array():::EXIT,size(return.array[]) >= 2,daikon.inv.unary.scalar.LowerBound,(size(return.array[..])),pm.expect(return_array_size_array).to.be.at.least(2),get+issues,,1.0,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,,GitLab Issues API,array
/issues&/issues&get&200%array():::EXIT,input.per_page >= size(return.array[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(input.per_page, size(return.array[..]))",pm.expect(input_per_page).to.be.at.least(return_array_size_array),get+issues,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,array
/issues&/issues&get&200&assignees():::EXIT,LENGTH(return.avatar_url)==81,daikon.inv.unary.string.FixedLengthString,(return.avatar_url),pm.expect(return_avatar_url).to.have.length(81),get+issues,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,assignees.avatar_url
/issues&/issues&get&200&assignees():::EXIT,return.avatar_url is Url,daikon.inv.unary.string.IsUrl,(return.avatar_url),"pm.expect(return_avatar_url).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",get+issues,1.0,,,Indicates that the value of a string variable is always a URL. Represented as x is Url.,,,GitLab Issues API,assignees.avatar_url
/issues&/issues&get&200&assignees():::EXIT,"return.state == ""active""",daikon.inv.unary.string.OneOfString,(return.state),"pm.expect([""active""].includes(return_state)).to.be.true",get+issues,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,assignees.state
/issues&/issues&get&200&assignees():::EXIT,LENGTH(return.state)==6,daikon.inv.unary.string.FixedLengthString,(return.state),pm.expect(return_state).to.have.length(6),get+issues,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,assignees.state
/issues&/issues&get&200&assignees():::EXIT,return.id >= 1,daikon.inv.unary.scalar.LowerBound,(return.id),pm.expect(return_id).to.be.at.least(1),get+issues,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,,GitLab Issues API,assignees.id
/issues&/issues&get&200&assignees():::EXIT,input.assignee_id >= return.id,daikon.inv.binary.twoScalar.IntGreaterEqual,"(input.assignee_id, return.id)",pm.expect(input_assignee_id).to.be.at.least(return_id),get+issues,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,assignees.id
/issues&/issues&get&200&assignees():::EXIT,return.username is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.username)",pm.expect(return_web_url.includes(return_username)).to.be.true,get+issues,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,assignees.web_url
/issues&/issues&get&200&assignees():::EXIT,return.id >= size(input.assignee_username[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.id, size(input.assignee_username[..]))",pm.expect(return_id).to.be.at.least(input_assignee_username_size_array),get+issues,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,assignees.id
/issues&/issues&get&200():::EXIT,input.confidential == return.confidential,daikon.inv.binary.twoScalar.IntEqual,"(input.confidential, return.confidential)",pm.expect(input_confidential).to.eql(return_confidential),get+issues,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,confidential
/issues&/issues&get&200():::EXIT,return.assignee.state == return.author.state,daikon.inv.binary.twoString.StringEqual,"(return.assignee.state, return.author.state)",pm.expect(return_assignee_state).to.eql(return_author_state),get+issues,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,,GitLab Issues API,assignee.state
/issues&/issues&get&200():::EXIT,return.assignee.state == return.closed_by.state,daikon.inv.binary.twoString.StringEqual,"(return.assignee.state, return.closed_by.state)",pm.expect(return_assignee_state).to.eql(return_closed_by_state),get+issues,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,,GitLab Issues API,assignee.state
/issues&/issues&get&200():::EXIT,return.author.state == return.closed_by.state,daikon.inv.binary.twoString.StringEqual,"(return.author.state, return.closed_by.state)",pm.expect(return_author_state).to.eql(return_closed_by_state),get+issues,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,,GitLab Issues API,author.state
/issues&/issues&get&200():::EXIT,return.downvotes == return.merge_requests_count,daikon.inv.binary.twoScalar.IntEqual,"(return.downvotes, return.merge_requests_count)",pm.expect(return_downvotes).to.eql(return_merge_requests_count),get+issues,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,downvotes
/issues&/issues&get&200():::EXIT,return.downvotes == return.task_completion_status.count,daikon.inv.binary.twoScalar.IntEqual,"(return.downvotes, return.task_completion_status.count)",pm.expect(return_downvotes).to.eql(return_task_completion_status_count),get+issues,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,downvotes
/issues&/issues&get&200():::EXIT,return.downvotes == return.task_completion_status.completed_count,daikon.inv.binary.twoScalar.IntEqual,"(return.downvotes, return.task_completion_status.completed_count)",pm.expect(return_downvotes).to.eql(return_task_completion_status_completed_count),get+issues,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,downvotes
/issues&/issues&get&200():::EXIT,return.downvotes == return.upvotes,daikon.inv.binary.twoScalar.IntEqual,"(return.downvotes, return.upvotes)",pm.expect(return_downvotes).to.eql(return_upvotes),get+issues,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,downvotes
/issues&/issues&get&200():::EXIT,return.downvotes == return.user_notes_count,daikon.inv.binary.twoScalar.IntEqual,"(return.downvotes, return.user_notes_count)",pm.expect(return_downvotes).to.eql(return_user_notes_count),get+issues,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,downvotes
/issues&/issues&get&200():::EXIT,return.iid == input.iids[][return.closed_by.id],daikon.inv.binary.twoScalar.IntEqual,"(return.iid, input.iids[][return.closed_by.id])",pm.expect(return_iid).to.eql(input_iids_return_closed_by_id),get+issues,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,iid
/issues&/issues&get&200():::EXIT,return.references.relative == return.references.short,daikon.inv.binary.twoString.StringEqual,"(return.references.relative, return.references.short)",pm.expect(return_references_relative).to.eql(return_references_short),get+issues,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,,GitLab Issues API,references.relative
/issues&/issues&get&200():::EXIT,input.iids[][return.closed_by.id -1] == input.iids[][return.downvotes],daikon.inv.binary.twoScalar.IntEqual,"(input.iids[][return.closed_by.id -1], input.iids[][return.downvotes])",pm.expect(input_iids_return_closed_by_id_minus_1).to.eql(input_iids_return_downvotes),get+issues,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,input.iids[][closed_by.id -1]
/issues&/issues&get&200():::EXIT,input.iids[][return.downvotes] == input.iids[][return.time_stats.time_estimate],daikon.inv.binary.twoScalar.IntEqual,"(input.iids[][return.downvotes], input.iids[][return.time_stats.time_estimate])",pm.expect(input_iids_return_downvotes).to.eql(input_iids_return_time_stats_time_estimate),get+issues,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,input.iids[][downvotes]
/issues&/issues&get&200():::EXIT,LENGTH(return.assignee.avatar_url)==81,daikon.inv.unary.string.FixedLengthString,(return.assignee.avatar_url),pm.expect(return_assignee_avatar_url).to.have.length(81),get+issues,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,assignee.avatar_url
/issues&/issues&get&200():::EXIT,return.assignee.avatar_url is Url,daikon.inv.unary.string.IsUrl,(return.assignee.avatar_url),"pm.expect(return_assignee_avatar_url).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",get+issues,1.0,,,Indicates that the value of a string variable is always a URL. Represented as x is Url.,,,GitLab Issues API,assignee.avatar_url
/issues&/issues&get&200():::EXIT,"return.assignee.state == ""active""",daikon.inv.unary.string.OneOfString,(return.assignee.state),"pm.expect([""active""].includes(return_assignee_state)).to.be.true",get+issues,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,assignee.state
/issues&/issues&get&200():::EXIT,LENGTH(return.assignee.state)==6,daikon.inv.unary.string.FixedLengthString,(return.assignee.state),pm.expect(return_assignee_state).to.have.length(6),get+issues,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,assignee.state
/issues&/issues&get&200():::EXIT,return.assignee.id >= 1,daikon.inv.unary.scalar.LowerBound,(return.assignee.id),pm.expect(return_assignee_id).to.be.at.least(1),get+issues,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,,GitLab Issues API,assignee.id
/issues&/issues&get&200():::EXIT,LENGTH(return.author.avatar_url)==81,daikon.inv.unary.string.FixedLengthString,(return.author.avatar_url),pm.expect(return_author_avatar_url).to.have.length(81),get+issues,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,author.avatar_url
/issues&/issues&get&200():::EXIT,return.author.avatar_url is Url,daikon.inv.unary.string.IsUrl,(return.author.avatar_url),"pm.expect(return_author_avatar_url).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",get+issues,1.0,,,Indicates that the value of a string variable is always a URL. Represented as x is Url.,,,GitLab Issues API,author.avatar_url
/issues&/issues&get&200():::EXIT,"return.author.state == ""active""",daikon.inv.unary.string.OneOfString,(return.author.state),"pm.expect([""active""].includes(return_author_state)).to.be.true",get+issues,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,author.state
/issues&/issues&get&200():::EXIT,LENGTH(return.author.state)==6,daikon.inv.unary.string.FixedLengthString,(return.author.state),pm.expect(return_author_state).to.have.length(6),get+issues,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,author.state
/issues&/issues&get&200():::EXIT,LENGTH(return.closed_at)==24,daikon.inv.unary.string.FixedLengthString,(return.closed_at),pm.expect(return_closed_at).to.have.length(24),get+issues,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,closed_at
/issues&/issues&get&200():::EXIT,return.closed_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.closed_at),"pm.expect(return_closed_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+issues,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,,GitLab Issues API,closed_at
/issues&/issues&get&200():::EXIT,LENGTH(return.closed_by.avatar_url)==81,daikon.inv.unary.string.FixedLengthString,(return.closed_by.avatar_url),pm.expect(return_closed_by_avatar_url).to.have.length(81),get+issues,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,closed_by.avatar_url
/issues&/issues&get&200():::EXIT,return.closed_by.avatar_url is Url,daikon.inv.unary.string.IsUrl,(return.closed_by.avatar_url),"pm.expect(return_closed_by_avatar_url).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",get+issues,1.0,,,Indicates that the value of a string variable is always a URL. Represented as x is Url.,,,GitLab Issues API,closed_by.avatar_url
/issues&/issues&get&200():::EXIT,return.closed_by.id >= 1,daikon.inv.unary.scalar.LowerBound,(return.closed_by.id),pm.expect(return_closed_by_id).to.be.at.least(1),get+issues,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,,GitLab Issues API,closed_by.id
/issues&/issues&get&200():::EXIT,"return.closed_by.state == ""active""",daikon.inv.unary.string.OneOfString,(return.closed_by.state),"pm.expect([""active""].includes(return_closed_by_state)).to.be.true",get+issues,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,closed_by.state
/issues&/issues&get&200():::EXIT,LENGTH(return.closed_by.state)==6,daikon.inv.unary.string.FixedLengthString,(return.closed_by.state),pm.expect(return_closed_by_state).to.have.length(6),get+issues,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,closed_by.state
/issues&/issues&get&200():::EXIT,LENGTH(return.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.created_at),pm.expect(return_created_at).to.have.length(24),get+issues,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,created_at
/issues&/issues&get&200():::EXIT,return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.created_at),"pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+issues,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,,GitLab Issues API,created_at
/issues&/issues&get&200():::EXIT,return.downvotes == 0,daikon.inv.unary.scalar.OneOfScalar,(return.downvotes),pm.expect([0].includes(return_downvotes)).to.be.true,get+issues,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,downvotes
/issues&/issues&get&200():::EXIT,return.due_date is a Date. Format: YYYY/MM/DD,daikon.inv.unary.string.dates.IsDateYYYYMMDD,(return.due_date),pm.expect(return_due_date).to.match(/^(?:1\d{3}|20[01234][0-9]|2050|9999)[-/.](?:0[1-9]|1[012])[-/.](?:0[1-9]|[12][0-9]|3[01])$/),get+issues,1.0,,,"Indicates that the value of a string variable is always a date following the format YYYY/MM/DD or YYYY-MM-DD (the separator can be ""/"" or ""-""). Represented as x is a Date. Format YYYY/MM/DD.",,,GitLab Issues API,due_date
/issues&/issues&get&200():::EXIT,return.has_tasks == false,daikon.inv.unary.scalar.OneOfScalar,(return.has_tasks),pm.expect(return_has_tasks).to.eql(false),get+issues,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,has_tasks
/issues&/issues&get&200():::EXIT,return.iid >= 1,daikon.inv.unary.scalar.LowerBound,(return.iid),pm.expect(return_iid).to.be.at.least(1),get+issues,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,,GitLab Issues API,iid
/issues&/issues&get&200():::EXIT,return.milestone == null,daikon.inv.unary.scalar.OneOfScalar,(return.milestone),pm.expect(return_milestone).to.be.null,get+issues,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,milestone
/issues&/issues&get&200():::EXIT,LENGTH(return.moved_to_id)==4,daikon.inv.unary.string.FixedLengthString,(return.moved_to_id),pm.expect(return_moved_to_id).to.have.length(4),get+issues,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,moved_to_id
/issues&/issues&get&200():::EXIT,return.moved_to_id is Numeric,daikon.inv.unary.string.IsNumeric,(return.moved_to_id),"pm.expect(return_moved_to_id).to.match(/^[+-]{0,1}(0|([0-9](\d*|\d{0,2}(,\d{3})*)))?(\.\d*[0-9])?$/)",get+issues,1.0,,,Indicates that the characters of a string variable are always numeric. Represented as x is Numeric.,,,GitLab Issues API,moved_to_id
/issues&/issues&get&200():::EXIT,"return.state one of { ""closed"", ""opened"" }",daikon.inv.unary.string.OneOfString,(return.state),"pm.expect([""closed"", ""opened""].includes(return_state)).to.be.true",get+issues,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,state
/issues&/issues&get&200():::EXIT,LENGTH(return.state)==6,daikon.inv.unary.string.FixedLengthString,(return.state),pm.expect(return_state).to.have.length(6),get+issues,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,state
/issues&/issues&get&200():::EXIT,return.time_stats.time_estimate >= 0,daikon.inv.unary.scalar.LowerBound,(return.time_stats.time_estimate),pm.expect(return_time_stats_time_estimate).to.be.at.least(0),get+issues,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,,GitLab Issues API,time_stats.time_estimate
/issues&/issues&get&200():::EXIT,return.time_stats.total_time_spent >= 0,daikon.inv.unary.scalar.LowerBound,(return.time_stats.total_time_spent),pm.expect(return_time_stats_total_time_spent).to.be.at.least(0),get+issues,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,,GitLab Issues API,time_stats.total_time_spent
/issues&/issues&get&200():::EXIT,LENGTH(return.updated_at)==24,daikon.inv.unary.string.FixedLengthString,(return.updated_at),pm.expect(return_updated_at).to.have.length(24),get+issues,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,updated_at
/issues&/issues&get&200():::EXIT,return.updated_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.updated_at),"pm.expect(return_updated_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+issues,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,,GitLab Issues API,updated_at
/issues&/issues&get&200():::EXIT,"size(return.assignees[]) one of { 0, 1 }",daikon.inv.unary.scalar.OneOfScalar,(size(return.assignees[..])),"pm.expect([0, 1, 0].includes(return_assignees_size_array)).to.be.true",get+issues,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,assignees
/issues&/issues&get&200():::EXIT,input.per_page > return.author.id,daikon.inv.binary.twoScalar.IntGreaterThan,"(input.per_page, return.author.id)",pm.expect(input_per_page).to.be.greaterThan(return_author_id),get+issues,,1.0,,Represents an invariant of > between two long scalars. Prints as x > y.,,,GitLab Issues API,author.id
/issues&/issues&get&200():::EXIT,input.per_page > return.closed_by.id,daikon.inv.binary.twoScalar.IntGreaterThan,"(input.per_page, return.closed_by.id)",pm.expect(input_per_page).to.be.greaterThan(return_closed_by_id),get+issues,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,,GitLab Issues API,closed_by.id
/issues&/issues&get&200():::EXIT,input.assignee_id >= return.assignee.id,daikon.inv.binary.twoScalar.IntGreaterEqual,"(input.assignee_id, return.assignee.id)",pm.expect(input_assignee_id).to.be.at.least(return_assignee_id),get+issues,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,assignee.id
/issues&/issues&get&200():::EXIT,input.assignee_id >= size(return.assignees[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(input.assignee_id, size(return.assignees[..]))",pm.expect(input_assignee_id).to.be.at.least(return_assignees_size_array),get+issues,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,assignees
/issues&/issues&get&200():::EXIT,input.author_id >= size(return.assignees[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(input.author_id, size(return.assignees[..]))",pm.expect(input_author_id).to.be.at.least(return_assignees_size_array),get+issues,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,assignees
/issues&/issues&get&200():::EXIT,return.iid in input.iids[][],daikon.inv.binary.sequenceScalar.Member,"(input.iids[][..], return.iid)",pm.expect(input_iids_array.includes(return_iid)).to.be.true,get+issues,1.0,,,Represents long scalars that are always members of a sequence of long values. Prints as x in y[] where x is a long scalar and y[] is a sequence of long.,,,GitLab Issues API,iid
/issues&/issues&get&200():::EXIT,return._links.self is a substring of return._links.award_emoji,daikon.inv.binary.twoString.StdString$SubString,"(return._links.award_emoji, return._links.self)",pm.expect(return__links_award_emoji.includes(return__links_self)).to.be.true,get+issues,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,_links.self
/issues&/issues&get&200():::EXIT,return._links.self is a substring of return._links.notes,daikon.inv.binary.twoString.StdString$SubString,"(return._links.notes, return._links.self)",pm.expect(return__links_notes.includes(return__links_self)).to.be.true,get+issues,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,_links.self
/issues&/issues&get&200():::EXIT,return._links.project is a substring of return._links.self,daikon.inv.binary.twoString.StdString$SubString,"(return._links.project, return._links.self)",pm.expect(return__links_self.includes(return__links_project)).to.be.true,get+issues,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,_links.self
/issues&/issues&get&200():::EXIT,return.assignee.username is a substring of return.assignee.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.assignee.web_url, return.assignee.username)",pm.expect(return_assignee_web_url.includes(return_assignee_username)).to.be.true,get+issues,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,assignee.web_url
/issues&/issues&get&200():::EXIT,return.assignee.id >= return.closed_by.id,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.assignee.id, return.closed_by.id)",pm.expect(return_assignee_id).to.be.at.least(return_closed_by_id),get+issues,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,assignee.id
/issues&/issues&get&200():::EXIT,return.assignee.id < return.project_id,daikon.inv.binary.twoScalar.IntLessThan,"(return.assignee.id, return.project_id)",pm.expect(return_assignee_id).to.be.lessThan(return_project_id),get+issues,1.0,,,Represents an invariant of < between two long scalars. Prints as x < y.,,,GitLab Issues API,assignee.id
/issues&/issues&get&200():::EXIT,return.assignee.id >= size(input.assignee_username[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.assignee.id, size(input.assignee_username[..]))",pm.expect(return_assignee_id).to.be.at.least(input_assignee_username_size_array),get+issues,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,assignee.id
/issues&/issues&get&200():::EXIT,return.assignee.id >= size(return.assignees[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.assignee.id, size(return.assignees[..]))",pm.expect(return_assignee_id).to.be.at.least(return_assignees_size_array),get+issues,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,assignee.id
/issues&/issues&get&200():::EXIT,return.author.username is a substring of return.author.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.author.web_url, return.author.username)",pm.expect(return_author_web_url.includes(return_author_username)).to.be.true,get+issues,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,author.web_url
/issues&/issues&get&200():::EXIT,return.author.id < return.id,daikon.inv.binary.twoScalar.IntLessThan,"(return.author.id, return.id)",pm.expect(return_author_id).to.be.lessThan(return_id),get+issues,1.0,,,Represents an invariant of < between two long scalars. Prints as x < y.,,,GitLab Issues API,author.id
/issues&/issues&get&200():::EXIT,return.author.id < return.project_id,daikon.inv.binary.twoScalar.IntLessThan,"(return.author.id, return.project_id)",pm.expect(return_author_id).to.be.lessThan(return_project_id),get+issues,1.0,,,Represents an invariant of < between two long scalars. Prints as x < y.,,,GitLab Issues API,author.id
/issues&/issues&get&200():::EXIT,return.author.id >= size(input.assignee_username[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.author.id, size(input.assignee_username[..]))",pm.expect(return_author_id).to.be.at.least(input_assignee_username_size_array),get+issues,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,author.id
/issues&/issues&get&200():::EXIT,return.author.id > size(input.iids[][]),daikon.inv.binary.twoScalar.IntGreaterThan,"(return.author.id, size(input.iids[][..]))",pm.expect(return_author_id).to.be.greaterThan(input_iids_size_array),get+issues,,1.0,,Represents an invariant of > between two long scalars. Prints as x > y.,,,GitLab Issues API,author.id
/issues&/issues&get&200():::EXIT,return.author.id >= size(return.assignees[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.author.id, size(return.assignees[..]))",pm.expect(return_author_id).to.be.at.least(return_assignees_size_array),get+issues,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,author.id
/issues&/issues&get&200():::EXIT,return.closed_by.id >= size(input.assignee_username[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.closed_by.id, size(input.assignee_username[..]))",pm.expect(return_closed_by_id).to.be.at.least(input_assignee_username_size_array),get+issues,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,closed_by.id
/issues&/issues&get&200():::EXIT,return.closed_by.id >= size(return.assignees[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.closed_by.id, size(return.assignees[..]))",pm.expect(return_closed_by_id).to.be.at.least(return_assignees_size_array),get+issues,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,closed_by.id
/issues&/issues&get&200():::EXIT,return.closed_by.username is a substring of return.closed_by.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.closed_by.username, return.closed_by.web_url)",pm.expect(return_closed_by_web_url.includes(return_closed_by_username)).to.be.true,get+issues,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,closed_by.username
/issues&/issues&get&200():::EXIT,return.downvotes <= return.time_stats.time_estimate,daikon.inv.binary.twoScalar.IntLessEqual,"(return.downvotes, return.time_stats.time_estimate)",pm.expect(return_downvotes).to.be.lte(return_time_stats_time_estimate),get+issues,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,,GitLab Issues API,downvotes
/issues&/issues&get&200():::EXIT,return.downvotes <= return.time_stats.total_time_spent,daikon.inv.binary.twoScalar.IntLessEqual,"(return.downvotes, return.time_stats.total_time_spent)",pm.expect(return_downvotes).to.be.lte(return_time_stats_total_time_spent),get+issues,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,,GitLab Issues API,downvotes
/issues&/issues&get&200():::EXIT,return.downvotes <= size(return.assignees[]),daikon.inv.binary.twoScalar.IntLessEqual,"(return.downvotes, size(return.assignees[..]))",pm.expect(return_downvotes).to.be.lte(return_assignees_size_array),get+issues,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,,GitLab Issues API,downvotes
/issues&/issues&get&200():::EXIT,return.iid >= size(input.assignee_username[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.iid, size(input.assignee_username[..]))",pm.expect(return_iid).to.be.at.least(input_assignee_username_size_array),get+issues,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,iid
/issues&/issues&get&200():::EXIT,return.iid >= size(return.assignees[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.iid, size(return.assignees[..]))",pm.expect(return_iid).to.be.at.least(return_assignees_size_array),get+issues,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,iid
/issues&/issues&get&200():::EXIT,return.references.relative is a substring of return.references.full,daikon.inv.binary.twoString.StdString$SubString,"(return.references.full, return.references.relative)",pm.expect(return_references_full.includes(return_references_relative)).to.be.true,get+issues,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,references.full
/issues&/issues&get&200():::EXIT,size(input.assignee_username[]) >= size(return.assignees[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(size(input.assignee_username[..]), size(return.assignees[..]))",pm.expect(input_assignee_username_size_array).to.be.at.least(return_assignees_size_array),get+issues,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,assignees
/issues/{id}&/issues/{id}&get&200&assignees():::EXIT,LENGTH(return.avatar_url)==81,daikon.inv.unary.string.FixedLengthString,(return.avatar_url),pm.expect(return_avatar_url).to.have.length(81),get+issues_{id},,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,assignees.avatar_url
/issues/{id}&/issues/{id}&get&200&assignees():::EXIT,return.avatar_url is Url,daikon.inv.unary.string.IsUrl,(return.avatar_url),"pm.expect(return_avatar_url).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",get+issues_{id},1.0,,,Indicates that the value of a string variable is always a URL. Represented as x is Url.,,,GitLab Issues API,assignees.avatar_url
/issues/{id}&/issues/{id}&get&200&assignees():::EXIT,"return.state == ""active""",daikon.inv.unary.string.OneOfString,(return.state),"pm.expect([""active""].includes(return_state)).to.be.true",get+issues_{id},1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,assignees.state
/issues/{id}&/issues/{id}&get&200&assignees():::EXIT,LENGTH(return.state)==6,daikon.inv.unary.string.FixedLengthString,(return.state),pm.expect(return_state).to.have.length(6),get+issues_{id},1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,assignees.state
/issues/{id}&/issues/{id}&get&200&assignees():::EXIT,return.username is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.username)",pm.expect(return_web_url.includes(return_username)).to.be.true,get+issues_{id},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,assignees.web_url
/issues/{id}&/issues/{id}&get&200():::EXIT,input.id == return.id,daikon.inv.binary.twoScalar.IntEqual,"(input.id, return.id)",pm.expect(input_id).to.eql(return_id),get+issues_{id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,id
/issues/{id}&/issues/{id}&get&200():::EXIT,return.assignee.state == return.author.state,daikon.inv.binary.twoString.StringEqual,"(return.assignee.state, return.author.state)",pm.expect(return_assignee_state).to.eql(return_author_state),get+issues_{id},1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,,GitLab Issues API,assignee.state
/issues/{id}&/issues/{id}&get&200():::EXIT,return.author.state == return.closed_by.state,daikon.inv.binary.twoString.StringEqual,"(return.author.state, return.closed_by.state)",pm.expect(return_author_state).to.eql(return_closed_by_state),get+issues_{id},1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,,GitLab Issues API,author.state
/issues/{id}&/issues/{id}&get&200():::EXIT,return.downvotes == return.merge_requests_count,daikon.inv.binary.twoScalar.IntEqual,"(return.downvotes, return.merge_requests_count)",pm.expect(return_downvotes).to.eql(return_merge_requests_count),get+issues_{id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,downvotes
/issues/{id}&/issues/{id}&get&200():::EXIT,return.downvotes == return.task_completion_status.count,daikon.inv.binary.twoScalar.IntEqual,"(return.downvotes, return.task_completion_status.count)",pm.expect(return_downvotes).to.eql(return_task_completion_status_count),get+issues_{id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,downvotes
/issues/{id}&/issues/{id}&get&200():::EXIT,return.downvotes == return.task_completion_status.completed_count,daikon.inv.binary.twoScalar.IntEqual,"(return.downvotes, return.task_completion_status.completed_count)",pm.expect(return_downvotes).to.eql(return_task_completion_status_completed_count),get+issues_{id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,downvotes
/issues/{id}&/issues/{id}&get&200():::EXIT,return.downvotes == return.upvotes,daikon.inv.binary.twoScalar.IntEqual,"(return.downvotes, return.upvotes)",pm.expect(return_downvotes).to.eql(return_upvotes),get+issues_{id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,downvotes
/issues/{id}&/issues/{id}&get&200():::EXIT,return.downvotes == return.user_notes_count,daikon.inv.binary.twoScalar.IntEqual,"(return.downvotes, return.user_notes_count)",pm.expect(return_downvotes).to.eql(return_user_notes_count),get+issues_{id},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,downvotes
/issues/{id}&/issues/{id}&get&200():::EXIT,return.references.relative == return.references.short,daikon.inv.binary.twoString.StringEqual,"(return.references.relative, return.references.short)",pm.expect(return_references_relative).to.eql(return_references_short),get+issues_{id},1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,,GitLab Issues API,references.relative
/issues/{id}&/issues/{id}&get&200():::EXIT,LENGTH(return.assignee.avatar_url)==81,daikon.inv.unary.string.FixedLengthString,(return.assignee.avatar_url),pm.expect(return_assignee_avatar_url).to.have.length(81),get+issues_{id},,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,assignee.avatar_url
/issues/{id}&/issues/{id}&get&200():::EXIT,return.assignee.avatar_url is Url,daikon.inv.unary.string.IsUrl,(return.assignee.avatar_url),"pm.expect(return_assignee_avatar_url).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",get+issues_{id},1.0,,,Indicates that the value of a string variable is always a URL. Represented as x is Url.,,,GitLab Issues API,assignee.avatar_url
/issues/{id}&/issues/{id}&get&200():::EXIT,"return.assignee.state == ""active""",daikon.inv.unary.string.OneOfString,(return.assignee.state),"pm.expect([""active""].includes(return_assignee_state)).to.be.true",get+issues_{id},,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,assignee.state
/issues/{id}&/issues/{id}&get&200():::EXIT,LENGTH(return.assignee.state)==6,daikon.inv.unary.string.FixedLengthString,(return.assignee.state),pm.expect(return_assignee_state).to.have.length(6),get+issues_{id},,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,assignee.state
/issues/{id}&/issues/{id}&get&200():::EXIT,LENGTH(return.author.avatar_url)==81,daikon.inv.unary.string.FixedLengthString,(return.author.avatar_url),pm.expect(return_author_avatar_url).to.have.length(81),get+issues_{id},1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,author.avatar_url
/issues/{id}&/issues/{id}&get&200():::EXIT,return.author.avatar_url is Url,daikon.inv.unary.string.IsUrl,(return.author.avatar_url),"pm.expect(return_author_avatar_url).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",get+issues_{id},1.0,,,Indicates that the value of a string variable is always a URL. Represented as x is Url.,,,GitLab Issues API,author.avatar_url
/issues/{id}&/issues/{id}&get&200():::EXIT,"return.author.state == ""active""",daikon.inv.unary.string.OneOfString,(return.author.state),"pm.expect([""active""].includes(return_author_state)).to.be.true",get+issues_{id},1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,author.state
/issues/{id}&/issues/{id}&get&200():::EXIT,LENGTH(return.author.state)==6,daikon.inv.unary.string.FixedLengthString,(return.author.state),pm.expect(return_author_state).to.have.length(6),get+issues_{id},1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,author.state
/issues/{id}&/issues/{id}&get&200():::EXIT,"return.closed_at one of { ""2025-06-15T12:41:02.547Z"", ""2025-06-15T16:27:36.381Z"" }",daikon.inv.unary.string.OneOfString,(return.closed_at),"pm.expect([""2025-06-15T12:41:02.547Z"", ""2025-06-15T16:27:36.381Z""].includes(return_closed_at)).to.be.true",get+issues_{id},,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,closed_at
/issues/{id}&/issues/{id}&get&200():::EXIT,LENGTH(return.closed_at)==24,daikon.inv.unary.string.FixedLengthString,(return.closed_at),pm.expect(return_closed_at).to.have.length(24),get+issues_{id},1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,closed_at
/issues/{id}&/issues/{id}&get&200():::EXIT,return.closed_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.closed_at),"pm.expect(return_closed_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+issues_{id},1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,,GitLab Issues API,closed_at
/issues/{id}&/issues/{id}&get&200():::EXIT,"return.closed_by.avatar_url one of { ""https://www.gravatar.com/avatar/a9601f3839e5d5da764c1861a5e1daf6?s=80&d=identicon"", ""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80&d=identicon"" }",daikon.inv.unary.string.OneOfString,(return.closed_by.avatar_url),"pm.expect([""https://www.gravatar.com/avatar/a9601f3839e5d5da764c1861a5e1daf6?s=80&d=identicon"", ""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80&d=identicon""].includes(return_closed_by_avatar_url)).to.be.true",get+issues_{id},,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,closed_by.avatar_url
/issues/{id}&/issues/{id}&get&200():::EXIT,LENGTH(return.closed_by.avatar_url)==81,daikon.inv.unary.string.FixedLengthString,(return.closed_by.avatar_url),pm.expect(return_closed_by_avatar_url).to.have.length(81),get+issues_{id},,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,closed_by.avatar_url
/issues/{id}&/issues/{id}&get&200():::EXIT,return.closed_by.avatar_url is Url,daikon.inv.unary.string.IsUrl,(return.closed_by.avatar_url),"pm.expect(return_closed_by_avatar_url).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",get+issues_{id},1.0,,,Indicates that the value of a string variable is always a URL. Represented as x is Url.,,,GitLab Issues API,closed_by.avatar_url
/issues/{id}&/issues/{id}&get&200():::EXIT,"return.closed_by.id one of { 1, 7 }",daikon.inv.unary.scalar.OneOfScalar,(return.closed_by.id),"pm.expect([1, 7, 0].includes(return_closed_by_id)).to.be.true",get+issues_{id},,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,closed_by.id
/issues/{id}&/issues/{id}&get&200():::EXIT,"return.closed_by.name one of { ""Administrator"", ""jane doe"" }",daikon.inv.unary.string.OneOfString,(return.closed_by.name),"pm.expect([""Administrator"", ""jane doe""].includes(return_closed_by_name)).to.be.true",get+issues_{id},,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,closed_by.name
/issues/{id}&/issues/{id}&get&200():::EXIT,"return.closed_by.state == ""active""",daikon.inv.unary.string.OneOfString,(return.closed_by.state),"pm.expect([""active""].includes(return_closed_by_state)).to.be.true",get+issues_{id},,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,closed_by.state
/issues/{id}&/issues/{id}&get&200():::EXIT,LENGTH(return.closed_by.state)==6,daikon.inv.unary.string.FixedLengthString,(return.closed_by.state),pm.expect(return_closed_by_state).to.have.length(6),get+issues_{id},,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,closed_by.state
/issues/{id}&/issues/{id}&get&200():::EXIT,"return.closed_by.username one of { ""janedoe"", ""root"" }",daikon.inv.unary.string.OneOfString,(return.closed_by.username),"pm.expect([""janedoe"", ""root""].includes(return_closed_by_username)).to.be.true",get+issues_{id},,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,closed_by.username
/issues/{id}&/issues/{id}&get&200():::EXIT,"return.closed_by.web_url one of { ""http://localhost:30000/janedoe"", ""http://localhost:30000/root"" }",daikon.inv.unary.string.OneOfString,(return.closed_by.web_url),"pm.expect([""http://localhost:30000/janedoe"", ""http://localhost:30000/root""].includes(return_closed_by_web_url)).to.be.true",get+issues_{id},,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,closed_by.web_url
/issues/{id}&/issues/{id}&get&200():::EXIT,LENGTH(return.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.created_at),pm.expect(return_created_at).to.have.length(24),get+issues_{id},1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,created_at
/issues/{id}&/issues/{id}&get&200():::EXIT,return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.created_at),"pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+issues_{id},1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,,GitLab Issues API,created_at
/issues/{id}&/issues/{id}&get&200():::EXIT,return.downvotes == 0,daikon.inv.unary.scalar.OneOfScalar,(return.downvotes),pm.expect([0].includes(return_downvotes)).to.be.true,get+issues_{id},1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,downvotes
/issues/{id}&/issues/{id}&get&200():::EXIT,return.due_date is a Date. Format: YYYY/MM/DD,daikon.inv.unary.string.dates.IsDateYYYYMMDD,(return.due_date),pm.expect(return_due_date).to.match(/^(?:1\d{3}|20[01234][0-9]|2050|9999)[-/.](?:0[1-9]|1[012])[-/.](?:0[1-9]|[12][0-9]|3[01])$/),get+issues_{id},1.0,,,"Indicates that the value of a string variable is always a date following the format YYYY/MM/DD or YYYY-MM-DD (the separator can be ""/"" or ""-""). Represented as x is a Date. Format YYYY/MM/DD.",,,GitLab Issues API,due_date
/issues/{id}&/issues/{id}&get&200():::EXIT,return.has_tasks == false,daikon.inv.unary.scalar.OneOfScalar,(return.has_tasks),pm.expect(return_has_tasks).to.eql(false),get+issues_{id},1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,has_tasks
/issues/{id}&/issues/{id}&get&200():::EXIT,return.iid >= 1,daikon.inv.unary.scalar.LowerBound,(return.iid),pm.expect(return_iid).to.be.at.least(1),get+issues_{id},1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,,GitLab Issues API,iid
/issues/{id}&/issues/{id}&get&200():::EXIT,return.milestone == null,daikon.inv.unary.scalar.OneOfScalar,(return.milestone),pm.expect(return_milestone).to.be.null,get+issues_{id},1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,milestone
/issues/{id}&/issues/{id}&get&200():::EXIT,"return.moved_to_id == ""5270""",daikon.inv.unary.string.OneOfString,(return.moved_to_id),"pm.expect([""5270""].includes(return_moved_to_id)).to.be.true",get+issues_{id},,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,moved_to_id
/issues/{id}&/issues/{id}&get&200():::EXIT,"return.state one of { ""closed"", ""opened"" }",daikon.inv.unary.string.OneOfString,(return.state),"pm.expect([""closed"", ""opened""].includes(return_state)).to.be.true",get+issues_{id},1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,state
/issues/{id}&/issues/{id}&get&200():::EXIT,LENGTH(return.state)==6,daikon.inv.unary.string.FixedLengthString,(return.state),pm.expect(return_state).to.have.length(6),get+issues_{id},1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,state
/issues/{id}&/issues/{id}&get&200():::EXIT,"return.time_stats.time_estimate one of { 0, 14405, 201600 }",daikon.inv.unary.scalar.OneOfScalar,(return.time_stats.time_estimate),"pm.expect([0, 14405, 201600].includes(return_time_stats_time_estimate)).to.be.true",get+issues_{id},,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,time_stats.time_estimate
/issues/{id}&/issues/{id}&get&200():::EXIT,"return.time_stats.total_time_spent one of { 0, 64 }",daikon.inv.unary.scalar.OneOfScalar,(return.time_stats.total_time_spent),"pm.expect([0, 64, 0].includes(return_time_stats_total_time_spent)).to.be.true",get+issues_{id},,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,time_stats.total_time_spent
/issues/{id}&/issues/{id}&get&200():::EXIT,"return.time_stats.human_time_estimate one of { ""1w 2d"", ""4h 5s"" }",daikon.inv.unary.string.OneOfString,(return.time_stats.human_time_estimate),"pm.expect([""1w 2d"", ""4h 5s""].includes(return_time_stats_human_time_estimate)).to.be.true",get+issues_{id},,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,time_stats.human_time_estimate
/issues/{id}&/issues/{id}&get&200():::EXIT,LENGTH(return.time_stats.human_time_estimate)==5,daikon.inv.unary.string.FixedLengthString,(return.time_stats.human_time_estimate),pm.expect(return_time_stats_human_time_estimate).to.have.length(5),get+issues_{id},,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,time_stats.human_time_estimate
/issues/{id}&/issues/{id}&get&200():::EXIT,"return.time_stats.human_total_time_spent == ""1m 4s""",daikon.inv.unary.string.OneOfString,(return.time_stats.human_total_time_spent),"pm.expect([""1m 4s""].includes(return_time_stats_human_total_time_spent)).to.be.true",get+issues_{id},,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,time_stats.human_total_time_spent
/issues/{id}&/issues/{id}&get&200():::EXIT,LENGTH(return.updated_at)==24,daikon.inv.unary.string.FixedLengthString,(return.updated_at),pm.expect(return_updated_at).to.have.length(24),get+issues_{id},1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,updated_at
/issues/{id}&/issues/{id}&get&200():::EXIT,return.updated_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.updated_at),"pm.expect(return_updated_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+issues_{id},1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,,GitLab Issues API,updated_at
/issues/{id}&/issues/{id}&get&200():::EXIT,"size(return.assignees[]) one of { 0, 1 }",daikon.inv.unary.scalar.OneOfScalar,(size(return.assignees[..])),"pm.expect([0, 1, 0].includes(return_assignees_size_array)).to.be.true",get+issues_{id},1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,assignees
/issues/{id}&/issues/{id}&get&200():::EXIT,input.id > return.author.id,daikon.inv.binary.twoScalar.IntGreaterThan,"(input.id, return.author.id)",pm.expect(input_id).to.be.greaterThan(return_author_id),get+issues_{id},1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,,GitLab Issues API,author.id
/issues/{id}&/issues/{id}&get&200():::EXIT,input.id > return.time_stats.total_time_spent,daikon.inv.binary.twoScalar.IntGreaterThan,"(input.id, return.time_stats.total_time_spent)",pm.expect(input_id).to.be.greaterThan(return_time_stats_total_time_spent),get+issues_{id},,1.0,,Represents an invariant of > between two long scalars. Prints as x > y.,,,GitLab Issues API,time_stats.total_time_spent
/issues/{id}&/issues/{id}&get&200():::EXIT,return._links.self is a substring of return._links.award_emoji,daikon.inv.binary.twoString.StdString$SubString,"(return._links.award_emoji, return._links.self)",pm.expect(return__links_award_emoji.includes(return__links_self)).to.be.true,get+issues_{id},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,_links.self
/issues/{id}&/issues/{id}&get&200():::EXIT,return._links.self is a substring of return._links.notes,daikon.inv.binary.twoString.StdString$SubString,"(return._links.notes, return._links.self)",pm.expect(return__links_notes.includes(return__links_self)).to.be.true,get+issues_{id},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,_links.self
/issues/{id}&/issues/{id}&get&200():::EXIT,return._links.project is a substring of return._links.self,daikon.inv.binary.twoString.StdString$SubString,"(return._links.project, return._links.self)",pm.expect(return__links_self.includes(return__links_project)).to.be.true,get+issues_{id},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,_links.self
/issues/{id}&/issues/{id}&get&200():::EXIT,return.assignee.username is a substring of return.assignee.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.assignee.web_url, return.assignee.username)",pm.expect(return_assignee_web_url.includes(return_assignee_username)).to.be.true,get+issues_{id},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,assignee.web_url
/issues/{id}&/issues/{id}&get&200():::EXIT,return.author.username is a substring of return.author.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.author.web_url, return.author.username)",pm.expect(return_author_web_url.includes(return_author_username)).to.be.true,get+issues_{id},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,author.web_url
/issues/{id}&/issues/{id}&get&200():::EXIT,return.author.id >= size(return.assignees[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.author.id, size(return.assignees[..]))",pm.expect(return_author_id).to.be.at.least(return_assignees_size_array),get+issues_{id},1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,author.id
/issues/{id}&/issues/{id}&get&200():::EXIT,return.closed_by.username is a substring of return.closed_by.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.closed_by.username, return.closed_by.web_url)",pm.expect(return_closed_by_web_url.includes(return_closed_by_username)).to.be.true,get+issues_{id},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,closed_by.username
/issues/{id}&/issues/{id}&get&200():::EXIT,return.downvotes <= return.time_stats.time_estimate,daikon.inv.binary.twoScalar.IntLessEqual,"(return.downvotes, return.time_stats.time_estimate)",pm.expect(return_downvotes).to.be.lte(return_time_stats_time_estimate),get+issues_{id},1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,,GitLab Issues API,downvotes
/issues/{id}&/issues/{id}&get&200():::EXIT,return.downvotes <= return.time_stats.total_time_spent,daikon.inv.binary.twoScalar.IntLessEqual,"(return.downvotes, return.time_stats.total_time_spent)",pm.expect(return_downvotes).to.be.lte(return_time_stats_total_time_spent),get+issues_{id},1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,,GitLab Issues API,downvotes
/issues/{id}&/issues/{id}&get&200():::EXIT,return.downvotes <= size(return.assignees[]),daikon.inv.binary.twoScalar.IntLessEqual,"(return.downvotes, size(return.assignees[..]))",pm.expect(return_downvotes).to.be.lte(return_assignees_size_array),get+issues_{id},1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,,GitLab Issues API,downvotes
/issues/{id}&/issues/{id}&get&200():::EXIT,return.iid > return.time_stats.total_time_spent,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.iid, return.time_stats.total_time_spent)",pm.expect(return_iid).to.be.greaterThan(return_time_stats_total_time_spent),get+issues_{id},,1.0,,Represents an invariant of > between two long scalars. Prints as x > y.,,,GitLab Issues API,iid
/issues/{id}&/issues/{id}&get&200():::EXIT,return.iid >= size(return.assignees[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.iid, size(return.assignees[..]))",pm.expect(return_iid).to.be.at.least(return_assignees_size_array),get+issues_{id},1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,iid
/issues/{id}&/issues/{id}&get&200():::EXIT,return.references.relative is a substring of return.references.full,daikon.inv.binary.twoString.StdString$SubString,"(return.references.full, return.references.relative)",pm.expect(return_references_full.includes(return_references_relative)).to.be.true,get+issues_{id},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,references.full
/projects/{id}/issues&/projects/{id}/issues&get&200%array():::EXIT,size(return.array[]) >= 1,daikon.inv.unary.scalar.LowerBound,(size(return.array[..])),pm.expect(return_array_size_array).to.be.at.least(1),get+projects_{id}_issues,,1.0,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,,GitLab Issues API,array
/projects/{id}/issues&/projects/{id}/issues&get&200%array():::EXIT,input.per_page >= size(return.array[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(input.per_page, size(return.array[..]))",pm.expect(input_per_page).to.be.at.least(return_array_size_array),get+projects_{id}_issues,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,array
/projects/{id}/issues&/projects/{id}/issues&get&200%array():::EXIT,size(input.assignee_username[]) <= size(return.array[]),daikon.inv.binary.twoScalar.IntLessEqual,"(size(input.assignee_username[..]), size(return.array[..]))",pm.expect(input_assignee_username_size_array).to.be.lte(return_array_size_array),get+projects_{id}_issues,,1.0,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,,GitLab Issues API,array
/projects/{id}/issues&/projects/{id}/issues&get&200&assignees():::EXIT,LENGTH(return.avatar_url)==81,daikon.inv.unary.string.FixedLengthString,(return.avatar_url),pm.expect(return_avatar_url).to.have.length(81),get+projects_{id}_issues,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,assignees.avatar_url
/projects/{id}/issues&/projects/{id}/issues&get&200&assignees():::EXIT,return.avatar_url is Url,daikon.inv.unary.string.IsUrl,(return.avatar_url),"pm.expect(return_avatar_url).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",get+projects_{id}_issues,1.0,,,Indicates that the value of a string variable is always a URL. Represented as x is Url.,,,GitLab Issues API,assignees.avatar_url
/projects/{id}/issues&/projects/{id}/issues&get&200&assignees():::EXIT,"return.state == ""active""",daikon.inv.unary.string.OneOfString,(return.state),"pm.expect([""active""].includes(return_state)).to.be.true",get+projects_{id}_issues,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,assignees.state
/projects/{id}/issues&/projects/{id}/issues&get&200&assignees():::EXIT,LENGTH(return.state)==6,daikon.inv.unary.string.FixedLengthString,(return.state),pm.expect(return_state).to.have.length(6),get+projects_{id}_issues,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,assignees.state
/projects/{id}/issues&/projects/{id}/issues&get&200&assignees():::EXIT,return.id >= 1,daikon.inv.unary.scalar.LowerBound,(return.id),pm.expect(return_id).to.be.at.least(1),get+projects_{id}_issues,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,,GitLab Issues API,assignees.id
/projects/{id}/issues&/projects/{id}/issues&get&200&assignees():::EXIT,return.username is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.username)",pm.expect(return_web_url.includes(return_username)).to.be.true,get+projects_{id}_issues,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,assignees.web_url
/projects/{id}/issues&/projects/{id}/issues&get&200&assignees():::EXIT,return.id >= size(input.assignee_username[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.id, size(input.assignee_username[..]))",pm.expect(return_id).to.be.at.least(input_assignee_username_size_array),get+projects_{id}_issues,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,assignees.id
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,input.confidential == return.confidential,daikon.inv.binary.twoScalar.IntEqual,"(input.confidential, return.confidential)",pm.expect(input_confidential).to.eql(return_confidential),get+projects_{id}_issues,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,confidential
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,input.id == return.project_id,daikon.inv.binary.twoScalar.IntEqual,"(input.id, return.project_id)",pm.expect(input_id).to.eql(return_project_id),get+projects_{id}_issues,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,project_id
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,input.state == return.state,daikon.inv.binary.twoString.StringEqual,"(input.state, return.state)",pm.expect(input_state).to.eql(return_state),get+projects_{id}_issues,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,,GitLab Issues API,state
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,return.assignee.state == return.author.state,daikon.inv.binary.twoString.StringEqual,"(return.assignee.state, return.author.state)",pm.expect(return_assignee_state).to.eql(return_author_state),get+projects_{id}_issues,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,,GitLab Issues API,assignee.state
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,return.assignee.state == return.closed_by.state,daikon.inv.binary.twoString.StringEqual,"(return.assignee.state, return.closed_by.state)",pm.expect(return_assignee_state).to.eql(return_closed_by_state),get+projects_{id}_issues,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,,GitLab Issues API,assignee.state
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,return.author.state == return.closed_by.state,daikon.inv.binary.twoString.StringEqual,"(return.author.state, return.closed_by.state)",pm.expect(return_author_state).to.eql(return_closed_by_state),get+projects_{id}_issues,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,,GitLab Issues API,author.state
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,return.downvotes == return.merge_requests_count,daikon.inv.binary.twoScalar.IntEqual,"(return.downvotes, return.merge_requests_count)",pm.expect(return_downvotes).to.eql(return_merge_requests_count),get+projects_{id}_issues,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,downvotes
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,return.downvotes == return.task_completion_status.count,daikon.inv.binary.twoScalar.IntEqual,"(return.downvotes, return.task_completion_status.count)",pm.expect(return_downvotes).to.eql(return_task_completion_status_count),get+projects_{id}_issues,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,downvotes
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,return.downvotes == return.task_completion_status.completed_count,daikon.inv.binary.twoScalar.IntEqual,"(return.downvotes, return.task_completion_status.completed_count)",pm.expect(return_downvotes).to.eql(return_task_completion_status_completed_count),get+projects_{id}_issues,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,downvotes
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,return.downvotes == return.upvotes,daikon.inv.binary.twoScalar.IntEqual,"(return.downvotes, return.upvotes)",pm.expect(return_downvotes).to.eql(return_upvotes),get+projects_{id}_issues,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,downvotes
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,return.downvotes == return.user_notes_count,daikon.inv.binary.twoScalar.IntEqual,"(return.downvotes, return.user_notes_count)",pm.expect(return_downvotes).to.eql(return_user_notes_count),get+projects_{id}_issues,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,downvotes
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,return.references.relative == return.references.short,daikon.inv.binary.twoString.StringEqual,"(return.references.relative, return.references.short)",pm.expect(return_references_relative).to.eql(return_references_short),get+projects_{id}_issues,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,,GitLab Issues API,references.relative
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,LENGTH(return.assignee.avatar_url)==81,daikon.inv.unary.string.FixedLengthString,(return.assignee.avatar_url),pm.expect(return_assignee_avatar_url).to.have.length(81),get+projects_{id}_issues,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,assignee.avatar_url
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,return.assignee.avatar_url is Url,daikon.inv.unary.string.IsUrl,(return.assignee.avatar_url),"pm.expect(return_assignee_avatar_url).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",get+projects_{id}_issues,1.0,,,Indicates that the value of a string variable is always a URL. Represented as x is Url.,,,GitLab Issues API,assignee.avatar_url
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,"return.assignee.state == ""active""",daikon.inv.unary.string.OneOfString,(return.assignee.state),"pm.expect([""active""].includes(return_assignee_state)).to.be.true",get+projects_{id}_issues,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,assignee.state
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,LENGTH(return.assignee.state)==6,daikon.inv.unary.string.FixedLengthString,(return.assignee.state),pm.expect(return_assignee_state).to.have.length(6),get+projects_{id}_issues,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,assignee.state
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,return.assignee.id >= 1,daikon.inv.unary.scalar.LowerBound,(return.assignee.id),pm.expect(return_assignee_id).to.be.at.least(1),get+projects_{id}_issues,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,,GitLab Issues API,assignee.id
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,LENGTH(return.author.avatar_url)==81,daikon.inv.unary.string.FixedLengthString,(return.author.avatar_url),pm.expect(return_author_avatar_url).to.have.length(81),get+projects_{id}_issues,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,author.avatar_url
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,return.author.avatar_url is Url,daikon.inv.unary.string.IsUrl,(return.author.avatar_url),"pm.expect(return_author_avatar_url).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",get+projects_{id}_issues,1.0,,,Indicates that the value of a string variable is always a URL. Represented as x is Url.,,,GitLab Issues API,author.avatar_url
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,"return.author.state == ""active""",daikon.inv.unary.string.OneOfString,(return.author.state),"pm.expect([""active""].includes(return_author_state)).to.be.true",get+projects_{id}_issues,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,author.state
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,LENGTH(return.author.state)==6,daikon.inv.unary.string.FixedLengthString,(return.author.state),pm.expect(return_author_state).to.have.length(6),get+projects_{id}_issues,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,author.state
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,return.author.id >= 1,daikon.inv.unary.scalar.LowerBound,(return.author.id),pm.expect(return_author_id).to.be.at.least(1),get+projects_{id}_issues,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,,GitLab Issues API,author.id
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,LENGTH(return.closed_at)==24,daikon.inv.unary.string.FixedLengthString,(return.closed_at),pm.expect(return_closed_at).to.have.length(24),get+projects_{id}_issues,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,closed_at
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,return.closed_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.closed_at),"pm.expect(return_closed_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+projects_{id}_issues,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,,GitLab Issues API,closed_at
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,"return.closed_by.avatar_url one of { ""https://www.gravatar.com/avatar/1f9d9a9efc2f523b2f09629444632b5c?s=80&d=identicon"", ""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80&d=identicon"" }",daikon.inv.unary.string.OneOfString,(return.closed_by.avatar_url),"pm.expect([""https://www.gravatar.com/avatar/1f9d9a9efc2f523b2f09629444632b5c?s=80&d=identicon"", ""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80&d=identicon""].includes(return_closed_by_avatar_url)).to.be.true",get+projects_{id}_issues,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,closed_by.avatar_url
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,LENGTH(return.closed_by.avatar_url)==81,daikon.inv.unary.string.FixedLengthString,(return.closed_by.avatar_url),pm.expect(return_closed_by_avatar_url).to.have.length(81),get+projects_{id}_issues,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,closed_by.avatar_url
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,return.closed_by.avatar_url is Url,daikon.inv.unary.string.IsUrl,(return.closed_by.avatar_url),"pm.expect(return_closed_by_avatar_url).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",get+projects_{id}_issues,1.0,,,Indicates that the value of a string variable is always a URL. Represented as x is Url.,,,GitLab Issues API,closed_by.avatar_url
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,"return.closed_by.id one of { 1, 6 }",daikon.inv.unary.scalar.OneOfScalar,(return.closed_by.id),"pm.expect([1, 6, 0].includes(return_closed_by_id)).to.be.true",get+projects_{id}_issues,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,closed_by.id
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,"return.closed_by.name one of { ""Administrator"", ""john"" }",daikon.inv.unary.string.OneOfString,(return.closed_by.name),"pm.expect([""Administrator"", ""john""].includes(return_closed_by_name)).to.be.true",get+projects_{id}_issues,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,closed_by.name
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,"return.closed_by.state == ""active""",daikon.inv.unary.string.OneOfString,(return.closed_by.state),"pm.expect([""active""].includes(return_closed_by_state)).to.be.true",get+projects_{id}_issues,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,closed_by.state
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,LENGTH(return.closed_by.state)==6,daikon.inv.unary.string.FixedLengthString,(return.closed_by.state),pm.expect(return_closed_by_state).to.have.length(6),get+projects_{id}_issues,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,closed_by.state
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,"return.closed_by.username one of { ""john"", ""root"" }",daikon.inv.unary.string.OneOfString,(return.closed_by.username),"pm.expect([""john"", ""root""].includes(return_closed_by_username)).to.be.true",get+projects_{id}_issues,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,closed_by.username
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,LENGTH(return.closed_by.username)==4,daikon.inv.unary.string.FixedLengthString,(return.closed_by.username),pm.expect(return_closed_by_username).to.have.length(4),get+projects_{id}_issues,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,closed_by.username
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,"return.closed_by.web_url one of { ""http://localhost:30000/john"", ""http://localhost:30000/root"" }",daikon.inv.unary.string.OneOfString,(return.closed_by.web_url),"pm.expect([""http://localhost:30000/john"", ""http://localhost:30000/root""].includes(return_closed_by_web_url)).to.be.true",get+projects_{id}_issues,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,closed_by.web_url
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,LENGTH(return.closed_by.web_url)==27,daikon.inv.unary.string.FixedLengthString,(return.closed_by.web_url),pm.expect(return_closed_by_web_url).to.have.length(27),get+projects_{id}_issues,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,closed_by.web_url
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,LENGTH(return.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.created_at),pm.expect(return_created_at).to.have.length(24),get+projects_{id}_issues,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,created_at
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.created_at),"pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+projects_{id}_issues,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,,GitLab Issues API,created_at
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,return.downvotes == 0,daikon.inv.unary.scalar.OneOfScalar,(return.downvotes),pm.expect([0].includes(return_downvotes)).to.be.true,get+projects_{id}_issues,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,downvotes
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,return.due_date is a Date. Format: YYYY/MM/DD,daikon.inv.unary.string.dates.IsDateYYYYMMDD,(return.due_date),pm.expect(return_due_date).to.match(/^(?:1\d{3}|20[01234][0-9]|2050|9999)[-/.](?:0[1-9]|1[012])[-/.](?:0[1-9]|[12][0-9]|3[01])$/),get+projects_{id}_issues,1.0,,,"Indicates that the value of a string variable is always a date following the format YYYY/MM/DD or YYYY-MM-DD (the separator can be ""/"" or ""-""). Represented as x is a Date. Format YYYY/MM/DD.",,,GitLab Issues API,due_date
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,return.has_tasks == false,daikon.inv.unary.scalar.OneOfScalar,(return.has_tasks),pm.expect(return_has_tasks).to.eql(false),get+projects_{id}_issues,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,has_tasks
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,return.iid >= 1,daikon.inv.unary.scalar.LowerBound,(return.iid),pm.expect(return_iid).to.be.at.least(1),get+projects_{id}_issues,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,,GitLab Issues API,iid
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,return.milestone == null,daikon.inv.unary.scalar.OneOfScalar,(return.milestone),pm.expect(return_milestone).to.be.null,get+projects_{id}_issues,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,milestone
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,"return.moved_to_id one of { ""5246"", ""5252"" }",daikon.inv.unary.string.OneOfString,(return.moved_to_id),"pm.expect([""5246"", ""5252""].includes(return_moved_to_id)).to.be.true",get+projects_{id}_issues,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,moved_to_id
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,LENGTH(return.moved_to_id)==4,daikon.inv.unary.string.FixedLengthString,(return.moved_to_id),pm.expect(return_moved_to_id).to.have.length(4),get+projects_{id}_issues,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,moved_to_id
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,return.moved_to_id is Numeric,daikon.inv.unary.string.IsNumeric,(return.moved_to_id),"pm.expect(return_moved_to_id).to.match(/^[+-]{0,1}(0|([0-9](\d*|\d{0,2}(,\d{3})*)))?(\.\d*[0-9])?$/)",get+projects_{id}_issues,1.0,,,Indicates that the characters of a string variable are always numeric. Represented as x is Numeric.,,,GitLab Issues API,moved_to_id
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,"return.state one of { ""closed"", ""opened"" }",daikon.inv.unary.string.OneOfString,(return.state),"pm.expect([""closed"", ""opened""].includes(return_state)).to.be.true",get+projects_{id}_issues,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,state
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,LENGTH(return.state)==6,daikon.inv.unary.string.FixedLengthString,(return.state),pm.expect(return_state).to.have.length(6),get+projects_{id}_issues,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,state
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,return.time_stats.time_estimate >= 0,daikon.inv.unary.scalar.LowerBound,(return.time_stats.time_estimate),pm.expect(return_time_stats_time_estimate).to.be.at.least(0),get+projects_{id}_issues,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,,GitLab Issues API,time_stats.time_estimate
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,return.time_stats.total_time_spent >= 0,daikon.inv.unary.scalar.LowerBound,(return.time_stats.total_time_spent),pm.expect(return_time_stats_total_time_spent).to.be.at.least(0),get+projects_{id}_issues,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,,GitLab Issues API,time_stats.total_time_spent
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,LENGTH(return.updated_at)==24,daikon.inv.unary.string.FixedLengthString,(return.updated_at),pm.expect(return_updated_at).to.have.length(24),get+projects_{id}_issues,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,updated_at
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,return.updated_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.updated_at),"pm.expect(return_updated_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+projects_{id}_issues,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,,GitLab Issues API,updated_at
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,"size(return.assignees[]) one of { 0, 1 }",daikon.inv.unary.scalar.OneOfScalar,(size(return.assignees[..])),"pm.expect([0, 1, 0].includes(return_assignees_size_array)).to.be.true",get+projects_{id}_issues,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,assignees
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,input.per_page >= return.assignee.id,daikon.inv.binary.twoScalar.IntGreaterEqual,"(input.per_page, return.assignee.id)",pm.expect(input_per_page).to.be.at.least(return_assignee_id),get+projects_{id}_issues,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,assignee.id
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,input.per_page < return.id,daikon.inv.binary.twoScalar.IntLessThan,"(input.per_page, return.id)",pm.expect(input_per_page).to.be.lessThan(return_id),get+projects_{id}_issues,1.0,,,Represents an invariant of < between two long scalars. Prints as x < y.,,,GitLab Issues API,id
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,input.per_page >= size(return.assignees[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(input.per_page, size(return.assignees[..]))",pm.expect(input_per_page).to.be.at.least(return_assignees_size_array),get+projects_{id}_issues,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,assignees
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,input.author_id >= return.downvotes,daikon.inv.binary.twoScalar.IntGreaterEqual,"(input.author_id, return.downvotes)",pm.expect(input_author_id).to.be.at.least(return_downvotes),get+projects_{id}_issues,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,downvotes
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,input.author_id >= size(return.assignees[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(input.author_id, size(return.assignees[..]))",pm.expect(input_author_id).to.be.at.least(return_assignees_size_array),get+projects_{id}_issues,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,assignees
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,return._links.self is a substring of return._links.award_emoji,daikon.inv.binary.twoString.StdString$SubString,"(return._links.award_emoji, return._links.self)",pm.expect(return__links_award_emoji.includes(return__links_self)).to.be.true,get+projects_{id}_issues,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,_links.self
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,return._links.self is a substring of return._links.notes,daikon.inv.binary.twoString.StdString$SubString,"(return._links.notes, return._links.self)",pm.expect(return__links_notes.includes(return__links_self)).to.be.true,get+projects_{id}_issues,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,_links.self
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,return._links.project is a substring of return._links.self,daikon.inv.binary.twoString.StdString$SubString,"(return._links.project, return._links.self)",pm.expect(return__links_self.includes(return__links_project)).to.be.true,get+projects_{id}_issues,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,_links.self
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,return.assignee.username is a substring of return.assignee.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.assignee.web_url, return.assignee.username)",pm.expect(return_assignee_web_url.includes(return_assignee_username)).to.be.true,get+projects_{id}_issues,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,assignee.web_url
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,return.assignee.id >= size(input.assignee_username[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.assignee.id, size(input.assignee_username[..]))",pm.expect(return_assignee_id).to.be.at.least(input_assignee_username_size_array),get+projects_{id}_issues,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,assignee.id
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,return.assignee.id >= size(return.assignees[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.assignee.id, size(return.assignees[..]))",pm.expect(return_assignee_id).to.be.at.least(return_assignees_size_array),get+projects_{id}_issues,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,assignee.id
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,return.author.username is a substring of return.author.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.author.web_url, return.author.username)",pm.expect(return_author_web_url.includes(return_author_username)).to.be.true,get+projects_{id}_issues,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,author.web_url
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,return.author.id < return.id,daikon.inv.binary.twoScalar.IntLessThan,"(return.author.id, return.id)",pm.expect(return_author_id).to.be.lessThan(return_id),get+projects_{id}_issues,1.0,,,Represents an invariant of < between two long scalars. Prints as x < y.,,,GitLab Issues API,author.id
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,return.author.id >= size(input.assignee_username[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.author.id, size(input.assignee_username[..]))",pm.expect(return_author_id).to.be.at.least(input_assignee_username_size_array),get+projects_{id}_issues,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,author.id
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,return.author.id >= size(return.assignees[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.author.id, size(return.assignees[..]))",pm.expect(return_author_id).to.be.at.least(return_assignees_size_array),get+projects_{id}_issues,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,author.id
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,return.closed_by.username is a substring of return.closed_by.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.closed_by.username, return.closed_by.web_url)",pm.expect(return_closed_by_web_url.includes(return_closed_by_username)).to.be.true,get+projects_{id}_issues,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,closed_by.username
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,return.downvotes <= return.time_stats.time_estimate,daikon.inv.binary.twoScalar.IntLessEqual,"(return.downvotes, return.time_stats.time_estimate)",pm.expect(return_downvotes).to.be.lte(return_time_stats_time_estimate),get+projects_{id}_issues,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,,GitLab Issues API,downvotes
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,return.downvotes <= return.time_stats.total_time_spent,daikon.inv.binary.twoScalar.IntLessEqual,"(return.downvotes, return.time_stats.total_time_spent)",pm.expect(return_downvotes).to.be.lte(return_time_stats_total_time_spent),get+projects_{id}_issues,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,,GitLab Issues API,downvotes
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,return.downvotes <= size(return.assignees[]),daikon.inv.binary.twoScalar.IntLessEqual,"(return.downvotes, size(return.assignees[..]))",pm.expect(return_downvotes).to.be.lte(return_assignees_size_array),get+projects_{id}_issues,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,,GitLab Issues API,downvotes
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,return.iid >= size(input.assignee_username[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.iid, size(input.assignee_username[..]))",pm.expect(return_iid).to.be.at.least(input_assignee_username_size_array),get+projects_{id}_issues,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,iid
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,return.iid > size(return.assignees[]),daikon.inv.binary.twoScalar.IntGreaterThan,"(return.iid, size(return.assignees[..]))",pm.expect(return_iid).to.be.greaterThan(return_assignees_size_array),get+projects_{id}_issues,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,,GitLab Issues API,iid
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,return.references.relative is a substring of return.references.full,daikon.inv.binary.twoString.StdString$SubString,"(return.references.full, return.references.relative)",pm.expect(return_references_full.includes(return_references_relative)).to.be.true,get+projects_{id}_issues,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,references.full
/projects/{id}/issues&/projects/{id}/issues&get&200():::EXIT,size(input.assignee_username[]) >= size(return.assignees[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(size(input.assignee_username[..]), size(return.assignees[..]))",pm.expect(input_assignee_username_size_array).to.be.at.least(return_assignees_size_array),get+projects_{id}_issues,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,assignees
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200&assignees():::EXIT,LENGTH(return.avatar_url)==81,daikon.inv.unary.string.FixedLengthString,(return.avatar_url),pm.expect(return_avatar_url).to.have.length(81),get+projects_{id}_issues_{issue_iid},,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,assignees.avatar_url
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200&assignees():::EXIT,return.avatar_url is Url,daikon.inv.unary.string.IsUrl,(return.avatar_url),"pm.expect(return_avatar_url).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",get+projects_{id}_issues_{issue_iid},1.0,,,Indicates that the value of a string variable is always a URL. Represented as x is Url.,,,GitLab Issues API,assignees.avatar_url
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200&assignees():::EXIT,"return.state == ""active""",daikon.inv.unary.string.OneOfString,(return.state),"pm.expect([""active""].includes(return_state)).to.be.true",get+projects_{id}_issues_{issue_iid},1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,assignees.state
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200&assignees():::EXIT,LENGTH(return.state)==6,daikon.inv.unary.string.FixedLengthString,(return.state),pm.expect(return_state).to.have.length(6),get+projects_{id}_issues_{issue_iid},1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,assignees.state
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200&assignees():::EXIT,return.username is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.username)",pm.expect(return_web_url.includes(return_username)).to.be.true,get+projects_{id}_issues_{issue_iid},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,assignees.web_url
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,input.id == return.project_id,daikon.inv.binary.twoScalar.IntEqual,"(input.id, return.project_id)",pm.expect(input_id).to.eql(return_project_id),get+projects_{id}_issues_{issue_iid},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,project_id
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,input.issue_iid == return.iid,daikon.inv.binary.twoScalar.IntEqual,"(input.issue_iid, return.iid)",pm.expect(input_issue_iid).to.eql(return_iid),get+projects_{id}_issues_{issue_iid},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,iid
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,return.assignee.state == return.author.state,daikon.inv.binary.twoString.StringEqual,"(return.assignee.state, return.author.state)",pm.expect(return_assignee_state).to.eql(return_author_state),get+projects_{id}_issues_{issue_iid},1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,,GitLab Issues API,assignee.state
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,return.assignee.state == return.closed_by.state,daikon.inv.binary.twoString.StringEqual,"(return.assignee.state, return.closed_by.state)",pm.expect(return_assignee_state).to.eql(return_closed_by_state),get+projects_{id}_issues_{issue_iid},1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,,GitLab Issues API,assignee.state
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,return.author.web_url == return.closed_by.web_url,daikon.inv.binary.twoString.StringEqual,"(return.author.web_url, return.closed_by.web_url)",pm.expect(return_author_web_url).to.eql(return_closed_by_web_url),get+projects_{id}_issues_{issue_iid},1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,,GitLab Issues API,author.web_url
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,return.author.avatar_url == return.closed_by.avatar_url,daikon.inv.binary.twoString.StringEqual,"(return.author.avatar_url, return.closed_by.avatar_url)",pm.expect(return_author_avatar_url).to.eql(return_closed_by_avatar_url),get+projects_{id}_issues_{issue_iid},1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,,GitLab Issues API,author.avatar_url
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,return.author.username == return.closed_by.username,daikon.inv.binary.twoString.StringEqual,"(return.author.username, return.closed_by.username)",pm.expect(return_author_username).to.eql(return_closed_by_username),get+projects_{id}_issues_{issue_iid},1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,,GitLab Issues API,author.username
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,return.author.state == return.closed_by.state,daikon.inv.binary.twoString.StringEqual,"(return.author.state, return.closed_by.state)",pm.expect(return_author_state).to.eql(return_closed_by_state),get+projects_{id}_issues_{issue_iid},1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,,GitLab Issues API,author.state
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,return.author.name == return.closed_by.name,daikon.inv.binary.twoString.StringEqual,"(return.author.name, return.closed_by.name)",pm.expect(return_author_name).to.eql(return_closed_by_name),get+projects_{id}_issues_{issue_iid},1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,,GitLab Issues API,author.name
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,return.author.id == return.closed_by.id,daikon.inv.binary.twoScalar.IntEqual,"(return.author.id, return.closed_by.id)",pm.expect(return_author_id).to.eql(return_closed_by_id),get+projects_{id}_issues_{issue_iid},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,author.id
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,return.closed_by.id == size(return.assignees[]),daikon.inv.binary.twoScalar.IntEqual,"(return.closed_by.id, size(return.assignees[..]))",pm.expect(return_closed_by_id).to.eql(return_assignees_size_array),get+projects_{id}_issues_{issue_iid},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,closed_by.id
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,return.downvotes == return.merge_requests_count,daikon.inv.binary.twoScalar.IntEqual,"(return.downvotes, return.merge_requests_count)",pm.expect(return_downvotes).to.eql(return_merge_requests_count),get+projects_{id}_issues_{issue_iid},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,downvotes
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,return.downvotes == return.task_completion_status.count,daikon.inv.binary.twoScalar.IntEqual,"(return.downvotes, return.task_completion_status.count)",pm.expect(return_downvotes).to.eql(return_task_completion_status_count),get+projects_{id}_issues_{issue_iid},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,downvotes
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,return.downvotes == return.task_completion_status.completed_count,daikon.inv.binary.twoScalar.IntEqual,"(return.downvotes, return.task_completion_status.completed_count)",pm.expect(return_downvotes).to.eql(return_task_completion_status_completed_count),get+projects_{id}_issues_{issue_iid},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,downvotes
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,return.downvotes == return.upvotes,daikon.inv.binary.twoScalar.IntEqual,"(return.downvotes, return.upvotes)",pm.expect(return_downvotes).to.eql(return_upvotes),get+projects_{id}_issues_{issue_iid},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,downvotes
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,return.downvotes == return.user_notes_count,daikon.inv.binary.twoScalar.IntEqual,"(return.downvotes, return.user_notes_count)",pm.expect(return_downvotes).to.eql(return_user_notes_count),get+projects_{id}_issues_{issue_iid},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,downvotes
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,return.references.relative == return.references.short,daikon.inv.binary.twoString.StringEqual,"(return.references.relative, return.references.short)",pm.expect(return_references_relative).to.eql(return_references_short),get+projects_{id}_issues_{issue_iid},1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,,GitLab Issues API,references.relative
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,LENGTH(return.assignee.avatar_url)==81,daikon.inv.unary.string.FixedLengthString,(return.assignee.avatar_url),pm.expect(return_assignee_avatar_url).to.have.length(81),get+projects_{id}_issues_{issue_iid},,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,assignee.avatar_url
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,return.assignee.avatar_url is Url,daikon.inv.unary.string.IsUrl,(return.assignee.avatar_url),"pm.expect(return_assignee_avatar_url).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",get+projects_{id}_issues_{issue_iid},1.0,,,Indicates that the value of a string variable is always a URL. Represented as x is Url.,,,GitLab Issues API,assignee.avatar_url
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,"return.assignee.state == ""active""",daikon.inv.unary.string.OneOfString,(return.assignee.state),"pm.expect([""active""].includes(return_assignee_state)).to.be.true",get+projects_{id}_issues_{issue_iid},,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,assignee.state
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,LENGTH(return.assignee.state)==6,daikon.inv.unary.string.FixedLengthString,(return.assignee.state),pm.expect(return_assignee_state).to.have.length(6),get+projects_{id}_issues_{issue_iid},,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,assignee.state
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,LENGTH(return.author.avatar_url)==81,daikon.inv.unary.string.FixedLengthString,(return.author.avatar_url),pm.expect(return_author_avatar_url).to.have.length(81),get+projects_{id}_issues_{issue_iid},,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,author.avatar_url
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,return.author.avatar_url is Url,daikon.inv.unary.string.IsUrl,(return.author.avatar_url),"pm.expect(return_author_avatar_url).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",get+projects_{id}_issues_{issue_iid},1.0,,,Indicates that the value of a string variable is always a URL. Represented as x is Url.,,,GitLab Issues API,author.avatar_url
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,"return.author.state == ""active""",daikon.inv.unary.string.OneOfString,(return.author.state),"pm.expect([""active""].includes(return_author_state)).to.be.true",get+projects_{id}_issues_{issue_iid},1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,author.state
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,LENGTH(return.author.state)==6,daikon.inv.unary.string.FixedLengthString,(return.author.state),pm.expect(return_author_state).to.have.length(6),get+projects_{id}_issues_{issue_iid},1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,author.state
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,return.author.id >= 1,daikon.inv.unary.scalar.LowerBound,(return.author.id),pm.expect(return_author_id).to.be.at.least(1),get+projects_{id}_issues_{issue_iid},1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,,GitLab Issues API,author.id
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,"return.closed_at == ""2025-06-15T11:30:50.322Z""",daikon.inv.unary.string.OneOfString,(return.closed_at),"pm.expect([""2025-06-15T11:30:50.322Z""].includes(return_closed_at)).to.be.true",get+projects_{id}_issues_{issue_iid},,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,closed_at
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,"return.closed_by.avatar_url == ""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80&d=identicon""",daikon.inv.unary.string.OneOfString,(return.closed_by.avatar_url),"pm.expect([""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80&d=identicon""].includes(return_closed_by_avatar_url)).to.be.true",get+projects_{id}_issues_{issue_iid},,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,closed_by.avatar_url
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,return.closed_by.id == 1,daikon.inv.unary.scalar.OneOfScalar,(return.closed_by.id),pm.expect([1].includes(return_closed_by_id)).to.be.true,get+projects_{id}_issues_{issue_iid},,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,closed_by.id
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,"return.closed_by.name == ""Administrator""",daikon.inv.unary.string.OneOfString,(return.closed_by.name),"pm.expect([""Administrator""].includes(return_closed_by_name)).to.be.true",get+projects_{id}_issues_{issue_iid},,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,closed_by.name
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,"return.closed_by.state == ""active""",daikon.inv.unary.string.OneOfString,(return.closed_by.state),"pm.expect([""active""].includes(return_closed_by_state)).to.be.true",get+projects_{id}_issues_{issue_iid},,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,closed_by.state
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,"return.closed_by.username == ""root""",daikon.inv.unary.string.OneOfString,(return.closed_by.username),"pm.expect([""root""].includes(return_closed_by_username)).to.be.true",get+projects_{id}_issues_{issue_iid},,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,closed_by.username
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,"return.closed_by.web_url == ""http://localhost:30000/root""",daikon.inv.unary.string.OneOfString,(return.closed_by.web_url),"pm.expect([""http://localhost:30000/root""].includes(return_closed_by_web_url)).to.be.true",get+projects_{id}_issues_{issue_iid},,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,closed_by.web_url
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,LENGTH(return.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.created_at),pm.expect(return_created_at).to.have.length(24),get+projects_{id}_issues_{issue_iid},1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,created_at
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.created_at),"pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+projects_{id}_issues_{issue_iid},1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,,GitLab Issues API,created_at
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,return.downvotes == 0,daikon.inv.unary.scalar.OneOfScalar,(return.downvotes),pm.expect([0].includes(return_downvotes)).to.be.true,get+projects_{id}_issues_{issue_iid},1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,downvotes
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,return.due_date is a Date. Format: YYYY/MM/DD,daikon.inv.unary.string.dates.IsDateYYYYMMDD,(return.due_date),pm.expect(return_due_date).to.match(/^(?:1\d{3}|20[01234][0-9]|2050|9999)[-/.](?:0[1-9]|1[012])[-/.](?:0[1-9]|[12][0-9]|3[01])$/),get+projects_{id}_issues_{issue_iid},1.0,,,"Indicates that the value of a string variable is always a date following the format YYYY/MM/DD or YYYY-MM-DD (the separator can be ""/"" or ""-""). Represented as x is a Date. Format YYYY/MM/DD.",,,GitLab Issues API,due_date
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,return.has_tasks == false,daikon.inv.unary.scalar.OneOfScalar,(return.has_tasks),pm.expect(return_has_tasks).to.eql(false),get+projects_{id}_issues_{issue_iid},1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,has_tasks
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,return.milestone == null,daikon.inv.unary.scalar.OneOfScalar,(return.milestone),pm.expect(return_milestone).to.be.null,get+projects_{id}_issues_{issue_iid},1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,milestone
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,"return.moved_to_id == ""5249""",daikon.inv.unary.string.OneOfString,(return.moved_to_id),"pm.expect([""5249""].includes(return_moved_to_id)).to.be.true",get+projects_{id}_issues_{issue_iid},,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,moved_to_id
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,"return.state one of { ""closed"", ""opened"" }",daikon.inv.unary.string.OneOfString,(return.state),"pm.expect([""closed"", ""opened""].includes(return_state)).to.be.true",get+projects_{id}_issues_{issue_iid},1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,state
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,LENGTH(return.state)==6,daikon.inv.unary.string.FixedLengthString,(return.state),pm.expect(return_state).to.have.length(6),get+projects_{id}_issues_{issue_iid},1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,state
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,return.time_stats.time_estimate >= 0,daikon.inv.unary.scalar.LowerBound,(return.time_stats.time_estimate),pm.expect(return_time_stats_time_estimate).to.be.at.least(0),get+projects_{id}_issues_{issue_iid},1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,,GitLab Issues API,time_stats.time_estimate
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,"return.time_stats.total_time_spent one of { 0, 8 }",daikon.inv.unary.scalar.OneOfScalar,(return.time_stats.total_time_spent),"pm.expect([0, 8, 0].includes(return_time_stats_total_time_spent)).to.be.true",get+projects_{id}_issues_{issue_iid},,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,time_stats.total_time_spent
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,"return.time_stats.human_time_estimate one of { ""1m"", ""1s"", ""1w 2d"" }",daikon.inv.unary.string.OneOfString,(return.time_stats.human_time_estimate),"pm.expect([""1m"", ""1s"", ""1w 2d""].includes(return_time_stats_human_time_estimate)).to.be.true",get+projects_{id}_issues_{issue_iid},,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,time_stats.human_time_estimate
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,"return.time_stats.human_total_time_spent == ""8s""",daikon.inv.unary.string.OneOfString,(return.time_stats.human_total_time_spent),"pm.expect([""8s""].includes(return_time_stats_human_total_time_spent)).to.be.true",get+projects_{id}_issues_{issue_iid},,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,time_stats.human_total_time_spent
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,LENGTH(return.updated_at)==24,daikon.inv.unary.string.FixedLengthString,(return.updated_at),pm.expect(return_updated_at).to.have.length(24),get+projects_{id}_issues_{issue_iid},1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,updated_at
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,return.updated_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.updated_at),"pm.expect(return_updated_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+projects_{id}_issues_{issue_iid},1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,,GitLab Issues API,updated_at
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,"size(return.assignees[]) one of { 0, 1 }",daikon.inv.unary.scalar.OneOfScalar,(size(return.assignees[..])),"pm.expect([0, 1, 0].includes(return_assignees_size_array)).to.be.true",get+projects_{id}_issues_{issue_iid},1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,assignees
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,input.issue_iid > return.time_stats.total_time_spent,daikon.inv.binary.twoScalar.IntGreaterThan,"(input.issue_iid, return.time_stats.total_time_spent)",pm.expect(input_issue_iid).to.be.greaterThan(return_time_stats_total_time_spent),get+projects_{id}_issues_{issue_iid},,1.0,,Represents an invariant of > between two long scalars. Prints as x > y.,,,GitLab Issues API,time_stats.total_time_spent
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,return._links.self is a substring of return._links.award_emoji,daikon.inv.binary.twoString.StdString$SubString,"(return._links.award_emoji, return._links.self)",pm.expect(return__links_award_emoji.includes(return__links_self)).to.be.true,get+projects_{id}_issues_{issue_iid},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,_links.self
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,return._links.self is a substring of return._links.notes,daikon.inv.binary.twoString.StdString$SubString,"(return._links.notes, return._links.self)",pm.expect(return__links_notes.includes(return__links_self)).to.be.true,get+projects_{id}_issues_{issue_iid},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,_links.self
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,return._links.project is a substring of return._links.self,daikon.inv.binary.twoString.StdString$SubString,"(return._links.project, return._links.self)",pm.expect(return__links_self.includes(return__links_project)).to.be.true,get+projects_{id}_issues_{issue_iid},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,_links.self
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,return.assignee.username is a substring of return.assignee.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.assignee.web_url, return.assignee.username)",pm.expect(return_assignee_web_url.includes(return_assignee_username)).to.be.true,get+projects_{id}_issues_{issue_iid},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,assignee.web_url
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,return.assignee.id >= size(return.assignees[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.assignee.id, size(return.assignees[..]))",pm.expect(return_assignee_id).to.be.at.least(return_assignees_size_array),get+projects_{id}_issues_{issue_iid},1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,assignee.id
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,return.assignees[] elements == return.assignees[return.closed_by.id -1],daikon.inv.binary.sequenceScalar.SeqIntEqual,"(return.assignees[..], return.assignees[return.closed_by.id -1])",pm.expect(return_assignees_array.every(element => element == return_assignees_return_closed_by_id_minus_1)).to.be.true,get+projects_{id}_issues_{issue_iid},1.0,,,Represents an invariant between a long scalar and a a sequence of long values. Prints as x[] elements == y where x is a long sequence and y is a long scalar.,,,GitLab Issues API,assignees
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,return.author.username is a substring of return.author.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.author.web_url, return.author.username)",pm.expect(return_author_web_url.includes(return_author_username)).to.be.true,get+projects_{id}_issues_{issue_iid},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,author.web_url
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,return.closed_by.username is a substring of return.author.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.author.web_url, return.closed_by.username)",pm.expect(return_author_web_url.includes(return_closed_by_username)).to.be.true,get+projects_{id}_issues_{issue_iid},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,author.web_url
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,return.author.username is a substring of return.closed_by.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.author.username, return.closed_by.web_url)",pm.expect(return_closed_by_web_url.includes(return_author_username)).to.be.true,get+projects_{id}_issues_{issue_iid},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,author.username
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,return.author.id > return.time_stats.total_time_spent,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.author.id, return.time_stats.total_time_spent)",pm.expect(return_author_id).to.be.greaterThan(return_time_stats_total_time_spent),get+projects_{id}_issues_{issue_iid},,1.0,,Represents an invariant of > between two long scalars. Prints as x > y.,,,GitLab Issues API,author.id
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,return.author.id >= size(return.assignees[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.author.id, size(return.assignees[..]))",pm.expect(return_author_id).to.be.at.least(return_assignees_size_array),get+projects_{id}_issues_{issue_iid},1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,author.id
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,return.closed_by.username is a substring of return.closed_by.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.closed_by.username, return.closed_by.web_url)",pm.expect(return_closed_by_web_url.includes(return_closed_by_username)).to.be.true,get+projects_{id}_issues_{issue_iid},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,closed_by.username
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,return.downvotes <= return.time_stats.time_estimate,daikon.inv.binary.twoScalar.IntLessEqual,"(return.downvotes, return.time_stats.time_estimate)",pm.expect(return_downvotes).to.be.lte(return_time_stats_time_estimate),get+projects_{id}_issues_{issue_iid},1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,,GitLab Issues API,downvotes
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,return.downvotes <= return.time_stats.total_time_spent,daikon.inv.binary.twoScalar.IntLessEqual,"(return.downvotes, return.time_stats.total_time_spent)",pm.expect(return_downvotes).to.be.lte(return_time_stats_total_time_spent),get+projects_{id}_issues_{issue_iid},1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,,GitLab Issues API,downvotes
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,return.downvotes <= size(return.assignees[]),daikon.inv.binary.twoScalar.IntLessEqual,"(return.downvotes, size(return.assignees[..]))",pm.expect(return_downvotes).to.be.lte(return_assignees_size_array),get+projects_{id}_issues_{issue_iid},1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,,GitLab Issues API,downvotes
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&get&200():::EXIT,return.references.relative is a substring of return.references.full,daikon.inv.binary.twoString.StdString$SubString,"(return.references.full, return.references.relative)",pm.expect(return_references_full.includes(return_references_relative)).to.be.true,get+projects_{id}_issues_{issue_iid},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,references.full
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200%array():::EXIT,size(return.array[]) >= 1,daikon.inv.unary.scalar.LowerBound,(size(return.array[..])),pm.expect(return_array_size_array).to.be.at.least(1),get+projects_{id}_issues_{issue_iid}_closed_by,,1.0,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,,GitLab Issues API,array
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,input.id == return.milestone.project_id,daikon.inv.binary.twoScalar.IntEqual,"(input.id, return.milestone.project_id)",pm.expect(input_id).to.eql(return_milestone_project_id),get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,milestone.project_id
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,input.id == return.project_id,daikon.inv.binary.twoScalar.IntEqual,"(input.id, return.project_id)",pm.expect(input_id).to.eql(return_project_id),get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,project_id
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,input.id == return.target_project_id,daikon.inv.binary.twoScalar.IntEqual,"(input.id, return.target_project_id)",pm.expect(input_id).to.eql(return_target_project_id),get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,target_project_id
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.assignee.state == return.author.state,daikon.inv.binary.twoString.StringEqual,"(return.assignee.state, return.author.state)",pm.expect(return_assignee_state).to.eql(return_author_state),get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,,GitLab Issues API,assignee.state
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.downvotes == return.time_stats.time_estimate,daikon.inv.binary.twoScalar.IntEqual,"(return.downvotes, return.time_stats.time_estimate)",pm.expect(return_downvotes).to.eql(return_time_stats_time_estimate),get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,downvotes
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.downvotes == return.time_stats.total_time_spent,daikon.inv.binary.twoScalar.IntEqual,"(return.downvotes, return.time_stats.total_time_spent)",pm.expect(return_downvotes).to.eql(return_time_stats_total_time_spent),get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,downvotes
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.head_pipeline.user == return.user,daikon.inv.binary.twoScalar.IntEqual,"(return.head_pipeline.user, return.user)",pm.expect(return_head_pipeline_user).to.eql(return_user),get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,head_pipeline.user
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.milestone.project_id == return.source_project_id,daikon.inv.binary.twoScalar.IntEqual,"(return.milestone.project_id, return.source_project_id)",pm.expect(return_milestone_project_id).to.eql(return_source_project_id),get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,milestone.project_id
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.reference == return.references.relative,daikon.inv.binary.twoString.StringEqual,"(return.reference, return.references.relative)",pm.expect(return_reference).to.eql(return_references_relative),get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,,GitLab Issues API,reference
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.reference == return.references.short,daikon.inv.binary.twoString.StringEqual,"(return.reference, return.references.short)",pm.expect(return_reference).to.eql(return_references_short),get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,,GitLab Issues API,reference
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,"return.assignee.state == ""active""",daikon.inv.unary.string.OneOfString,(return.assignee.state),"pm.expect([""active""].includes(return_assignee_state)).to.be.true",get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,assignee.state
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,LENGTH(return.assignee.state)==6,daikon.inv.unary.string.FixedLengthString,(return.assignee.state),pm.expect(return_assignee_state).to.have.length(6),get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,assignee.state
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,"return.author.state == ""active""",daikon.inv.unary.string.OneOfString,(return.author.state),"pm.expect([""active""].includes(return_author_state)).to.be.true",get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,author.state
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,LENGTH(return.author.state)==6,daikon.inv.unary.string.FixedLengthString,(return.author.state),pm.expect(return_author_state).to.have.length(6),get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,author.state
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.author.id >= 1,daikon.inv.unary.scalar.LowerBound,(return.author.id),pm.expect(return_author_id).to.be.at.least(1),get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,,GitLab Issues API,author.id
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,"return.closed_at one of { ""2023-04-11T16:47:49.171Z"", ""2024-11-26T00:35:18.871Z"", ""2025-01-06T19:36:58.336Z"" }",daikon.inv.unary.string.OneOfString,(return.closed_at),"pm.expect([""2023-04-11T16:47:49.171Z"", ""2024-11-26T00:35:18.871Z"", ""2025-01-06T19:36:58.336Z""].includes(return_closed_at)).to.be.true",get+projects_{id}_issues_{issue_iid}_closed_by,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,closed_at
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,LENGTH(return.closed_at)==24,daikon.inv.unary.string.FixedLengthString,(return.closed_at),pm.expect(return_closed_at).to.have.length(24),get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,closed_at
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.closed_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.closed_at),"pm.expect(return_closed_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,,GitLab Issues API,closed_at
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,"return.closed_by one of { ""{\""avatar_url\"":\""http://localhost:30000/uploads/-/system/user/avatar/20631405/avatar.png\"",\""web_url\"":\""http://localhost:30000/jfypk\"",\""name\"":\""Jeff Park\"",\""id\"":20631405,\""public_email\"":\""\"",\""state\"":\""active\"",\""locked\"":false,\""username\"":\""jfypk\""}"", ""{\""avatar_url\"":\""http://localhost:30000/uploads/-/system/user/avatar/22885575/avatar.png\"",\""web_url\"":\""http://localhost:30000/aharadon\"",\""name\"":\""Arianna Haradon\"",\""id\"":22885575,\""public_email\"":\""\"",\""state\"":\""active\"",\""locked\"":false,\""username\"":\""aharadon\""}"", ""{\""avatar_url\"":\""http://localhost:30000/uploads/-/system/user/avatar/3972971/avatar.png\"",\""web_url\"":\""http://localhost:30000/BarrySmith\"",\""name\"":\""Barry Smith\"",\""id\"":3972971,\""public_email\"":\""\"",\""state\"":\""active\"",\""locked\"":false,\""username\"":\""BarrySmith\""}"" }",daikon.inv.unary.string.OneOfString,(return.closed_by),"pm.expect([""{\""avatar_url\"":\""http://localhost:30000/uploads/-/system/user/avatar/20631405/avatar.png\"",\""web_url\"":\""http://localhost:30000/jfypk\"",\""name\"":\""Jeff Park\"",\""id\"":20631405,\""public_email\"":\""\"",\""state\"":\""active\"",\""locked\"":false,\""username\"":\""jfypk\""}"", ""{\""avatar_url\"":\""http://localhost:30000/uploads/-/system/user/avatar/22885575/avatar.png\"",\""web_url\"":\""http://localhost:30000/aharadon\"",\""name\"":\""Arianna Haradon\"",\""id\"":22885575,\""public_email\"":\""\"",\""state\"":\""active\"",\""locked\"":false,\""username\"":\""aharadon\""}"", ""{\""avatar_url\"":\""http://localhost:30000/uploads/-/system/user/avatar/3972971/avatar.png\"",\""web_url\"":\""http://localhost:30000/BarrySmith\"",\""name\"":\""Barry Smith\"",\""id\"":3972971,\""public_email\"":\""\"",\""state\"":\""active\"",\""locked\"":false,\""username\"":\""BarrySmith\""}""].includes(return_closed_by)).to.be.true",get+projects_{id}_issues_{issue_iid}_closed_by,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,closed_by
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,LENGTH(return.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.created_at),pm.expect(return_created_at).to.have.length(24),get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,created_at
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.created_at),"pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,,GitLab Issues API,created_at
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.diff_refs == null,daikon.inv.unary.scalar.OneOfScalar,(return.diff_refs),pm.expect(return_diff_refs).to.be.null,get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,diff_refs
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.downvotes == 0,daikon.inv.unary.scalar.OneOfScalar,(return.downvotes),pm.expect([0].includes(return_downvotes)).to.be.true,get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,downvotes
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.head_pipeline == null,daikon.inv.unary.scalar.OneOfScalar,(return.head_pipeline),pm.expect(return_head_pipeline).to.be.null,get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,head_pipeline
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.head_pipeline.detailed_status == null,daikon.inv.unary.scalar.OneOfScalar,(return.head_pipeline.detailed_status),pm.expect(return_head_pipeline_detailed_status).to.be.null,get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,head_pipeline.detailed_status
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,LENGTH(return.merge_commit_sha)==40,daikon.inv.unary.string.FixedLengthString,(return.merge_commit_sha),pm.expect(return_merge_commit_sha).to.have.length(40),get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,merge_commit_sha
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,"return.merge_status one of { ""can_be_merged"", ""cannot_be_merged"", ""unchecked"" }",daikon.inv.unary.string.OneOfString,(return.merge_status),"pm.expect([""can_be_merged"", ""cannot_be_merged"", ""unchecked""].includes(return_merge_status)).to.be.true",get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,merge_status
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,LENGTH(return.milestone.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.milestone.created_at),pm.expect(return_milestone_created_at).to.have.length(24),get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,milestone.created_at
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.milestone.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.milestone.created_at),"pm.expect(return_milestone_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,,GitLab Issues API,milestone.created_at
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.milestone.due_date is a Date. Format: YYYY/MM/DD,daikon.inv.unary.string.dates.IsDateYYYYMMDD,(return.milestone.due_date),pm.expect(return_milestone_due_date).to.match(/^(?:1\d{3}|20[01234][0-9]|2050|9999)[-/.](?:0[1-9]|1[012])[-/.](?:0[1-9]|[12][0-9]|3[01])$/),get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,"Indicates that the value of a string variable is always a date following the format YYYY/MM/DD or YYYY-MM-DD (the separator can be ""/"" or ""-""). Represented as x is a Date. Format YYYY/MM/DD.",,,GitLab Issues API,milestone.due_date
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,"return.milestone.state one of { ""active"", ""closed"" }",daikon.inv.unary.string.OneOfString,(return.milestone.state),"pm.expect([""active"", ""closed""].includes(return_milestone_state)).to.be.true",get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,milestone.state
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,LENGTH(return.milestone.state)==6,daikon.inv.unary.string.FixedLengthString,(return.milestone.state),pm.expect(return_milestone_state).to.have.length(6),get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,milestone.state
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.milestone.start_date is a Date. Format: YYYY/MM/DD,daikon.inv.unary.string.dates.IsDateYYYYMMDD,(return.milestone.start_date),pm.expect(return_milestone_start_date).to.match(/^(?:1\d{3}|20[01234][0-9]|2050|9999)[-/.](?:0[1-9]|1[012])[-/.](?:0[1-9]|[12][0-9]|3[01])$/),get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,"Indicates that the value of a string variable is always a date following the format YYYY/MM/DD or YYYY-MM-DD (the separator can be ""/"" or ""-""). Represented as x is a Date. Format YYYY/MM/DD.",,,GitLab Issues API,milestone.start_date
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,LENGTH(return.milestone.updated_at)==24,daikon.inv.unary.string.FixedLengthString,(return.milestone.updated_at),pm.expect(return_milestone_updated_at).to.have.length(24),get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,milestone.updated_at
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.milestone.updated_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.milestone.updated_at),"pm.expect(return_milestone_updated_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,,GitLab Issues API,milestone.updated_at
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.pipeline == null,daikon.inv.unary.scalar.OneOfScalar,(return.pipeline),pm.expect(return_pipeline).to.be.null,get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,pipeline
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,LENGTH(return.sha)==40,daikon.inv.unary.string.FixedLengthString,(return.sha),pm.expect(return_sha).to.have.length(40),get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,sha
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,"return.should_remove_source_branch one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.should_remove_source_branch),"pm.expect([""false"", ""true""].includes(return_should_remove_source_branch)).to.be.true",get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,should_remove_source_branch
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,LENGTH(return.squash_commit_sha)==40,daikon.inv.unary.string.FixedLengthString,(return.squash_commit_sha),pm.expect(return_squash_commit_sha).to.have.length(40),get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,squash_commit_sha
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,"return.state one of { ""closed"", ""merged"", ""opened"" }",daikon.inv.unary.string.OneOfString,(return.state),"pm.expect([""closed"", ""merged"", ""opened""].includes(return_state)).to.be.true",get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,state
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,LENGTH(return.state)==6,daikon.inv.unary.string.FixedLengthString,(return.state),pm.expect(return_state).to.have.length(6),get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,state
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,"return.target_branch one of { ""develop"", ""main"", ""master"" }",daikon.inv.unary.string.OneOfString,(return.target_branch),"pm.expect([""develop"", ""main"", ""master""].includes(return_target_branch)).to.be.true",get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,target_branch
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.task_completion_status.count >= 0,daikon.inv.unary.scalar.LowerBound,(return.task_completion_status.count),pm.expect(return_task_completion_status_count).to.be.at.least(0),get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,,GitLab Issues API,task_completion_status.count
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.task_completion_status.completed_count >= 0,daikon.inv.unary.scalar.LowerBound,(return.task_completion_status.completed_count),pm.expect(return_task_completion_status_completed_count).to.be.at.least(0),get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,,GitLab Issues API,task_completion_status.completed_count
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,LENGTH(return.updated_at)==24,daikon.inv.unary.string.FixedLengthString,(return.updated_at),pm.expect(return_updated_at).to.have.length(24),get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,updated_at
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.updated_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.updated_at),"pm.expect(return_updated_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,,GitLab Issues API,updated_at
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,"return.upvotes one of { 0, 1 }",daikon.inv.unary.scalar.OneOfScalar,(return.upvotes),"pm.expect([0, 1, 0].includes(return_upvotes)).to.be.true",get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,upvotes
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.user == null,daikon.inv.unary.scalar.OneOfScalar,(return.user),pm.expect(return_user).to.be.null,get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,user
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.user_notes_count >= 0,daikon.inv.unary.scalar.LowerBound,(return.user_notes_count),pm.expect(return_user_notes_count).to.be.at.least(0),get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,,GitLab Issues API,user_notes_count
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,input.id > return.iid,daikon.inv.binary.twoScalar.IntGreaterThan,"(input.id, return.iid)",pm.expect(input_id).to.be.greaterThan(return_iid),get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,,GitLab Issues API,iid
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,input.id <= return.source_project_id,daikon.inv.binary.twoScalar.IntLessEqual,"(input.id, return.source_project_id)",pm.expect(input_id).to.be.lte(return_source_project_id),get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,,GitLab Issues API,source_project_id
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,input.issue_iid > return.user_notes_count,daikon.inv.binary.twoScalar.IntGreaterThan,"(input.issue_iid, return.user_notes_count)",pm.expect(input_issue_iid).to.be.greaterThan(return_user_notes_count),get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,,GitLab Issues API,user_notes_count
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.assignee.username is a substring of return.assignee.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.assignee.web_url, return.assignee.username)",pm.expect(return_assignee_web_url.includes(return_assignee_username)).to.be.true,get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,assignee.web_url
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.assignee.web_url is a substring of return.closed_by,daikon.inv.binary.twoString.StdString$SubString,"(return.assignee.web_url, return.closed_by)",pm.expect(return_closed_by.includes(return_assignee_web_url)).to.be.true,get+projects_{id}_issues_{issue_iid}_closed_by,,1.0,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,assignee.web_url
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.assignee.avatar_url is a substring of return.closed_by,daikon.inv.binary.twoString.StdString$SubString,"(return.assignee.avatar_url, return.closed_by)",pm.expect(return_closed_by.includes(return_assignee_avatar_url)).to.be.true,get+projects_{id}_issues_{issue_iid}_closed_by,,1.0,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,assignee.avatar_url
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.assignee.state is a substring of return.closed_by,daikon.inv.binary.twoString.StdString$SubString,"(return.assignee.state, return.closed_by)",pm.expect(return_closed_by.includes(return_assignee_state)).to.be.true,get+projects_{id}_issues_{issue_iid}_closed_by,,1.0,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,assignee.state
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.assignee.name is a substring of return.closed_by,daikon.inv.binary.twoString.StdString$SubString,"(return.assignee.name, return.closed_by)",pm.expect(return_closed_by.includes(return_assignee_name)).to.be.true,get+projects_{id}_issues_{issue_iid}_closed_by,,1.0,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,assignee.name
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.assignee.id < return.id,daikon.inv.binary.twoScalar.IntLessThan,"(return.assignee.id, return.id)",pm.expect(return_assignee_id).to.be.lessThan(return_id),get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,Represents an invariant of < between two long scalars. Prints as x < y.,,,GitLab Issues API,assignee.id
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.assignee.id > return.task_completion_status.count,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.assignee.id, return.task_completion_status.count)",pm.expect(return_assignee_id).to.be.greaterThan(return_task_completion_status_count),get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,,GitLab Issues API,assignee.id
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.assignee.id > return.task_completion_status.completed_count,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.assignee.id, return.task_completion_status.completed_count)",pm.expect(return_assignee_id).to.be.greaterThan(return_task_completion_status_completed_count),get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,,GitLab Issues API,assignee.id
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.assignee.id > return.upvotes,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.assignee.id, return.upvotes)",pm.expect(return_assignee_id).to.be.greaterThan(return_upvotes),get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,,GitLab Issues API,assignee.id
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.assignee.id > return.user_notes_count,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.assignee.id, return.user_notes_count)",pm.expect(return_assignee_id).to.be.greaterThan(return_user_notes_count),get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,,GitLab Issues API,assignee.id
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.author.username is a substring of return.author.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.author.web_url, return.author.username)",pm.expect(return_author_web_url.includes(return_author_username)).to.be.true,get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,author.web_url
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.author.web_url is a substring of return.closed_by,daikon.inv.binary.twoString.StdString$SubString,"(return.author.web_url, return.closed_by)",pm.expect(return_closed_by.includes(return_author_web_url)).to.be.true,get+projects_{id}_issues_{issue_iid}_closed_by,,1.0,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,author.web_url
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.author.avatar_url is a substring of return.closed_by,daikon.inv.binary.twoString.StdString$SubString,"(return.author.avatar_url, return.closed_by)",pm.expect(return_closed_by.includes(return_author_avatar_url)).to.be.true,get+projects_{id}_issues_{issue_iid}_closed_by,,1.0,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,author.avatar_url
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.author.state is a substring of return.closed_by,daikon.inv.binary.twoString.StdString$SubString,"(return.author.state, return.closed_by)",pm.expect(return_closed_by.includes(return_author_state)).to.be.true,get+projects_{id}_issues_{issue_iid}_closed_by,,1.0,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,author.state
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.author.name is a substring of return.closed_by,daikon.inv.binary.twoString.StdString$SubString,"(return.author.name, return.closed_by)",pm.expect(return_closed_by.includes(return_author_name)).to.be.true,get+projects_{id}_issues_{issue_iid}_closed_by,,1.0,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,author.name
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.author.id < return.id,daikon.inv.binary.twoScalar.IntLessThan,"(return.author.id, return.id)",pm.expect(return_author_id).to.be.lessThan(return_id),get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,Represents an invariant of < between two long scalars. Prints as x < y.,,,GitLab Issues API,author.id
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.author.id > return.task_completion_status.count,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.author.id, return.task_completion_status.count)",pm.expect(return_author_id).to.be.greaterThan(return_task_completion_status_count),get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,,GitLab Issues API,author.id
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.author.id > return.task_completion_status.completed_count,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.author.id, return.task_completion_status.completed_count)",pm.expect(return_author_id).to.be.greaterThan(return_task_completion_status_completed_count),get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,,GitLab Issues API,author.id
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.author.id > return.upvotes,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.author.id, return.upvotes)",pm.expect(return_author_id).to.be.greaterThan(return_upvotes),get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,,GitLab Issues API,author.id
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.author.id > return.user_notes_count,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.author.id, return.user_notes_count)",pm.expect(return_author_id).to.be.greaterThan(return_user_notes_count),get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,,GitLab Issues API,author.id
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.downvotes <= return.task_completion_status.count,daikon.inv.binary.twoScalar.IntLessEqual,"(return.downvotes, return.task_completion_status.count)",pm.expect(return_downvotes).to.be.lte(return_task_completion_status_count),get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,,GitLab Issues API,downvotes
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.downvotes <= return.task_completion_status.completed_count,daikon.inv.binary.twoScalar.IntLessEqual,"(return.downvotes, return.task_completion_status.completed_count)",pm.expect(return_downvotes).to.be.lte(return_task_completion_status_completed_count),get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,,GitLab Issues API,downvotes
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.downvotes <= return.upvotes,daikon.inv.binary.twoScalar.IntLessEqual,"(return.downvotes, return.upvotes)",pm.expect(return_downvotes).to.be.lte(return_upvotes),get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,,GitLab Issues API,downvotes
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.downvotes <= return.user_notes_count,daikon.inv.binary.twoScalar.IntLessEqual,"(return.downvotes, return.user_notes_count)",pm.expect(return_downvotes).to.be.lte(return_user_notes_count),get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,,GitLab Issues API,downvotes
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.downvotes <= size(return.labels[]),daikon.inv.binary.twoScalar.IntLessEqual,"(return.downvotes, size(return.labels[..]))",pm.expect(return_downvotes).to.be.lte(return_labels_size_array),get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,,GitLab Issues API,downvotes
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.id > return.iid,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.id, return.iid)",pm.expect(return_id).to.be.greaterThan(return_iid),get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,,GitLab Issues API,id
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.id > return.milestone.id,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.id, return.milestone.id)",pm.expect(return_id).to.be.greaterThan(return_milestone_id),get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,,GitLab Issues API,id
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.id > return.milestone.project_id,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.id, return.milestone.project_id)",pm.expect(return_id).to.be.greaterThan(return_milestone_project_id),get+projects_{id}_issues_{issue_iid}_closed_by,,1.0,,Represents an invariant of > between two long scalars. Prints as x > y.,,,GitLab Issues API,id
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.id > return.task_completion_status.count,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.id, return.task_completion_status.count)",pm.expect(return_id).to.be.greaterThan(return_task_completion_status_count),get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,,GitLab Issues API,id
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.id > return.task_completion_status.completed_count,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.id, return.task_completion_status.completed_count)",pm.expect(return_id).to.be.greaterThan(return_task_completion_status_completed_count),get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,,GitLab Issues API,id
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.id > return.user_notes_count,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.id, return.user_notes_count)",pm.expect(return_id).to.be.greaterThan(return_user_notes_count),get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,,GitLab Issues API,id
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.iid < return.source_project_id,daikon.inv.binary.twoScalar.IntLessThan,"(return.iid, return.source_project_id)",pm.expect(return_iid).to.be.lessThan(return_source_project_id),get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,Represents an invariant of < between two long scalars. Prints as x < y.,,,GitLab Issues API,iid
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.iid > return.task_completion_status.count,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.iid, return.task_completion_status.count)",pm.expect(return_iid).to.be.greaterThan(return_task_completion_status_count),get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,,GitLab Issues API,iid
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.iid > return.task_completion_status.completed_count,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.iid, return.task_completion_status.completed_count)",pm.expect(return_iid).to.be.greaterThan(return_task_completion_status_completed_count),get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,,GitLab Issues API,iid
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.iid > return.user_notes_count,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.iid, return.user_notes_count)",pm.expect(return_iid).to.be.greaterThan(return_user_notes_count),get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,,GitLab Issues API,iid
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.iid > size(return.labels[]),daikon.inv.binary.twoScalar.IntGreaterThan,"(return.iid, size(return.labels[..]))",pm.expect(return_iid).to.be.greaterThan(return_labels_size_array),get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,,GitLab Issues API,iid
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.milestone.iid > return.upvotes,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.milestone.iid, return.upvotes)",pm.expect(return_milestone_iid).to.be.greaterThan(return_upvotes),get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,,GitLab Issues API,milestone.iid
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.reference is a substring of return.references.full,daikon.inv.binary.twoString.StdString$SubString,"(return.reference, return.references.full)",pm.expect(return_references_full.includes(return_reference)).to.be.true,get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,reference
/projects/{id}/issues/{issue_iid}/closed_by&/projects/{id}/issues/{issue_iid}/closed_by&get&200():::EXIT,return.task_completion_status.count >= return.task_completion_status.completed_count,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.task_completion_status.count, return.task_completion_status.completed_count)",pm.expect(return_task_completion_status_count).to.be.at.least(return_task_completion_status_completed_count),get+projects_{id}_issues_{issue_iid}_closed_by,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,task_completion_status.count
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200%array():::EXIT,size(return.array[]) >= 2,daikon.inv.unary.scalar.LowerBound,(size(return.array[..])),pm.expect(return_array_size_array).to.be.at.least(2),get+projects_{id}_issues_{issue_iid}_related_merge_requests,,1.0,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,,GitLab Issues API,array
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.diff_refs.head_sha == return.sha,daikon.inv.binary.twoString.StringEqual,"(return.diff_refs.head_sha, return.sha)",pm.expect(return_diff_refs_head_sha).to.eql(return_sha),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,,GitLab Issues API,diff_refs.head_sha
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.downvotes == return.time_stats.time_estimate,daikon.inv.binary.twoScalar.IntEqual,"(return.downvotes, return.time_stats.time_estimate)",pm.expect(return_downvotes).to.eql(return_time_stats_time_estimate),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,downvotes
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.head_pipeline.started_at == return.latest_build_started_at,daikon.inv.binary.twoString.StringEqual,"(return.head_pipeline.started_at, return.latest_build_started_at)",pm.expect(return_head_pipeline_started_at).to.eql(return_latest_build_started_at),get+projects_{id}_issues_{issue_iid}_related_merge_requests,,1.0,,Represents an invariant of == between two String scalars. Prints as x == y.,,,GitLab Issues API,head_pipeline.started_at
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.head_pipeline.tag == return.user.can_merge,daikon.inv.binary.twoScalar.IntEqual,"(return.head_pipeline.tag, return.user.can_merge)",pm.expect(return_head_pipeline_tag).to.eql(return_user_can_merge),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,head_pipeline.tag
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.milestone.project_id == return.project_id,daikon.inv.binary.twoScalar.IntEqual,"(return.milestone.project_id, return.project_id)",pm.expect(return_milestone_project_id).to.eql(return_project_id),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,milestone.project_id
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.project_id == return.target_project_id,daikon.inv.binary.twoScalar.IntEqual,"(return.project_id, return.target_project_id)",pm.expect(return_project_id).to.eql(return_target_project_id),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,project_id
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.reference == return.references.relative,daikon.inv.binary.twoString.StringEqual,"(return.reference, return.references.relative)",pm.expect(return_reference).to.eql(return_references_relative),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,,GitLab Issues API,reference
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.assignee.web_url is Url,daikon.inv.unary.string.IsUrl,(return.assignee.web_url),"pm.expect(return_assignee_web_url).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Indicates that the value of a string variable is always a URL. Represented as x is Url.,,,GitLab Issues API,assignee.web_url
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.assignee.avatar_url is Url,daikon.inv.unary.string.IsUrl,(return.assignee.avatar_url),"pm.expect(return_assignee_avatar_url).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Indicates that the value of a string variable is always a URL. Represented as x is Url.,,,GitLab Issues API,assignee.avatar_url
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,"return.assignee.state one of { ""active"", ""blocked"" }",daikon.inv.unary.string.OneOfString,(return.assignee.state),"pm.expect([""active"", ""blocked""].includes(return_assignee_state)).to.be.true",get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,assignee.state
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.author.web_url is Url,daikon.inv.unary.string.IsUrl,(return.author.web_url),"pm.expect(return_author_web_url).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Indicates that the value of a string variable is always a URL. Represented as x is Url.,,,GitLab Issues API,author.web_url
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.author.avatar_url is Url,daikon.inv.unary.string.IsUrl,(return.author.avatar_url),"pm.expect(return_author_avatar_url).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Indicates that the value of a string variable is always a URL. Represented as x is Url.,,,GitLab Issues API,author.avatar_url
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,"return.author.state one of { ""active"", ""blocked"" }",daikon.inv.unary.string.OneOfString,(return.author.state),"pm.expect([""active"", ""blocked""].includes(return_author_state)).to.be.true",get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,author.state
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,LENGTH(return.closed_at)==24,daikon.inv.unary.string.FixedLengthString,(return.closed_at),pm.expect(return_closed_at).to.have.length(24),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,closed_at
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.closed_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.closed_at),"pm.expect(return_closed_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,,GitLab Issues API,closed_at
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,LENGTH(return.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.created_at),pm.expect(return_created_at).to.have.length(24),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,created_at
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.created_at),"pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,,GitLab Issues API,created_at
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,LENGTH(return.diff_refs.base_sha)==40,daikon.inv.unary.string.FixedLengthString,(return.diff_refs.base_sha),pm.expect(return_diff_refs_base_sha).to.have.length(40),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,diff_refs.base_sha
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,LENGTH(return.diff_refs.head_sha)==40,daikon.inv.unary.string.FixedLengthString,(return.diff_refs.head_sha),pm.expect(return_diff_refs_head_sha).to.have.length(40),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,diff_refs.head_sha
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,LENGTH(return.diff_refs.start_sha)==40,daikon.inv.unary.string.FixedLengthString,(return.diff_refs.start_sha),pm.expect(return_diff_refs_start_sha).to.have.length(40),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,diff_refs.start_sha
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.downvotes == 0,daikon.inv.unary.scalar.OneOfScalar,(return.downvotes),pm.expect([0].includes(return_downvotes)).to.be.true,get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,downvotes
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,LENGTH(return.first_deployed_to_production_at)==24,daikon.inv.unary.string.FixedLengthString,(return.first_deployed_to_production_at),pm.expect(return_first_deployed_to_production_at).to.have.length(24),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,first_deployed_to_production_at
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.first_deployed_to_production_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.first_deployed_to_production_at),"pm.expect(return_first_deployed_to_production_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,,GitLab Issues API,first_deployed_to_production_at
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,LENGTH(return.head_pipeline.before_sha)==40,daikon.inv.unary.string.FixedLengthString,(return.head_pipeline.before_sha),pm.expect(return_head_pipeline_before_sha).to.have.length(40),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,head_pipeline.before_sha
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,"return.head_pipeline.committed_at == ""2015-10-30T14:54:47.788Z""",daikon.inv.unary.string.OneOfString,(return.head_pipeline.committed_at),"pm.expect([""2015-10-30T14:54:47.788Z""].includes(return_head_pipeline_committed_at)).to.be.true",get+projects_{id}_issues_{issue_iid}_related_merge_requests,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,head_pipeline.committed_at
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.head_pipeline.coverage is Numeric,daikon.inv.unary.string.IsNumeric,(return.head_pipeline.coverage),"pm.expect(return_head_pipeline_coverage).to.match(/^[+-]{0,1}(0|([0-9](\d*|\d{0,2}(,\d{3})*)))?(\.\d*[0-9])?$/)",get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Indicates that the characters of a string variable are always numeric. Represented as x is Numeric.,,,GitLab Issues API,head_pipeline.coverage
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,LENGTH(return.head_pipeline.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.head_pipeline.created_at),pm.expect(return_head_pipeline_created_at).to.have.length(24),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,head_pipeline.created_at
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.head_pipeline.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.head_pipeline.created_at),"pm.expect(return_head_pipeline_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,,GitLab Issues API,head_pipeline.created_at
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.head_pipeline.detailed_status.has_details == true,daikon.inv.unary.scalar.OneOfScalar,(return.head_pipeline.detailed_status.has_details),pm.expect(return_head_pipeline_detailed_status_has_details).to.eql(true),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,head_pipeline.detailed_status.has_details
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.head_pipeline.duration >= 0,daikon.inv.unary.scalar.LowerBound,(return.head_pipeline.duration),pm.expect(return_head_pipeline_duration).to.be.at.least(0),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,,GitLab Issues API,head_pipeline.duration
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,LENGTH(return.head_pipeline.finished_at)==24,daikon.inv.unary.string.FixedLengthString,(return.head_pipeline.finished_at),pm.expect(return_head_pipeline_finished_at).to.have.length(24),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,head_pipeline.finished_at
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.head_pipeline.finished_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.head_pipeline.finished_at),"pm.expect(return_head_pipeline_finished_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,,GitLab Issues API,head_pipeline.finished_at
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,LENGTH(return.head_pipeline.sha)==40,daikon.inv.unary.string.FixedLengthString,(return.head_pipeline.sha),pm.expect(return_head_pipeline_sha).to.have.length(40),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,head_pipeline.sha
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,LENGTH(return.head_pipeline.started_at)==24,daikon.inv.unary.string.FixedLengthString,(return.head_pipeline.started_at),pm.expect(return_head_pipeline_started_at).to.have.length(24),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,head_pipeline.started_at
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.head_pipeline.started_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.head_pipeline.started_at),"pm.expect(return_head_pipeline_started_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,,GitLab Issues API,head_pipeline.started_at
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.head_pipeline.tag == false,daikon.inv.unary.scalar.OneOfScalar,(return.head_pipeline.tag),pm.expect(return_head_pipeline_tag).to.eql(false),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,head_pipeline.tag
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,LENGTH(return.head_pipeline.updated_at)==24,daikon.inv.unary.string.FixedLengthString,(return.head_pipeline.updated_at),pm.expect(return_head_pipeline_updated_at).to.have.length(24),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,head_pipeline.updated_at
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.head_pipeline.updated_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.head_pipeline.updated_at),"pm.expect(return_head_pipeline_updated_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,,GitLab Issues API,head_pipeline.updated_at
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.head_pipeline.user.web_url is Url,daikon.inv.unary.string.IsUrl,(return.head_pipeline.user.web_url),"pm.expect(return_head_pipeline_user_web_url).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Indicates that the value of a string variable is always a URL. Represented as x is Url.,,,GitLab Issues API,head_pipeline.user.web_url
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.head_pipeline.user.avatar_url is Url,daikon.inv.unary.string.IsUrl,(return.head_pipeline.user.avatar_url),"pm.expect(return_head_pipeline_user_avatar_url).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Indicates that the value of a string variable is always a URL. Represented as x is Url.,,,GitLab Issues API,head_pipeline.user.avatar_url
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,"return.head_pipeline.user.state one of { ""active"", ""blocked"" }",daikon.inv.unary.string.OneOfString,(return.head_pipeline.user.state),"pm.expect([""active"", ""blocked""].includes(return_head_pipeline_user_state)).to.be.true",get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,head_pipeline.user.state
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.head_pipeline.web_url is Url,daikon.inv.unary.string.IsUrl,(return.head_pipeline.web_url),"pm.expect(return_head_pipeline_web_url).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Indicates that the value of a string variable is always a URL. Represented as x is Url.,,,GitLab Issues API,head_pipeline.web_url
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,LENGTH(return.latest_build_finished_at)==24,daikon.inv.unary.string.FixedLengthString,(return.latest_build_finished_at),pm.expect(return_latest_build_finished_at).to.have.length(24),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,latest_build_finished_at
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.latest_build_finished_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.latest_build_finished_at),"pm.expect(return_latest_build_finished_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,,GitLab Issues API,latest_build_finished_at
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,LENGTH(return.latest_build_started_at)==24,daikon.inv.unary.string.FixedLengthString,(return.latest_build_started_at),pm.expect(return_latest_build_started_at).to.have.length(24),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,latest_build_started_at
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.latest_build_started_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.latest_build_started_at),"pm.expect(return_latest_build_started_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,,GitLab Issues API,latest_build_started_at
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,LENGTH(return.merge_commit_sha)==40,daikon.inv.unary.string.FixedLengthString,(return.merge_commit_sha),pm.expect(return_merge_commit_sha).to.have.length(40),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,merge_commit_sha
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,"return.merge_status one of { ""can_be_merged"", ""cannot_be_merged"", ""unchecked"" }",daikon.inv.unary.string.OneOfString,(return.merge_status),"pm.expect([""can_be_merged"", ""cannot_be_merged"", ""unchecked""].includes(return_merge_status)).to.be.true",get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,merge_status
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,LENGTH(return.milestone.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.milestone.created_at),pm.expect(return_milestone_created_at).to.have.length(24),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,milestone.created_at
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.milestone.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.milestone.created_at),"pm.expect(return_milestone_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,,GitLab Issues API,milestone.created_at
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.milestone.due_date is a Date. Format: YYYY/MM/DD,daikon.inv.unary.string.dates.IsDateYYYYMMDD,(return.milestone.due_date),pm.expect(return_milestone_due_date).to.match(/^(?:1\d{3}|20[01234][0-9]|2050|9999)[-/.](?:0[1-9]|1[012])[-/.](?:0[1-9]|[12][0-9]|3[01])$/),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,"Indicates that the value of a string variable is always a date following the format YYYY/MM/DD or YYYY-MM-DD (the separator can be ""/"" or ""-""). Represented as x is a Date. Format YYYY/MM/DD.",,,GitLab Issues API,milestone.due_date
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.milestone.iid >= 1,daikon.inv.unary.scalar.LowerBound,(return.milestone.iid),pm.expect(return_milestone_iid).to.be.at.least(1),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,,GitLab Issues API,milestone.iid
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,"return.milestone.state one of { ""active"", ""closed"" }",daikon.inv.unary.string.OneOfString,(return.milestone.state),"pm.expect([""active"", ""closed""].includes(return_milestone_state)).to.be.true",get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,milestone.state
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,LENGTH(return.milestone.state)==6,daikon.inv.unary.string.FixedLengthString,(return.milestone.state),pm.expect(return_milestone_state).to.have.length(6),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,milestone.state
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.milestone.start_date is a Date. Format: YYYY/MM/DD,daikon.inv.unary.string.dates.IsDateYYYYMMDD,(return.milestone.start_date),pm.expect(return_milestone_start_date).to.match(/^(?:1\d{3}|20[01234][0-9]|2050|9999)[-/.](?:0[1-9]|1[012])[-/.](?:0[1-9]|[12][0-9]|3[01])$/),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,"Indicates that the value of a string variable is always a date following the format YYYY/MM/DD or YYYY-MM-DD (the separator can be ""/"" or ""-""). Represented as x is a Date. Format YYYY/MM/DD.",,,GitLab Issues API,milestone.start_date
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,LENGTH(return.milestone.updated_at)==24,daikon.inv.unary.string.FixedLengthString,(return.milestone.updated_at),pm.expect(return_milestone_updated_at).to.have.length(24),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,milestone.updated_at
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.milestone.updated_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.milestone.updated_at),"pm.expect(return_milestone_updated_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,,GitLab Issues API,milestone.updated_at
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,LENGTH(return.pipeline.sha)==40,daikon.inv.unary.string.FixedLengthString,(return.pipeline.sha),pm.expect(return_pipeline_sha).to.have.length(40),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,pipeline.sha
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.pipeline.web_url is Url,daikon.inv.unary.string.IsUrl,(return.pipeline.web_url),"pm.expect(return_pipeline_web_url).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Indicates that the value of a string variable is always a URL. Represented as x is Url.,,,GitLab Issues API,pipeline.web_url
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,LENGTH(return.sha)==40,daikon.inv.unary.string.FixedLengthString,(return.sha),pm.expect(return_sha).to.have.length(40),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,sha
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,"return.should_remove_source_branch one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.should_remove_source_branch),"pm.expect([""false"", ""true""].includes(return_should_remove_source_branch)).to.be.true",get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,should_remove_source_branch
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,LENGTH(return.squash_commit_sha)==40,daikon.inv.unary.string.FixedLengthString,(return.squash_commit_sha),pm.expect(return_squash_commit_sha).to.have.length(40),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,squash_commit_sha
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,"return.state one of { ""closed"", ""merged"", ""opened"" }",daikon.inv.unary.string.OneOfString,(return.state),"pm.expect([""closed"", ""merged"", ""opened""].includes(return_state)).to.be.true",get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,state
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,LENGTH(return.state)==6,daikon.inv.unary.string.FixedLengthString,(return.state),pm.expect(return_state).to.have.length(6),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,state
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.task_completion_status.count >= 0,daikon.inv.unary.scalar.LowerBound,(return.task_completion_status.count),pm.expect(return_task_completion_status_count).to.be.at.least(0),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,,GitLab Issues API,task_completion_status.count
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.task_completion_status.completed_count >= 0,daikon.inv.unary.scalar.LowerBound,(return.task_completion_status.completed_count),pm.expect(return_task_completion_status_completed_count).to.be.at.least(0),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,,GitLab Issues API,task_completion_status.completed_count
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,"return.time_stats.total_time_spent one of { 0, 900 }",daikon.inv.unary.scalar.OneOfScalar,(return.time_stats.total_time_spent),"pm.expect([0, 900, 0].includes(return_time_stats_total_time_spent)).to.be.true",get+projects_{id}_issues_{issue_iid}_related_merge_requests,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,time_stats.total_time_spent
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,"return.time_stats.human_total_time_spent == ""15m""",daikon.inv.unary.string.OneOfString,(return.time_stats.human_total_time_spent),"pm.expect([""15m""].includes(return_time_stats_human_total_time_spent)).to.be.true",get+projects_{id}_issues_{issue_iid}_related_merge_requests,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,time_stats.human_total_time_spent
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,LENGTH(return.updated_at)==24,daikon.inv.unary.string.FixedLengthString,(return.updated_at),pm.expect(return_updated_at).to.have.length(24),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,updated_at
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.updated_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.updated_at),"pm.expect(return_updated_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,,GitLab Issues API,updated_at
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,"return.upvotes one of { 0, 1 }",daikon.inv.unary.scalar.OneOfScalar,(return.upvotes),"pm.expect([0, 1, 0].includes(return_upvotes)).to.be.true",get+projects_{id}_issues_{issue_iid}_related_merge_requests,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,upvotes
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.user.can_merge == false,daikon.inv.unary.scalar.OneOfScalar,(return.user.can_merge),pm.expect(return_user_can_merge).to.eql(false),get+projects_{id}_issues_{issue_iid}_related_merge_requests,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,user.can_merge
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.user_notes_count >= 0,daikon.inv.unary.scalar.LowerBound,(return.user_notes_count),pm.expect(return_user_notes_count).to.be.at.least(0),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,,GitLab Issues API,user_notes_count
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.web_url is Url,daikon.inv.unary.string.IsUrl,(return.web_url),"pm.expect(return_web_url).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Indicates that the value of a string variable is always a URL. Represented as x is Url.,,,GitLab Issues API,web_url
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,input.id < return.pipeline.id,daikon.inv.binary.twoScalar.IntLessThan,"(input.id, return.pipeline.id)",pm.expect(input_id).to.be.lessThan(return_pipeline_id),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Represents an invariant of < between two long scalars. Prints as x < y.,,,GitLab Issues API,pipeline.id
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,input.issue_iid < return.head_pipeline.id,daikon.inv.binary.twoScalar.IntLessThan,"(input.issue_iid, return.head_pipeline.id)",pm.expect(input_issue_iid).to.be.lessThan(return_head_pipeline_id),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Represents an invariant of < between two long scalars. Prints as x < y.,,,GitLab Issues API,head_pipeline.id
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,input.issue_iid < return.id,daikon.inv.binary.twoScalar.IntLessThan,"(input.issue_iid, return.id)",pm.expect(input_issue_iid).to.be.lessThan(return_id),get+projects_{id}_issues_{issue_iid}_related_merge_requests,,1.0,,Represents an invariant of < between two long scalars. Prints as x < y.,,,GitLab Issues API,id
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,input.issue_iid > return.time_stats.total_time_spent,daikon.inv.binary.twoScalar.IntGreaterThan,"(input.issue_iid, return.time_stats.total_time_spent)",pm.expect(input_issue_iid).to.be.greaterThan(return_time_stats_total_time_spent),get+projects_{id}_issues_{issue_iid}_related_merge_requests,,1.0,,Represents an invariant of > between two long scalars. Prints as x > y.,,,GitLab Issues API,time_stats.total_time_spent
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.assignee.username is a substring of return.assignee.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.assignee.web_url, return.assignee.username)",pm.expect(return_assignee_web_url.includes(return_assignee_username)).to.be.true,get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,assignee.web_url
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.assignee.id < return.head_pipeline.id,daikon.inv.binary.twoScalar.IntLessThan,"(return.assignee.id, return.head_pipeline.id)",pm.expect(return_assignee_id).to.be.lessThan(return_head_pipeline_id),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Represents an invariant of < between two long scalars. Prints as x < y.,,,GitLab Issues API,assignee.id
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.assignee.id < return.id,daikon.inv.binary.twoScalar.IntLessThan,"(return.assignee.id, return.id)",pm.expect(return_assignee_id).to.be.lessThan(return_id),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Represents an invariant of < between two long scalars. Prints as x < y.,,,GitLab Issues API,assignee.id
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.assignee.id < return.pipeline.id,daikon.inv.binary.twoScalar.IntLessThan,"(return.assignee.id, return.pipeline.id)",pm.expect(return_assignee_id).to.be.lessThan(return_pipeline_id),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Represents an invariant of < between two long scalars. Prints as x < y.,,,GitLab Issues API,assignee.id
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.assignee.id > return.time_stats.total_time_spent,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.assignee.id, return.time_stats.total_time_spent)",pm.expect(return_assignee_id).to.be.greaterThan(return_time_stats_total_time_spent),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,,GitLab Issues API,assignee.id
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.author.username is a substring of return.author.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.author.web_url, return.author.username)",pm.expect(return_author_web_url.includes(return_author_username)).to.be.true,get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,author.web_url
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.author.id < return.head_pipeline.id,daikon.inv.binary.twoScalar.IntLessThan,"(return.author.id, return.head_pipeline.id)",pm.expect(return_author_id).to.be.lessThan(return_head_pipeline_id),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Represents an invariant of < between two long scalars. Prints as x < y.,,,GitLab Issues API,author.id
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.author.id < return.id,daikon.inv.binary.twoScalar.IntLessThan,"(return.author.id, return.id)",pm.expect(return_author_id).to.be.lessThan(return_id),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Represents an invariant of < between two long scalars. Prints as x < y.,,,GitLab Issues API,author.id
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.author.id < return.pipeline.id,daikon.inv.binary.twoScalar.IntLessThan,"(return.author.id, return.pipeline.id)",pm.expect(return_author_id).to.be.lessThan(return_pipeline_id),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Represents an invariant of < between two long scalars. Prints as x < y.,,,GitLab Issues API,author.id
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.head_pipeline.user.state is a substring of return.closed_by,daikon.inv.binary.twoString.StdString$SubString,"(return.closed_by, return.head_pipeline.user.state)",pm.expect(return_closed_by.includes(return_head_pipeline_user_state)).to.be.true,get+projects_{id}_issues_{issue_iid}_related_merge_requests,,1.0,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,closed_by
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.downvotes <= return.head_pipeline.duration,daikon.inv.binary.twoScalar.IntLessEqual,"(return.downvotes, return.head_pipeline.duration)",pm.expect(return_downvotes).to.be.lte(return_head_pipeline_duration),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,,GitLab Issues API,downvotes
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.downvotes <= return.task_completion_status.count,daikon.inv.binary.twoScalar.IntLessEqual,"(return.downvotes, return.task_completion_status.count)",pm.expect(return_downvotes).to.be.lte(return_task_completion_status_count),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,,GitLab Issues API,downvotes
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.downvotes <= return.task_completion_status.completed_count,daikon.inv.binary.twoScalar.IntLessEqual,"(return.downvotes, return.task_completion_status.completed_count)",pm.expect(return_downvotes).to.be.lte(return_task_completion_status_completed_count),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,,GitLab Issues API,downvotes
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.downvotes <= return.time_stats.total_time_spent,daikon.inv.binary.twoScalar.IntLessEqual,"(return.downvotes, return.time_stats.total_time_spent)",pm.expect(return_downvotes).to.be.lte(return_time_stats_total_time_spent),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,,GitLab Issues API,downvotes
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.downvotes <= return.upvotes,daikon.inv.binary.twoScalar.IntLessEqual,"(return.downvotes, return.upvotes)",pm.expect(return_downvotes).to.be.lte(return_upvotes),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,,GitLab Issues API,downvotes
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.downvotes <= return.user_notes_count,daikon.inv.binary.twoScalar.IntLessEqual,"(return.downvotes, return.user_notes_count)",pm.expect(return_downvotes).to.be.lte(return_user_notes_count),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,,GitLab Issues API,downvotes
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.head_pipeline.detailed_status.details_path is a substring of return.head_pipeline.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.head_pipeline.detailed_status.details_path, return.head_pipeline.web_url)",pm.expect(return_head_pipeline_web_url.includes(return_head_pipeline_detailed_status_details_path)).to.be.true,get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,head_pipeline.detailed_status.details_path
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.head_pipeline.status is a substring of return.head_pipeline.detailed_status.favicon,daikon.inv.binary.twoString.StdString$SubString,"(return.head_pipeline.detailed_status.favicon, return.head_pipeline.status)",pm.expect(return_head_pipeline_detailed_status_favicon.includes(return_head_pipeline_status)).to.be.true,get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,head_pipeline.detailed_status.favicon
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.head_pipeline.status is a substring of return.head_pipeline.detailed_status.group,daikon.inv.binary.twoString.StdString$SubString,"(return.head_pipeline.detailed_status.group, return.head_pipeline.status)",pm.expect(return_head_pipeline_detailed_status_group.includes(return_head_pipeline_status)).to.be.true,get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,head_pipeline.detailed_status.group
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.head_pipeline.detailed_status.tooltip is a substring of return.head_pipeline.detailed_status.label,daikon.inv.binary.twoString.StdString$SubString,"(return.head_pipeline.detailed_status.label, return.head_pipeline.detailed_status.tooltip)",pm.expect(return_head_pipeline_detailed_status_label.includes(return_head_pipeline_detailed_status_tooltip)).to.be.true,get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,head_pipeline.detailed_status.label
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.head_pipeline.duration < return.milestone.id,daikon.inv.binary.twoScalar.IntLessThan,"(return.head_pipeline.duration, return.milestone.id)",pm.expect(return_head_pipeline_duration).to.be.lessThan(return_milestone_id),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Represents an invariant of < between two long scalars. Prints as x < y.,,,GitLab Issues API,head_pipeline.duration
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.head_pipeline.duration < return.milestone.project_id,daikon.inv.binary.twoScalar.IntLessThan,"(return.head_pipeline.duration, return.milestone.project_id)",pm.expect(return_head_pipeline_duration).to.be.lessThan(return_milestone_project_id),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Represents an invariant of < between two long scalars. Prints as x < y.,,,GitLab Issues API,head_pipeline.duration
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.head_pipeline.duration < return.project_id,daikon.inv.binary.twoScalar.IntLessThan,"(return.head_pipeline.duration, return.project_id)",pm.expect(return_head_pipeline_duration).to.be.lessThan(return_project_id),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Represents an invariant of < between two long scalars. Prints as x < y.,,,GitLab Issues API,head_pipeline.duration
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.head_pipeline.duration < return.source_project_id,daikon.inv.binary.twoScalar.IntLessThan,"(return.head_pipeline.duration, return.source_project_id)",pm.expect(return_head_pipeline_duration).to.be.lessThan(return_source_project_id),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Represents an invariant of < between two long scalars. Prints as x < y.,,,GitLab Issues API,head_pipeline.duration
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.head_pipeline.duration >= return.task_completion_status.count,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.head_pipeline.duration, return.task_completion_status.count)",pm.expect(return_head_pipeline_duration).to.be.at.least(return_task_completion_status_count),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,head_pipeline.duration
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.head_pipeline.duration >= return.task_completion_status.completed_count,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.head_pipeline.duration, return.task_completion_status.completed_count)",pm.expect(return_head_pipeline_duration).to.be.at.least(return_task_completion_status_completed_count),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,head_pipeline.duration
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.head_pipeline.duration >= return.time_stats.total_time_spent,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.head_pipeline.duration, return.time_stats.total_time_spent)",pm.expect(return_head_pipeline_duration).to.be.at.least(return_time_stats_total_time_spent),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,head_pipeline.duration
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.head_pipeline.duration >= return.upvotes,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.head_pipeline.duration, return.upvotes)",pm.expect(return_head_pipeline_duration).to.be.at.least(return_upvotes),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,head_pipeline.duration
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.head_pipeline.id > return.head_pipeline.user.id,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.head_pipeline.id, return.head_pipeline.user.id)",pm.expect(return_head_pipeline_id).to.be.greaterThan(return_head_pipeline_user_id),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,,GitLab Issues API,head_pipeline.id
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.head_pipeline.id > return.id,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.head_pipeline.id, return.id)",pm.expect(return_head_pipeline_id).to.be.greaterThan(return_id),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,,GitLab Issues API,head_pipeline.id
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.head_pipeline.id > return.milestone.id,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.head_pipeline.id, return.milestone.id)",pm.expect(return_head_pipeline_id).to.be.greaterThan(return_milestone_id),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,,GitLab Issues API,head_pipeline.id
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.head_pipeline.id >= return.pipeline.id,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.head_pipeline.id, return.pipeline.id)",pm.expect(return_head_pipeline_id).to.be.at.least(return_pipeline_id),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,head_pipeline.id
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.head_pipeline.user.username is a substring of return.head_pipeline.user.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.head_pipeline.user.web_url, return.head_pipeline.user.username)",pm.expect(return_head_pipeline_user_web_url.includes(return_head_pipeline_user_username)).to.be.true,get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,head_pipeline.user.web_url
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.head_pipeline.user.id < return.id,daikon.inv.binary.twoScalar.IntLessThan,"(return.head_pipeline.user.id, return.id)",pm.expect(return_head_pipeline_user_id).to.be.lessThan(return_id),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Represents an invariant of < between two long scalars. Prints as x < y.,,,GitLab Issues API,head_pipeline.user.id
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.head_pipeline.user.id < return.pipeline.id,daikon.inv.binary.twoScalar.IntLessThan,"(return.head_pipeline.user.id, return.pipeline.id)",pm.expect(return_head_pipeline_user_id).to.be.lessThan(return_pipeline_id),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Represents an invariant of < between two long scalars. Prints as x < y.,,,GitLab Issues API,head_pipeline.user.id
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.id > return.iid,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.id, return.iid)",pm.expect(return_id).to.be.greaterThan(return_iid),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,,GitLab Issues API,id
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.id > return.milestone.id,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.id, return.milestone.id)",pm.expect(return_id).to.be.greaterThan(return_milestone_id),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,,GitLab Issues API,id
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.id < return.pipeline.id,daikon.inv.binary.twoScalar.IntLessThan,"(return.id, return.pipeline.id)",pm.expect(return_id).to.be.lessThan(return_pipeline_id),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Represents an invariant of < between two long scalars. Prints as x < y.,,,GitLab Issues API,id
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.iid < return.milestone.id,daikon.inv.binary.twoScalar.IntLessThan,"(return.iid, return.milestone.id)",pm.expect(return_iid).to.be.lessThan(return_milestone_id),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Represents an invariant of < between two long scalars. Prints as x < y.,,,GitLab Issues API,iid
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.iid > return.milestone.iid,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.iid, return.milestone.iid)",pm.expect(return_iid).to.be.greaterThan(return_milestone_iid),get+projects_{id}_issues_{issue_iid}_related_merge_requests,,1.0,,Represents an invariant of > between two long scalars. Prints as x > y.,,,GitLab Issues API,iid
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.iid < return.milestone.project_id,daikon.inv.binary.twoScalar.IntLessThan,"(return.iid, return.milestone.project_id)",pm.expect(return_iid).to.be.lessThan(return_milestone_project_id),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Represents an invariant of < between two long scalars. Prints as x < y.,,,GitLab Issues API,iid
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.iid > return.task_completion_status.count,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.iid, return.task_completion_status.count)",pm.expect(return_iid).to.be.greaterThan(return_task_completion_status_count),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,,GitLab Issues API,iid
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.iid > return.task_completion_status.completed_count,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.iid, return.task_completion_status.completed_count)",pm.expect(return_iid).to.be.greaterThan(return_task_completion_status_completed_count),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,,GitLab Issues API,iid
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.iid > return.time_stats.total_time_spent,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.iid, return.time_stats.total_time_spent)",pm.expect(return_iid).to.be.greaterThan(return_time_stats_total_time_spent),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,,GitLab Issues API,iid
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.iid > return.upvotes,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.iid, return.upvotes)",pm.expect(return_iid).to.be.greaterThan(return_upvotes),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,,GitLab Issues API,iid
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.milestone.id < return.pipeline.id,daikon.inv.binary.twoScalar.IntLessThan,"(return.milestone.id, return.pipeline.id)",pm.expect(return_milestone_id).to.be.lessThan(return_pipeline_id),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Represents an invariant of < between two long scalars. Prints as x < y.,,,GitLab Issues API,milestone.id
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.milestone.iid > return.upvotes,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.milestone.iid, return.upvotes)",pm.expect(return_milestone_iid).to.be.greaterThan(return_upvotes),get+projects_{id}_issues_{issue_iid}_related_merge_requests,,1.0,,Represents an invariant of > between two long scalars. Prints as x > y.,,,GitLab Issues API,milestone.iid
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.milestone.project_id < return.pipeline.id,daikon.inv.binary.twoScalar.IntLessThan,"(return.milestone.project_id, return.pipeline.id)",pm.expect(return_milestone_project_id).to.be.lessThan(return_pipeline_id),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Represents an invariant of < between two long scalars. Prints as x < y.,,,GitLab Issues API,milestone.project_id
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.milestone.project_id <= return.source_project_id,daikon.inv.binary.twoScalar.IntLessEqual,"(return.milestone.project_id, return.source_project_id)",pm.expect(return_milestone_project_id).to.be.lte(return_source_project_id),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,,GitLab Issues API,milestone.project_id
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.pipeline.id > return.project_id,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.pipeline.id, return.project_id)",pm.expect(return_pipeline_id).to.be.greaterThan(return_project_id),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,,GitLab Issues API,pipeline.id
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.pipeline.id > return.source_project_id,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.pipeline.id, return.source_project_id)",pm.expect(return_pipeline_id).to.be.greaterThan(return_source_project_id),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,,GitLab Issues API,pipeline.id
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.project_id <= return.source_project_id,daikon.inv.binary.twoScalar.IntLessEqual,"(return.project_id, return.source_project_id)",pm.expect(return_project_id).to.be.lte(return_source_project_id),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,,GitLab Issues API,project_id
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.reference is a substring of return.references.full,daikon.inv.binary.twoString.StdString$SubString,"(return.reference, return.references.full)",pm.expect(return_references_full.includes(return_reference)).to.be.true,get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,reference
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.references.short is a substring of return.reference,daikon.inv.binary.twoString.StdString$SubString,"(return.reference, return.references.short)",pm.expect(return_reference.includes(return_references_short)).to.be.true,get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,reference
/projects/{id}/issues/{issue_iid}/related_merge_requests&/projects/{id}/issues/{issue_iid}/related_merge_requests&get&200():::EXIT,return.task_completion_status.count >= return.task_completion_status.completed_count,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.task_completion_status.count, return.task_completion_status.completed_count)",pm.expect(return_task_completion_status_count).to.be.at.least(return_task_completion_status_completed_count),get+projects_{id}_issues_{issue_iid}_related_merge_requests,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,task_completion_status.count
/projects/{id}/issues&/projects/{id}/issues&post&201&assignees():::EXIT,LENGTH(return.avatar_url)==81,daikon.inv.unary.string.FixedLengthString,(return.avatar_url),pm.expect(return_avatar_url).to.have.length(81),post+projects_{id}_issues,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,assignees.avatar_url
/projects/{id}/issues&/projects/{id}/issues&post&201&assignees():::EXIT,return.avatar_url is Url,daikon.inv.unary.string.IsUrl,(return.avatar_url),"pm.expect(return_avatar_url).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",post+projects_{id}_issues,1.0,,,Indicates that the value of a string variable is always a URL. Represented as x is Url.,,,GitLab Issues API,assignees.avatar_url
/projects/{id}/issues&/projects/{id}/issues&post&201&assignees():::EXIT,"return.state == ""active""",daikon.inv.unary.string.OneOfString,(return.state),"pm.expect([""active""].includes(return_state)).to.be.true",post+projects_{id}_issues,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,assignees.state
/projects/{id}/issues&/projects/{id}/issues&post&201&assignees():::EXIT,LENGTH(return.state)==6,daikon.inv.unary.string.FixedLengthString,(return.state),pm.expect(return_state).to.have.length(6),post+projects_{id}_issues,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,assignees.state
/projects/{id}/issues&/projects/{id}/issues&post&201&assignees():::EXIT,input.assignee_ids[] elements == return.id,daikon.inv.binary.sequenceScalar.SeqIntEqual,"(input.assignee_ids[..], return.id)",pm.expect(input_assignee_ids_array.every(element => element == return_id)).to.be.true,post+projects_{id}_issues,1.0,,,Represents an invariant between a long scalar and a a sequence of long values. Prints as x[] elements == y where x is a long sequence and y is a long scalar.,,,GitLab Issues API,assignees.id
/projects/{id}/issues&/projects/{id}/issues&post&201&assignees():::EXIT,return.id in input.assignee_ids[],daikon.inv.binary.sequenceScalar.Member,"(input.assignee_ids[..], return.id)",pm.expect(input_assignee_ids_array.includes(return_id)).to.be.true,post+projects_{id}_issues,1.0,,,Represents long scalars that are always members of a sequence of long values. Prints as x in y[] where x is a long scalar and y[] is a sequence of long.,,,GitLab Issues API,assignees.id
/projects/{id}/issues&/projects/{id}/issues&post&201&assignees():::EXIT,return.username is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.username)",pm.expect(return_web_url.includes(return_username)).to.be.true,post+projects_{id}_issues,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,assignees.web_url
/projects/{id}/issues&/projects/{id}/issues&post&201&assignees():::EXIT,return.id >= size(input.assignee_ids[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.id, size(input.assignee_ids[..]))",pm.expect(return_id).to.be.at.least(input_assignee_ids_size_array),post+projects_{id}_issues,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,assignees.id
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,input.confidential == return.confidential,daikon.inv.binary.twoScalar.IntEqual,"(input.confidential, return.confidential)",pm.expect(input_confidential).to.eql(return_confidential),post+projects_{id}_issues,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,confidential
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,input.description == return.description,daikon.inv.binary.twoString.StringEqual,"(input.description, return.description)",pm.expect(input_description).to.eql(return_description),post+projects_{id}_issues,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,,GitLab Issues API,description
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,input.due_date == return.due_date,daikon.inv.binary.twoString.StringEqual,"(input.due_date, return.due_date)",pm.expect(input_due_date).to.eql(return_due_date),post+projects_{id}_issues,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,,GitLab Issues API,due_date
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,input.id == return.project_id,daikon.inv.binary.twoScalar.IntEqual,"(input.id, return.project_id)",pm.expect(input_id).to.eql(return_project_id),post+projects_{id}_issues,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,project_id
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,input.iid == return.iid,daikon.inv.binary.twoScalar.IntEqual,"(input.iid, return.iid)",pm.expect(input_iid).to.eql(return_iid),post+projects_{id}_issues,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,iid
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,input.title == return.title,daikon.inv.binary.twoString.StringEqual,"(input.title, return.title)",pm.expect(input_title).to.eql(return_title),post+projects_{id}_issues,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,,GitLab Issues API,title
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,return.assignee.state == return.author.state,daikon.inv.binary.twoString.StringEqual,"(return.assignee.state, return.author.state)",pm.expect(return_assignee_state).to.eql(return_author_state),post+projects_{id}_issues,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,,GitLab Issues API,assignee.state
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,return.assignee.id == input.assignee_ids[return.downvotes],daikon.inv.binary.twoScalar.IntEqual,"(return.assignee.id, input.assignee_ids[return.downvotes])",pm.expect(return_assignee_id).to.eql(input_assignee_ids_return_downvotes),post+projects_{id}_issues,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,assignee.id
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,return.author.id == size(input.assignee_ids[]),daikon.inv.binary.twoScalar.IntEqual,"(return.author.id, size(input.assignee_ids[..]))",pm.expect(return_author_id).to.eql(input_assignee_ids_size_array),post+projects_{id}_issues,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,author.id
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,return.downvotes == return.merge_requests_count,daikon.inv.binary.twoScalar.IntEqual,"(return.downvotes, return.merge_requests_count)",pm.expect(return_downvotes).to.eql(return_merge_requests_count),post+projects_{id}_issues,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,downvotes
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,return.downvotes == return.task_completion_status.count,daikon.inv.binary.twoScalar.IntEqual,"(return.downvotes, return.task_completion_status.count)",pm.expect(return_downvotes).to.eql(return_task_completion_status_count),post+projects_{id}_issues,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,downvotes
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,return.downvotes == return.task_completion_status.completed_count,daikon.inv.binary.twoScalar.IntEqual,"(return.downvotes, return.task_completion_status.completed_count)",pm.expect(return_downvotes).to.eql(return_task_completion_status_completed_count),post+projects_{id}_issues,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,downvotes
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,return.downvotes == return.time_stats.time_estimate,daikon.inv.binary.twoScalar.IntEqual,"(return.downvotes, return.time_stats.time_estimate)",pm.expect(return_downvotes).to.eql(return_time_stats_time_estimate),post+projects_{id}_issues,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,downvotes
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,return.downvotes == return.time_stats.total_time_spent,daikon.inv.binary.twoScalar.IntEqual,"(return.downvotes, return.time_stats.total_time_spent)",pm.expect(return_downvotes).to.eql(return_time_stats_total_time_spent),post+projects_{id}_issues,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,downvotes
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,return.downvotes == return.upvotes,daikon.inv.binary.twoScalar.IntEqual,"(return.downvotes, return.upvotes)",pm.expect(return_downvotes).to.eql(return_upvotes),post+projects_{id}_issues,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,downvotes
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,return.downvotes == return.user_notes_count,daikon.inv.binary.twoScalar.IntEqual,"(return.downvotes, return.user_notes_count)",pm.expect(return_downvotes).to.eql(return_user_notes_count),post+projects_{id}_issues,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,downvotes
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,return.references.relative == return.references.short,daikon.inv.binary.twoString.StringEqual,"(return.references.relative, return.references.short)",pm.expect(return_references_relative).to.eql(return_references_short),post+projects_{id}_issues,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,,GitLab Issues API,references.relative
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,input.assignee_ids[return.author.id -1] == input.assignee_ids[return.downvotes],daikon.inv.binary.twoScalar.IntEqual,"(input.assignee_ids[return.author.id -1], input.assignee_ids[return.downvotes])",pm.expect(input_assignee_ids_return_author_id_minus_1).to.eql(input_assignee_ids_return_downvotes),post+projects_{id}_issues,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,input.assignee_ids[author.id -1]
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,LENGTH(return.assignee.avatar_url)==81,daikon.inv.unary.string.FixedLengthString,(return.assignee.avatar_url),pm.expect(return_assignee_avatar_url).to.have.length(81),post+projects_{id}_issues,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,assignee.avatar_url
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,return.assignee.avatar_url is Url,daikon.inv.unary.string.IsUrl,(return.assignee.avatar_url),"pm.expect(return_assignee_avatar_url).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",post+projects_{id}_issues,1.0,,,Indicates that the value of a string variable is always a URL. Represented as x is Url.,,,GitLab Issues API,assignee.avatar_url
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,"return.assignee.state == ""active""",daikon.inv.unary.string.OneOfString,(return.assignee.state),"pm.expect([""active""].includes(return_assignee_state)).to.be.true",post+projects_{id}_issues,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,assignee.state
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,LENGTH(return.assignee.state)==6,daikon.inv.unary.string.FixedLengthString,(return.assignee.state),pm.expect(return_assignee_state).to.have.length(6),post+projects_{id}_issues,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,assignee.state
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,"return.author.web_url == ""http://localhost:30000/root""",daikon.inv.unary.string.OneOfString,(return.author.web_url),"pm.expect([""http://localhost:30000/root""].includes(return_author_web_url)).to.be.true",post+projects_{id}_issues,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,author.web_url
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,LENGTH(return.author.web_url)==27,daikon.inv.unary.string.FixedLengthString,(return.author.web_url),pm.expect(return_author_web_url).to.have.length(27),post+projects_{id}_issues,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,author.web_url
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,"return.author.avatar_url == ""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80&d=identicon""",daikon.inv.unary.string.OneOfString,(return.author.avatar_url),"pm.expect([""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80&d=identicon""].includes(return_author_avatar_url)).to.be.true",post+projects_{id}_issues,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,author.avatar_url
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,LENGTH(return.author.avatar_url)==81,daikon.inv.unary.string.FixedLengthString,(return.author.avatar_url),pm.expect(return_author_avatar_url).to.have.length(81),post+projects_{id}_issues,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,author.avatar_url
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,return.author.avatar_url is Url,daikon.inv.unary.string.IsUrl,(return.author.avatar_url),"pm.expect(return_author_avatar_url).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",post+projects_{id}_issues,1.0,,,Indicates that the value of a string variable is always a URL. Represented as x is Url.,,,GitLab Issues API,author.avatar_url
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,"return.author.username == ""root""",daikon.inv.unary.string.OneOfString,(return.author.username),"pm.expect([""root""].includes(return_author_username)).to.be.true",post+projects_{id}_issues,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,author.username
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,LENGTH(return.author.username)==4,daikon.inv.unary.string.FixedLengthString,(return.author.username),pm.expect(return_author_username).to.have.length(4),post+projects_{id}_issues,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,author.username
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,"return.author.state == ""active""",daikon.inv.unary.string.OneOfString,(return.author.state),"pm.expect([""active""].includes(return_author_state)).to.be.true",post+projects_{id}_issues,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,author.state
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,LENGTH(return.author.state)==6,daikon.inv.unary.string.FixedLengthString,(return.author.state),pm.expect(return_author_state).to.have.length(6),post+projects_{id}_issues,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,author.state
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,"return.author.name == ""Administrator""",daikon.inv.unary.string.OneOfString,(return.author.name),"pm.expect([""Administrator""].includes(return_author_name)).to.be.true",post+projects_{id}_issues,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,author.name
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,LENGTH(return.author.name)==13,daikon.inv.unary.string.FixedLengthString,(return.author.name),pm.expect(return_author_name).to.have.length(13),post+projects_{id}_issues,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,author.name
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,return.author.id == 1,daikon.inv.unary.scalar.OneOfScalar,(return.author.id),pm.expect([1].includes(return_author_id)).to.be.true,post+projects_{id}_issues,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,author.id
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,return.closed_by == null,daikon.inv.unary.scalar.OneOfScalar,(return.closed_by),pm.expect(return_closed_by).to.be.null,post+projects_{id}_issues,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,closed_by
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,LENGTH(return.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.created_at),pm.expect(return_created_at).to.have.length(24),post+projects_{id}_issues,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,created_at
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.created_at),"pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",post+projects_{id}_issues,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,,GitLab Issues API,created_at
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,return.downvotes == 0,daikon.inv.unary.scalar.OneOfScalar,(return.downvotes),pm.expect([0].includes(return_downvotes)).to.be.true,post+projects_{id}_issues,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,downvotes
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,return.has_tasks == false,daikon.inv.unary.scalar.OneOfScalar,(return.has_tasks),pm.expect(return_has_tasks).to.eql(false),post+projects_{id}_issues,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,has_tasks
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,return.iid >= 1,daikon.inv.unary.scalar.LowerBound,(return.iid),pm.expect(return_iid).to.be.at.least(1),post+projects_{id}_issues,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,,GitLab Issues API,iid
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,return.milestone == null,daikon.inv.unary.scalar.OneOfScalar,(return.milestone),pm.expect(return_milestone).to.be.null,post+projects_{id}_issues,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,milestone
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,"return.state == ""opened""",daikon.inv.unary.string.OneOfString,(return.state),"pm.expect([""opened""].includes(return_state)).to.be.true",post+projects_{id}_issues,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,state
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,LENGTH(return.state)==6,daikon.inv.unary.string.FixedLengthString,(return.state),pm.expect(return_state).to.have.length(6),post+projects_{id}_issues,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,state
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,return.subscribed == true,daikon.inv.unary.scalar.OneOfScalar,(return.subscribed),pm.expect(return_subscribed).to.eql(true),post+projects_{id}_issues,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,subscribed
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,LENGTH(return.updated_at)==24,daikon.inv.unary.string.FixedLengthString,(return.updated_at),pm.expect(return_updated_at).to.have.length(24),post+projects_{id}_issues,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,updated_at
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,return.updated_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.updated_at),"pm.expect(return_updated_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",post+projects_{id}_issues,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,,GitLab Issues API,updated_at
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,"size(return.assignees[]) one of { 0, 1 }",daikon.inv.unary.scalar.OneOfScalar,(size(return.assignees[..])),"pm.expect([0, 1, 0].includes(return_assignees_size_array)).to.be.true",post+projects_{id}_issues,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,assignees
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,input.assignee_ids[] elements == return.assignee.id,daikon.inv.binary.sequenceScalar.SeqIntEqual,"(input.assignee_ids[..], return.assignee.id)",pm.expect(input_assignee_ids_array.every(element => element == return_assignee_id)).to.be.true,post+projects_{id}_issues,,1.0,,Represents an invariant between a long scalar and a a sequence of long values. Prints as x[] elements == y where x is a long sequence and y is a long scalar.,,,GitLab Issues API,assignee.id
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,return.assignee.id in input.assignee_ids[],daikon.inv.binary.sequenceScalar.Member,"(input.assignee_ids[..], return.assignee.id)",pm.expect(input_assignee_ids_array.includes(return_assignee_id)).to.be.true,post+projects_{id}_issues,1.0,,,Represents long scalars that are always members of a sequence of long values. Prints as x in y[] where x is a long scalar and y[] is a sequence of long.,,,GitLab Issues API,assignee.id
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,input.assignee_ids[] elements >= return.author.id,daikon.inv.binary.sequenceScalar.SeqIntGreaterEqual,"(input.assignee_ids[..], return.author.id)",pm.expect(input_assignee_ids_array.every(element => element >= return_author_id)).to.be.true,post+projects_{id}_issues,,1.0,,Represents an invariant between a long scalar and a a sequence of long values. Prints as x[] elements> y where x is a long sequence and y is a long scalar,,,GitLab Issues API,author.id
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,input.assignee_ids[] elements >= size(return.assignees[]),daikon.inv.binary.sequenceScalar.SeqIntGreaterEqual,"(input.assignee_ids[..], size(return.assignees[..]))",pm.expect(input_assignee_ids_array.every(element => element >= return_assignees_size_array)).to.be.true,post+projects_{id}_issues,1.0,,,Represents an invariant between a long scalar and a a sequence of long values. Prints as x[] elements> y where x is a long sequence and y is a long scalar,,,GitLab Issues API,assignees
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,input.assignee_ids[] elements == input.assignee_ids[return.downvotes],daikon.inv.binary.sequenceScalar.SeqIntEqual,"(input.assignee_ids[..], input.assignee_ids[return.downvotes])",pm.expect(input_assignee_ids_array.every(element => element == input_assignee_ids_return_downvotes)).to.be.true,post+projects_{id}_issues,1.0,,,Represents an invariant between a long scalar and a a sequence of long values. Prints as x[] elements == y where x is a long sequence and y is a long scalar.,,,GitLab Issues API,input.assignee_ids[downvotes]
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,input.milestone_id >= return.author.id,daikon.inv.binary.twoScalar.IntGreaterEqual,"(input.milestone_id, return.author.id)",pm.expect(input_milestone_id).to.be.at.least(return_author_id),post+projects_{id}_issues,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,author.id
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,input.milestone_id > size(return.assignees[]),daikon.inv.binary.twoScalar.IntGreaterThan,"(input.milestone_id, size(return.assignees[..]))",pm.expect(input_milestone_id).to.be.greaterThan(return_assignees_size_array),post+projects_{id}_issues,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,,GitLab Issues API,assignees
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,return._links.self is a substring of return._links.award_emoji,daikon.inv.binary.twoString.StdString$SubString,"(return._links.award_emoji, return._links.self)",pm.expect(return__links_award_emoji.includes(return__links_self)).to.be.true,post+projects_{id}_issues,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,_links.self
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,return._links.self is a substring of return._links.notes,daikon.inv.binary.twoString.StdString$SubString,"(return._links.notes, return._links.self)",pm.expect(return__links_notes.includes(return__links_self)).to.be.true,post+projects_{id}_issues,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,_links.self
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,return._links.project is a substring of return._links.self,daikon.inv.binary.twoString.StdString$SubString,"(return._links.project, return._links.self)",pm.expect(return__links_self.includes(return__links_project)).to.be.true,post+projects_{id}_issues,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,_links.self
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,return.assignee.username is a substring of return.assignee.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.assignee.web_url, return.assignee.username)",pm.expect(return_assignee_web_url.includes(return_assignee_username)).to.be.true,post+projects_{id}_issues,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,assignee.web_url
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,return.assignee.id >= return.author.id,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.assignee.id, return.author.id)",pm.expect(return_assignee_id).to.be.at.least(return_author_id),post+projects_{id}_issues,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,assignee.id
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,return.assignee.id >= size(input.assignee_ids[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.assignee.id, size(input.assignee_ids[..]))",pm.expect(return_assignee_id).to.be.at.least(input_assignee_ids_size_array),post+projects_{id}_issues,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,assignee.id
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,return.assignee.id >= size(return.assignees[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.assignee.id, size(return.assignees[..]))",pm.expect(return_assignee_id).to.be.at.least(return_assignees_size_array),post+projects_{id}_issues,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,assignee.id
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,return.author.username is a substring of return.author.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.author.web_url, return.author.username)",pm.expect(return_author_web_url.includes(return_author_username)).to.be.true,post+projects_{id}_issues,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,author.web_url
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,return.author.id <= return.iid,daikon.inv.binary.twoScalar.IntLessEqual,"(return.author.id, return.iid)",pm.expect(return_author_id).to.be.lte(return_iid),post+projects_{id}_issues,,1.0,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,,GitLab Issues API,author.id
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,return.author.id >= size(return.assignees[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.author.id, size(return.assignees[..]))",pm.expect(return_author_id).to.be.at.least(return_assignees_size_array),post+projects_{id}_issues,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,author.id
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,return.author.id <= input.assignee_ids[return.downvotes],daikon.inv.binary.twoScalar.IntLessEqual,"(return.author.id, input.assignee_ids[return.downvotes])",pm.expect(return_author_id).to.be.lte(input_assignee_ids_return_downvotes),post+projects_{id}_issues,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,,GitLab Issues API,author.id
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,return.downvotes <= size(return.assignees[]),daikon.inv.binary.twoScalar.IntLessEqual,"(return.downvotes, size(return.assignees[..]))",pm.expect(return_downvotes).to.be.lte(return_assignees_size_array),post+projects_{id}_issues,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,,GitLab Issues API,downvotes
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,return.iid >= size(input.assignee_ids[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.iid, size(input.assignee_ids[..]))",pm.expect(return_iid).to.be.at.least(input_assignee_ids_size_array),post+projects_{id}_issues,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,iid
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,return.iid >= size(return.assignees[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.iid, size(return.assignees[..]))",pm.expect(return_iid).to.be.at.least(return_assignees_size_array),post+projects_{id}_issues,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,iid
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,return.references.relative is a substring of return.references.full,daikon.inv.binary.twoString.StdString$SubString,"(return.references.full, return.references.relative)",pm.expect(return_references_full.includes(return_references_relative)).to.be.true,post+projects_{id}_issues,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,references.full
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,size(input.assignee_ids[]) >= size(return.assignees[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(size(input.assignee_ids[..]), size(return.assignees[..]))",pm.expect(input_assignee_ids_size_array).to.be.at.least(return_assignees_size_array),post+projects_{id}_issues,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,assignees
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,size(input.assignee_ids[]) <= input.assignee_ids[return.downvotes],daikon.inv.binary.twoScalar.IntLessEqual,"(size(input.assignee_ids[..]), input.assignee_ids[return.downvotes])",pm.expect(input_assignee_ids_size_array).to.be.lte(input_assignee_ids_return_downvotes),post+projects_{id}_issues,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,,GitLab Issues API,input.assignee_ids[downvotes]
/projects/{id}/issues&/projects/{id}/issues&post&201():::EXIT,size(return.assignees[]) <= input.assignee_ids[return.downvotes],daikon.inv.binary.twoScalar.IntLessEqual,"(size(return.assignees[..]), input.assignee_ids[return.downvotes])",pm.expect(return_assignees_size_array).to.be.lte(input_assignee_ids_return_downvotes),post+projects_{id}_issues,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,,GitLab Issues API,assignees
/projects/{id}/issues/{issue_iid}/add_spent_time&/projects/{id}/issues/{issue_iid}/add_spent_time&post&201():::EXIT,return.time_estimate == 0,daikon.inv.unary.scalar.OneOfScalar,(return.time_estimate),pm.expect([0].includes(return_time_estimate)).to.be.true,post+projects_{id}_issues_{issue_iid}_add_spent_time,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,time_estimate
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201&assignees():::EXIT,return.username == return.name,daikon.inv.binary.twoString.StringEqual,"(return.username, return.name)",pm.expect(return_username).to.eql(return_name),post+projects_{id}_issues_{issue_iid}_move,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,,GitLab Issues API,assignees.name
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201&assignees():::EXIT,"return.web_url == ""http://localhost:30000/smith""",daikon.inv.unary.string.OneOfString,(return.web_url),"pm.expect([""http://localhost:30000/smith""].includes(return_web_url)).to.be.true",post+projects_{id}_issues_{issue_iid}_move,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,assignees.web_url
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201&assignees():::EXIT,"return.avatar_url == ""https://www.gravatar.com/avatar/00740959b42692bf9d85368b2e42eeb4?s=80&d=identicon""",daikon.inv.unary.string.OneOfString,(return.avatar_url),"pm.expect([""https://www.gravatar.com/avatar/00740959b42692bf9d85368b2e42eeb4?s=80&d=identicon""].includes(return_avatar_url)).to.be.true",post+projects_{id}_issues_{issue_iid}_move,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,assignees.avatar_url
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201&assignees():::EXIT,"return.username == ""smith""",daikon.inv.unary.string.OneOfString,(return.username),"pm.expect([""smith""].includes(return_username)).to.be.true",post+projects_{id}_issues_{issue_iid}_move,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,assignees.username
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201&assignees():::EXIT,"return.state == ""active""",daikon.inv.unary.string.OneOfString,(return.state),"pm.expect([""active""].includes(return_state)).to.be.true",post+projects_{id}_issues_{issue_iid}_move,,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,assignees.state
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201&assignees():::EXIT,return.id == 8,daikon.inv.unary.scalar.OneOfScalar,(return.id),pm.expect([8].includes(return_id)).to.be.true,post+projects_{id}_issues_{issue_iid}_move,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,assignees.id
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201&assignees():::EXIT,return.username is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.username)",pm.expect(return_web_url.includes(return_username)).to.be.true,post+projects_{id}_issues_{issue_iid}_move,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,assignees.web_url
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT,input.to_project_id == return.project_id,daikon.inv.binary.twoScalar.IntEqual,"(input.to_project_id, return.project_id)",pm.expect(input_to_project_id).to.eql(return_project_id),post+projects_{id}_issues_{issue_iid}_move,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,project_id
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT,return.assignee.username == return.assignee.name,daikon.inv.binary.twoString.StringEqual,"(return.assignee.username, return.assignee.name)",pm.expect(return_assignee_username).to.eql(return_assignee_name),post+projects_{id}_issues_{issue_iid}_move,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,,GitLab Issues API,assignee.username
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT,return.assignee.state == return.author.state,daikon.inv.binary.twoString.StringEqual,"(return.assignee.state, return.author.state)",pm.expect(return_assignee_state).to.eql(return_author_state),post+projects_{id}_issues_{issue_iid}_move,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,,GitLab Issues API,assignee.state
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT,return.downvotes == return.merge_requests_count,daikon.inv.binary.twoScalar.IntEqual,"(return.downvotes, return.merge_requests_count)",pm.expect(return_downvotes).to.eql(return_merge_requests_count),post+projects_{id}_issues_{issue_iid}_move,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,downvotes
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT,return.downvotes == return.task_completion_status.count,daikon.inv.binary.twoScalar.IntEqual,"(return.downvotes, return.task_completion_status.count)",pm.expect(return_downvotes).to.eql(return_task_completion_status_count),post+projects_{id}_issues_{issue_iid}_move,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,downvotes
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT,return.downvotes == return.task_completion_status.completed_count,daikon.inv.binary.twoScalar.IntEqual,"(return.downvotes, return.task_completion_status.completed_count)",pm.expect(return_downvotes).to.eql(return_task_completion_status_completed_count),post+projects_{id}_issues_{issue_iid}_move,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,downvotes
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT,return.downvotes == return.time_stats.time_estimate,daikon.inv.binary.twoScalar.IntEqual,"(return.downvotes, return.time_stats.time_estimate)",pm.expect(return_downvotes).to.eql(return_time_stats_time_estimate),post+projects_{id}_issues_{issue_iid}_move,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,downvotes
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT,return.downvotes == return.time_stats.total_time_spent,daikon.inv.binary.twoScalar.IntEqual,"(return.downvotes, return.time_stats.total_time_spent)",pm.expect(return_downvotes).to.eql(return_time_stats_total_time_spent),post+projects_{id}_issues_{issue_iid}_move,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,downvotes
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT,return.downvotes == return.upvotes,daikon.inv.binary.twoScalar.IntEqual,"(return.downvotes, return.upvotes)",pm.expect(return_downvotes).to.eql(return_upvotes),post+projects_{id}_issues_{issue_iid}_move,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,downvotes
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT,return.downvotes == return.user_notes_count,daikon.inv.binary.twoScalar.IntEqual,"(return.downvotes, return.user_notes_count)",pm.expect(return_downvotes).to.eql(return_user_notes_count),post+projects_{id}_issues_{issue_iid}_move,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,downvotes
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT,return.downvotes == size(return.labels[]),daikon.inv.binary.twoScalar.IntEqual,"(return.downvotes, size(return.labels[..]))",pm.expect(return_downvotes).to.eql(return_labels_size_array),post+projects_{id}_issues_{issue_iid}_move,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,downvotes
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT,return.downvotes == size(return.labels[]),daikon.inv.binary.twoScalar.IntEqual,"(return.downvotes, size(return.labels[..]))",pm.expect(return_downvotes).to.eql(return_labels_size_array),post+projects_{id}_issues_{issue_iid}_move,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,downvotes
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT,"return.assignee.web_url == ""http://localhost:30000/smith""",daikon.inv.unary.string.OneOfString,(return.assignee.web_url),"pm.expect([""http://localhost:30000/smith""].includes(return_assignee_web_url)).to.be.true",post+projects_{id}_issues_{issue_iid}_move,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,assignee.web_url
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT,"return.assignee.avatar_url == ""https://www.gravatar.com/avatar/00740959b42692bf9d85368b2e42eeb4?s=80&d=identicon""",daikon.inv.unary.string.OneOfString,(return.assignee.avatar_url),"pm.expect([""https://www.gravatar.com/avatar/00740959b42692bf9d85368b2e42eeb4?s=80&d=identicon""].includes(return_assignee_avatar_url)).to.be.true",post+projects_{id}_issues_{issue_iid}_move,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,assignee.avatar_url
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT,"return.assignee.username == ""smith""",daikon.inv.unary.string.OneOfString,(return.assignee.username),"pm.expect([""smith""].includes(return_assignee_username)).to.be.true",post+projects_{id}_issues_{issue_iid}_move,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,assignee.username
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT,"return.assignee.state == ""active""",daikon.inv.unary.string.OneOfString,(return.assignee.state),"pm.expect([""active""].includes(return_assignee_state)).to.be.true",post+projects_{id}_issues_{issue_iid}_move,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,assignee.state
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT,return.assignee.id == 8,daikon.inv.unary.scalar.OneOfScalar,(return.assignee.id),pm.expect([8].includes(return_assignee_id)).to.be.true,post+projects_{id}_issues_{issue_iid}_move,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,assignee.id
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT,return.assignees[] elements has only one value,daikon.inv.unary.sequence.EltOneOf,(return.assignees[..]),//,post+projects_{id}_issues_{issue_iid}_move,1.0,,,"Represents sequences of long values where the elements of the sequence take on only a few distinct values. Prints as either x[] elements == c (when there is only one value), or as x[] elements one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,assignees
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT,LENGTH(return.author.avatar_url)==81,daikon.inv.unary.string.FixedLengthString,(return.author.avatar_url),pm.expect(return_author_avatar_url).to.have.length(81),post+projects_{id}_issues_{issue_iid}_move,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,author.avatar_url
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT,return.author.avatar_url is Url,daikon.inv.unary.string.IsUrl,(return.author.avatar_url),"pm.expect(return_author_avatar_url).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",post+projects_{id}_issues_{issue_iid}_move,1.0,,,Indicates that the value of a string variable is always a URL. Represented as x is Url.,,,GitLab Issues API,author.avatar_url
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT,"return.author.state == ""active""",daikon.inv.unary.string.OneOfString,(return.author.state),"pm.expect([""active""].includes(return_author_state)).to.be.true",post+projects_{id}_issues_{issue_iid}_move,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,author.state
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT,LENGTH(return.author.state)==6,daikon.inv.unary.string.FixedLengthString,(return.author.state),pm.expect(return_author_state).to.have.length(6),post+projects_{id}_issues_{issue_iid}_move,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,author.state
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT,return.author.id >= 1,daikon.inv.unary.scalar.LowerBound,(return.author.id),pm.expect(return_author_id).to.be.at.least(1),post+projects_{id}_issues_{issue_iid}_move,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,,GitLab Issues API,author.id
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT,return.closed_by == null,daikon.inv.unary.scalar.OneOfScalar,(return.closed_by),pm.expect(return_closed_by).to.be.null,post+projects_{id}_issues_{issue_iid}_move,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,closed_by
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT,LENGTH(return.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.created_at),pm.expect(return_created_at).to.have.length(24),post+projects_{id}_issues_{issue_iid}_move,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,created_at
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT,return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.created_at),"pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",post+projects_{id}_issues_{issue_iid}_move,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,,GitLab Issues API,created_at
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT,return.due_date is a Date. Format: YYYY/MM/DD,daikon.inv.unary.string.dates.IsDateYYYYMMDD,(return.due_date),pm.expect(return_due_date).to.match(/^(?:1\d{3}|20[01234][0-9]|2050|9999)[-/.](?:0[1-9]|1[012])[-/.](?:0[1-9]|[12][0-9]|3[01])$/),post+projects_{id}_issues_{issue_iid}_move,1.0,,,"Indicates that the value of a string variable is always a date following the format YYYY/MM/DD or YYYY-MM-DD (the separator can be ""/"" or ""-""). Represented as x is a Date. Format YYYY/MM/DD.",,,GitLab Issues API,due_date
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT,return.has_tasks == false,daikon.inv.unary.scalar.OneOfScalar,(return.has_tasks),pm.expect(return_has_tasks).to.eql(false),post+projects_{id}_issues_{issue_iid}_move,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,has_tasks
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT,return.labels[] == [],daikon.inv.unary.stringsequence.OneOfStringSequence,(return.labels[..]),pm.expect([[]].some(value => pm.expect(return_labels_array).to.deep.equal(value).that)).to.be.true,post+projects_{id}_issues_{issue_iid}_move,1.0,,,"Represents String[] variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,labels
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT,return.milestone == null,daikon.inv.unary.scalar.OneOfScalar,(return.milestone),pm.expect(return_milestone).to.be.null,post+projects_{id}_issues_{issue_iid}_move,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,milestone
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT,"return.state == ""opened""",daikon.inv.unary.string.OneOfString,(return.state),"pm.expect([""opened""].includes(return_state)).to.be.true",post+projects_{id}_issues_{issue_iid}_move,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,state
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT,LENGTH(return.state)==6,daikon.inv.unary.string.FixedLengthString,(return.state),pm.expect(return_state).to.have.length(6),post+projects_{id}_issues_{issue_iid}_move,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,state
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT,return.subscribed == true,daikon.inv.unary.scalar.OneOfScalar,(return.subscribed),pm.expect(return_subscribed).to.eql(true),post+projects_{id}_issues_{issue_iid}_move,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,subscribed
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT,LENGTH(return.updated_at)==24,daikon.inv.unary.string.FixedLengthString,(return.updated_at),pm.expect(return_updated_at).to.have.length(24),post+projects_{id}_issues_{issue_iid}_move,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,updated_at
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT,return.updated_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.updated_at),"pm.expect(return_updated_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",post+projects_{id}_issues_{issue_iid}_move,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,,GitLab Issues API,updated_at
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT,"size(return.assignees[]) one of { 0, 1 }",daikon.inv.unary.scalar.OneOfScalar,(size(return.assignees[..])),"pm.expect([0, 1, 0].includes(return_assignees_size_array)).to.be.true",post+projects_{id}_issues_{issue_iid}_move,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,assignees
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT,input.issue_iid > size(return.assignees[]),daikon.inv.binary.twoScalar.IntGreaterThan,"(input.issue_iid, size(return.assignees[..]))",pm.expect(input_issue_iid).to.be.greaterThan(return_assignees_size_array),post+projects_{id}_issues_{issue_iid}_move,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,,GitLab Issues API,assignees
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT,return._links.self is a substring of return._links.award_emoji,daikon.inv.binary.twoString.StdString$SubString,"(return._links.award_emoji, return._links.self)",pm.expect(return__links_award_emoji.includes(return__links_self)).to.be.true,post+projects_{id}_issues_{issue_iid}_move,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,_links.self
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT,return._links.self is a substring of return._links.notes,daikon.inv.binary.twoString.StdString$SubString,"(return._links.notes, return._links.self)",pm.expect(return__links_notes.includes(return__links_self)).to.be.true,post+projects_{id}_issues_{issue_iid}_move,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,_links.self
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT,return._links.project is a substring of return._links.self,daikon.inv.binary.twoString.StdString$SubString,"(return._links.project, return._links.self)",pm.expect(return__links_self.includes(return__links_project)).to.be.true,post+projects_{id}_issues_{issue_iid}_move,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,_links.self
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT,return.assignee.username is a substring of return.assignee.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.assignee.web_url, return.assignee.username)",pm.expect(return_assignee_web_url.includes(return_assignee_username)).to.be.true,post+projects_{id}_issues_{issue_iid}_move,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,assignee.web_url
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT,return.assignee.web_url is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.assignee.web_url, return.web_url)",pm.expect(return_web_url.includes(return_assignee_web_url)).to.be.true,post+projects_{id}_issues_{issue_iid}_move,,1.0,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,web_url
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT,return.assignee.username is a substring of return.references.relative,daikon.inv.binary.twoString.StdString$SubString,"(return.assignee.username, return.references.relative)",pm.expect(return_references_relative.includes(return_assignee_username)).to.be.true,post+projects_{id}_issues_{issue_iid}_move,,1.0,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,assignee.username
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT,return.author.username is a substring of return.author.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.author.web_url, return.author.username)",pm.expect(return_author_web_url.includes(return_author_username)).to.be.true,post+projects_{id}_issues_{issue_iid}_move,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,author.web_url
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT,return.author.id >= size(return.assignees[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.author.id, size(return.assignees[..]))",pm.expect(return_author_id).to.be.at.least(return_assignees_size_array),post+projects_{id}_issues_{issue_iid}_move,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,author.id
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT,return.downvotes <= size(return.assignees[]),daikon.inv.binary.twoScalar.IntLessEqual,"(return.downvotes, size(return.assignees[..]))",pm.expect(return_downvotes).to.be.lte(return_assignees_size_array),post+projects_{id}_issues_{issue_iid}_move,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,,GitLab Issues API,downvotes
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT,return.iid > size(return.assignees[]),daikon.inv.binary.twoScalar.IntGreaterThan,"(return.iid, size(return.assignees[..]))",pm.expect(return_iid).to.be.greaterThan(return_assignees_size_array),post+projects_{id}_issues_{issue_iid}_move,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,,GitLab Issues API,iid
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT,return.references.relative is a substring of return.references.full,daikon.inv.binary.twoString.StdString$SubString,"(return.references.full, return.references.relative)",pm.expect(return_references_full.includes(return_references_relative)).to.be.true,post+projects_{id}_issues_{issue_iid}_move,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,references.full
/projects/{id}/issues/{issue_iid}/move&/projects/{id}/issues/{issue_iid}/move&post&201():::EXIT,return.references.short is a substring of return.references.relative,daikon.inv.binary.twoString.StdString$SubString,"(return.references.relative, return.references.short)",pm.expect(return_references_relative.includes(return_references_short)).to.be.true,post+projects_{id}_issues_{issue_iid}_move,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,references.relative
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201&assignees():::EXIT,LENGTH(return.avatar_url)==81,daikon.inv.unary.string.FixedLengthString,(return.avatar_url),pm.expect(return_avatar_url).to.have.length(81),post+projects_{id}_issues_{issue_iid}_subscribe,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,assignees.avatar_url
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201&assignees():::EXIT,return.avatar_url is Url,daikon.inv.unary.string.IsUrl,(return.avatar_url),"pm.expect(return_avatar_url).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",post+projects_{id}_issues_{issue_iid}_subscribe,1.0,,,Indicates that the value of a string variable is always a URL. Represented as x is Url.,,,GitLab Issues API,assignees.avatar_url
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201&assignees():::EXIT,"return.state == ""active""",daikon.inv.unary.string.OneOfString,(return.state),"pm.expect([""active""].includes(return_state)).to.be.true",post+projects_{id}_issues_{issue_iid}_subscribe,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,assignees.state
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201&assignees():::EXIT,LENGTH(return.state)==6,daikon.inv.unary.string.FixedLengthString,(return.state),pm.expect(return_state).to.have.length(6),post+projects_{id}_issues_{issue_iid}_subscribe,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,assignees.state
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201&assignees():::EXIT,return.username is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.username)",pm.expect(return_web_url.includes(return_username)).to.be.true,post+projects_{id}_issues_{issue_iid}_subscribe,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,assignees.web_url
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT,input.id == return.project_id,daikon.inv.binary.twoScalar.IntEqual,"(input.id, return.project_id)",pm.expect(input_id).to.eql(return_project_id),post+projects_{id}_issues_{issue_iid}_subscribe,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,project_id
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT,input.issue_iid == return.iid,daikon.inv.binary.twoScalar.IntEqual,"(input.issue_iid, return.iid)",pm.expect(input_issue_iid).to.eql(return_iid),post+projects_{id}_issues_{issue_iid}_subscribe,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,iid
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT,return.assignee.state == return.author.state,daikon.inv.binary.twoString.StringEqual,"(return.assignee.state, return.author.state)",pm.expect(return_assignee_state).to.eql(return_author_state),post+projects_{id}_issues_{issue_iid}_subscribe,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,,GitLab Issues API,assignee.state
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT,return.downvotes == return.merge_requests_count,daikon.inv.binary.twoScalar.IntEqual,"(return.downvotes, return.merge_requests_count)",pm.expect(return_downvotes).to.eql(return_merge_requests_count),post+projects_{id}_issues_{issue_iid}_subscribe,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,downvotes
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT,return.downvotes == return.task_completion_status.count,daikon.inv.binary.twoScalar.IntEqual,"(return.downvotes, return.task_completion_status.count)",pm.expect(return_downvotes).to.eql(return_task_completion_status_count),post+projects_{id}_issues_{issue_iid}_subscribe,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,downvotes
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT,return.downvotes == return.task_completion_status.completed_count,daikon.inv.binary.twoScalar.IntEqual,"(return.downvotes, return.task_completion_status.completed_count)",pm.expect(return_downvotes).to.eql(return_task_completion_status_completed_count),post+projects_{id}_issues_{issue_iid}_subscribe,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,downvotes
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT,return.downvotes == return.time_stats.time_estimate,daikon.inv.binary.twoScalar.IntEqual,"(return.downvotes, return.time_stats.time_estimate)",pm.expect(return_downvotes).to.eql(return_time_stats_time_estimate),post+projects_{id}_issues_{issue_iid}_subscribe,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,downvotes
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT,return.downvotes == return.upvotes,daikon.inv.binary.twoScalar.IntEqual,"(return.downvotes, return.upvotes)",pm.expect(return_downvotes).to.eql(return_upvotes),post+projects_{id}_issues_{issue_iid}_subscribe,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,downvotes
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT,return.downvotes == return.user_notes_count,daikon.inv.binary.twoScalar.IntEqual,"(return.downvotes, return.user_notes_count)",pm.expect(return_downvotes).to.eql(return_user_notes_count),post+projects_{id}_issues_{issue_iid}_subscribe,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,downvotes
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT,return.references.relative == return.references.short,daikon.inv.binary.twoString.StringEqual,"(return.references.relative, return.references.short)",pm.expect(return_references_relative).to.eql(return_references_short),post+projects_{id}_issues_{issue_iid}_subscribe,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,,GitLab Issues API,references.relative
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT,LENGTH(return.assignee.avatar_url)==81,daikon.inv.unary.string.FixedLengthString,(return.assignee.avatar_url),pm.expect(return_assignee_avatar_url).to.have.length(81),post+projects_{id}_issues_{issue_iid}_subscribe,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,assignee.avatar_url
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT,return.assignee.avatar_url is Url,daikon.inv.unary.string.IsUrl,(return.assignee.avatar_url),"pm.expect(return_assignee_avatar_url).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",post+projects_{id}_issues_{issue_iid}_subscribe,1.0,,,Indicates that the value of a string variable is always a URL. Represented as x is Url.,,,GitLab Issues API,assignee.avatar_url
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT,"return.assignee.state == ""active""",daikon.inv.unary.string.OneOfString,(return.assignee.state),"pm.expect([""active""].includes(return_assignee_state)).to.be.true",post+projects_{id}_issues_{issue_iid}_subscribe,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,assignee.state
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT,LENGTH(return.assignee.state)==6,daikon.inv.unary.string.FixedLengthString,(return.assignee.state),pm.expect(return_assignee_state).to.have.length(6),post+projects_{id}_issues_{issue_iid}_subscribe,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,assignee.state
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT,LENGTH(return.author.avatar_url)==81,daikon.inv.unary.string.FixedLengthString,(return.author.avatar_url),pm.expect(return_author_avatar_url).to.have.length(81),post+projects_{id}_issues_{issue_iid}_subscribe,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,author.avatar_url
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT,return.author.avatar_url is Url,daikon.inv.unary.string.IsUrl,(return.author.avatar_url),"pm.expect(return_author_avatar_url).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",post+projects_{id}_issues_{issue_iid}_subscribe,1.0,,,Indicates that the value of a string variable is always a URL. Represented as x is Url.,,,GitLab Issues API,author.avatar_url
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT,"return.author.state == ""active""",daikon.inv.unary.string.OneOfString,(return.author.state),"pm.expect([""active""].includes(return_author_state)).to.be.true",post+projects_{id}_issues_{issue_iid}_subscribe,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,author.state
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT,LENGTH(return.author.state)==6,daikon.inv.unary.string.FixedLengthString,(return.author.state),pm.expect(return_author_state).to.have.length(6),post+projects_{id}_issues_{issue_iid}_subscribe,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,author.state
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT,return.closed_by == null,daikon.inv.unary.scalar.OneOfScalar,(return.closed_by),pm.expect(return_closed_by).to.be.null,post+projects_{id}_issues_{issue_iid}_subscribe,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,closed_by
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT,LENGTH(return.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.created_at),pm.expect(return_created_at).to.have.length(24),post+projects_{id}_issues_{issue_iid}_subscribe,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,created_at
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT,return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.created_at),"pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",post+projects_{id}_issues_{issue_iid}_subscribe,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,,GitLab Issues API,created_at
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT,return.downvotes == 0,daikon.inv.unary.scalar.OneOfScalar,(return.downvotes),pm.expect([0].includes(return_downvotes)).to.be.true,post+projects_{id}_issues_{issue_iid}_subscribe,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,downvotes
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT,return.due_date is a Date. Format: YYYY/MM/DD,daikon.inv.unary.string.dates.IsDateYYYYMMDD,(return.due_date),pm.expect(return_due_date).to.match(/^(?:1\d{3}|20[01234][0-9]|2050|9999)[-/.](?:0[1-9]|1[012])[-/.](?:0[1-9]|[12][0-9]|3[01])$/),post+projects_{id}_issues_{issue_iid}_subscribe,1.0,,,"Indicates that the value of a string variable is always a date following the format YYYY/MM/DD or YYYY-MM-DD (the separator can be ""/"" or ""-""). Represented as x is a Date. Format YYYY/MM/DD.",,,GitLab Issues API,due_date
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT,return.has_tasks == false,daikon.inv.unary.scalar.OneOfScalar,(return.has_tasks),pm.expect(return_has_tasks).to.eql(false),post+projects_{id}_issues_{issue_iid}_subscribe,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,has_tasks
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT,return.milestone == null,daikon.inv.unary.scalar.OneOfScalar,(return.milestone),pm.expect(return_milestone).to.be.null,post+projects_{id}_issues_{issue_iid}_subscribe,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,milestone
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT,"return.state == ""opened""",daikon.inv.unary.string.OneOfString,(return.state),"pm.expect([""opened""].includes(return_state)).to.be.true",post+projects_{id}_issues_{issue_iid}_subscribe,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,state
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT,LENGTH(return.state)==6,daikon.inv.unary.string.FixedLengthString,(return.state),pm.expect(return_state).to.have.length(6),post+projects_{id}_issues_{issue_iid}_subscribe,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,state
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT,return.subscribed == true,daikon.inv.unary.scalar.OneOfScalar,(return.subscribed),pm.expect(return_subscribed).to.eql(true),post+projects_{id}_issues_{issue_iid}_subscribe,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,subscribed
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT,"return.time_stats.total_time_spent one of { 0, 8145 }",daikon.inv.unary.scalar.OneOfScalar,(return.time_stats.total_time_spent),"pm.expect([0, 8145, 0].includes(return_time_stats_total_time_spent)).to.be.true",post+projects_{id}_issues_{issue_iid}_subscribe,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,time_stats.total_time_spent
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT,"return.time_stats.human_total_time_spent == ""2h 15m 45s""",daikon.inv.unary.string.OneOfString,(return.time_stats.human_total_time_spent),"pm.expect([""2h 15m 45s""].includes(return_time_stats_human_total_time_spent)).to.be.true",post+projects_{id}_issues_{issue_iid}_subscribe,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,time_stats.human_total_time_spent
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT,LENGTH(return.updated_at)==24,daikon.inv.unary.string.FixedLengthString,(return.updated_at),pm.expect(return_updated_at).to.have.length(24),post+projects_{id}_issues_{issue_iid}_subscribe,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,updated_at
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT,return.updated_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.updated_at),"pm.expect(return_updated_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",post+projects_{id}_issues_{issue_iid}_subscribe,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,,GitLab Issues API,updated_at
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT,"size(return.assignees[]) one of { 0, 1 }",daikon.inv.unary.scalar.OneOfScalar,(size(return.assignees[..])),"pm.expect([0, 1, 0].includes(return_assignees_size_array)).to.be.true",post+projects_{id}_issues_{issue_iid}_subscribe,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,assignees
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT,input.issue_iid >= size(return.assignees[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(input.issue_iid, size(return.assignees[..]))",pm.expect(input_issue_iid).to.be.at.least(return_assignees_size_array),post+projects_{id}_issues_{issue_iid}_subscribe,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,assignees
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT,return._links.self is a substring of return._links.award_emoji,daikon.inv.binary.twoString.StdString$SubString,"(return._links.award_emoji, return._links.self)",pm.expect(return__links_award_emoji.includes(return__links_self)).to.be.true,post+projects_{id}_issues_{issue_iid}_subscribe,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,_links.self
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT,return._links.self is a substring of return._links.notes,daikon.inv.binary.twoString.StdString$SubString,"(return._links.notes, return._links.self)",pm.expect(return__links_notes.includes(return__links_self)).to.be.true,post+projects_{id}_issues_{issue_iid}_subscribe,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,_links.self
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT,return._links.project is a substring of return._links.self,daikon.inv.binary.twoString.StdString$SubString,"(return._links.project, return._links.self)",pm.expect(return__links_self.includes(return__links_project)).to.be.true,post+projects_{id}_issues_{issue_iid}_subscribe,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,_links.self
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT,return.assignee.username is a substring of return.assignee.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.assignee.web_url, return.assignee.username)",pm.expect(return_assignee_web_url.includes(return_assignee_username)).to.be.true,post+projects_{id}_issues_{issue_iid}_subscribe,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,assignee.web_url
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT,return.assignee.id >= size(return.assignees[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.assignee.id, size(return.assignees[..]))",pm.expect(return_assignee_id).to.be.at.least(return_assignees_size_array),post+projects_{id}_issues_{issue_iid}_subscribe,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,assignee.id
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT,return.author.username is a substring of return.author.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.author.web_url, return.author.username)",pm.expect(return_author_web_url.includes(return_author_username)).to.be.true,post+projects_{id}_issues_{issue_iid}_subscribe,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,author.web_url
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT,return.author.id >= size(return.assignees[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.author.id, size(return.assignees[..]))",pm.expect(return_author_id).to.be.at.least(return_assignees_size_array),post+projects_{id}_issues_{issue_iid}_subscribe,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,author.id
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT,return.downvotes <= return.time_stats.total_time_spent,daikon.inv.binary.twoScalar.IntLessEqual,"(return.downvotes, return.time_stats.total_time_spent)",pm.expect(return_downvotes).to.be.lte(return_time_stats_total_time_spent),post+projects_{id}_issues_{issue_iid}_subscribe,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,,GitLab Issues API,downvotes
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT,return.downvotes <= size(return.assignees[]),daikon.inv.binary.twoScalar.IntLessEqual,"(return.downvotes, size(return.assignees[..]))",pm.expect(return_downvotes).to.be.lte(return_assignees_size_array),post+projects_{id}_issues_{issue_iid}_subscribe,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,,GitLab Issues API,downvotes
/projects/{id}/issues/{issue_iid}/subscribe&/projects/{id}/issues/{issue_iid}/subscribe&post&201():::EXIT,return.references.relative is a substring of return.references.full,daikon.inv.binary.twoString.StdString$SubString,"(return.references.full, return.references.relative)",pm.expect(return_references_full.includes(return_references_relative)).to.be.true,post+projects_{id}_issues_{issue_iid}_subscribe,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,references.full
/projects/{id}/issues/{issue_iid}/time_estimate&/projects/{id}/issues/{issue_iid}/time_estimate&post&200():::EXIT,"return.human_total_time_spent one of { ""1h 3s"", ""1m"" }",daikon.inv.unary.string.OneOfString,(return.human_total_time_spent),"pm.expect([""1h 3s"", ""1m""].includes(return_human_total_time_spent)).to.be.true",post+projects_{id}_issues_{issue_iid}_time_estimate,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,human_total_time_spent
/projects/{id}/issues/{issue_iid}/time_estimate&/projects/{id}/issues/{issue_iid}/time_estimate&post&200():::EXIT,"return.total_time_spent one of { 0, 60, 3603 }",daikon.inv.unary.scalar.OneOfScalar,(return.total_time_spent),"pm.expect([0, 60, 3603].includes(return_total_time_spent)).to.be.true",post+projects_{id}_issues_{issue_iid}_time_estimate,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,total_time_spent
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201&target&assignees():::EXIT,LENGTH(return.avatar_url)==81,daikon.inv.unary.string.FixedLengthString,(return.avatar_url),pm.expect(return_avatar_url).to.have.length(81),post+projects_{id}_issues_{issue_iid}_todo,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,target.assignees.avatar_url
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201&target&assignees():::EXIT,return.avatar_url is Url,daikon.inv.unary.string.IsUrl,(return.avatar_url),"pm.expect(return_avatar_url).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",post+projects_{id}_issues_{issue_iid}_todo,1.0,,,Indicates that the value of a string variable is always a URL. Represented as x is Url.,,,GitLab Issues API,target.assignees.avatar_url
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201&target&assignees():::EXIT,"return.state == ""active""",daikon.inv.unary.string.OneOfString,(return.state),"pm.expect([""active""].includes(return_state)).to.be.true",post+projects_{id}_issues_{issue_iid}_todo,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,target.assignees.state
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201&target&assignees():::EXIT,LENGTH(return.state)==6,daikon.inv.unary.string.FixedLengthString,(return.state),pm.expect(return_state).to.have.length(6),post+projects_{id}_issues_{issue_iid}_todo,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,target.assignees.state
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201&target&assignees():::EXIT,return.username is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.username)",pm.expect(return_web_url.includes(return_username)).to.be.true,post+projects_{id}_issues_{issue_iid}_todo,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,target.assignees.web_url
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,input.id == return.project.id,daikon.inv.binary.twoScalar.IntEqual,"(input.id, return.project.id)",pm.expect(input_id).to.eql(return_project_id),post+projects_{id}_issues_{issue_iid}_todo,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,project.id
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,input.id == return.target.project_id,daikon.inv.binary.twoScalar.IntEqual,"(input.id, return.target.project_id)",pm.expect(input_id).to.eql(return_target_project_id),post+projects_{id}_issues_{issue_iid}_todo,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,target.project_id
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,input.issue_iid == return.target.iid,daikon.inv.binary.twoScalar.IntEqual,"(input.issue_iid, return.target.iid)",pm.expect(input_issue_iid).to.eql(return_target_iid),post+projects_{id}_issues_{issue_iid}_todo,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,target.iid
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,return.author.state == return.target.assignee.state,daikon.inv.binary.twoString.StringEqual,"(return.author.state, return.target.assignee.state)",pm.expect(return_author_state).to.eql(return_target_assignee_state),post+projects_{id}_issues_{issue_iid}_todo,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,,GitLab Issues API,author.state
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,return.author.state == return.target.author.state,daikon.inv.binary.twoString.StringEqual,"(return.author.state, return.target.author.state)",pm.expect(return_author_state).to.eql(return_target_author_state),post+projects_{id}_issues_{issue_iid}_todo,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,,GitLab Issues API,author.state
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,return.author.state == return.target.closed_by.state,daikon.inv.binary.twoString.StringEqual,"(return.author.state, return.target.closed_by.state)",pm.expect(return_author_state).to.eql(return_target_closed_by_state),post+projects_{id}_issues_{issue_iid}_todo,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,,GitLab Issues API,author.state
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,return.body == return.target.title,daikon.inv.binary.twoString.StringEqual,"(return.body, return.target.title)",pm.expect(return_body).to.eql(return_target_title),post+projects_{id}_issues_{issue_iid}_todo,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,,GitLab Issues API,body
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,return.target.downvotes == return.target.merge_requests_count,daikon.inv.binary.twoScalar.IntEqual,"(return.target.downvotes, return.target.merge_requests_count)",pm.expect(return_target_downvotes).to.eql(return_target_merge_requests_count),post+projects_{id}_issues_{issue_iid}_todo,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,target.downvotes
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,return.target.downvotes == return.target.task_completion_status.count,daikon.inv.binary.twoScalar.IntEqual,"(return.target.downvotes, return.target.task_completion_status.count)",pm.expect(return_target_downvotes).to.eql(return_target_task_completion_status_count),post+projects_{id}_issues_{issue_iid}_todo,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,target.downvotes
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,return.target.downvotes == return.target.task_completion_status.completed_count,daikon.inv.binary.twoScalar.IntEqual,"(return.target.downvotes, return.target.task_completion_status.completed_count)",pm.expect(return_target_downvotes).to.eql(return_target_task_completion_status_completed_count),post+projects_{id}_issues_{issue_iid}_todo,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,target.downvotes
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,return.target.downvotes == return.target.time_stats.time_estimate,daikon.inv.binary.twoScalar.IntEqual,"(return.target.downvotes, return.target.time_stats.time_estimate)",pm.expect(return_target_downvotes).to.eql(return_target_time_stats_time_estimate),post+projects_{id}_issues_{issue_iid}_todo,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,target.downvotes
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,return.target.downvotes == return.target.time_stats.total_time_spent,daikon.inv.binary.twoScalar.IntEqual,"(return.target.downvotes, return.target.time_stats.total_time_spent)",pm.expect(return_target_downvotes).to.eql(return_target_time_stats_total_time_spent),post+projects_{id}_issues_{issue_iid}_todo,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,target.downvotes
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,return.target.downvotes == return.target.upvotes,daikon.inv.binary.twoScalar.IntEqual,"(return.target.downvotes, return.target.upvotes)",pm.expect(return_target_downvotes).to.eql(return_target_upvotes),post+projects_{id}_issues_{issue_iid}_todo,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,target.downvotes
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,return.target.downvotes == return.target.user_notes_count,daikon.inv.binary.twoScalar.IntEqual,"(return.target.downvotes, return.target.user_notes_count)",pm.expect(return_target_downvotes).to.eql(return_target_user_notes_count),post+projects_{id}_issues_{issue_iid}_todo,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,target.downvotes
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,return.target.has_tasks == return.target.subscribed,daikon.inv.binary.twoScalar.IntEqual,"(return.target.has_tasks, return.target.subscribed)",pm.expect(return_target_has_tasks).to.eql(return_target_subscribed),post+projects_{id}_issues_{issue_iid}_todo,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,target.has_tasks
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,return.target.references.relative == return.target.references.short,daikon.inv.binary.twoString.StringEqual,"(return.target.references.relative, return.target.references.short)",pm.expect(return_target_references_relative).to.eql(return_target_references_short),post+projects_{id}_issues_{issue_iid}_todo,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,,GitLab Issues API,target.references.relative
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,return.target.web_url == return.target_url,daikon.inv.binary.twoString.StringEqual,"(return.target.web_url, return.target_url)",pm.expect(return_target_web_url).to.eql(return_target_url),post+projects_{id}_issues_{issue_iid}_todo,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,,GitLab Issues API,target.web_url
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,"return.action_name == ""marked""",daikon.inv.unary.string.OneOfString,(return.action_name),"pm.expect([""marked""].includes(return_action_name)).to.be.true",post+projects_{id}_issues_{issue_iid}_todo,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,action_name
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,LENGTH(return.action_name)==6,daikon.inv.unary.string.FixedLengthString,(return.action_name),pm.expect(return_action_name).to.have.length(6),post+projects_{id}_issues_{issue_iid}_todo,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,action_name
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,LENGTH(return.author.avatar_url)==81,daikon.inv.unary.string.FixedLengthString,(return.author.avatar_url),pm.expect(return_author_avatar_url).to.have.length(81),post+projects_{id}_issues_{issue_iid}_todo,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,author.avatar_url
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,return.author.avatar_url is Url,daikon.inv.unary.string.IsUrl,(return.author.avatar_url),"pm.expect(return_author_avatar_url).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",post+projects_{id}_issues_{issue_iid}_todo,1.0,,,Indicates that the value of a string variable is always a URL. Represented as x is Url.,,,GitLab Issues API,author.avatar_url
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,"return.author.state == ""active""",daikon.inv.unary.string.OneOfString,(return.author.state),"pm.expect([""active""].includes(return_author_state)).to.be.true",post+projects_{id}_issues_{issue_iid}_todo,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,author.state
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,LENGTH(return.author.state)==6,daikon.inv.unary.string.FixedLengthString,(return.author.state),pm.expect(return_author_state).to.have.length(6),post+projects_{id}_issues_{issue_iid}_todo,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,author.state
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,return.author.id >= 1,daikon.inv.unary.scalar.LowerBound,(return.author.id),pm.expect(return_author_id).to.be.at.least(1),post+projects_{id}_issues_{issue_iid}_todo,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,,GitLab Issues API,author.id
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,LENGTH(return.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.created_at),pm.expect(return_created_at).to.have.length(24),post+projects_{id}_issues_{issue_iid}_todo,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,created_at
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.created_at),"pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",post+projects_{id}_issues_{issue_iid}_todo,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,,GitLab Issues API,created_at
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,"return.state == ""pending""",daikon.inv.unary.string.OneOfString,(return.state),"pm.expect([""pending""].includes(return_state)).to.be.true",post+projects_{id}_issues_{issue_iid}_todo,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,state
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,LENGTH(return.state)==7,daikon.inv.unary.string.FixedLengthString,(return.state),pm.expect(return_state).to.have.length(7),post+projects_{id}_issues_{issue_iid}_todo,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,state
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,LENGTH(return.target.assignee.avatar_url)==81,daikon.inv.unary.string.FixedLengthString,(return.target.assignee.avatar_url),pm.expect(return_target_assignee_avatar_url).to.have.length(81),post+projects_{id}_issues_{issue_iid}_todo,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,target.assignee.avatar_url
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,return.target.assignee.avatar_url is Url,daikon.inv.unary.string.IsUrl,(return.target.assignee.avatar_url),"pm.expect(return_target_assignee_avatar_url).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",post+projects_{id}_issues_{issue_iid}_todo,1.0,,,Indicates that the value of a string variable is always a URL. Represented as x is Url.,,,GitLab Issues API,target.assignee.avatar_url
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,"return.target.assignee.state == ""active""",daikon.inv.unary.string.OneOfString,(return.target.assignee.state),"pm.expect([""active""].includes(return_target_assignee_state)).to.be.true",post+projects_{id}_issues_{issue_iid}_todo,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,target.assignee.state
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,LENGTH(return.target.assignee.state)==6,daikon.inv.unary.string.FixedLengthString,(return.target.assignee.state),pm.expect(return_target_assignee_state).to.have.length(6),post+projects_{id}_issues_{issue_iid}_todo,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,target.assignee.state
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,LENGTH(return.target.author.avatar_url)==81,daikon.inv.unary.string.FixedLengthString,(return.target.author.avatar_url),pm.expect(return_target_author_avatar_url).to.have.length(81),post+projects_{id}_issues_{issue_iid}_todo,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,target.author.avatar_url
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,return.target.author.avatar_url is Url,daikon.inv.unary.string.IsUrl,(return.target.author.avatar_url),"pm.expect(return_target_author_avatar_url).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",post+projects_{id}_issues_{issue_iid}_todo,1.0,,,Indicates that the value of a string variable is always a URL. Represented as x is Url.,,,GitLab Issues API,target.author.avatar_url
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,return.target.author.id >= 1,daikon.inv.unary.scalar.LowerBound,(return.target.author.id),pm.expect(return_target_author_id).to.be.at.least(1),post+projects_{id}_issues_{issue_iid}_todo,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,,GitLab Issues API,target.author.id
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,"return.target.closed_at == ""2025-06-15T12:07:14.003Z""",daikon.inv.unary.string.OneOfString,(return.target.closed_at),"pm.expect([""2025-06-15T12:07:14.003Z""].includes(return_target_closed_at)).to.be.true",post+projects_{id}_issues_{issue_iid}_todo,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,target.closed_at
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,"return.target.closed_by.avatar_url == ""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80&d=identicon""",daikon.inv.unary.string.OneOfString,(return.target.closed_by.avatar_url),"pm.expect([""https://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80&d=identicon""].includes(return_target_closed_by_avatar_url)).to.be.true",post+projects_{id}_issues_{issue_iid}_todo,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,target.closed_by.avatar_url
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,return.target.closed_by.id == 1,daikon.inv.unary.scalar.OneOfScalar,(return.target.closed_by.id),pm.expect([1].includes(return_target_closed_by_id)).to.be.true,post+projects_{id}_issues_{issue_iid}_todo,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,target.closed_by.id
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,"return.target.closed_by.name == ""Administrator""",daikon.inv.unary.string.OneOfString,(return.target.closed_by.name),"pm.expect([""Administrator""].includes(return_target_closed_by_name)).to.be.true",post+projects_{id}_issues_{issue_iid}_todo,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,target.closed_by.name
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,"return.target.closed_by.state == ""active""",daikon.inv.unary.string.OneOfString,(return.target.closed_by.state),"pm.expect([""active""].includes(return_target_closed_by_state)).to.be.true",post+projects_{id}_issues_{issue_iid}_todo,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,target.closed_by.state
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,"return.target.closed_by.username == ""root""",daikon.inv.unary.string.OneOfString,(return.target.closed_by.username),"pm.expect([""root""].includes(return_target_closed_by_username)).to.be.true",post+projects_{id}_issues_{issue_iid}_todo,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,target.closed_by.username
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,"return.target.closed_by.web_url == ""http://localhost:30000/root""",daikon.inv.unary.string.OneOfString,(return.target.closed_by.web_url),"pm.expect([""http://localhost:30000/root""].includes(return_target_closed_by_web_url)).to.be.true",post+projects_{id}_issues_{issue_iid}_todo,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,target.closed_by.web_url
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,LENGTH(return.target.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.target.created_at),pm.expect(return_target_created_at).to.have.length(24),post+projects_{id}_issues_{issue_iid}_todo,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,target.created_at
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,return.target.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.target.created_at),"pm.expect(return_target_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",post+projects_{id}_issues_{issue_iid}_todo,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,,GitLab Issues API,target.created_at
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,return.target.downvotes == 0,daikon.inv.unary.scalar.OneOfScalar,(return.target.downvotes),pm.expect([0].includes(return_target_downvotes)).to.be.true,post+projects_{id}_issues_{issue_iid}_todo,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,target.downvotes
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,return.target.due_date is a Date. Format: YYYY/MM/DD,daikon.inv.unary.string.dates.IsDateYYYYMMDD,(return.target.due_date),pm.expect(return_target_due_date).to.match(/^(?:1\d{3}|20[01234][0-9]|2050|9999)[-/.](?:0[1-9]|1[012])[-/.](?:0[1-9]|[12][0-9]|3[01])$/),post+projects_{id}_issues_{issue_iid}_todo,1.0,,,"Indicates that the value of a string variable is always a date following the format YYYY/MM/DD or YYYY-MM-DD (the separator can be ""/"" or ""-""). Represented as x is a Date. Format YYYY/MM/DD.",,,GitLab Issues API,target.due_date
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,return.target.has_tasks == false,daikon.inv.unary.scalar.OneOfScalar,(return.target.has_tasks),pm.expect(return_target_has_tasks).to.eql(false),post+projects_{id}_issues_{issue_iid}_todo,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,target.has_tasks
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,return.target.milestone == null,daikon.inv.unary.scalar.OneOfScalar,(return.target.milestone),pm.expect(return_target_milestone).to.be.null,post+projects_{id}_issues_{issue_iid}_todo,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,target.milestone
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,"return.target.moved_to_id == ""5258""",daikon.inv.unary.string.OneOfString,(return.target.moved_to_id),"pm.expect([""5258""].includes(return_target_moved_to_id)).to.be.true",post+projects_{id}_issues_{issue_iid}_todo,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,target.moved_to_id
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,"return.target.state one of { ""closed"", ""opened"" }",daikon.inv.unary.string.OneOfString,(return.target.state),"pm.expect([""closed"", ""opened""].includes(return_target_state)).to.be.true",post+projects_{id}_issues_{issue_iid}_todo,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,target.state
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,LENGTH(return.target.state)==6,daikon.inv.unary.string.FixedLengthString,(return.target.state),pm.expect(return_target_state).to.have.length(6),post+projects_{id}_issues_{issue_iid}_todo,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,target.state
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,LENGTH(return.target.updated_at)==24,daikon.inv.unary.string.FixedLengthString,(return.target.updated_at),pm.expect(return_target_updated_at).to.have.length(24),post+projects_{id}_issues_{issue_iid}_todo,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,target.updated_at
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,return.target.updated_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.target.updated_at),"pm.expect(return_target_updated_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",post+projects_{id}_issues_{issue_iid}_todo,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,,GitLab Issues API,target.updated_at
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,"return.target_type == ""Issue""",daikon.inv.unary.string.OneOfString,(return.target_type),"pm.expect([""Issue""].includes(return_target_type)).to.be.true",post+projects_{id}_issues_{issue_iid}_todo,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,target_type
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,LENGTH(return.target_type)==5,daikon.inv.unary.string.FixedLengthString,(return.target_type),pm.expect(return_target_type).to.have.length(5),post+projects_{id}_issues_{issue_iid}_todo,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,target_type
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,"size(return.target.assignees[]) one of { 0, 1 }",daikon.inv.unary.scalar.OneOfScalar,(size(return.target.assignees[..])),"pm.expect([0, 1, 0].includes(return_target_assignees_size_array)).to.be.true",post+projects_{id}_issues_{issue_iid}_todo,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,target.assignees
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,"size(return.target.labels[]) one of { 0, 1 }",daikon.inv.unary.scalar.OneOfScalar,(size(return.target.labels[..])),"pm.expect([0, 1, 0].includes(return_target_labels_size_array)).to.be.true",post+projects_{id}_issues_{issue_iid}_todo,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,target.labels
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,input.issue_iid > size(return.target.assignees[]),daikon.inv.binary.twoScalar.IntGreaterThan,"(input.issue_iid, size(return.target.assignees[..]))",pm.expect(input_issue_iid).to.be.greaterThan(return_target_assignees_size_array),post+projects_{id}_issues_{issue_iid}_todo,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,,GitLab Issues API,target.assignees
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,input.issue_iid >= size(return.target.labels[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(input.issue_iid, size(return.target.labels[..]))",pm.expect(input_issue_iid).to.be.at.least(return_target_labels_size_array),post+projects_{id}_issues_{issue_iid}_todo,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,target.labels
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,return.author.username is a substring of return.author.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.author.web_url, return.author.username)",pm.expect(return_author_web_url.includes(return_author_username)).to.be.true,post+projects_{id}_issues_{issue_iid}_todo,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,author.web_url
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,return.author.id > size(return.target.assignees[]),daikon.inv.binary.twoScalar.IntGreaterThan,"(return.author.id, size(return.target.assignees[..]))",pm.expect(return_author_id).to.be.greaterThan(return_target_assignees_size_array),post+projects_{id}_issues_{issue_iid}_todo,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,,GitLab Issues API,author.id
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,return.author.id > size(return.target.labels[]),daikon.inv.binary.twoScalar.IntGreaterThan,"(return.author.id, size(return.target.labels[..]))",pm.expect(return_author_id).to.be.greaterThan(return_target_labels_size_array),post+projects_{id}_issues_{issue_iid}_todo,,1.0,,Represents an invariant of > between two long scalars. Prints as x > y.,,,GitLab Issues API,author.id
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,return.project.name is a substring of return.project.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.project.name, return.project.name_with_namespace)",pm.expect(return_project_name_with_namespace.includes(return_project_name)).to.be.true,post+projects_{id}_issues_{issue_iid}_todo,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,project.name
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,return.project.path is a substring of return.project.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.project.path, return.project.path_with_namespace)",pm.expect(return_project_path_with_namespace.includes(return_project_path)).to.be.true,post+projects_{id}_issues_{issue_iid}_todo,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,project.path
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,return.project.path_with_namespace is a substring of return.target.references.full,daikon.inv.binary.twoString.StdString$SubString,"(return.project.path_with_namespace, return.target.references.full)",pm.expect(return_target_references_full.includes(return_project_path_with_namespace)).to.be.true,post+projects_{id}_issues_{issue_iid}_todo,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,project.path_with_namespace
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,return.project.path_with_namespace is a substring of return.target_url,daikon.inv.binary.twoString.StdString$SubString,"(return.project.path_with_namespace, return.target_url)",pm.expect(return_target_url.includes(return_project_path_with_namespace)).to.be.true,post+projects_{id}_issues_{issue_iid}_todo,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,project.path_with_namespace
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,return.target._links.self is a substring of return.target._links.award_emoji,daikon.inv.binary.twoString.StdString$SubString,"(return.target._links.award_emoji, return.target._links.self)",pm.expect(return_target__links_award_emoji.includes(return_target__links_self)).to.be.true,post+projects_{id}_issues_{issue_iid}_todo,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,target._links.award_emoji
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,return.target._links.self is a substring of return.target._links.notes,daikon.inv.binary.twoString.StdString$SubString,"(return.target._links.notes, return.target._links.self)",pm.expect(return_target__links_notes.includes(return_target__links_self)).to.be.true,post+projects_{id}_issues_{issue_iid}_todo,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,target._links.notes
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,return.target._links.project is a substring of return.target._links.self,daikon.inv.binary.twoString.StdString$SubString,"(return.target._links.project, return.target._links.self)",pm.expect(return_target__links_self.includes(return_target__links_project)).to.be.true,post+projects_{id}_issues_{issue_iid}_todo,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,target._links.project
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,return.target.assignee.username is a substring of return.target.assignee.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.target.assignee.web_url, return.target.assignee.username)",pm.expect(return_target_assignee_web_url.includes(return_target_assignee_username)).to.be.true,post+projects_{id}_issues_{issue_iid}_todo,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,target.assignee.web_url
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,return.target.author.username is a substring of return.target.author.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.target.author.web_url, return.target.author.username)",pm.expect(return_target_author_web_url.includes(return_target_author_username)).to.be.true,post+projects_{id}_issues_{issue_iid}_todo,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,target.author.web_url
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,return.target.author.id >= size(return.target.assignees[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.target.author.id, size(return.target.assignees[..]))",pm.expect(return_target_author_id).to.be.at.least(return_target_assignees_size_array),post+projects_{id}_issues_{issue_iid}_todo,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,target.author.id
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,return.target.author.id >= size(return.target.labels[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.target.author.id, size(return.target.labels[..]))",pm.expect(return_target_author_id).to.be.at.least(return_target_labels_size_array),post+projects_{id}_issues_{issue_iid}_todo,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,target.author.id
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,return.target.closed_by.username is a substring of return.target.closed_by.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.target.closed_by.username, return.target.closed_by.web_url)",pm.expect(return_target_closed_by_web_url.includes(return_target_closed_by_username)).to.be.true,post+projects_{id}_issues_{issue_iid}_todo,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,target.closed_by.username
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,return.target.downvotes <= size(return.target.assignees[]),daikon.inv.binary.twoScalar.IntLessEqual,"(return.target.downvotes, size(return.target.assignees[..]))",pm.expect(return_target_downvotes).to.be.lte(return_target_assignees_size_array),post+projects_{id}_issues_{issue_iid}_todo,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,,GitLab Issues API,target.downvotes
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,return.target.downvotes <= size(return.target.labels[]),daikon.inv.binary.twoScalar.IntLessEqual,"(return.target.downvotes, size(return.target.labels[..]))",pm.expect(return_target_downvotes).to.be.lte(return_target_labels_size_array),post+projects_{id}_issues_{issue_iid}_todo,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,,GitLab Issues API,target.downvotes
/projects/{id}/issues/{issue_iid}/todo&/projects/{id}/issues/{issue_iid}/todo&post&201():::EXIT,return.target.references.relative is a substring of return.target.references.full,daikon.inv.binary.twoString.StdString$SubString,"(return.target.references.full, return.target.references.relative)",pm.expect(return_target_references_full.includes(return_target_references_relative)).to.be.true,post+projects_{id}_issues_{issue_iid}_todo,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,target.references.full
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201&assignees():::EXIT,return.username == return.name,daikon.inv.binary.twoString.StringEqual,"(return.username, return.name)",pm.expect(return_username).to.eql(return_name),post+projects_{id}_issues_{issue_iid}_unsubscribe,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,,GitLab Issues API,assignees.name
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201&assignees():::EXIT,LENGTH(return.avatar_url)==81,daikon.inv.unary.string.FixedLengthString,(return.avatar_url),pm.expect(return_avatar_url).to.have.length(81),post+projects_{id}_issues_{issue_iid}_unsubscribe,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,assignees.avatar_url
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201&assignees():::EXIT,return.avatar_url is Url,daikon.inv.unary.string.IsUrl,(return.avatar_url),"pm.expect(return_avatar_url).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",post+projects_{id}_issues_{issue_iid}_unsubscribe,1.0,,,Indicates that the value of a string variable is always a URL. Represented as x is Url.,,,GitLab Issues API,assignees.avatar_url
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201&assignees():::EXIT,"return.state == ""active""",daikon.inv.unary.string.OneOfString,(return.state),"pm.expect([""active""].includes(return_state)).to.be.true",post+projects_{id}_issues_{issue_iid}_unsubscribe,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,assignees.state
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201&assignees():::EXIT,LENGTH(return.state)==6,daikon.inv.unary.string.FixedLengthString,(return.state),pm.expect(return_state).to.have.length(6),post+projects_{id}_issues_{issue_iid}_unsubscribe,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,assignees.state
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201&assignees():::EXIT,return.username is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.username)",pm.expect(return_web_url.includes(return_username)).to.be.true,post+projects_{id}_issues_{issue_iid}_unsubscribe,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,assignees.web_url
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT,input.id == return.project_id,daikon.inv.binary.twoScalar.IntEqual,"(input.id, return.project_id)",pm.expect(input_id).to.eql(return_project_id),post+projects_{id}_issues_{issue_iid}_unsubscribe,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,project_id
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT,input.issue_iid == return.iid,daikon.inv.binary.twoScalar.IntEqual,"(input.issue_iid, return.iid)",pm.expect(input_issue_iid).to.eql(return_iid),post+projects_{id}_issues_{issue_iid}_unsubscribe,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,iid
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT,return.assignee.username == return.assignee.name,daikon.inv.binary.twoString.StringEqual,"(return.assignee.username, return.assignee.name)",pm.expect(return_assignee_username).to.eql(return_assignee_name),post+projects_{id}_issues_{issue_iid}_unsubscribe,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,,GitLab Issues API,assignee.username
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT,return.assignee.state == return.author.state,daikon.inv.binary.twoString.StringEqual,"(return.assignee.state, return.author.state)",pm.expect(return_assignee_state).to.eql(return_author_state),post+projects_{id}_issues_{issue_iid}_unsubscribe,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,,GitLab Issues API,assignee.state
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT,return.downvotes == return.merge_requests_count,daikon.inv.binary.twoScalar.IntEqual,"(return.downvotes, return.merge_requests_count)",pm.expect(return_downvotes).to.eql(return_merge_requests_count),post+projects_{id}_issues_{issue_iid}_unsubscribe,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,downvotes
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT,return.downvotes == return.task_completion_status.count,daikon.inv.binary.twoScalar.IntEqual,"(return.downvotes, return.task_completion_status.count)",pm.expect(return_downvotes).to.eql(return_task_completion_status_count),post+projects_{id}_issues_{issue_iid}_unsubscribe,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,downvotes
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT,return.downvotes == return.task_completion_status.completed_count,daikon.inv.binary.twoScalar.IntEqual,"(return.downvotes, return.task_completion_status.completed_count)",pm.expect(return_downvotes).to.eql(return_task_completion_status_completed_count),post+projects_{id}_issues_{issue_iid}_unsubscribe,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,downvotes
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT,return.downvotes == return.time_stats.time_estimate,daikon.inv.binary.twoScalar.IntEqual,"(return.downvotes, return.time_stats.time_estimate)",pm.expect(return_downvotes).to.eql(return_time_stats_time_estimate),post+projects_{id}_issues_{issue_iid}_unsubscribe,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,downvotes
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT,return.downvotes == return.upvotes,daikon.inv.binary.twoScalar.IntEqual,"(return.downvotes, return.upvotes)",pm.expect(return_downvotes).to.eql(return_upvotes),post+projects_{id}_issues_{issue_iid}_unsubscribe,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,downvotes
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT,return.downvotes == return.user_notes_count,daikon.inv.binary.twoScalar.IntEqual,"(return.downvotes, return.user_notes_count)",pm.expect(return_downvotes).to.eql(return_user_notes_count),post+projects_{id}_issues_{issue_iid}_unsubscribe,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,downvotes
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT,return.has_tasks == return.subscribed,daikon.inv.binary.twoScalar.IntEqual,"(return.has_tasks, return.subscribed)",pm.expect(return_has_tasks).to.eql(return_subscribed),post+projects_{id}_issues_{issue_iid}_unsubscribe,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,has_tasks
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT,return.references.relative == return.references.short,daikon.inv.binary.twoString.StringEqual,"(return.references.relative, return.references.short)",pm.expect(return_references_relative).to.eql(return_references_short),post+projects_{id}_issues_{issue_iid}_unsubscribe,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,,GitLab Issues API,references.relative
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT,LENGTH(return.assignee.avatar_url)==81,daikon.inv.unary.string.FixedLengthString,(return.assignee.avatar_url),pm.expect(return_assignee_avatar_url).to.have.length(81),post+projects_{id}_issues_{issue_iid}_unsubscribe,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,assignee.avatar_url
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT,return.assignee.avatar_url is Url,daikon.inv.unary.string.IsUrl,(return.assignee.avatar_url),"pm.expect(return_assignee_avatar_url).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",post+projects_{id}_issues_{issue_iid}_unsubscribe,1.0,,,Indicates that the value of a string variable is always a URL. Represented as x is Url.,,,GitLab Issues API,assignee.avatar_url
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT,"return.assignee.state == ""active""",daikon.inv.unary.string.OneOfString,(return.assignee.state),"pm.expect([""active""].includes(return_assignee_state)).to.be.true",post+projects_{id}_issues_{issue_iid}_unsubscribe,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,assignee.state
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT,LENGTH(return.assignee.state)==6,daikon.inv.unary.string.FixedLengthString,(return.assignee.state),pm.expect(return_assignee_state).to.have.length(6),post+projects_{id}_issues_{issue_iid}_unsubscribe,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,assignee.state
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT,LENGTH(return.author.avatar_url)==81,daikon.inv.unary.string.FixedLengthString,(return.author.avatar_url),pm.expect(return_author_avatar_url).to.have.length(81),post+projects_{id}_issues_{issue_iid}_unsubscribe,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,author.avatar_url
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT,return.author.avatar_url is Url,daikon.inv.unary.string.IsUrl,(return.author.avatar_url),"pm.expect(return_author_avatar_url).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",post+projects_{id}_issues_{issue_iid}_unsubscribe,1.0,,,Indicates that the value of a string variable is always a URL. Represented as x is Url.,,,GitLab Issues API,author.avatar_url
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT,"return.author.state == ""active""",daikon.inv.unary.string.OneOfString,(return.author.state),"pm.expect([""active""].includes(return_author_state)).to.be.true",post+projects_{id}_issues_{issue_iid}_unsubscribe,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,author.state
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT,LENGTH(return.author.state)==6,daikon.inv.unary.string.FixedLengthString,(return.author.state),pm.expect(return_author_state).to.have.length(6),post+projects_{id}_issues_{issue_iid}_unsubscribe,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,author.state
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT,return.closed_by == null,daikon.inv.unary.scalar.OneOfScalar,(return.closed_by),pm.expect(return_closed_by).to.be.null,post+projects_{id}_issues_{issue_iid}_unsubscribe,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,closed_by
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT,LENGTH(return.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.created_at),pm.expect(return_created_at).to.have.length(24),post+projects_{id}_issues_{issue_iid}_unsubscribe,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,created_at
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT,return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.created_at),"pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",post+projects_{id}_issues_{issue_iid}_unsubscribe,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,,GitLab Issues API,created_at
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT,return.downvotes == 0,daikon.inv.unary.scalar.OneOfScalar,(return.downvotes),pm.expect([0].includes(return_downvotes)).to.be.true,post+projects_{id}_issues_{issue_iid}_unsubscribe,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,downvotes
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT,return.due_date is a Date. Format: YYYY/MM/DD,daikon.inv.unary.string.dates.IsDateYYYYMMDD,(return.due_date),pm.expect(return_due_date).to.match(/^(?:1\d{3}|20[01234][0-9]|2050|9999)[-/.](?:0[1-9]|1[012])[-/.](?:0[1-9]|[12][0-9]|3[01])$/),post+projects_{id}_issues_{issue_iid}_unsubscribe,1.0,,,"Indicates that the value of a string variable is always a date following the format YYYY/MM/DD or YYYY-MM-DD (the separator can be ""/"" or ""-""). Represented as x is a Date. Format YYYY/MM/DD.",,,GitLab Issues API,due_date
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT,return.has_tasks == false,daikon.inv.unary.scalar.OneOfScalar,(return.has_tasks),pm.expect(return_has_tasks).to.eql(false),post+projects_{id}_issues_{issue_iid}_unsubscribe,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,has_tasks
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT,return.milestone == null,daikon.inv.unary.scalar.OneOfScalar,(return.milestone),pm.expect(return_milestone).to.be.null,post+projects_{id}_issues_{issue_iid}_unsubscribe,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,milestone
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT,"return.state == ""opened""",daikon.inv.unary.string.OneOfString,(return.state),"pm.expect([""opened""].includes(return_state)).to.be.true",post+projects_{id}_issues_{issue_iid}_unsubscribe,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,state
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT,LENGTH(return.state)==6,daikon.inv.unary.string.FixedLengthString,(return.state),pm.expect(return_state).to.have.length(6),post+projects_{id}_issues_{issue_iid}_unsubscribe,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,state
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT,"return.time_stats.total_time_spent one of { 0, 8, 60 }",daikon.inv.unary.scalar.OneOfScalar,(return.time_stats.total_time_spent),"pm.expect([0, 8, 60].includes(return_time_stats_total_time_spent)).to.be.true",post+projects_{id}_issues_{issue_iid}_unsubscribe,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,time_stats.total_time_spent
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT,"return.time_stats.human_total_time_spent one of { ""1m"", ""8s"" }",daikon.inv.unary.string.OneOfString,(return.time_stats.human_total_time_spent),"pm.expect([""1m"", ""8s""].includes(return_time_stats_human_total_time_spent)).to.be.true",post+projects_{id}_issues_{issue_iid}_unsubscribe,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,time_stats.human_total_time_spent
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT,LENGTH(return.time_stats.human_total_time_spent)==2,daikon.inv.unary.string.FixedLengthString,(return.time_stats.human_total_time_spent),pm.expect(return_time_stats_human_total_time_spent).to.have.length(2),post+projects_{id}_issues_{issue_iid}_unsubscribe,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,time_stats.human_total_time_spent
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT,LENGTH(return.updated_at)==24,daikon.inv.unary.string.FixedLengthString,(return.updated_at),pm.expect(return_updated_at).to.have.length(24),post+projects_{id}_issues_{issue_iid}_unsubscribe,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,updated_at
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT,return.updated_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.updated_at),"pm.expect(return_updated_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",post+projects_{id}_issues_{issue_iid}_unsubscribe,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,,GitLab Issues API,updated_at
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT,"size(return.assignees[]) one of { 0, 1 }",daikon.inv.unary.scalar.OneOfScalar,(size(return.assignees[..])),"pm.expect([0, 1, 0].includes(return_assignees_size_array)).to.be.true",post+projects_{id}_issues_{issue_iid}_unsubscribe,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,assignees
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT,input.issue_iid > return.time_stats.total_time_spent,daikon.inv.binary.twoScalar.IntGreaterThan,"(input.issue_iid, return.time_stats.total_time_spent)",pm.expect(input_issue_iid).to.be.greaterThan(return_time_stats_total_time_spent),post+projects_{id}_issues_{issue_iid}_unsubscribe,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,,GitLab Issues API,time_stats.total_time_spent
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT,input.issue_iid > size(return.assignees[]),daikon.inv.binary.twoScalar.IntGreaterThan,"(input.issue_iid, size(return.assignees[..]))",pm.expect(input_issue_iid).to.be.greaterThan(return_assignees_size_array),post+projects_{id}_issues_{issue_iid}_unsubscribe,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,,GitLab Issues API,assignees
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT,return._links.self is a substring of return._links.award_emoji,daikon.inv.binary.twoString.StdString$SubString,"(return._links.award_emoji, return._links.self)",pm.expect(return__links_award_emoji.includes(return__links_self)).to.be.true,post+projects_{id}_issues_{issue_iid}_unsubscribe,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,_links.self
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT,return._links.self is a substring of return._links.notes,daikon.inv.binary.twoString.StdString$SubString,"(return._links.notes, return._links.self)",pm.expect(return__links_notes.includes(return__links_self)).to.be.true,post+projects_{id}_issues_{issue_iid}_unsubscribe,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,_links.self
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT,return._links.project is a substring of return._links.self,daikon.inv.binary.twoString.StdString$SubString,"(return._links.project, return._links.self)",pm.expect(return__links_self.includes(return__links_project)).to.be.true,post+projects_{id}_issues_{issue_iid}_unsubscribe,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,_links.self
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT,return.assignee.username is a substring of return.assignee.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.assignee.web_url, return.assignee.username)",pm.expect(return_assignee_web_url.includes(return_assignee_username)).to.be.true,post+projects_{id}_issues_{issue_iid}_unsubscribe,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,assignee.web_url
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT,return.author.username is a substring of return.author.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.author.web_url, return.author.username)",pm.expect(return_author_web_url.includes(return_author_username)).to.be.true,post+projects_{id}_issues_{issue_iid}_unsubscribe,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,author.web_url
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT,return.author.id < return.id,daikon.inv.binary.twoScalar.IntLessThan,"(return.author.id, return.id)",pm.expect(return_author_id).to.be.lessThan(return_id),post+projects_{id}_issues_{issue_iid}_unsubscribe,1.0,,,Represents an invariant of < between two long scalars. Prints as x < y.,,,GitLab Issues API,author.id
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT,return.author.id >= size(return.assignees[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.author.id, size(return.assignees[..]))",pm.expect(return_author_id).to.be.at.least(return_assignees_size_array),post+projects_{id}_issues_{issue_iid}_unsubscribe,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,author.id
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT,return.downvotes <= return.time_stats.total_time_spent,daikon.inv.binary.twoScalar.IntLessEqual,"(return.downvotes, return.time_stats.total_time_spent)",pm.expect(return_downvotes).to.be.lte(return_time_stats_total_time_spent),post+projects_{id}_issues_{issue_iid}_unsubscribe,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,,GitLab Issues API,downvotes
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT,return.downvotes <= size(return.assignees[]),daikon.inv.binary.twoScalar.IntLessEqual,"(return.downvotes, size(return.assignees[..]))",pm.expect(return_downvotes).to.be.lte(return_assignees_size_array),post+projects_{id}_issues_{issue_iid}_unsubscribe,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,,GitLab Issues API,downvotes
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT,return.id > return.time_stats.total_time_spent,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.id, return.time_stats.total_time_spent)",pm.expect(return_id).to.be.greaterThan(return_time_stats_total_time_spent),post+projects_{id}_issues_{issue_iid}_unsubscribe,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,,GitLab Issues API,id
/projects/{id}/issues/{issue_iid}/unsubscribe&/projects/{id}/issues/{issue_iid}/unsubscribe&post&201():::EXIT,return.references.relative is a substring of return.references.full,daikon.inv.binary.twoString.StdString$SubString,"(return.references.full, return.references.relative)",pm.expect(return_references_full.includes(return_references_relative)).to.be.true,post+projects_{id}_issues_{issue_iid}_unsubscribe,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,references.full
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200&assignees():::EXIT,LENGTH(return.avatar_url)==81,daikon.inv.unary.string.FixedLengthString,(return.avatar_url),pm.expect(return_avatar_url).to.have.length(81),put+projects_{id}_issues_{issue_iid},,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,assignees.avatar_url
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200&assignees():::EXIT,return.avatar_url is Url,daikon.inv.unary.string.IsUrl,(return.avatar_url),"pm.expect(return_avatar_url).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",put+projects_{id}_issues_{issue_iid},1.0,,,Indicates that the value of a string variable is always a URL. Represented as x is Url.,,,GitLab Issues API,assignees.avatar_url
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200&assignees():::EXIT,"return.state == ""active""",daikon.inv.unary.string.OneOfString,(return.state),"pm.expect([""active""].includes(return_state)).to.be.true",put+projects_{id}_issues_{issue_iid},1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,assignees.state
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200&assignees():::EXIT,LENGTH(return.state)==6,daikon.inv.unary.string.FixedLengthString,(return.state),pm.expect(return_state).to.have.length(6),put+projects_{id}_issues_{issue_iid},1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,assignees.state
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200&assignees():::EXIT,return.username is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.username)",pm.expect(return_web_url.includes(return_username)).to.be.true,put+projects_{id}_issues_{issue_iid},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,assignees.web_url
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,input.description == return.description,daikon.inv.binary.twoString.StringEqual,"(input.description, return.description)",pm.expect(input_description).to.eql(return_description),put+projects_{id}_issues_{issue_iid},1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,,GitLab Issues API,description
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,input.discussion_locked == return.discussion_locked,daikon.inv.binary.twoScalar.IntEqual,"(input.discussion_locked, return.discussion_locked)",pm.expect(input_discussion_locked).to.eql(return_discussion_locked),put+projects_{id}_issues_{issue_iid},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,discussion_locked
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,input.due_date == return.due_date,daikon.inv.binary.twoString.StringEqual,"(input.due_date, return.due_date)",pm.expect(input_due_date).to.eql(return_due_date),put+projects_{id}_issues_{issue_iid},,1.0,,Represents an invariant of == between two String scalars. Prints as x == y.,,,GitLab Issues API,due_date
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,input.id == return.project_id,daikon.inv.binary.twoScalar.IntEqual,"(input.id, return.project_id)",pm.expect(input_id).to.eql(return_project_id),put+projects_{id}_issues_{issue_iid},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,project_id
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,input.issue_iid == return.iid,daikon.inv.binary.twoScalar.IntEqual,"(input.issue_iid, return.iid)",pm.expect(input_issue_iid).to.eql(return_iid),put+projects_{id}_issues_{issue_iid},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,iid
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,input.title == return.title,daikon.inv.binary.twoString.StringEqual,"(input.title, return.title)",pm.expect(input_title).to.eql(return_title),put+projects_{id}_issues_{issue_iid},1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,,GitLab Issues API,title
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,return.assignee.state == return.author.state,daikon.inv.binary.twoString.StringEqual,"(return.assignee.state, return.author.state)",pm.expect(return_assignee_state).to.eql(return_author_state),put+projects_{id}_issues_{issue_iid},1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,,GitLab Issues API,assignee.state
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,return.assignee.state == return.closed_by.state,daikon.inv.binary.twoString.StringEqual,"(return.assignee.state, return.closed_by.state)",pm.expect(return_assignee_state).to.eql(return_closed_by_state),put+projects_{id}_issues_{issue_iid},1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,,GitLab Issues API,assignee.state
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,return.author.state == return.closed_by.state,daikon.inv.binary.twoString.StringEqual,"(return.author.state, return.closed_by.state)",pm.expect(return_author_state).to.eql(return_closed_by_state),put+projects_{id}_issues_{issue_iid},1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,,GitLab Issues API,author.state
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,return.downvotes == return.merge_requests_count,daikon.inv.binary.twoScalar.IntEqual,"(return.downvotes, return.merge_requests_count)",pm.expect(return_downvotes).to.eql(return_merge_requests_count),put+projects_{id}_issues_{issue_iid},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,downvotes
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,return.downvotes == return.task_completion_status.count,daikon.inv.binary.twoScalar.IntEqual,"(return.downvotes, return.task_completion_status.count)",pm.expect(return_downvotes).to.eql(return_task_completion_status_count),put+projects_{id}_issues_{issue_iid},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,downvotes
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,return.downvotes == return.task_completion_status.completed_count,daikon.inv.binary.twoScalar.IntEqual,"(return.downvotes, return.task_completion_status.completed_count)",pm.expect(return_downvotes).to.eql(return_task_completion_status_completed_count),put+projects_{id}_issues_{issue_iid},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,downvotes
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,return.downvotes == return.upvotes,daikon.inv.binary.twoScalar.IntEqual,"(return.downvotes, return.upvotes)",pm.expect(return_downvotes).to.eql(return_upvotes),put+projects_{id}_issues_{issue_iid},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,downvotes
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,return.downvotes == return.user_notes_count,daikon.inv.binary.twoScalar.IntEqual,"(return.downvotes, return.user_notes_count)",pm.expect(return_downvotes).to.eql(return_user_notes_count),put+projects_{id}_issues_{issue_iid},1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,,GitLab Issues API,downvotes
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,return.references.relative == return.references.short,daikon.inv.binary.twoString.StringEqual,"(return.references.relative, return.references.short)",pm.expect(return_references_relative).to.eql(return_references_short),put+projects_{id}_issues_{issue_iid},1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,,GitLab Issues API,references.relative
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,LENGTH(return.assignee.avatar_url)==81,daikon.inv.unary.string.FixedLengthString,(return.assignee.avatar_url),pm.expect(return_assignee_avatar_url).to.have.length(81),put+projects_{id}_issues_{issue_iid},,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,assignee.avatar_url
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,return.assignee.avatar_url is Url,daikon.inv.unary.string.IsUrl,(return.assignee.avatar_url),"pm.expect(return_assignee_avatar_url).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",put+projects_{id}_issues_{issue_iid},1.0,,,Indicates that the value of a string variable is always a URL. Represented as x is Url.,,,GitLab Issues API,assignee.avatar_url
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,"return.assignee.state == ""active""",daikon.inv.unary.string.OneOfString,(return.assignee.state),"pm.expect([""active""].includes(return_assignee_state)).to.be.true",put+projects_{id}_issues_{issue_iid},,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,assignee.state
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,LENGTH(return.assignee.state)==6,daikon.inv.unary.string.FixedLengthString,(return.assignee.state),pm.expect(return_assignee_state).to.have.length(6),put+projects_{id}_issues_{issue_iid},,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,assignee.state
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,LENGTH(return.author.avatar_url)==81,daikon.inv.unary.string.FixedLengthString,(return.author.avatar_url),pm.expect(return_author_avatar_url).to.have.length(81),put+projects_{id}_issues_{issue_iid},,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,author.avatar_url
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,return.author.avatar_url is Url,daikon.inv.unary.string.IsUrl,(return.author.avatar_url),"pm.expect(return_author_avatar_url).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",put+projects_{id}_issues_{issue_iid},1.0,,,Indicates that the value of a string variable is always a URL. Represented as x is Url.,,,GitLab Issues API,author.avatar_url
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,"return.author.state == ""active""",daikon.inv.unary.string.OneOfString,(return.author.state),"pm.expect([""active""].includes(return_author_state)).to.be.true",put+projects_{id}_issues_{issue_iid},1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,author.state
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,LENGTH(return.author.state)==6,daikon.inv.unary.string.FixedLengthString,(return.author.state),pm.expect(return_author_state).to.have.length(6),put+projects_{id}_issues_{issue_iid},1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,author.state
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,return.author.id >= 1,daikon.inv.unary.scalar.LowerBound,(return.author.id),pm.expect(return_author_id).to.be.at.least(1),put+projects_{id}_issues_{issue_iid},1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,,GitLab Issues API,author.id
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,LENGTH(return.closed_at)==24,daikon.inv.unary.string.FixedLengthString,(return.closed_at),pm.expect(return_closed_at).to.have.length(24),put+projects_{id}_issues_{issue_iid},1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,closed_at
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,return.closed_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.closed_at),"pm.expect(return_closed_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",put+projects_{id}_issues_{issue_iid},1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,,GitLab Issues API,closed_at
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,LENGTH(return.closed_by.avatar_url)==81,daikon.inv.unary.string.FixedLengthString,(return.closed_by.avatar_url),pm.expect(return_closed_by_avatar_url).to.have.length(81),put+projects_{id}_issues_{issue_iid},,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,closed_by.avatar_url
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,return.closed_by.avatar_url is Url,daikon.inv.unary.string.IsUrl,(return.closed_by.avatar_url),"pm.expect(return_closed_by_avatar_url).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",put+projects_{id}_issues_{issue_iid},1.0,,,Indicates that the value of a string variable is always a URL. Represented as x is Url.,,,GitLab Issues API,closed_by.avatar_url
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,return.closed_by.id >= 1,daikon.inv.unary.scalar.LowerBound,(return.closed_by.id),pm.expect(return_closed_by_id).to.be.at.least(1),put+projects_{id}_issues_{issue_iid},1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,,GitLab Issues API,closed_by.id
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,"return.closed_by.state == ""active""",daikon.inv.unary.string.OneOfString,(return.closed_by.state),"pm.expect([""active""].includes(return_closed_by_state)).to.be.true",put+projects_{id}_issues_{issue_iid},,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,closed_by.state
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,LENGTH(return.closed_by.state)==6,daikon.inv.unary.string.FixedLengthString,(return.closed_by.state),pm.expect(return_closed_by_state).to.have.length(6),put+projects_{id}_issues_{issue_iid},,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,closed_by.state
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,LENGTH(return.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.created_at),pm.expect(return_created_at).to.have.length(24),put+projects_{id}_issues_{issue_iid},1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,created_at
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.created_at),"pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",put+projects_{id}_issues_{issue_iid},1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,,GitLab Issues API,created_at
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,return.downvotes == 0,daikon.inv.unary.scalar.OneOfScalar,(return.downvotes),pm.expect([0].includes(return_downvotes)).to.be.true,put+projects_{id}_issues_{issue_iid},1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,downvotes
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,return.due_date is a Date. Format: YYYY/MM/DD,daikon.inv.unary.string.dates.IsDateYYYYMMDD,(return.due_date),pm.expect(return_due_date).to.match(/^(?:1\d{3}|20[01234][0-9]|2050|9999)[-/.](?:0[1-9]|1[012])[-/.](?:0[1-9]|[12][0-9]|3[01])$/),put+projects_{id}_issues_{issue_iid},1.0,,,"Indicates that the value of a string variable is always a date following the format YYYY/MM/DD or YYYY-MM-DD (the separator can be ""/"" or ""-""). Represented as x is a Date. Format YYYY/MM/DD.",,,GitLab Issues API,due_date
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,return.has_tasks == false,daikon.inv.unary.scalar.OneOfScalar,(return.has_tasks),pm.expect(return_has_tasks).to.eql(false),put+projects_{id}_issues_{issue_iid},1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,has_tasks
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,return.milestone == null,daikon.inv.unary.scalar.OneOfScalar,(return.milestone),pm.expect(return_milestone).to.be.null,put+projects_{id}_issues_{issue_iid},1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,milestone
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,"return.state one of { ""closed"", ""opened"" }",daikon.inv.unary.string.OneOfString,(return.state),"pm.expect([""closed"", ""opened""].includes(return_state)).to.be.true",put+projects_{id}_issues_{issue_iid},1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,state
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,LENGTH(return.state)==6,daikon.inv.unary.string.FixedLengthString,(return.state),pm.expect(return_state).to.have.length(6),put+projects_{id}_issues_{issue_iid},1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,state
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,"return.time_stats.time_estimate one of { 0, 180, 21600 }",daikon.inv.unary.scalar.OneOfScalar,(return.time_stats.time_estimate),"pm.expect([0, 180, 21600].includes(return_time_stats_time_estimate)).to.be.true",put+projects_{id}_issues_{issue_iid},,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,time_stats.time_estimate
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,"return.time_stats.total_time_spent one of { 0, 3, 2045 }",daikon.inv.unary.scalar.OneOfScalar,(return.time_stats.total_time_spent),"pm.expect([0, 3, 2045].includes(return_time_stats_total_time_spent)).to.be.true",put+projects_{id}_issues_{issue_iid},,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,time_stats.total_time_spent
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,"return.time_stats.human_time_estimate one of { ""3m"", ""6h"" }",daikon.inv.unary.string.OneOfString,(return.time_stats.human_time_estimate),"pm.expect([""3m"", ""6h""].includes(return_time_stats_human_time_estimate)).to.be.true",put+projects_{id}_issues_{issue_iid},,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,time_stats.human_time_estimate
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,LENGTH(return.time_stats.human_time_estimate)==2,daikon.inv.unary.string.FixedLengthString,(return.time_stats.human_time_estimate),pm.expect(return_time_stats_human_time_estimate).to.have.length(2),put+projects_{id}_issues_{issue_iid},,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,time_stats.human_time_estimate
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,"return.time_stats.human_total_time_spent one of { ""34m 5s"", ""3s"" }",daikon.inv.unary.string.OneOfString,(return.time_stats.human_total_time_spent),"pm.expect([""34m 5s"", ""3s""].includes(return_time_stats_human_total_time_spent)).to.be.true",put+projects_{id}_issues_{issue_iid},,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,time_stats.human_total_time_spent
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,LENGTH(return.updated_at)==24,daikon.inv.unary.string.FixedLengthString,(return.updated_at),pm.expect(return_updated_at).to.have.length(24),put+projects_{id}_issues_{issue_iid},1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,,GitLab Issues API,updated_at
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,return.updated_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.updated_at),"pm.expect(return_updated_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",put+projects_{id}_issues_{issue_iid},1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,,GitLab Issues API,updated_at
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,"size(return.assignees[]) one of { 0, 1 }",daikon.inv.unary.scalar.OneOfScalar,(size(return.assignees[..])),"pm.expect([0, 1, 0].includes(return_assignees_size_array)).to.be.true",put+projects_{id}_issues_{issue_iid},1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,,GitLab Issues API,assignees
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,input.assignee_ids[] elements > return.time_stats.total_time_spent,daikon.inv.binary.sequenceScalar.SeqIntGreaterThan,"(input.assignee_ids[..], return.time_stats.total_time_spent)",pm.expect(input_assignee_ids_array.every(element => element > return_time_stats_total_time_spent)).to.be.true,put+projects_{id}_issues_{issue_iid},,1.0,,Represents an invariant between a long scalar and a a sequence of long values. Prints as x[] elements> y where x is a long sequence and y is a long scalar,,,GitLab Issues API,time_stats.total_time_spent
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,input.assignee_ids[] elements >= size(return.assignees[]),daikon.inv.binary.sequenceScalar.SeqIntGreaterEqual,"(input.assignee_ids[..], size(return.assignees[..]))",pm.expect(input_assignee_ids_array.every(element => element >= return_assignees_size_array)).to.be.true,put+projects_{id}_issues_{issue_iid},,1.0,,Represents an invariant between a long scalar and a a sequence of long values. Prints as x[] elements> y where x is a long sequence and y is a long scalar,,,GitLab Issues API,assignees
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,input.issue_iid >= size(return.assignees[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(input.issue_iid, size(return.assignees[..]))",pm.expect(input_issue_iid).to.be.at.least(return_assignees_size_array),put+projects_{id}_issues_{issue_iid},1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,assignees
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,input.milestone_id > return.author.id,daikon.inv.binary.twoScalar.IntGreaterThan,"(input.milestone_id, return.author.id)",pm.expect(input_milestone_id).to.be.greaterThan(return_author_id),put+projects_{id}_issues_{issue_iid},,1.0,,Represents an invariant of > between two long scalars. Prints as x > y.,,,GitLab Issues API,author.id
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,return._links.self is a substring of return._links.award_emoji,daikon.inv.binary.twoString.StdString$SubString,"(return._links.award_emoji, return._links.self)",pm.expect(return__links_award_emoji.includes(return__links_self)).to.be.true,put+projects_{id}_issues_{issue_iid},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,_links.self
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,return._links.self is a substring of return._links.notes,daikon.inv.binary.twoString.StdString$SubString,"(return._links.notes, return._links.self)",pm.expect(return__links_notes.includes(return__links_self)).to.be.true,put+projects_{id}_issues_{issue_iid},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,_links.self
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,return._links.project is a substring of return._links.self,daikon.inv.binary.twoString.StdString$SubString,"(return._links.project, return._links.self)",pm.expect(return__links_self.includes(return__links_project)).to.be.true,put+projects_{id}_issues_{issue_iid},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,_links.self
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,return.assignee.username is a substring of return.assignee.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.assignee.web_url, return.assignee.username)",pm.expect(return_assignee_web_url.includes(return_assignee_username)).to.be.true,put+projects_{id}_issues_{issue_iid},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,assignee.web_url
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,return.assignee.id >= size(return.assignees[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.assignee.id, size(return.assignees[..]))",pm.expect(return_assignee_id).to.be.at.least(return_assignees_size_array),put+projects_{id}_issues_{issue_iid},1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,assignee.id
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,return.author.username is a substring of return.author.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.author.web_url, return.author.username)",pm.expect(return_author_web_url.includes(return_author_username)).to.be.true,put+projects_{id}_issues_{issue_iid},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,author.web_url
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,return.author.id < return.id,daikon.inv.binary.twoScalar.IntLessThan,"(return.author.id, return.id)",pm.expect(return_author_id).to.be.lessThan(return_id),put+projects_{id}_issues_{issue_iid},,1.0,,Represents an invariant of < between two long scalars. Prints as x < y.,,,GitLab Issues API,author.id
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,return.author.id >= size(return.assignees[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.author.id, size(return.assignees[..]))",pm.expect(return_author_id).to.be.at.least(return_assignees_size_array),put+projects_{id}_issues_{issue_iid},1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,author.id
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,return.closed_by.id >= size(return.assignees[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.closed_by.id, size(return.assignees[..]))",pm.expect(return_closed_by_id).to.be.at.least(return_assignees_size_array),put+projects_{id}_issues_{issue_iid},1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,closed_by.id
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,return.closed_by.username is a substring of return.closed_by.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.closed_by.username, return.closed_by.web_url)",pm.expect(return_closed_by_web_url.includes(return_closed_by_username)).to.be.true,put+projects_{id}_issues_{issue_iid},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,closed_by.username
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,return.downvotes <= return.time_stats.time_estimate,daikon.inv.binary.twoScalar.IntLessEqual,"(return.downvotes, return.time_stats.time_estimate)",pm.expect(return_downvotes).to.be.lte(return_time_stats_time_estimate),put+projects_{id}_issues_{issue_iid},1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,,GitLab Issues API,downvotes
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,return.downvotes <= return.time_stats.total_time_spent,daikon.inv.binary.twoScalar.IntLessEqual,"(return.downvotes, return.time_stats.total_time_spent)",pm.expect(return_downvotes).to.be.lte(return_time_stats_total_time_spent),put+projects_{id}_issues_{issue_iid},1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,,GitLab Issues API,downvotes
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,return.downvotes <= size(return.assignees[]),daikon.inv.binary.twoScalar.IntLessEqual,"(return.downvotes, size(return.assignees[..]))",pm.expect(return_downvotes).to.be.lte(return_assignees_size_array),put+projects_{id}_issues_{issue_iid},1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,,GitLab Issues API,downvotes
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,return.references.relative is a substring of return.references.full,daikon.inv.binary.twoString.StdString$SubString,"(return.references.full, return.references.relative)",pm.expect(return_references_full.includes(return_references_relative)).to.be.true,put+projects_{id}_issues_{issue_iid},1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,,GitLab Issues API,references.full
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,return.time_stats.total_time_spent < input.assignee_ids[return.downvotes],daikon.inv.binary.twoScalar.IntLessThan,"(return.time_stats.total_time_spent, input.assignee_ids[return.downvotes])",pm.expect(return_time_stats_total_time_spent).to.be.lessThan(input_assignee_ids_return_downvotes),put+projects_{id}_issues_{issue_iid},1.0,,,Represents an invariant of < between two long scalars. Prints as x < y.,,,GitLab Issues API,time_stats.total_time_spent
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,size(input.assignee_ids[]) >= size(return.assignees[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(size(input.assignee_ids[..]), size(return.assignees[..]))",pm.expect(input_assignee_ids_size_array).to.be.at.least(return_assignees_size_array),put+projects_{id}_issues_{issue_iid},1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,,GitLab Issues API,assignees
/projects/{id}/issues/{issue_iid}&/projects/{id}/issues/{issue_iid}&put&200():::EXIT,size(return.assignees[]) <= input.assignee_ids[return.downvotes],daikon.inv.binary.twoScalar.IntLessEqual,"(size(return.assignees[..]), input.assignee_ids[return.downvotes])",pm.expect(return_assignees_size_array).to.be.lte(input_assignee_ids_return_downvotes),put+projects_{id}_issues_{issue_iid},1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,,GitLab Issues API,assignees
/projects&/projects&get&200%array():::EXIT,input.id_after > size(return.array[]),daikon.inv.binary.twoScalar.IntGreaterThan,"(input.id_after, size(return.array[..]))",pm.expect(input_id_after).to.be.greaterThan(return_array_size_array),get+projects,,1.0,,Represents an invariant of > between two long scalars. Prints as x > y.,,text,GitLab Issues API,array
/projects&/projects&get&200&shared_with_groups():::EXIT,"return.group_id one of { 176, 1070 }",daikon.inv.unary.scalar.OneOfScalar,(return.group_id),"pm.expect([176, 1070, 0].includes(return_group_id)).to.be.true",get+projects,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Issues API,shared_with_groups.group_id
/projects&/projects&get&200&shared_with_groups():::EXIT,"return.group_name one of { ""effortlessly"", ""myjane"" }",daikon.inv.unary.string.OneOfString,(return.group_name),"pm.expect([""effortlessly"", ""myjane""].includes(return_group_name)).to.be.true",get+projects,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Issues API,shared_with_groups.group_name
/projects&/projects&get&200&shared_with_groups():::EXIT,"return.group_full_path one of { ""myjane"", ""salubriousness"" }",daikon.inv.unary.string.OneOfString,(return.group_full_path),"pm.expect([""myjane"", ""salubriousness""].includes(return_group_full_path)).to.be.true",get+projects,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Issues API,shared_with_groups.group_full_path
/projects&/projects&get&200&shared_with_groups():::EXIT,"return.group_access_level one of { 20, 30 }",daikon.inv.unary.scalar.OneOfScalar,(return.group_access_level),"pm.expect([20, 30, 0].includes(return_group_access_level)).to.be.true",get+projects,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Issues API,shared_with_groups.group_access_level
/projects&/projects&get&200():::EXIT,input.archived == return.archived,daikon.inv.binary.twoScalar.IntEqual,"(input.archived, return.archived)",pm.expect(input_archived).to.eql(return_archived),get+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Issues API,archived
/projects&/projects&get&200():::EXIT,input.simple == return.service_desk_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.simple, return.service_desk_enabled)",pm.expect(input_simple).to.eql(return_service_desk_enabled),get+projects,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Issues API,service_desk_enabled
/projects&/projects&get&200():::EXIT,input.visibility == return.visibility,daikon.inv.binary.twoString.StringEqual,"(input.visibility, return.visibility)",pm.expect(input_visibility).to.eql(return_visibility),get+projects,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,text,GitLab Issues API,visibility
/projects&/projects&get&200():::EXIT,return.owner.name == return.namespace.name,daikon.inv.binary.twoString.StringEqual,"(return.owner.name, return.namespace.name)",pm.expect(return_owner_name).to.eql(return_namespace_name),get+projects,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,text,GitLab Issues API,owner.name
/projects&/projects&get&200():::EXIT,return.permissions.project_access.access_level == return.permissions.group_access.access_level,daikon.inv.binary.twoScalar.IntEqual,"(return.permissions.project_access.access_level, return.permissions.group_access.access_level)",pm.expect(return_permissions_project_access_access_level).to.eql(return_permissions_group_access_access_level),get+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Issues API,permissions.project_access.access_level
/projects&/projects&get&200():::EXIT,return.permissions.project_access.notification_level == return.permissions.group_access.notification_level,daikon.inv.binary.twoScalar.IntEqual,"(return.permissions.project_access.notification_level, return.permissions.group_access.notification_level)",pm.expect(return_permissions_project_access_notification_level).to.eql(return_permissions_group_access_notification_level),get+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Issues API,permissions.project_access.notification_level
/projects&/projects&get&200():::EXIT,return.statistics.lfs_objects_size == return.statistics.job_artifacts_size,daikon.inv.binary.twoScalar.IntEqual,"(return.statistics.lfs_objects_size, return.statistics.job_artifacts_size)",pm.expect(return_statistics_lfs_objects_size).to.eql(return_statistics_job_artifacts_size),get+projects,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Issues API,statistics.job_artifacts_size
/projects&/projects&get&200():::EXIT,return.statistics.lfs_objects_size == return.statistics.packages_size,daikon.inv.binary.twoScalar.IntEqual,"(return.statistics.lfs_objects_size, return.statistics.packages_size)",pm.expect(return_statistics_lfs_objects_size).to.eql(return_statistics_packages_size),get+projects,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Issues API,statistics.lfs_objects_size
/projects&/projects&get&200():::EXIT,return.statistics.lfs_objects_size == return.statistics.snippets_size,daikon.inv.binary.twoScalar.IntEqual,"(return.statistics.lfs_objects_size, return.statistics.snippets_size)",pm.expect(return_statistics_lfs_objects_size).to.eql(return_statistics_snippets_size),get+projects,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Issues API,statistics.lfs_objects_size
/projects&/projects&get&200():::EXIT,"return.visibility one of { ""internal"", ""private"", ""public"" }",daikon.inv.unary.string.OneOfString,(return.visibility),"pm.expect([""internal"", ""private"", ""public""].includes(return_visibility)).to.be.true",get+projects,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Issues API,visibility
/projects&/projects&get&200():::EXIT,return.owner.id >= 1,daikon.inv.unary.scalar.LowerBound,(return.owner.id),pm.expect(return_owner_id).to.be.at.least(1),get+projects,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,text,GitLab Issues API,owner.id
/projects&/projects&get&200():::EXIT,return.open_issues_count >= 0,daikon.inv.unary.scalar.LowerBound,(return.open_issues_count),pm.expect(return_open_issues_count).to.be.at.least(0),get+projects,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,text,GitLab Issues API,open_issues_count
/projects&/projects&get&200():::EXIT,LENGTH(return.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.created_at),pm.expect(return_created_at).to.have.length(24),get+projects,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,text,GitLab Issues API,created_at
/projects&/projects&get&200():::EXIT,return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.created_at),"pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+projects,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,text,GitLab Issues API,created_at
/projects&/projects&get&200():::EXIT,LENGTH(return.last_activity_at)==24,daikon.inv.unary.string.FixedLengthString,(return.last_activity_at),pm.expect(return_last_activity_at).to.have.length(24),get+projects,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,text,GitLab Issues API,last_activity_at
/projects&/projects&get&200():::EXIT,return.last_activity_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.last_activity_at),"pm.expect(return_last_activity_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+projects,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,text,GitLab Issues API,last_activity_at
/projects&/projects&get&200():::EXIT,return.creator_id >= 1,daikon.inv.unary.scalar.LowerBound,(return.creator_id),pm.expect(return_creator_id).to.be.at.least(1),get+projects,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,text,GitLab Issues API,creator_id
/projects&/projects&get&200():::EXIT,return.namespace.id >= 1,daikon.inv.unary.scalar.LowerBound,(return.namespace.id),pm.expect(return_namespace_id).to.be.at.least(1),get+projects,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,text,GitLab Issues API,namespace.id
/projects&/projects&get&200():::EXIT,"return.namespace.kind one of { ""group"", ""user"" }",daikon.inv.unary.string.OneOfString,(return.namespace.kind),"pm.expect([""group"", ""user""].includes(return_namespace_kind)).to.be.true",get+projects,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Issues API,namespace.kind
/projects&/projects&get&200():::EXIT,"return.import_status one of { ""finished"", ""none"" }",daikon.inv.unary.string.OneOfString,(return.import_status),"pm.expect([""finished"", ""none""].includes(return_import_status)).to.be.true",get+projects,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Issues API,import_status
/projects&/projects&get&200():::EXIT,return.permissions.project_access.access_level == 50,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.project_access.access_level),pm.expect([50].includes(return_permissions_project_access_access_level)).to.be.true,get+projects,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Issues API,permissions.project_access.access_level
/projects&/projects&get&200():::EXIT,return.permissions.project_access.notification_level == 3,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.project_access.notification_level),pm.expect([3].includes(return_permissions_project_access_notification_level)).to.be.true,get+projects,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Issues API,permissions.project_access.notification_level
/projects&/projects&get&200():::EXIT,return.permissions.group_access.access_level == 50,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.group_access.access_level),pm.expect([50].includes(return_permissions_group_access_access_level)).to.be.true,get+projects,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Issues API,permissions.group_access.access_level
/projects&/projects&get&200():::EXIT,return.permissions.group_access.notification_level == 3,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.group_access.notification_level),pm.expect([3].includes(return_permissions_group_access_notification_level)).to.be.true,get+projects,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Issues API,permissions.group_access.notification_level
/projects&/projects&get&200():::EXIT,"return.avatar_url one of { ""https://gitlab.com/gropoutoux/bvcbvc/-/avatar"", ""https://gitlab.com/uploads/-/system/project/avatar/53268997/rect1.png"" }",daikon.inv.unary.string.OneOfString,(return.avatar_url),"pm.expect([""https://gitlab.com/gropoutoux/bvcbvc/-/avatar"", ""https://gitlab.com/uploads/-/system/project/avatar/53268997/rect1.png""].includes(return_avatar_url)).to.be.true",get+projects,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Issues API,avatar_url
/projects&/projects&get&200():::EXIT,return.avatar_url is Url,daikon.inv.unary.string.IsUrl,(return.avatar_url),"pm.expect(return_avatar_url).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",get+projects,1.0,,,Indicates that the value of a string variable is always a URL. Represented as x is Url.,,text,GitLab Issues API,avatar_url
/projects&/projects&get&200():::EXIT,return.forks_count >= 0,daikon.inv.unary.scalar.LowerBound,(return.forks_count),pm.expect(return_forks_count).to.be.at.least(0),get+projects,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,text,GitLab Issues API,forks_count
/projects&/projects&get&200():::EXIT,return.star_count >= 0,daikon.inv.unary.scalar.LowerBound,(return.star_count),pm.expect(return_star_count).to.be.at.least(0),get+projects,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,text,GitLab Issues API,star_count
/projects&/projects&get&200():::EXIT,LENGTH(return.runners_token)==29,daikon.inv.unary.string.FixedLengthString,(return.runners_token),pm.expect(return_runners_token).to.have.length(29),get+projects,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,text,GitLab Issues API,runners_token
/projects&/projects&get&200():::EXIT,"return.merge_method one of { ""ff"", ""merge"", ""rebase_merge"" }",daikon.inv.unary.string.OneOfString,(return.merge_method),"pm.expect([""ff"", ""merge"", ""rebase_merge""].includes(return_merge_method)).to.be.true",get+projects,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Issues API,merge_method
/projects&/projects&get&200():::EXIT,"return.auto_devops_deploy_strategy one of { ""continuous"", ""manual"", ""timed_incremental"" }",daikon.inv.unary.string.OneOfString,(return.auto_devops_deploy_strategy),"pm.expect([""continuous"", ""manual"", ""timed_incremental""].includes(return_auto_devops_deploy_strategy)).to.be.true",get+projects,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Issues API,auto_devops_deploy_strategy
/projects&/projects&get&200():::EXIT,"return.repository_storage == ""default""",daikon.inv.unary.string.OneOfString,(return.repository_storage),"pm.expect([""default""].includes(return_repository_storage)).to.be.true",get+projects,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Issues API,repository_storage
/projects&/projects&get&200():::EXIT,LENGTH(return.repository_storage)==7,daikon.inv.unary.string.FixedLengthString,(return.repository_storage),pm.expect(return_repository_storage).to.have.length(7),get+projects,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,text,GitLab Issues API,repository_storage
/projects&/projects&get&200():::EXIT,"return.external_authorization_classification_label == """"",daikon.inv.unary.string.OneOfString,(return.external_authorization_classification_label),"pm.expect([""""].includes(return_external_authorization_classification_label)).to.be.true",get+projects,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Issues API,external_authorization_classification_label
/projects&/projects&get&200():::EXIT,LENGTH(return.external_authorization_classification_label)==0,daikon.inv.unary.string.FixedLengthString,(return.external_authorization_classification_label),pm.expect(return_external_authorization_classification_label).to.have.length(0),get+projects,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,text,GitLab Issues API,external_authorization_classification_label
/projects&/projects&get&200():::EXIT,return.service_desk_enabled == false,daikon.inv.unary.scalar.OneOfScalar,(return.service_desk_enabled),pm.expect(return_service_desk_enabled).to.eql(false),get+projects,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Issues API,service_desk_enabled
/projects&/projects&get&200():::EXIT,return.statistics.commit_count >= 0,daikon.inv.unary.scalar.LowerBound,(return.statistics.commit_count),pm.expect(return_statistics_commit_count).to.be.at.least(0),get+projects,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,text,GitLab Issues API,statistics.commit_count
/projects&/projects&get&200():::EXIT,return.statistics.storage_size >= 0,daikon.inv.unary.scalar.LowerBound,(return.statistics.storage_size),pm.expect(return_statistics_storage_size).to.be.at.least(0),get+projects,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,text,GitLab Issues API,statistics.storage_size
/projects&/projects&get&200():::EXIT,return.statistics.repository_size >= 0,daikon.inv.unary.scalar.LowerBound,(return.statistics.repository_size),pm.expect(return_statistics_repository_size).to.be.at.least(0),get+projects,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,text,GitLab Issues API,statistics.repository_size
/projects&/projects&get&200():::EXIT,"return.statistics.wiki_size one of { 0, 41943 }",daikon.inv.unary.scalar.OneOfScalar,(return.statistics.wiki_size),"pm.expect([0, 41943, 0].includes(return_statistics_wiki_size)).to.be.true",get+projects,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Issues API,statistics.wiki_size
/projects&/projects&get&200():::EXIT,return.statistics.lfs_objects_size == 0,daikon.inv.unary.scalar.OneOfScalar,(return.statistics.lfs_objects_size),pm.expect([0].includes(return_statistics_lfs_objects_size)).to.be.true,get+projects,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Issues API,statistics.lfs_objects_size
/projects&/projects&get&200():::EXIT,"size(return.shared_with_groups[]) one of { 0, 1 }",daikon.inv.unary.scalar.OneOfScalar,(size(return.shared_with_groups[..])),"pm.expect([0, 1, 0].includes(return_shared_with_groups_size_array)).to.be.true",get+projects,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Issues API,shared_with_groups
/projects&/projects&get&200():::EXIT,input.id_after < return.id,daikon.inv.binary.twoScalar.IntLessThan,"(input.id_after, return.id)",pm.expect(input_id_after).to.be.lessThan(return_id),get+projects,1.0,,,Represents an invariant of < between two long scalars. Prints as x < y.,,text,GitLab Issues API,id
/projects&/projects&get&200():::EXIT,input.id_before > return.id,daikon.inv.binary.twoScalar.IntGreaterThan,"(input.id_before, return.id)",pm.expect(input_id_before).to.be.greaterThan(return_id),get+projects,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,text,GitLab Issues API,id
/projects&/projects&get&200():::EXIT,input.id_before > return.owner.id,daikon.inv.binary.twoScalar.IntGreaterThan,"(input.id_before, return.owner.id)",pm.expect(input_id_before).to.be.greaterThan(return_owner_id),get+projects,,1.0,,Represents an invariant of > between two long scalars. Prints as x > y.,,text,GitLab Issues API,owner.id
/projects&/projects&get&200():::EXIT,input.id_before > return.creator_id,daikon.inv.binary.twoScalar.IntGreaterThan,"(input.id_before, return.creator_id)",pm.expect(input_id_before).to.be.greaterThan(return_creator_id),get+projects,,1.0,,Represents an invariant of > between two long scalars. Prints as x > y.,,text,GitLab Issues API,creator_id
/projects&/projects&get&200():::EXIT,return.id > return.open_issues_count,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.id, return.open_issues_count)",pm.expect(return_id).to.be.greaterThan(return_open_issues_count),get+projects,,1.0,,Represents an invariant of > between two long scalars. Prints as x > y.,,text,GitLab Issues API,id
/projects&/projects&get&200():::EXIT,return.id > return.forks_count,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.id, return.forks_count)",pm.expect(return_id).to.be.greaterThan(return_forks_count),get+projects,,1.0,,Represents an invariant of > between two long scalars. Prints as x > y.,,text,GitLab Issues API,id
/projects&/projects&get&200():::EXIT,return.id > return.star_count,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.id, return.star_count)",pm.expect(return_id).to.be.greaterThan(return_star_count),get+projects,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,text,GitLab Issues API,id
/projects&/projects&get&200():::EXIT,return.id > size(return.tag_list[]),daikon.inv.binary.twoScalar.IntGreaterThan,"(return.id, size(return.tag_list[..]))",pm.expect(return_id).to.be.greaterThan(return_tag_list_size_array),get+projects,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,text,GitLab Issues API,tag_list
/projects&/projects&get&200():::EXIT,return.default_branch is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.default_branch, return.readme_url)",pm.expect(return_readme_url.includes(return_default_branch)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Issues API,default_branch
/projects&/projects&get&200():::EXIT,return.path_with_namespace is a substring of return.ssh_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.ssh_url_to_repo, return.path_with_namespace)",pm.expect(return_ssh_url_to_repo.includes(return_path_with_namespace)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Issues API,path_with_namespace
/projects&/projects&get&200():::EXIT,return.web_url is a substring of return.http_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.http_url_to_repo, return.web_url)",pm.expect(return_http_url_to_repo.includes(return_web_url)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Issues API,web_url
/projects&/projects&get&200():::EXIT,return.web_url is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.readme_url)",pm.expect(return_readme_url.includes(return_web_url)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Issues API,web_url
/projects&/projects&get&200():::EXIT,return.path_with_namespace is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.path_with_namespace)",pm.expect(return_web_url.includes(return_path_with_namespace)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Issues API,path_with_namespace
/projects&/projects&get&200():::EXIT,return.owner.id > size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntGreaterThan,"(return.owner.id, size(return.shared_with_groups[..]))",pm.expect(return_owner_id).to.be.greaterThan(return_shared_with_groups_size_array),get+projects,,1.0,,Represents an invariant of > between two long scalars. Prints as x > y.,,text,GitLab Issues API,owner.id
/projects&/projects&get&200():::EXIT,return.owner.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.owner.name, return.name_with_namespace)",pm.expect(return_name_with_namespace.includes(return_owner_name)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Issues API,name_with_namespace
/projects&/projects&get&200():::EXIT,return.owner.name is a substring of return.avatar_url,daikon.inv.binary.twoString.StdString$SubString,"(return.owner.name, return.avatar_url)",pm.expect(return_avatar_url.includes(return_owner_name)).to.be.true,get+projects,,1.0,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Issues API,owner.name
/projects&/projects&get&200():::EXIT,return.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.name, return.name_with_namespace)",pm.expect(return_name_with_namespace.includes(return_name)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Issues API,name_with_namespace
/projects&/projects&get&200():::EXIT,return.namespace.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.name_with_namespace, return.namespace.name)",pm.expect(return_name_with_namespace.includes(return_namespace_name)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Issues API,name_with_namespace
/projects&/projects&get&200():::EXIT,return.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path, return.path_with_namespace)",pm.expect(return_path_with_namespace.includes(return_path)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Issues API,path_with_namespace
/projects&/projects&get&200():::EXIT,return.namespace.full_path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path_with_namespace, return.namespace.full_path)",pm.expect(return_path_with_namespace.includes(return_namespace_full_path)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Issues API,path_with_namespace
/projects&/projects&get&200():::EXIT,return.open_issues_count >= return.statistics.lfs_objects_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.open_issues_count, return.statistics.lfs_objects_size)",pm.expect(return_open_issues_count).to.be.at.least(return_statistics_lfs_objects_size),get+projects,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,text,GitLab Issues API,open_issues_count
/projects&/projects&get&200():::EXIT,return.creator_id >= size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.creator_id, size(return.shared_with_groups[..]))",pm.expect(return_creator_id).to.be.at.least(return_shared_with_groups_size_array),get+projects,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,text,GitLab Issues API,creator_id
/projects&/projects&get&200():::EXIT,return.namespace.id > size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntGreaterThan,"(return.namespace.id, size(return.shared_with_groups[..]))",pm.expect(return_namespace_id).to.be.greaterThan(return_shared_with_groups_size_array),get+projects,,1.0,,Represents an invariant of > between two long scalars. Prints as x > y.,,text,GitLab Issues API,namespace.id
/projects&/projects&get&200():::EXIT,return.namespace.path is a substring of return.namespace.full_path,daikon.inv.binary.twoString.StdString$SubString,"(return.namespace.path, return.namespace.full_path)",pm.expect(return_namespace_full_path.includes(return_namespace_path)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Issues API,namespace.path
/projects&/projects&get&200():::EXIT,return.permissions.group_access.notification_level >= return.forks_count,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.permissions.group_access.notification_level, return.forks_count)",pm.expect(return_permissions_group_access_notification_level).to.be.at.least(return_forks_count),get+projects,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,text,GitLab Issues API,permissions.group_access.notification_level
/projects&/projects&get&200():::EXIT,return.permissions.group_access.notification_level >= size(return.tag_list[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.permissions.group_access.notification_level, size(return.tag_list[..]))",pm.expect(return_permissions_group_access_notification_level).to.be.at.least(return_tag_list_size_array),get+projects,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,text,GitLab Issues API,tag_list
/projects&/projects&get&200():::EXIT,return.forks_count >= return.statistics.lfs_objects_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.forks_count, return.statistics.lfs_objects_size)",pm.expect(return_forks_count).to.be.at.least(return_statistics_lfs_objects_size),get+projects,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,text,GitLab Issues API,forks_count
/projects&/projects&get&200():::EXIT,return.star_count >= return.statistics.lfs_objects_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.star_count, return.statistics.lfs_objects_size)",pm.expect(return_star_count).to.be.at.least(return_statistics_lfs_objects_size),get+projects,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,text,GitLab Issues API,star_count
/projects&/projects&get&200():::EXIT,return.statistics.commit_count >= return.statistics.lfs_objects_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.commit_count, return.statistics.lfs_objects_size)",pm.expect(return_statistics_commit_count).to.be.at.least(return_statistics_lfs_objects_size),get+projects,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,text,GitLab Issues API,statistics.commit_count
/projects&/projects&get&200():::EXIT,return.statistics.commit_count >= size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.commit_count, size(return.shared_with_groups[..]))",pm.expect(return_statistics_commit_count).to.be.at.least(return_shared_with_groups_size_array),get+projects,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,text,GitLab Issues API,statistics.commit_count
/projects&/projects&get&200():::EXIT,return.statistics.storage_size >= return.statistics.repository_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.storage_size, return.statistics.repository_size)",pm.expect(return_statistics_storage_size).to.be.at.least(return_statistics_repository_size),get+projects,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,text,GitLab Issues API,statistics.storage_size
/projects&/projects&get&200():::EXIT,return.statistics.storage_size >= return.statistics.wiki_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.storage_size, return.statistics.wiki_size)",pm.expect(return_statistics_storage_size).to.be.at.least(return_statistics_wiki_size),get+projects,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,text,GitLab Issues API,statistics.storage_size
/projects&/projects&get&200():::EXIT,return.statistics.storage_size >= return.statistics.lfs_objects_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.storage_size, return.statistics.lfs_objects_size)",pm.expect(return_statistics_storage_size).to.be.at.least(return_statistics_lfs_objects_size),get+projects,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,text,GitLab Issues API,statistics.storage_size
/projects&/projects&get&200():::EXIT,return.statistics.storage_size >= size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.storage_size, size(return.shared_with_groups[..]))",pm.expect(return_statistics_storage_size).to.be.at.least(return_shared_with_groups_size_array),get+projects,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,text,GitLab Issues API,statistics.storage_size
/projects&/projects&get&200():::EXIT,return.statistics.repository_size >= return.statistics.lfs_objects_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.repository_size, return.statistics.lfs_objects_size)",pm.expect(return_statistics_repository_size).to.be.at.least(return_statistics_lfs_objects_size),get+projects,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,text,GitLab Issues API,statistics.repository_size
/projects&/projects&get&200():::EXIT,return.statistics.repository_size >= size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.repository_size, size(return.shared_with_groups[..]))",pm.expect(return_statistics_repository_size).to.be.at.least(return_shared_with_groups_size_array),get+projects,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,text,GitLab Issues API,statistics.repository_size
/projects&/projects&get&200():::EXIT,return.statistics.wiki_size >= return.statistics.lfs_objects_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.wiki_size, return.statistics.lfs_objects_size)",pm.expect(return_statistics_wiki_size).to.be.at.least(return_statistics_lfs_objects_size),get+projects,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,text,GitLab Issues API,statistics.wiki_size
/projects&/projects&get&200():::EXIT,return.statistics.lfs_objects_size <= size(return.tag_list[]),daikon.inv.binary.twoScalar.IntLessEqual,"(return.statistics.lfs_objects_size, size(return.tag_list[..]))",pm.expect(return_statistics_lfs_objects_size).to.be.lte(return_tag_list_size_array),get+projects,,1.0,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,text,GitLab Issues API,tag_list
/projects&/projects&get&200():::EXIT,return.statistics.lfs_objects_size <= size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntLessEqual,"(return.statistics.lfs_objects_size, size(return.shared_with_groups[..]))",pm.expect(return_statistics_lfs_objects_size).to.be.lte(return_shared_with_groups_size_array),get+projects,,1.0,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,text,GitLab Issues API,statistics.lfs_objects_size
/projects&/projects&get&200():::EXIT,return._links.self is a substring of return._links.issues,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.issues)",pm.expect(return__links_issues.includes(return__links_self)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Issues API,_links.self
/projects&/projects&get&200():::EXIT,return._links.self is a substring of return._links.merge_requests,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.merge_requests)",pm.expect(return__links_merge_requests.includes(return__links_self)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Issues API,_links.self
/projects&/projects&get&200():::EXIT,return._links.self is a substring of return._links.repo_branches,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.repo_branches)",pm.expect(return__links_repo_branches.includes(return__links_self)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Issues API,_links.self
/projects&/projects&get&200():::EXIT,return._links.self is a substring of return._links.labels,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.labels)",pm.expect(return__links_labels.includes(return__links_self)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Issues API,_links.self
/projects&/projects&get&200():::EXIT,return._links.self is a substring of return._links.events,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.events)",pm.expect(return__links_events.includes(return__links_self)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Issues API,_links.self
/projects&/projects&get&200():::EXIT,return._links.self is a substring of return._links.members,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.members)",pm.expect(return__links_members.includes(return__links_self)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Issues API,_links.self
/projects&/projects&post&201():::EXIT,input.allow_merge_on_skipped_pipeline == return.allow_merge_on_skipped_pipeline,daikon.inv.binary.twoScalar.IntEqual,"(input.allow_merge_on_skipped_pipeline, return.allow_merge_on_skipped_pipeline)",pm.expect(input_allow_merge_on_skipped_pipeline).to.eql(return_allow_merge_on_skipped_pipeline),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Issues API,allow_merge_on_skipped_pipeline
/projects&/projects&post&201():::EXIT,input.auto_devops_deploy_strategy == return.auto_devops_deploy_strategy,daikon.inv.binary.twoString.StringEqual,"(input.auto_devops_deploy_strategy, return.auto_devops_deploy_strategy)",pm.expect(input_auto_devops_deploy_strategy).to.eql(return_auto_devops_deploy_strategy),post+projects,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,text,GitLab Issues API,auto_devops_deploy_strategy
/projects&/projects&post&201():::EXIT,input.auto_devops_enabled == return.auto_devops_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.auto_devops_enabled, return.auto_devops_enabled)",pm.expect(input_auto_devops_enabled).to.eql(return_auto_devops_enabled),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Issues API,auto_devops_enabled
/projects&/projects&post&201():::EXIT,input.autoclose_referenced_issues == return.autoclose_referenced_issues,daikon.inv.binary.twoScalar.IntEqual,"(input.autoclose_referenced_issues, return.autoclose_referenced_issues)",pm.expect(input_autoclose_referenced_issues).to.eql(return_autoclose_referenced_issues),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Issues API,autoclose_referenced_issues
/projects&/projects&post&201():::EXIT,input.container_registry_enabled == return.container_registry_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.container_registry_enabled, return.container_registry_enabled)",pm.expect(input_container_registry_enabled).to.eql(return_container_registry_enabled),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Issues API,container_registry_enabled
/projects&/projects&post&201():::EXIT,input.description == return.description,daikon.inv.binary.twoString.StringEqual,"(input.description, return.description)",pm.expect(input_description).to.eql(return_description),post+projects,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,text,GitLab Issues API,description
/projects&/projects&post&201():::EXIT,input.merge_method == return.merge_method,daikon.inv.binary.twoString.StringEqual,"(input.merge_method, return.merge_method)",pm.expect(input_merge_method).to.eql(return_merge_method),post+projects,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,text,GitLab Issues API,merge_method
/projects&/projects&post&201():::EXIT,input.name == return.name,daikon.inv.binary.twoString.StringEqual,"(input.name, return.name)",pm.expect(input_name).to.eql(return_name),post+projects,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,text,GitLab Issues API,name
/projects&/projects&post&201():::EXIT,input.namespace_id == return.namespace.id,daikon.inv.binary.twoScalar.IntEqual,"(input.namespace_id, return.namespace.id)",pm.expect(input_namespace_id).to.eql(return_namespace_id),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Issues API,namespace.id
/projects&/projects&post&201():::EXIT,input.only_allow_merge_if_all_discussions_are_resolved == return.only_allow_merge_if_all_discussions_are_resolved,daikon.inv.binary.twoScalar.IntEqual,"(input.only_allow_merge_if_all_discussions_are_resolved, return.only_allow_merge_if_all_discussions_are_resolved)",pm.expect(input_only_allow_merge_if_all_discussions_are_resolved).to.eql(return_only_allow_merge_if_all_discussions_are_resolved),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Issues API,only_allow_merge_if_all_discussions_are_resolved
/projects&/projects&post&201():::EXIT,input.only_allow_merge_if_pipeline_succeeds == return.only_allow_merge_if_pipeline_succeeds,daikon.inv.binary.twoScalar.IntEqual,"(input.only_allow_merge_if_pipeline_succeeds, return.only_allow_merge_if_pipeline_succeeds)",pm.expect(input_only_allow_merge_if_pipeline_succeeds).to.eql(return_only_allow_merge_if_pipeline_succeeds),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Issues API,only_allow_merge_if_pipeline_succeeds
/projects&/projects&post&201():::EXIT,input.packages_enabled == return.packages_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.packages_enabled, return.packages_enabled)",pm.expect(input_packages_enabled).to.eql(return_packages_enabled),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Issues API,packages_enabled
/projects&/projects&post&201():::EXIT,input.path == return.path,daikon.inv.binary.twoString.StringEqual,"(input.path, return.path)",pm.expect(input_path).to.eql(return_path),post+projects,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,text,GitLab Issues API,path
/projects&/projects&post&201():::EXIT,input.public_builds == return.public_jobs,daikon.inv.binary.twoScalar.IntEqual,"(input.public_builds, return.public_jobs)",pm.expect(input_public_builds).to.eql(return_public_jobs),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Issues API,public_jobs
/projects&/projects&post&201():::EXIT,input.remove_source_branch_after_merge == return.remove_source_branch_after_merge,daikon.inv.binary.twoScalar.IntEqual,"(input.remove_source_branch_after_merge, return.remove_source_branch_after_merge)",pm.expect(input_remove_source_branch_after_merge).to.eql(return_remove_source_branch_after_merge),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Issues API,remove_source_branch_after_merge
/projects&/projects&post&201():::EXIT,input.repository_storage == return.repository_storage,daikon.inv.binary.twoString.StringEqual,"(input.repository_storage, return.repository_storage)",pm.expect(input_repository_storage).to.eql(return_repository_storage),post+projects,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,text,GitLab Issues API,repository_storage
/projects&/projects&post&201():::EXIT,input.request_access_enabled == return.request_access_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.request_access_enabled, return.request_access_enabled)",pm.expect(input_request_access_enabled).to.eql(return_request_access_enabled),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Issues API,request_access_enabled
/projects&/projects&post&201():::EXIT,input.resolve_outdated_diff_discussions == return.resolve_outdated_diff_discussions,daikon.inv.binary.twoScalar.IntEqual,"(input.resolve_outdated_diff_discussions, return.resolve_outdated_diff_discussions)",pm.expect(input_resolve_outdated_diff_discussions).to.eql(return_resolve_outdated_diff_discussions),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Issues API,resolve_outdated_diff_discussions
/projects&/projects&post&201():::EXIT,input.shared_runners_enabled == return.shared_runners_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.shared_runners_enabled, return.shared_runners_enabled)",pm.expect(input_shared_runners_enabled).to.eql(return_shared_runners_enabled),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Issues API,shared_runners_enabled
/projects&/projects&post&201():::EXIT,input.visibility == return.visibility,daikon.inv.binary.twoString.StringEqual,"(input.visibility, return.visibility)",pm.expect(input_visibility).to.eql(return_visibility),post+projects,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,text,GitLab Issues API,visibility
/projects&/projects&post&201():::EXIT,return.owner.id == return.creator_id,daikon.inv.binary.twoScalar.IntEqual,"(return.owner.id, return.creator_id)",pm.expect(return_owner_id).to.eql(return_creator_id),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Issues API,owner.id
/projects&/projects&post&201():::EXIT,return.owner.name == return.namespace.name,daikon.inv.binary.twoString.StringEqual,"(return.owner.name, return.namespace.name)",pm.expect(return_owner_name).to.eql(return_namespace_name),post+projects,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,text,GitLab Issues API,owner.name
/projects&/projects&post&201():::EXIT,return.open_issues_count == return.forks_count,daikon.inv.binary.twoScalar.IntEqual,"(return.open_issues_count, return.forks_count)",pm.expect(return_open_issues_count).to.eql(return_forks_count),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Issues API,open_issues_count
/projects&/projects&post&201():::EXIT,return.merge_requests_enabled == return.can_create_merge_request_in,daikon.inv.binary.twoScalar.IntEqual,"(return.merge_requests_enabled, return.can_create_merge_request_in)",pm.expect(return_merge_requests_enabled).to.eql(return_can_create_merge_request_in),post+projects,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Issues API,merge_requests_enabled
/projects&/projects&post&201():::EXIT,return.archived == return.service_desk_enabled,daikon.inv.binary.twoScalar.IntEqual,"(return.archived, return.service_desk_enabled)",pm.expect(return_archived).to.eql(return_service_desk_enabled),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Issues API,archived
/projects&/projects&post&201():::EXIT,return.forks_count == return.star_count,daikon.inv.binary.twoScalar.IntEqual,"(return.forks_count, return.star_count)",pm.expect(return_forks_count).to.eql(return_star_count),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Issues API,forks_count
/projects&/projects&post&201():::EXIT,return.forks_count == size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntEqual,"(return.forks_count, size(return.shared_with_groups[..]))",pm.expect(return_forks_count).to.eql(return_shared_with_groups_size_array),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Issues API,forks_count
/projects&/projects&post&201():::EXIT,return.forks_count == size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntEqual,"(return.forks_count, size(return.shared_with_groups[..]))",pm.expect(return_forks_count).to.eql(return_shared_with_groups_size_array),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Issues API,forks_count
/projects&/projects&post&201():::EXIT,size(input.tag_list[]) == size(return.tag_list[]),daikon.inv.binary.twoScalar.IntEqual,"(size(input.tag_list[..]), size(return.tag_list[..]))",pm.expect(input_tag_list_size_array).to.eql(return_tag_list_size_array),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Issues API,tag_list
/projects&/projects&post&201():::EXIT,"return.visibility one of { ""internal"", ""private"", ""public"" }",daikon.inv.unary.string.OneOfString,(return.visibility),"pm.expect([""internal"", ""private"", ""public""].includes(return_visibility)).to.be.true",post+projects,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Issues API,visibility
/projects&/projects&post&201():::EXIT,return.open_issues_count == 0,daikon.inv.unary.scalar.OneOfScalar,(return.open_issues_count),pm.expect([0].includes(return_open_issues_count)).to.be.true,post+projects,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Issues API,open_issues_count
/projects&/projects&post&201():::EXIT,LENGTH(return.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.created_at),pm.expect(return_created_at).to.have.length(24),post+projects,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,text,GitLab Issues API,created_at
/projects&/projects&post&201():::EXIT,return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.created_at),"pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",post+projects,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,text,GitLab Issues API,created_at
/projects&/projects&post&201():::EXIT,LENGTH(return.last_activity_at)==24,daikon.inv.unary.string.FixedLengthString,(return.last_activity_at),pm.expect(return_last_activity_at).to.have.length(24),post+projects,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,text,GitLab Issues API,last_activity_at
/projects&/projects&post&201():::EXIT,return.last_activity_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.last_activity_at),"pm.expect(return_last_activity_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",post+projects,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,text,GitLab Issues API,last_activity_at
/projects&/projects&post&201():::EXIT,return.namespace.id >= 1,daikon.inv.unary.scalar.LowerBound,(return.namespace.id),pm.expect(return_namespace_id).to.be.at.least(1),post+projects,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,text,GitLab Issues API,namespace.id
/projects&/projects&post&201():::EXIT,"return.namespace.kind one of { ""group"", ""user"" }",daikon.inv.unary.string.OneOfString,(return.namespace.kind),"pm.expect([""group"", ""user""].includes(return_namespace_kind)).to.be.true",post+projects,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Issues API,namespace.kind
/projects&/projects&post&201():::EXIT,"return.import_status == ""none""",daikon.inv.unary.string.OneOfString,(return.import_status),"pm.expect([""none""].includes(return_import_status)).to.be.true",post+projects,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Issues API,import_status
/projects&/projects&post&201():::EXIT,LENGTH(return.import_status)==4,daikon.inv.unary.string.FixedLengthString,(return.import_status),pm.expect(return_import_status).to.have.length(4),post+projects,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,text,GitLab Issues API,import_status
/projects&/projects&post&201():::EXIT,return.permissions == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions),pm.expect(return_permissions).to.be.null,post+projects,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Issues API,permissions
/projects&/projects&post&201():::EXIT,return.permissions.project_access == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.project_access),pm.expect(return_permissions_project_access).to.be.null,post+projects,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Issues API,permissions.project_access
/projects&/projects&post&201():::EXIT,return.permissions.group_access == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.group_access),pm.expect(return_permissions_group_access).to.be.null,post+projects,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Issues API,permissions.group_access
/projects&/projects&post&201():::EXIT,return.archived == false,daikon.inv.unary.scalar.OneOfScalar,(return.archived),pm.expect(return_archived).to.eql(false),post+projects,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Issues API,archived
/projects&/projects&post&201():::EXIT,LENGTH(return.runners_token)==29,daikon.inv.unary.string.FixedLengthString,(return.runners_token),pm.expect(return_runners_token).to.have.length(29),post+projects,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,text,GitLab Issues API,runners_token
/projects&/projects&post&201():::EXIT,return.ci_default_git_depth == 20,daikon.inv.unary.scalar.OneOfScalar,(return.ci_default_git_depth),pm.expect([20].includes(return_ci_default_git_depth)).to.be.true,post+projects,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Issues API,ci_default_git_depth
/projects&/projects&post&201():::EXIT,return.ci_forward_deployment_enabled == true,daikon.inv.unary.scalar.OneOfScalar,(return.ci_forward_deployment_enabled),pm.expect(return_ci_forward_deployment_enabled).to.eql(true),post+projects,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Issues API,ci_forward_deployment_enabled
/projects&/projects&post&201():::EXIT,return.shared_with_groups[] == [],daikon.inv.unary.sequence.OneOfSequence,(return.shared_with_groups[..]),pm.expect([[]].some(value => pm.expect(return_shared_with_groups_array).to.deep.equal(value).that)).to.be.true,post+projects,1.0,,,"Represents long[] variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Issues API,shared_with_groups
/projects&/projects&post&201():::EXIT,"return.merge_method one of { ""ff"", ""merge"", ""rebase_merge"" }",daikon.inv.unary.string.OneOfString,(return.merge_method),"pm.expect([""ff"", ""merge"", ""rebase_merge""].includes(return_merge_method)).to.be.true",post+projects,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Issues API,merge_method
/projects&/projects&post&201():::EXIT,"return.auto_devops_deploy_strategy one of { ""continuous"", ""manual"", ""timed_incremental"" }",daikon.inv.unary.string.OneOfString,(return.auto_devops_deploy_strategy),"pm.expect([""continuous"", ""manual"", ""timed_incremental""].includes(return_auto_devops_deploy_strategy)).to.be.true",post+projects,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Issues API,auto_devops_deploy_strategy
/projects&/projects&post&201():::EXIT,"return.repository_storage == ""default""",daikon.inv.unary.string.OneOfString,(return.repository_storage),"pm.expect([""default""].includes(return_repository_storage)).to.be.true",post+projects,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Issues API,repository_storage
/projects&/projects&post&201():::EXIT,LENGTH(return.repository_storage)==7,daikon.inv.unary.string.FixedLengthString,(return.repository_storage),pm.expect(return_repository_storage).to.have.length(7),post+projects,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,text,GitLab Issues API,repository_storage
/projects&/projects&post&201():::EXIT,return.statistics == null,daikon.inv.unary.scalar.OneOfScalar,(return.statistics),pm.expect(return_statistics).to.be.null,post+projects,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Issues API,statistics
/projects&/projects&post&201():::EXIT,input.default_branch is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(input.default_branch, return.readme_url)",pm.expect(return_readme_url.includes(input_default_branch)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Issues API,readme_url
/projects&/projects&post&201():::EXIT,input.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(input.name, return.name_with_namespace)",pm.expect(return_name_with_namespace.includes(input_name)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Issues API,name_with_namespace
/projects&/projects&post&201():::EXIT,input.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(input.path, return.path_with_namespace)",pm.expect(return_path_with_namespace.includes(input_path)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Issues API,path_with_namespace
/projects&/projects&post&201():::EXIT,return.id > return.namespace.id,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.id, return.namespace.id)",pm.expect(return_id).to.be.greaterThan(return_namespace_id),post+projects,,1.0,,Represents an invariant of > between two long scalars. Prints as x > y.,,text,GitLab Issues API,id
/projects&/projects&post&201():::EXIT,return.default_branch is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.default_branch, return.readme_url)",pm.expect(return_readme_url.includes(return_default_branch)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Issues API,default_branch
/projects&/projects&post&201():::EXIT,return.path_with_namespace is a substring of return.ssh_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.ssh_url_to_repo, return.path_with_namespace)",pm.expect(return_ssh_url_to_repo.includes(return_path_with_namespace)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Issues API,path_with_namespace
/projects&/projects&post&201():::EXIT,return.web_url is a substring of return.http_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.http_url_to_repo, return.web_url)",pm.expect(return_http_url_to_repo.includes(return_web_url)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Issues API,web_url
/projects&/projects&post&201():::EXIT,return.web_url is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.readme_url)",pm.expect(return_readme_url.includes(return_web_url)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Issues API,web_url
/projects&/projects&post&201():::EXIT,return.path_with_namespace is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.path_with_namespace)",pm.expect(return_web_url.includes(return_path_with_namespace)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Issues API,path_with_namespace
/projects&/projects&post&201():::EXIT,return.owner.id <= return.namespace.id,daikon.inv.binary.twoScalar.IntLessEqual,"(return.owner.id, return.namespace.id)",pm.expect(return_owner_id).to.be.lte(return_namespace_id),post+projects,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,text,GitLab Issues API,owner.id
/projects&/projects&post&201():::EXIT,return.owner.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.owner.name, return.name_with_namespace)",pm.expect(return_name_with_namespace.includes(return_owner_name)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Issues API,name_with_namespace
/projects&/projects&post&201():::EXIT,return.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.name, return.name_with_namespace)",pm.expect(return_name_with_namespace.includes(return_name)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Issues API,name_with_namespace
/projects&/projects&post&201():::EXIT,return.namespace.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.name_with_namespace, return.namespace.name)",pm.expect(return_name_with_namespace.includes(return_namespace_name)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Issues API,name_with_namespace
/projects&/projects&post&201():::EXIT,return.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path, return.path_with_namespace)",pm.expect(return_path_with_namespace.includes(return_path)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Issues API,path_with_namespace
/projects&/projects&post&201():::EXIT,return.namespace.full_path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path_with_namespace, return.namespace.full_path)",pm.expect(return_path_with_namespace.includes(return_namespace_full_path)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Issues API,path_with_namespace
/projects&/projects&post&201():::EXIT,return.open_issues_count <= size(return.tag_list[]),daikon.inv.binary.twoScalar.IntLessEqual,"(return.open_issues_count, size(return.tag_list[..]))",pm.expect(return_open_issues_count).to.be.lte(return_tag_list_size_array),post+projects,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,text,GitLab Issues API,tag_list
/projects&/projects&post&201():::EXIT,return.creator_id <= return.namespace.id,daikon.inv.binary.twoScalar.IntLessEqual,"(return.creator_id, return.namespace.id)",pm.expect(return_creator_id).to.be.lte(return_namespace_id),post+projects,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,text,GitLab Issues API,creator_id
/projects&/projects&post&201():::EXIT,return.namespace.path is a substring of return.namespace.full_path,daikon.inv.binary.twoString.StdString$SubString,"(return.namespace.path, return.namespace.full_path)",pm.expect(return_namespace_full_path.includes(return_namespace_path)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Issues API,namespace.path
/projects&/projects&post&201():::EXIT,return.forks_count <= size(return.tag_list[]),daikon.inv.binary.twoScalar.IntLessEqual,"(return.forks_count, size(return.tag_list[..]))",pm.expect(return_forks_count).to.be.lte(return_tag_list_size_array),post+projects,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,text,GitLab Issues API,tag_list
/projects&/projects&post&201():::EXIT,return._links.self is a substring of return._links.issues,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.issues)",pm.expect(return__links_issues.includes(return__links_self)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Issues API,_links.self
/projects&/projects&post&201():::EXIT,return._links.self is a substring of return._links.merge_requests,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.merge_requests)",pm.expect(return__links_merge_requests.includes(return__links_self)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Issues API,_links.self
/projects&/projects&post&201():::EXIT,return._links.self is a substring of return._links.repo_branches,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.repo_branches)",pm.expect(return__links_repo_branches.includes(return__links_self)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Issues API,_links.self
/projects&/projects&post&201():::EXIT,return._links.self is a substring of return._links.labels,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.labels)",pm.expect(return__links_labels.includes(return__links_self)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Issues API,_links.self
/projects&/projects&post&201():::EXIT,return._links.self is a substring of return._links.events,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.events)",pm.expect(return__links_events.includes(return__links_self)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Issues API,_links.self
/projects&/projects&post&201():::EXIT,return._links.self is a substring of return._links.members,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.members)",pm.expect(return__links_members.includes(return__links_self)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Issues API,_links.self
/groups&/groups&get&200%array():::EXIT,input.per_page >= size(return.array[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(input.per_page, size(return.array[..]))",pm.expect(input_per_page).to.be.at.least(return_array_size_array),get+groups,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,array,GitLab Issues API,array
/groups&/groups&get&200():::EXIT,return.statistics.job_artifacts_size == return.statistics.lfs_objects_size,daikon.inv.binary.twoScalar.IntEqual,"(return.statistics.job_artifacts_size, return.statistics.lfs_objects_size)",pm.expect(return_statistics_job_artifacts_size).to.eql(return_statistics_lfs_objects_size),get+groups,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,statistics.job_artifacts_size,GitLab Issues API,statistics.job_artifacts_size
/groups&/groups&get&200():::EXIT,return.statistics.job_artifacts_size == return.statistics.packages_size,daikon.inv.binary.twoScalar.IntEqual,"(return.statistics.job_artifacts_size, return.statistics.packages_size)",pm.expect(return_statistics_job_artifacts_size).to.eql(return_statistics_packages_size),get+groups,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,statistics.job_artifacts_size,GitLab Issues API,statistics.job_artifacts_size
/groups&/groups&get&200():::EXIT,return.statistics.job_artifacts_size == return.statistics.snippets_size,daikon.inv.binary.twoScalar.IntEqual,"(return.statistics.job_artifacts_size, return.statistics.snippets_size)",pm.expect(return_statistics_job_artifacts_size).to.eql(return_statistics_snippets_size),get+groups,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,statistics.job_artifacts_size,GitLab Issues API,statistics.job_artifacts_size
/groups&/groups&get&200():::EXIT,"return.auto_devops_enabled one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.auto_devops_enabled),"pm.expect([""false"", ""true""].includes(return_auto_devops_enabled)).to.be.true",get+groups,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,auto_devops_enabled,GitLab Issues API,auto_devops_enabled
/groups&/groups&get&200():::EXIT,LENGTH(return.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.created_at),pm.expect(return_created_at).to.have.length(24),get+groups,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,created_at,GitLab Issues API,created_at
/groups&/groups&get&200():::EXIT,return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.created_at),"pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+groups,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,created_at,GitLab Issues API,created_at
/groups&/groups&get&200():::EXIT,"return.default_branch_protection one of { 0, 1, 2 }",daikon.inv.unary.scalar.OneOfScalar,(return.default_branch_protection),"pm.expect([0, 1, 2].includes(return_default_branch_protection)).to.be.true",get+groups,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,default_branch_protection,GitLab Issues API,default_branch_protection
/groups&/groups&get&200():::EXIT,"return.emails_disabled one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.emails_disabled),"pm.expect([""false"", ""true""].includes(return_emails_disabled)).to.be.true",get+groups,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,emails_disabled,GitLab Issues API,emails_disabled
/groups&/groups&get&200():::EXIT,"return.mentions_disabled one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.mentions_disabled),"pm.expect([""false"", ""true""].includes(return_mentions_disabled)).to.be.true",get+groups,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,mentions_disabled,GitLab Issues API,mentions_disabled
/groups&/groups&get&200():::EXIT,LENGTH(return.parent_id)==3,daikon.inv.unary.string.FixedLengthString,(return.parent_id),pm.expect(return_parent_id).to.have.length(3),get+groups,,1.0,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,parent_id,GitLab Issues API,parent_id
/groups&/groups&get&200():::EXIT,return.parent_id is Numeric,daikon.inv.unary.string.IsNumeric,(return.parent_id),"pm.expect(return_parent_id).to.match(/^[+-]{0,1}(0|([0-9](\d*|\d{0,2}(,\d{3})*)))?(\.\d*[0-9])?$/)",get+groups,1.0,,,Indicates that the characters of a string variable are always numeric. Represented as x is Numeric.,,parent_id,GitLab Issues API,parent_id
/groups&/groups&get&200():::EXIT,"return.project_creation_level one of { ""developer"", ""maintainer"", ""noone"" }",daikon.inv.unary.string.OneOfString,(return.project_creation_level),"pm.expect([""developer"", ""maintainer"", ""noone""].includes(return_project_creation_level)).to.be.true",get+groups,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,project_creation_level,GitLab Issues API,project_creation_level
/groups&/groups&get&200():::EXIT,return.statistics.job_artifacts_size == 0,daikon.inv.unary.scalar.OneOfScalar,(return.statistics.job_artifacts_size),pm.expect([0].includes(return_statistics_job_artifacts_size)).to.be.true,get+groups,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,statistics.job_artifacts_size,GitLab Issues API,statistics.job_artifacts_size
/groups&/groups&get&200():::EXIT,return.statistics.repository_size >= 0,daikon.inv.unary.scalar.LowerBound,(return.statistics.repository_size),pm.expect(return_statistics_repository_size).to.be.at.least(0),get+groups,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,statistics.repository_size,GitLab Issues API,statistics.repository_size
/groups&/groups&get&200():::EXIT,return.statistics.storage_size >= 0,daikon.inv.unary.scalar.LowerBound,(return.statistics.storage_size),pm.expect(return_statistics_storage_size).to.be.at.least(0),get+groups,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,statistics.storage_size,GitLab Issues API,statistics.storage_size
/groups&/groups&get&200():::EXIT,return.statistics.wiki_size >= 0,daikon.inv.unary.scalar.LowerBound,(return.statistics.wiki_size),pm.expect(return_statistics_wiki_size).to.be.at.least(0),get+groups,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,statistics.wiki_size,GitLab Issues API,statistics.wiki_size
/groups&/groups&get&200():::EXIT,"return.subgroup_creation_level one of { ""maintainer"", ""owner"" }",daikon.inv.unary.string.OneOfString,(return.subgroup_creation_level),"pm.expect([""maintainer"", ""owner""].includes(return_subgroup_creation_level)).to.be.true",get+groups,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,subgroup_creation_level,GitLab Issues API,subgroup_creation_level
/groups&/groups&get&200():::EXIT,return.two_factor_grace_period >= 0,daikon.inv.unary.scalar.LowerBound,(return.two_factor_grace_period),pm.expect(return_two_factor_grace_period).to.be.at.least(0),get+groups,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,two_factor_grace_period,GitLab Issues API,two_factor_grace_period
/groups&/groups&get&200():::EXIT,"return.visibility one of { ""internal"", ""private"", ""public"" }",daikon.inv.unary.string.OneOfString,(return.visibility),"pm.expect([""internal"", ""private"", ""public""].includes(return_visibility)).to.be.true",get+groups,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,visibility,GitLab Issues API,visibility
/groups&/groups&get&200():::EXIT,return.default_branch_protection >= return.statistics.job_artifacts_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.default_branch_protection, return.statistics.job_artifacts_size)",pm.expect(return_default_branch_protection).to.be.at.least(return_statistics_job_artifacts_size),get+groups,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,default_branch_protection,GitLab Issues API,statistics.job_artifacts_size
/groups&/groups&get&200():::EXIT,return.name is a substring of return.full_name,daikon.inv.binary.twoString.StdString$SubString,"(return.full_name, return.name)",pm.expect(return_full_name.includes(return_name)).to.be.true,get+groups,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,full_name,GitLab Issues API,name
/groups&/groups&get&200():::EXIT,return.path is a substring of return.full_path,daikon.inv.binary.twoString.StdString$SubString,"(return.full_path, return.path)",pm.expect(return_full_path.includes(return_path)).to.be.true,get+groups,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,full_path,GitLab Issues API,full_path
/groups&/groups&get&200():::EXIT,return.full_path is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.full_path, return.web_url)",pm.expect(return_web_url.includes(return_full_path)).to.be.true,get+groups,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,full_path,GitLab Issues API,full_path
/groups&/groups&get&200():::EXIT,return.statistics.job_artifacts_size <= return.statistics.repository_size,daikon.inv.binary.twoScalar.IntLessEqual,"(return.statistics.job_artifacts_size, return.statistics.repository_size)",pm.expect(return_statistics_job_artifacts_size).to.be.lte(return_statistics_repository_size),get+groups,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,statistics.job_artifacts_size,GitLab Issues API,statistics.job_artifacts_size
/groups&/groups&get&200():::EXIT,return.statistics.job_artifacts_size <= return.statistics.storage_size,daikon.inv.binary.twoScalar.IntLessEqual,"(return.statistics.job_artifacts_size, return.statistics.storage_size)",pm.expect(return_statistics_job_artifacts_size).to.be.lte(return_statistics_storage_size),get+groups,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,statistics.job_artifacts_size,GitLab Issues API,statistics.storage_size
/groups&/groups&get&200():::EXIT,return.statistics.job_artifacts_size <= return.statistics.wiki_size,daikon.inv.binary.twoScalar.IntLessEqual,"(return.statistics.job_artifacts_size, return.statistics.wiki_size)",pm.expect(return_statistics_job_artifacts_size).to.be.lte(return_statistics_wiki_size),get+groups,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,statistics.job_artifacts_size,GitLab Issues API,statistics.job_artifacts_size
/groups&/groups&get&200():::EXIT,return.statistics.job_artifacts_size <= return.two_factor_grace_period,daikon.inv.binary.twoScalar.IntLessEqual,"(return.statistics.job_artifacts_size, return.two_factor_grace_period)",pm.expect(return_statistics_job_artifacts_size).to.be.lte(return_two_factor_grace_period),get+groups,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,statistics.job_artifacts_size,GitLab Issues API,statistics.job_artifacts_size
/groups&/groups&get&200():::EXIT,return.statistics.repository_size <= return.statistics.storage_size,daikon.inv.binary.twoScalar.IntLessEqual,"(return.statistics.repository_size, return.statistics.storage_size)",pm.expect(return_statistics_repository_size).to.be.lte(return_statistics_storage_size),get+groups,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,statistics.repository_size,GitLab Issues API,statistics.storage_size
/groups&/groups&get&200():::EXIT,return.statistics.repository_size >= return.statistics.wiki_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.repository_size, return.statistics.wiki_size)",pm.expect(return_statistics_repository_size).to.be.at.least(return_statistics_wiki_size),get+groups,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,statistics.repository_size,GitLab Issues API,statistics.repository_size
/groups&/groups&get&200():::EXIT,return.statistics.storage_size >= return.statistics.wiki_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.storage_size, return.statistics.wiki_size)",pm.expect(return_statistics_storage_size).to.be.at.least(return_statistics_wiki_size),get+groups,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,statistics.storage_size,GitLab Issues API,statistics.storage_size
/groups&/groups&post&201():::EXIT,input.visibility == return.visibility,daikon.inv.binary.twoString.StringEqual,"(input.visibility, return.visibility)",pm.expect(input_visibility).to.eql(return_visibility),post+groups,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,visibility,GitLab Issues API,visibility
/groups&/groups&post&201():::EXIT,input.share_with_group_lock == return.share_with_group_lock,daikon.inv.binary.twoScalar.IntEqual,"(input.share_with_group_lock, return.share_with_group_lock)",pm.expect(input_share_with_group_lock).to.eql(return_share_with_group_lock),post+groups,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,share_with_group_lock,GitLab Issues API,share_with_group_lock
/groups&/groups&post&201():::EXIT,input.require_two_factor_authentication == return.require_two_factor_authentication,daikon.inv.binary.twoScalar.IntEqual,"(input.require_two_factor_authentication, return.require_two_factor_authentication)",pm.expect(input_require_two_factor_authentication).to.eql(return_require_two_factor_authentication),post+groups,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,require_two_factor_authentication,GitLab Issues API,require_two_factor_authentication
/groups&/groups&post&201():::EXIT,input.two_factor_grace_period == return.two_factor_grace_period,daikon.inv.binary.twoScalar.IntEqual,"(input.two_factor_grace_period, return.two_factor_grace_period)",pm.expect(input_two_factor_grace_period).to.eql(return_two_factor_grace_period),post+groups,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,two_factor_grace_period,GitLab Issues API,two_factor_grace_period
/groups&/groups&post&201():::EXIT,input.project_creation_level == return.project_creation_level,daikon.inv.binary.twoString.StringEqual,"(input.project_creation_level, return.project_creation_level)",pm.expect(input_project_creation_level).to.eql(return_project_creation_level),post+groups,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,project_creation_level,GitLab Issues API,project_creation_level
/groups&/groups&post&201():::EXIT,input.subgroup_creation_level == return.subgroup_creation_level,daikon.inv.binary.twoString.StringEqual,"(input.subgroup_creation_level, return.subgroup_creation_level)",pm.expect(input_subgroup_creation_level).to.eql(return_subgroup_creation_level),post+groups,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,subgroup_creation_level,GitLab Issues API,subgroup_creation_level
/groups&/groups&post&201():::EXIT,input.lfs_enabled == return.lfs_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.lfs_enabled, return.lfs_enabled)",pm.expect(input_lfs_enabled).to.eql(return_lfs_enabled),post+groups,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,lfs_enabled,GitLab Issues API,lfs_enabled
/groups&/groups&post&201():::EXIT,input.request_access_enabled == return.request_access_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.request_access_enabled, return.request_access_enabled)",pm.expect(input_request_access_enabled).to.eql(return_request_access_enabled),post+groups,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,request_access_enabled,GitLab Issues API,request_access_enabled
/groups&/groups&post&201():::EXIT,input.name == return.full_name,daikon.inv.binary.twoString.StringEqual,"(input.name, return.full_name)",pm.expect(input_name).to.eql(return_full_name),post+groups,,1.0,,Represents an invariant of == between two String scalars. Prints as x == y.,,full_name,GitLab Issues API,full_name
/groups&/groups&post&201():::EXIT,input.name == return.name,daikon.inv.binary.twoString.StringEqual,"(input.name, return.name)",pm.expect(input_name).to.eql(return_name),post+groups,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,name,GitLab Issues API,name
/groups&/groups&post&201():::EXIT,input.path == return.full_path,daikon.inv.binary.twoString.StringEqual,"(input.path, return.full_path)",pm.expect(input_path).to.eql(return_full_path),post+groups,,1.0,,Represents an invariant of == between two String scalars. Prints as x == y.,,full_path,GitLab Issues API,full_path
/groups&/groups&post&201():::EXIT,input.path == return.path,daikon.inv.binary.twoString.StringEqual,"(input.path, return.path)",pm.expect(input_path).to.eql(return_path),post+groups,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,path,GitLab Issues API,path
/groups&/groups&post&201():::EXIT,input.description == return.description,daikon.inv.binary.twoString.StringEqual,"(input.description, return.description)",pm.expect(input_description).to.eql(return_description),post+groups,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,description,GitLab Issues API,description
/groups&/groups&post&201():::EXIT,"return.auto_devops_enabled one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.auto_devops_enabled),"pm.expect([""false"", ""true""].includes(return_auto_devops_enabled)).to.be.true",post+groups,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,auto_devops_enabled,GitLab Issues API,auto_devops_enabled
/groups&/groups&post&201():::EXIT,LENGTH(return.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.created_at),pm.expect(return_created_at).to.have.length(24),post+groups,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,created_at,GitLab Issues API,created_at
/groups&/groups&post&201():::EXIT,return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.created_at),"pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",post+groups,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,created_at,GitLab Issues API,created_at
/groups&/groups&post&201():::EXIT,"return.default_branch_protection one of { 0, 1, 2 }",daikon.inv.unary.scalar.OneOfScalar,(return.default_branch_protection),"pm.expect([0, 1, 2].includes(return_default_branch_protection)).to.be.true",post+groups,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,default_branch_protection,GitLab Issues API,default_branch_protection
/groups&/groups&post&201():::EXIT,"return.emails_disabled one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.emails_disabled),"pm.expect([""false"", ""true""].includes(return_emails_disabled)).to.be.true",post+groups,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,emails_disabled,GitLab Issues API,emails_disabled
/groups&/groups&post&201():::EXIT,"return.mentions_disabled one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.mentions_disabled),"pm.expect([""false"", ""true""].includes(return_mentions_disabled)).to.be.true",post+groups,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,mentions_disabled,GitLab Issues API,mentions_disabled
/groups&/groups&post&201():::EXIT,"return.project_creation_level one of { ""developer"", ""maintainer"", ""noone"" }",daikon.inv.unary.string.OneOfString,(return.project_creation_level),"pm.expect([""developer"", ""maintainer"", ""noone""].includes(return_project_creation_level)).to.be.true",post+groups,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,project_creation_level,GitLab Issues API,project_creation_level
/groups&/groups&post&201():::EXIT,return.statistics == null,daikon.inv.unary.scalar.OneOfScalar,(return.statistics),pm.expect(return_statistics).to.be.null,post+groups,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,statistics,GitLab Issues API,statistics
/groups&/groups&post&201():::EXIT,"return.subgroup_creation_level one of { ""maintainer"", ""owner"" }",daikon.inv.unary.string.OneOfString,(return.subgroup_creation_level),"pm.expect([""maintainer"", ""owner""].includes(return_subgroup_creation_level)).to.be.true",post+groups,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,subgroup_creation_level,GitLab Issues API,subgroup_creation_level
/groups&/groups&post&201():::EXIT,"return.visibility one of { ""internal"", ""private"", ""public"" }",daikon.inv.unary.string.OneOfString,(return.visibility),"pm.expect([""internal"", ""private"", ""public""].includes(return_visibility)).to.be.true",post+groups,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,visibility,GitLab Issues API,visibility
/groups&/groups&post&201():::EXIT,input.path is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(input.path, return.web_url)",pm.expect(return_web_url.includes(input_path)).to.be.true,post+groups,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,web_url,GitLab Issues API,web_url
