pptname,invariant,invariantType,variables,postmanAssertion,endpoint,tp,fp,enter,invariantDescription,Unnamed: 10,groups,api,group
/projects&/projects&get&200%array():::EXIT,input.id_after > size(return.array[]),daikon.inv.binary.twoScalar.IntGreaterThan,"(input.id_after, size(return.array[..]))",pm.expect(input_id_after).to.be.greaterThan(return_array_size_array),get+projects,,1.0,,Represents an invariant of > between two long scalars. Prints as x > y.,,text,GitLab Branch API,array
/projects&/projects&get&200&shared_with_groups():::EXIT,"return.group_id one of { 176, 1070 }",daikon.inv.unary.scalar.OneOfScalar,(return.group_id),"pm.expect([176, 1070, 0].includes(return_group_id)).to.be.true",get+projects,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Branch API,shared_with_groups.group_id
/projects&/projects&get&200&shared_with_groups():::EXIT,"return.group_name one of { ""effortlessly"", ""myjane"" }",daikon.inv.unary.string.OneOfString,(return.group_name),"pm.expect([""effortlessly"", ""myjane""].includes(return_group_name)).to.be.true",get+projects,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Branch API,shared_with_groups.group_name
/projects&/projects&get&200&shared_with_groups():::EXIT,"return.group_full_path one of { ""myjane"", ""salubriousness"" }",daikon.inv.unary.string.OneOfString,(return.group_full_path),"pm.expect([""myjane"", ""salubriousness""].includes(return_group_full_path)).to.be.true",get+projects,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Branch API,shared_with_groups.group_full_path
/projects&/projects&get&200&shared_with_groups():::EXIT,"return.group_access_level one of { 20, 30 }",daikon.inv.unary.scalar.OneOfScalar,(return.group_access_level),"pm.expect([20, 30, 0].includes(return_group_access_level)).to.be.true",get+projects,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Branch API,shared_with_groups.group_access_level
/projects&/projects&get&200():::EXIT,input.archived == return.archived,daikon.inv.binary.twoScalar.IntEqual,"(input.archived, return.archived)",pm.expect(input_archived).to.eql(return_archived),get+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Branch API,archived
/projects&/projects&get&200():::EXIT,input.simple == return.service_desk_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.simple, return.service_desk_enabled)",pm.expect(input_simple).to.eql(return_service_desk_enabled),get+projects,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Branch API,service_desk_enabled
/projects&/projects&get&200():::EXIT,input.visibility == return.visibility,daikon.inv.binary.twoString.StringEqual,"(input.visibility, return.visibility)",pm.expect(input_visibility).to.eql(return_visibility),get+projects,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,text,GitLab Branch API,visibility
/projects&/projects&get&200():::EXIT,return.owner.name == return.namespace.name,daikon.inv.binary.twoString.StringEqual,"(return.owner.name, return.namespace.name)",pm.expect(return_owner_name).to.eql(return_namespace_name),get+projects,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,text,GitLab Branch API,owner.name
/projects&/projects&get&200():::EXIT,return.permissions.project_access.access_level == return.permissions.group_access.access_level,daikon.inv.binary.twoScalar.IntEqual,"(return.permissions.project_access.access_level, return.permissions.group_access.access_level)",pm.expect(return_permissions_project_access_access_level).to.eql(return_permissions_group_access_access_level),get+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Branch API,permissions.project_access.access_level
/projects&/projects&get&200():::EXIT,return.permissions.project_access.notification_level == return.permissions.group_access.notification_level,daikon.inv.binary.twoScalar.IntEqual,"(return.permissions.project_access.notification_level, return.permissions.group_access.notification_level)",pm.expect(return_permissions_project_access_notification_level).to.eql(return_permissions_group_access_notification_level),get+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Branch API,permissions.project_access.notification_level
/projects&/projects&get&200():::EXIT,return.statistics.lfs_objects_size == return.statistics.job_artifacts_size,daikon.inv.binary.twoScalar.IntEqual,"(return.statistics.lfs_objects_size, return.statistics.job_artifacts_size)",pm.expect(return_statistics_lfs_objects_size).to.eql(return_statistics_job_artifacts_size),get+projects,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Branch API,statistics.job_artifacts_size
/projects&/projects&get&200():::EXIT,return.statistics.lfs_objects_size == return.statistics.packages_size,daikon.inv.binary.twoScalar.IntEqual,"(return.statistics.lfs_objects_size, return.statistics.packages_size)",pm.expect(return_statistics_lfs_objects_size).to.eql(return_statistics_packages_size),get+projects,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Branch API,statistics.lfs_objects_size
/projects&/projects&get&200():::EXIT,return.statistics.lfs_objects_size == return.statistics.snippets_size,daikon.inv.binary.twoScalar.IntEqual,"(return.statistics.lfs_objects_size, return.statistics.snippets_size)",pm.expect(return_statistics_lfs_objects_size).to.eql(return_statistics_snippets_size),get+projects,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Branch API,statistics.lfs_objects_size
/projects&/projects&get&200():::EXIT,"return.visibility one of { ""internal"", ""private"", ""public"" }",daikon.inv.unary.string.OneOfString,(return.visibility),"pm.expect([""internal"", ""private"", ""public""].includes(return_visibility)).to.be.true",get+projects,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Branch API,visibility
/projects&/projects&get&200():::EXIT,return.owner.id >= 1,daikon.inv.unary.scalar.LowerBound,(return.owner.id),pm.expect(return_owner_id).to.be.at.least(1),get+projects,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,text,GitLab Branch API,owner.id
/projects&/projects&get&200():::EXIT,return.open_issues_count >= 0,daikon.inv.unary.scalar.LowerBound,(return.open_issues_count),pm.expect(return_open_issues_count).to.be.at.least(0),get+projects,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,text,GitLab Branch API,open_issues_count
/projects&/projects&get&200():::EXIT,LENGTH(return.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.created_at),pm.expect(return_created_at).to.have.length(24),get+projects,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,text,GitLab Branch API,created_at
/projects&/projects&get&200():::EXIT,return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.created_at),"pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+projects,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,text,GitLab Branch API,created_at
/projects&/projects&get&200():::EXIT,LENGTH(return.last_activity_at)==24,daikon.inv.unary.string.FixedLengthString,(return.last_activity_at),pm.expect(return_last_activity_at).to.have.length(24),get+projects,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,text,GitLab Branch API,last_activity_at
/projects&/projects&get&200():::EXIT,return.last_activity_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.last_activity_at),"pm.expect(return_last_activity_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+projects,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,text,GitLab Branch API,last_activity_at
/projects&/projects&get&200():::EXIT,return.creator_id >= 1,daikon.inv.unary.scalar.LowerBound,(return.creator_id),pm.expect(return_creator_id).to.be.at.least(1),get+projects,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,text,GitLab Branch API,creator_id
/projects&/projects&get&200():::EXIT,return.namespace.id >= 1,daikon.inv.unary.scalar.LowerBound,(return.namespace.id),pm.expect(return_namespace_id).to.be.at.least(1),get+projects,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,text,GitLab Branch API,namespace.id
/projects&/projects&get&200():::EXIT,"return.namespace.kind one of { ""group"", ""user"" }",daikon.inv.unary.string.OneOfString,(return.namespace.kind),"pm.expect([""group"", ""user""].includes(return_namespace_kind)).to.be.true",get+projects,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Branch API,namespace.kind
/projects&/projects&get&200():::EXIT,"return.import_status one of { ""finished"", ""none"" }",daikon.inv.unary.string.OneOfString,(return.import_status),"pm.expect([""finished"", ""none""].includes(return_import_status)).to.be.true",get+projects,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Branch API,import_status
/projects&/projects&get&200():::EXIT,return.permissions.project_access.access_level == 50,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.project_access.access_level),pm.expect([50].includes(return_permissions_project_access_access_level)).to.be.true,get+projects,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Branch API,permissions.project_access.access_level
/projects&/projects&get&200():::EXIT,return.permissions.project_access.notification_level == 3,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.project_access.notification_level),pm.expect([3].includes(return_permissions_project_access_notification_level)).to.be.true,get+projects,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Branch API,permissions.project_access.notification_level
/projects&/projects&get&200():::EXIT,return.permissions.group_access.access_level == 50,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.group_access.access_level),pm.expect([50].includes(return_permissions_group_access_access_level)).to.be.true,get+projects,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Branch API,permissions.group_access.access_level
/projects&/projects&get&200():::EXIT,return.permissions.group_access.notification_level == 3,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.group_access.notification_level),pm.expect([3].includes(return_permissions_group_access_notification_level)).to.be.true,get+projects,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Branch API,permissions.group_access.notification_level
/projects&/projects&get&200():::EXIT,"return.avatar_url one of { ""https://gitlab.com/gropoutoux/bvcbvc/-/avatar"", ""https://gitlab.com/uploads/-/system/project/avatar/53268997/rect1.png"" }",daikon.inv.unary.string.OneOfString,(return.avatar_url),"pm.expect([""https://gitlab.com/gropoutoux/bvcbvc/-/avatar"", ""https://gitlab.com/uploads/-/system/project/avatar/53268997/rect1.png""].includes(return_avatar_url)).to.be.true",get+projects,,1.0,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Branch API,avatar_url
/projects&/projects&get&200():::EXIT,return.avatar_url is Url,daikon.inv.unary.string.IsUrl,(return.avatar_url),"pm.expect(return_avatar_url).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/)",get+projects,1.0,,,Indicates that the value of a string variable is always a URL. Represented as x is Url.,,text,GitLab Branch API,avatar_url
/projects&/projects&get&200():::EXIT,return.forks_count >= 0,daikon.inv.unary.scalar.LowerBound,(return.forks_count),pm.expect(return_forks_count).to.be.at.least(0),get+projects,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,text,GitLab Branch API,forks_count
/projects&/projects&get&200():::EXIT,return.star_count >= 0,daikon.inv.unary.scalar.LowerBound,(return.star_count),pm.expect(return_star_count).to.be.at.least(0),get+projects,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,text,GitLab Branch API,star_count
/projects&/projects&get&200():::EXIT,LENGTH(return.runners_token)==29,daikon.inv.unary.string.FixedLengthString,(return.runners_token),pm.expect(return_runners_token).to.have.length(29),get+projects,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,text,GitLab Branch API,runners_token
/projects&/projects&get&200():::EXIT,"return.merge_method one of { ""ff"", ""merge"", ""rebase_merge"" }",daikon.inv.unary.string.OneOfString,(return.merge_method),"pm.expect([""ff"", ""merge"", ""rebase_merge""].includes(return_merge_method)).to.be.true",get+projects,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Branch API,merge_method
/projects&/projects&get&200():::EXIT,"return.auto_devops_deploy_strategy one of { ""continuous"", ""manual"", ""timed_incremental"" }",daikon.inv.unary.string.OneOfString,(return.auto_devops_deploy_strategy),"pm.expect([""continuous"", ""manual"", ""timed_incremental""].includes(return_auto_devops_deploy_strategy)).to.be.true",get+projects,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Branch API,auto_devops_deploy_strategy
/projects&/projects&get&200():::EXIT,"return.repository_storage == ""default""",daikon.inv.unary.string.OneOfString,(return.repository_storage),"pm.expect([""default""].includes(return_repository_storage)).to.be.true",get+projects,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Branch API,repository_storage
/projects&/projects&get&200():::EXIT,LENGTH(return.repository_storage)==7,daikon.inv.unary.string.FixedLengthString,(return.repository_storage),pm.expect(return_repository_storage).to.have.length(7),get+projects,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,text,GitLab Branch API,repository_storage
/projects&/projects&get&200():::EXIT,"return.external_authorization_classification_label == """"",daikon.inv.unary.string.OneOfString,(return.external_authorization_classification_label),"pm.expect([""""].includes(return_external_authorization_classification_label)).to.be.true",get+projects,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Branch API,external_authorization_classification_label
/projects&/projects&get&200():::EXIT,LENGTH(return.external_authorization_classification_label)==0,daikon.inv.unary.string.FixedLengthString,(return.external_authorization_classification_label),pm.expect(return_external_authorization_classification_label).to.have.length(0),get+projects,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,text,GitLab Branch API,external_authorization_classification_label
/projects&/projects&get&200():::EXIT,return.service_desk_enabled == false,daikon.inv.unary.scalar.OneOfScalar,(return.service_desk_enabled),pm.expect(return_service_desk_enabled).to.eql(false),get+projects,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Branch API,service_desk_enabled
/projects&/projects&get&200():::EXIT,return.statistics.commit_count >= 0,daikon.inv.unary.scalar.LowerBound,(return.statistics.commit_count),pm.expect(return_statistics_commit_count).to.be.at.least(0),get+projects,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,text,GitLab Branch API,statistics.commit_count
/projects&/projects&get&200():::EXIT,return.statistics.storage_size >= 0,daikon.inv.unary.scalar.LowerBound,(return.statistics.storage_size),pm.expect(return_statistics_storage_size).to.be.at.least(0),get+projects,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,text,GitLab Branch API,statistics.storage_size
/projects&/projects&get&200():::EXIT,return.statistics.repository_size >= 0,daikon.inv.unary.scalar.LowerBound,(return.statistics.repository_size),pm.expect(return_statistics_repository_size).to.be.at.least(0),get+projects,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,text,GitLab Branch API,statistics.repository_size
/projects&/projects&get&200():::EXIT,"return.statistics.wiki_size one of { 0, 41943 }",daikon.inv.unary.scalar.OneOfScalar,(return.statistics.wiki_size),"pm.expect([0, 41943, 0].includes(return_statistics_wiki_size)).to.be.true",get+projects,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Branch API,statistics.wiki_size
/projects&/projects&get&200():::EXIT,return.statistics.lfs_objects_size == 0,daikon.inv.unary.scalar.OneOfScalar,(return.statistics.lfs_objects_size),pm.expect([0].includes(return_statistics_lfs_objects_size)).to.be.true,get+projects,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Branch API,statistics.lfs_objects_size
/projects&/projects&get&200():::EXIT,"size(return.shared_with_groups[]) one of { 0, 1 }",daikon.inv.unary.scalar.OneOfScalar,(size(return.shared_with_groups[..])),"pm.expect([0, 1, 0].includes(return_shared_with_groups_size_array)).to.be.true",get+projects,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Branch API,shared_with_groups
/projects&/projects&get&200():::EXIT,input.id_after < return.id,daikon.inv.binary.twoScalar.IntLessThan,"(input.id_after, return.id)",pm.expect(input_id_after).to.be.lessThan(return_id),get+projects,1.0,,,Represents an invariant of < between two long scalars. Prints as x < y.,,text,GitLab Branch API,id
/projects&/projects&get&200():::EXIT,input.id_before > return.id,daikon.inv.binary.twoScalar.IntGreaterThan,"(input.id_before, return.id)",pm.expect(input_id_before).to.be.greaterThan(return_id),get+projects,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,text,GitLab Branch API,id
/projects&/projects&get&200():::EXIT,input.id_before > return.owner.id,daikon.inv.binary.twoScalar.IntGreaterThan,"(input.id_before, return.owner.id)",pm.expect(input_id_before).to.be.greaterThan(return_owner_id),get+projects,,1.0,,Represents an invariant of > between two long scalars. Prints as x > y.,,text,GitLab Branch API,owner.id
/projects&/projects&get&200():::EXIT,input.id_before > return.creator_id,daikon.inv.binary.twoScalar.IntGreaterThan,"(input.id_before, return.creator_id)",pm.expect(input_id_before).to.be.greaterThan(return_creator_id),get+projects,,1.0,,Represents an invariant of > between two long scalars. Prints as x > y.,,text,GitLab Branch API,creator_id
/projects&/projects&get&200():::EXIT,return.id > return.open_issues_count,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.id, return.open_issues_count)",pm.expect(return_id).to.be.greaterThan(return_open_issues_count),get+projects,,1.0,,Represents an invariant of > between two long scalars. Prints as x > y.,,text,GitLab Branch API,id
/projects&/projects&get&200():::EXIT,return.id > return.forks_count,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.id, return.forks_count)",pm.expect(return_id).to.be.greaterThan(return_forks_count),get+projects,,1.0,,Represents an invariant of > between two long scalars. Prints as x > y.,,text,GitLab Branch API,id
/projects&/projects&get&200():::EXIT,return.id > return.star_count,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.id, return.star_count)",pm.expect(return_id).to.be.greaterThan(return_star_count),get+projects,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,text,GitLab Branch API,id
/projects&/projects&get&200():::EXIT,return.id > size(return.tag_list[]),daikon.inv.binary.twoScalar.IntGreaterThan,"(return.id, size(return.tag_list[..]))",pm.expect(return_id).to.be.greaterThan(return_tag_list_size_array),get+projects,1.0,,,Represents an invariant of > between two long scalars. Prints as x > y.,,text,GitLab Branch API,tag_list
/projects&/projects&get&200():::EXIT,return.default_branch is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.default_branch, return.readme_url)",pm.expect(return_readme_url.includes(return_default_branch)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Branch API,default_branch
/projects&/projects&get&200():::EXIT,return.path_with_namespace is a substring of return.ssh_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.ssh_url_to_repo, return.path_with_namespace)",pm.expect(return_ssh_url_to_repo.includes(return_path_with_namespace)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Branch API,path_with_namespace
/projects&/projects&get&200():::EXIT,return.web_url is a substring of return.http_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.http_url_to_repo, return.web_url)",pm.expect(return_http_url_to_repo.includes(return_web_url)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Branch API,web_url
/projects&/projects&get&200():::EXIT,return.web_url is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.readme_url)",pm.expect(return_readme_url.includes(return_web_url)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Branch API,web_url
/projects&/projects&get&200():::EXIT,return.path_with_namespace is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.path_with_namespace)",pm.expect(return_web_url.includes(return_path_with_namespace)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Branch API,path_with_namespace
/projects&/projects&get&200():::EXIT,return.owner.id > size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntGreaterThan,"(return.owner.id, size(return.shared_with_groups[..]))",pm.expect(return_owner_id).to.be.greaterThan(return_shared_with_groups_size_array),get+projects,,1.0,,Represents an invariant of > between two long scalars. Prints as x > y.,,text,GitLab Branch API,owner.id
/projects&/projects&get&200():::EXIT,return.owner.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.owner.name, return.name_with_namespace)",pm.expect(return_name_with_namespace.includes(return_owner_name)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Branch API,name_with_namespace
/projects&/projects&get&200():::EXIT,return.owner.name is a substring of return.avatar_url,daikon.inv.binary.twoString.StdString$SubString,"(return.owner.name, return.avatar_url)",pm.expect(return_avatar_url.includes(return_owner_name)).to.be.true,get+projects,,1.0,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Branch API,owner.name
/projects&/projects&get&200():::EXIT,return.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.name, return.name_with_namespace)",pm.expect(return_name_with_namespace.includes(return_name)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Branch API,name_with_namespace
/projects&/projects&get&200():::EXIT,return.namespace.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.name_with_namespace, return.namespace.name)",pm.expect(return_name_with_namespace.includes(return_namespace_name)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Branch API,name_with_namespace
/projects&/projects&get&200():::EXIT,return.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path, return.path_with_namespace)",pm.expect(return_path_with_namespace.includes(return_path)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Branch API,path_with_namespace
/projects&/projects&get&200():::EXIT,return.namespace.full_path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path_with_namespace, return.namespace.full_path)",pm.expect(return_path_with_namespace.includes(return_namespace_full_path)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Branch API,path_with_namespace
/projects&/projects&get&200():::EXIT,return.open_issues_count >= return.statistics.lfs_objects_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.open_issues_count, return.statistics.lfs_objects_size)",pm.expect(return_open_issues_count).to.be.at.least(return_statistics_lfs_objects_size),get+projects,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,text,GitLab Branch API,open_issues_count
/projects&/projects&get&200():::EXIT,return.creator_id >= size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.creator_id, size(return.shared_with_groups[..]))",pm.expect(return_creator_id).to.be.at.least(return_shared_with_groups_size_array),get+projects,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,text,GitLab Branch API,creator_id
/projects&/projects&get&200():::EXIT,return.namespace.id > size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntGreaterThan,"(return.namespace.id, size(return.shared_with_groups[..]))",pm.expect(return_namespace_id).to.be.greaterThan(return_shared_with_groups_size_array),get+projects,,1.0,,Represents an invariant of > between two long scalars. Prints as x > y.,,text,GitLab Branch API,namespace.id
/projects&/projects&get&200():::EXIT,return.namespace.path is a substring of return.namespace.full_path,daikon.inv.binary.twoString.StdString$SubString,"(return.namespace.path, return.namespace.full_path)",pm.expect(return_namespace_full_path.includes(return_namespace_path)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Branch API,namespace.path
/projects&/projects&get&200():::EXIT,return.permissions.group_access.notification_level >= return.forks_count,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.permissions.group_access.notification_level, return.forks_count)",pm.expect(return_permissions_group_access_notification_level).to.be.at.least(return_forks_count),get+projects,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,text,GitLab Branch API,permissions.group_access.notification_level
/projects&/projects&get&200():::EXIT,return.permissions.group_access.notification_level >= size(return.tag_list[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.permissions.group_access.notification_level, size(return.tag_list[..]))",pm.expect(return_permissions_group_access_notification_level).to.be.at.least(return_tag_list_size_array),get+projects,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,text,GitLab Branch API,tag_list
/projects&/projects&get&200():::EXIT,return.forks_count >= return.statistics.lfs_objects_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.forks_count, return.statistics.lfs_objects_size)",pm.expect(return_forks_count).to.be.at.least(return_statistics_lfs_objects_size),get+projects,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,text,GitLab Branch API,forks_count
/projects&/projects&get&200():::EXIT,return.star_count >= return.statistics.lfs_objects_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.star_count, return.statistics.lfs_objects_size)",pm.expect(return_star_count).to.be.at.least(return_statistics_lfs_objects_size),get+projects,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,text,GitLab Branch API,star_count
/projects&/projects&get&200():::EXIT,return.statistics.commit_count >= return.statistics.lfs_objects_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.commit_count, return.statistics.lfs_objects_size)",pm.expect(return_statistics_commit_count).to.be.at.least(return_statistics_lfs_objects_size),get+projects,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,text,GitLab Branch API,statistics.commit_count
/projects&/projects&get&200():::EXIT,return.statistics.commit_count >= size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.commit_count, size(return.shared_with_groups[..]))",pm.expect(return_statistics_commit_count).to.be.at.least(return_shared_with_groups_size_array),get+projects,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,text,GitLab Branch API,statistics.commit_count
/projects&/projects&get&200():::EXIT,return.statistics.storage_size >= return.statistics.repository_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.storage_size, return.statistics.repository_size)",pm.expect(return_statistics_storage_size).to.be.at.least(return_statistics_repository_size),get+projects,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,text,GitLab Branch API,statistics.storage_size
/projects&/projects&get&200():::EXIT,return.statistics.storage_size >= return.statistics.wiki_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.storage_size, return.statistics.wiki_size)",pm.expect(return_statistics_storage_size).to.be.at.least(return_statistics_wiki_size),get+projects,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,text,GitLab Branch API,statistics.storage_size
/projects&/projects&get&200():::EXIT,return.statistics.storage_size >= return.statistics.lfs_objects_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.storage_size, return.statistics.lfs_objects_size)",pm.expect(return_statistics_storage_size).to.be.at.least(return_statistics_lfs_objects_size),get+projects,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,text,GitLab Branch API,statistics.storage_size
/projects&/projects&get&200():::EXIT,return.statistics.storage_size >= size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.storage_size, size(return.shared_with_groups[..]))",pm.expect(return_statistics_storage_size).to.be.at.least(return_shared_with_groups_size_array),get+projects,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,text,GitLab Branch API,statistics.storage_size
/projects&/projects&get&200():::EXIT,return.statistics.repository_size >= return.statistics.lfs_objects_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.repository_size, return.statistics.lfs_objects_size)",pm.expect(return_statistics_repository_size).to.be.at.least(return_statistics_lfs_objects_size),get+projects,1.0,,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,text,GitLab Branch API,statistics.repository_size
/projects&/projects&get&200():::EXIT,return.statistics.repository_size >= size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.repository_size, size(return.shared_with_groups[..]))",pm.expect(return_statistics_repository_size).to.be.at.least(return_shared_with_groups_size_array),get+projects,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,text,GitLab Branch API,statistics.repository_size
/projects&/projects&get&200():::EXIT,return.statistics.wiki_size >= return.statistics.lfs_objects_size,daikon.inv.binary.twoScalar.IntGreaterEqual,"(return.statistics.wiki_size, return.statistics.lfs_objects_size)",pm.expect(return_statistics_wiki_size).to.be.at.least(return_statistics_lfs_objects_size),get+projects,,1.0,,Represents an invariant of >= between two long scalars. Prints as x >= y.,,text,GitLab Branch API,statistics.wiki_size
/projects&/projects&get&200():::EXIT,return.statistics.lfs_objects_size <= size(return.tag_list[]),daikon.inv.binary.twoScalar.IntLessEqual,"(return.statistics.lfs_objects_size, size(return.tag_list[..]))",pm.expect(return_statistics_lfs_objects_size).to.be.lte(return_tag_list_size_array),get+projects,,1.0,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,text,GitLab Branch API,tag_list
/projects&/projects&get&200():::EXIT,return.statistics.lfs_objects_size <= size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntLessEqual,"(return.statistics.lfs_objects_size, size(return.shared_with_groups[..]))",pm.expect(return_statistics_lfs_objects_size).to.be.lte(return_shared_with_groups_size_array),get+projects,,1.0,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,text,GitLab Branch API,statistics.lfs_objects_size
/projects&/projects&get&200():::EXIT,return._links.self is a substring of return._links.issues,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.issues)",pm.expect(return__links_issues.includes(return__links_self)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Branch API,_links.self
/projects&/projects&get&200():::EXIT,return._links.self is a substring of return._links.merge_requests,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.merge_requests)",pm.expect(return__links_merge_requests.includes(return__links_self)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Branch API,_links.self
/projects&/projects&get&200():::EXIT,return._links.self is a substring of return._links.repo_branches,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.repo_branches)",pm.expect(return__links_repo_branches.includes(return__links_self)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Branch API,_links.self
/projects&/projects&get&200():::EXIT,return._links.self is a substring of return._links.labels,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.labels)",pm.expect(return__links_labels.includes(return__links_self)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Branch API,_links.self
/projects&/projects&get&200():::EXIT,return._links.self is a substring of return._links.events,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.events)",pm.expect(return__links_events.includes(return__links_self)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Branch API,_links.self
/projects&/projects&get&200():::EXIT,return._links.self is a substring of return._links.members,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.members)",pm.expect(return__links_members.includes(return__links_self)).to.be.true,get+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Branch API,_links.self
/projects/{id}/repository/branches&/projects/{id}/repository/branches&get&200():::EXIT,LENGTH(return.commit.authored_date)==29,daikon.inv.unary.string.FixedLengthString,(return.commit.authored_date),pm.expect(return_commit_authored_date).to.have.length(29),get+projects_{id}_repository_branches,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,text,GitLab Branch API,commit.authored_date
/projects/{id}/repository/branches&/projects/{id}/repository/branches&get&200():::EXIT,return.commit.authored_date is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.commit.authored_date),"pm.expect(return_commit_authored_date).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+projects_{id}_repository_branches,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,text,GitLab Branch API,commit.authored_date
/projects/{id}/repository/branches&/projects/{id}/repository/branches&get&200():::EXIT,LENGTH(return.commit.created_at)==29,daikon.inv.unary.string.FixedLengthString,(return.commit.created_at),pm.expect(return_commit_created_at).to.have.length(29),get+projects_{id}_repository_branches,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,text,GitLab Branch API,commit.created_at
/projects/{id}/repository/branches&/projects/{id}/repository/branches&get&200():::EXIT,return.commit.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.commit.created_at),"pm.expect(return_commit_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",get+projects_{id}_repository_branches,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,text,GitLab Branch API,commit.created_at
/projects/{id}/repository/branches&/projects/{id}/repository/branches&get&200():::EXIT,LENGTH(return.commit.id)==40,daikon.inv.unary.string.FixedLengthString,(return.commit.id),pm.expect(return_commit_id).to.have.length(40),get+projects_{id}_repository_branches,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,text,GitLab Branch API,commit.id
/projects/{id}/repository/branches&/projects/{id}/repository/branches&get&200():::EXIT,LENGTH(return.commit.short_id)==8,daikon.inv.unary.string.FixedLengthString,(return.commit.short_id),pm.expect(return_commit_short_id).to.have.length(8),get+projects_{id}_repository_branches,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,text,GitLab Branch API,commit.short_id
/projects/{id}/repository/branches&/projects/{id}/repository/branches&get&200():::EXIT,All the elements of return.commit.parent_ids[] have LENGTH=40,daikon.inv.unary.stringsequence.SequenceFixedLengthString,(return.commit.parent_ids[..]),pm.expect(return_commit_parent_ids_array.every(element => element.length === 40)).to.be.true,get+projects_{id}_repository_branches,1.0,,,Indicates that all the elements of an array of strings have a fixed length n. Represented as All the elements of x have LENGTH=n.,,text,GitLab Branch API,commit.parent_ids
/projects/{id}/repository/branches&/projects/{id}/repository/branches&get&200():::EXIT,return.developers_can_merge == false,daikon.inv.unary.scalar.OneOfScalar,(return.developers_can_merge),pm.expect(return_developers_can_merge).to.eql(false),get+projects_{id}_repository_branches,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Branch API,developers_can_merge
/projects/{id}/repository/branches&/projects/{id}/repository/branches&get&200():::EXIT,"size(return.commit.parent_ids[]) one of { 0, 1, 2 }",daikon.inv.unary.scalar.OneOfScalar,(size(return.commit.parent_ids[..])),"pm.expect([0, 1, 2].includes(return_commit_parent_ids_size_array)).to.be.true",get+projects_{id}_repository_branches,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Branch API,commit.parent_ids
/projects/{id}/repository/branches&/projects/{id}/repository/branches&get&200():::EXIT,input.search is a substring of return.name,daikon.inv.binary.twoString.StdString$SubString,"(input.search, return.name)",pm.expect(return_name.includes(input_search)).to.be.true,get+projects_{id}_repository_branches,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Branch API,name
/projects/{id}/repository/branches&/projects/{id}/repository/branches&get&200():::EXIT,input.search is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(input.search, return.web_url)",pm.expect(return_web_url.includes(input_search)).to.be.true,get+projects_{id}_repository_branches,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Branch API,web_url
/projects/{id}/repository/branches&/projects/{id}/repository/branches&get&200():::EXIT,return.commit.short_id is a substring of return.commit.id,daikon.inv.binary.twoString.StdString$SubString,"(return.commit.id, return.commit.short_id)",pm.expect(return_commit_id.includes(return_commit_short_id)).to.be.true,get+projects_{id}_repository_branches,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Branch API,commit.id
/projects/{id}/repository/branches&/projects/{id}/repository/branches&get&200():::EXIT,return.commit.title is a substring of return.commit.message,daikon.inv.binary.twoString.StdString$SubString,"(return.commit.message, return.commit.title)",pm.expect(return_commit_message.includes(return_commit_title)).to.be.true,get+projects_{id}_repository_branches,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Branch API,commit.message
/projects&/projects&post&201():::EXIT,input.allow_merge_on_skipped_pipeline == return.allow_merge_on_skipped_pipeline,daikon.inv.binary.twoScalar.IntEqual,"(input.allow_merge_on_skipped_pipeline, return.allow_merge_on_skipped_pipeline)",pm.expect(input_allow_merge_on_skipped_pipeline).to.eql(return_allow_merge_on_skipped_pipeline),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Branch API,allow_merge_on_skipped_pipeline
/projects&/projects&post&201():::EXIT,input.auto_devops_deploy_strategy == return.auto_devops_deploy_strategy,daikon.inv.binary.twoString.StringEqual,"(input.auto_devops_deploy_strategy, return.auto_devops_deploy_strategy)",pm.expect(input_auto_devops_deploy_strategy).to.eql(return_auto_devops_deploy_strategy),post+projects,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,text,GitLab Branch API,auto_devops_deploy_strategy
/projects&/projects&post&201():::EXIT,input.auto_devops_enabled == return.auto_devops_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.auto_devops_enabled, return.auto_devops_enabled)",pm.expect(input_auto_devops_enabled).to.eql(return_auto_devops_enabled),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Branch API,auto_devops_enabled
/projects&/projects&post&201():::EXIT,input.autoclose_referenced_issues == return.autoclose_referenced_issues,daikon.inv.binary.twoScalar.IntEqual,"(input.autoclose_referenced_issues, return.autoclose_referenced_issues)",pm.expect(input_autoclose_referenced_issues).to.eql(return_autoclose_referenced_issues),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Branch API,autoclose_referenced_issues
/projects&/projects&post&201():::EXIT,input.container_registry_enabled == return.container_registry_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.container_registry_enabled, return.container_registry_enabled)",pm.expect(input_container_registry_enabled).to.eql(return_container_registry_enabled),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Branch API,container_registry_enabled
/projects&/projects&post&201():::EXIT,input.description == return.description,daikon.inv.binary.twoString.StringEqual,"(input.description, return.description)",pm.expect(input_description).to.eql(return_description),post+projects,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,text,GitLab Branch API,description
/projects&/projects&post&201():::EXIT,input.merge_method == return.merge_method,daikon.inv.binary.twoString.StringEqual,"(input.merge_method, return.merge_method)",pm.expect(input_merge_method).to.eql(return_merge_method),post+projects,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,text,GitLab Branch API,merge_method
/projects&/projects&post&201():::EXIT,input.name == return.name,daikon.inv.binary.twoString.StringEqual,"(input.name, return.name)",pm.expect(input_name).to.eql(return_name),post+projects,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,text,GitLab Branch API,name
/projects&/projects&post&201():::EXIT,input.namespace_id == return.namespace.id,daikon.inv.binary.twoScalar.IntEqual,"(input.namespace_id, return.namespace.id)",pm.expect(input_namespace_id).to.eql(return_namespace_id),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Branch API,namespace.id
/projects&/projects&post&201():::EXIT,input.only_allow_merge_if_all_discussions_are_resolved == return.only_allow_merge_if_all_discussions_are_resolved,daikon.inv.binary.twoScalar.IntEqual,"(input.only_allow_merge_if_all_discussions_are_resolved, return.only_allow_merge_if_all_discussions_are_resolved)",pm.expect(input_only_allow_merge_if_all_discussions_are_resolved).to.eql(return_only_allow_merge_if_all_discussions_are_resolved),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Branch API,only_allow_merge_if_all_discussions_are_resolved
/projects&/projects&post&201():::EXIT,input.only_allow_merge_if_pipeline_succeeds == return.only_allow_merge_if_pipeline_succeeds,daikon.inv.binary.twoScalar.IntEqual,"(input.only_allow_merge_if_pipeline_succeeds, return.only_allow_merge_if_pipeline_succeeds)",pm.expect(input_only_allow_merge_if_pipeline_succeeds).to.eql(return_only_allow_merge_if_pipeline_succeeds),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Branch API,only_allow_merge_if_pipeline_succeeds
/projects&/projects&post&201():::EXIT,input.packages_enabled == return.packages_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.packages_enabled, return.packages_enabled)",pm.expect(input_packages_enabled).to.eql(return_packages_enabled),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Branch API,packages_enabled
/projects&/projects&post&201():::EXIT,input.path == return.path,daikon.inv.binary.twoString.StringEqual,"(input.path, return.path)",pm.expect(input_path).to.eql(return_path),post+projects,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,text,GitLab Branch API,path
/projects&/projects&post&201():::EXIT,input.public_builds == return.public_jobs,daikon.inv.binary.twoScalar.IntEqual,"(input.public_builds, return.public_jobs)",pm.expect(input_public_builds).to.eql(return_public_jobs),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Branch API,public_jobs
/projects&/projects&post&201():::EXIT,input.remove_source_branch_after_merge == return.remove_source_branch_after_merge,daikon.inv.binary.twoScalar.IntEqual,"(input.remove_source_branch_after_merge, return.remove_source_branch_after_merge)",pm.expect(input_remove_source_branch_after_merge).to.eql(return_remove_source_branch_after_merge),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Branch API,remove_source_branch_after_merge
/projects&/projects&post&201():::EXIT,input.repository_storage == return.repository_storage,daikon.inv.binary.twoString.StringEqual,"(input.repository_storage, return.repository_storage)",pm.expect(input_repository_storage).to.eql(return_repository_storage),post+projects,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,text,GitLab Branch API,repository_storage
/projects&/projects&post&201():::EXIT,input.request_access_enabled == return.request_access_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.request_access_enabled, return.request_access_enabled)",pm.expect(input_request_access_enabled).to.eql(return_request_access_enabled),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Branch API,request_access_enabled
/projects&/projects&post&201():::EXIT,input.resolve_outdated_diff_discussions == return.resolve_outdated_diff_discussions,daikon.inv.binary.twoScalar.IntEqual,"(input.resolve_outdated_diff_discussions, return.resolve_outdated_diff_discussions)",pm.expect(input_resolve_outdated_diff_discussions).to.eql(return_resolve_outdated_diff_discussions),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Branch API,resolve_outdated_diff_discussions
/projects&/projects&post&201():::EXIT,input.shared_runners_enabled == return.shared_runners_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.shared_runners_enabled, return.shared_runners_enabled)",pm.expect(input_shared_runners_enabled).to.eql(return_shared_runners_enabled),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Branch API,shared_runners_enabled
/projects&/projects&post&201():::EXIT,input.visibility == return.visibility,daikon.inv.binary.twoString.StringEqual,"(input.visibility, return.visibility)",pm.expect(input_visibility).to.eql(return_visibility),post+projects,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,text,GitLab Branch API,visibility
/projects&/projects&post&201():::EXIT,return.owner.id == return.creator_id,daikon.inv.binary.twoScalar.IntEqual,"(return.owner.id, return.creator_id)",pm.expect(return_owner_id).to.eql(return_creator_id),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Branch API,owner.id
/projects&/projects&post&201():::EXIT,return.owner.name == return.namespace.name,daikon.inv.binary.twoString.StringEqual,"(return.owner.name, return.namespace.name)",pm.expect(return_owner_name).to.eql(return_namespace_name),post+projects,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,text,GitLab Branch API,owner.name
/projects&/projects&post&201():::EXIT,return.open_issues_count == return.forks_count,daikon.inv.binary.twoScalar.IntEqual,"(return.open_issues_count, return.forks_count)",pm.expect(return_open_issues_count).to.eql(return_forks_count),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Branch API,open_issues_count
/projects&/projects&post&201():::EXIT,return.merge_requests_enabled == return.can_create_merge_request_in,daikon.inv.binary.twoScalar.IntEqual,"(return.merge_requests_enabled, return.can_create_merge_request_in)",pm.expect(return_merge_requests_enabled).to.eql(return_can_create_merge_request_in),post+projects,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Branch API,merge_requests_enabled
/projects&/projects&post&201():::EXIT,return.archived == return.service_desk_enabled,daikon.inv.binary.twoScalar.IntEqual,"(return.archived, return.service_desk_enabled)",pm.expect(return_archived).to.eql(return_service_desk_enabled),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Branch API,archived
/projects&/projects&post&201():::EXIT,return.forks_count == return.star_count,daikon.inv.binary.twoScalar.IntEqual,"(return.forks_count, return.star_count)",pm.expect(return_forks_count).to.eql(return_star_count),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Branch API,forks_count
/projects&/projects&post&201():::EXIT,return.forks_count == size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntEqual,"(return.forks_count, size(return.shared_with_groups[..]))",pm.expect(return_forks_count).to.eql(return_shared_with_groups_size_array),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Branch API,forks_count
/projects&/projects&post&201():::EXIT,return.forks_count == size(return.shared_with_groups[]),daikon.inv.binary.twoScalar.IntEqual,"(return.forks_count, size(return.shared_with_groups[..]))",pm.expect(return_forks_count).to.eql(return_shared_with_groups_size_array),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Branch API,forks_count
/projects&/projects&post&201():::EXIT,size(input.tag_list[]) == size(return.tag_list[]),daikon.inv.binary.twoScalar.IntEqual,"(size(input.tag_list[..]), size(return.tag_list[..]))",pm.expect(input_tag_list_size_array).to.eql(return_tag_list_size_array),post+projects,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Branch API,tag_list
/projects&/projects&post&201():::EXIT,"return.visibility one of { ""internal"", ""private"", ""public"" }",daikon.inv.unary.string.OneOfString,(return.visibility),"pm.expect([""internal"", ""private"", ""public""].includes(return_visibility)).to.be.true",post+projects,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Branch API,visibility
/projects&/projects&post&201():::EXIT,return.open_issues_count == 0,daikon.inv.unary.scalar.OneOfScalar,(return.open_issues_count),pm.expect([0].includes(return_open_issues_count)).to.be.true,post+projects,,1.0,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Branch API,open_issues_count
/projects&/projects&post&201():::EXIT,LENGTH(return.created_at)==24,daikon.inv.unary.string.FixedLengthString,(return.created_at),pm.expect(return_created_at).to.have.length(24),post+projects,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,text,GitLab Branch API,created_at
/projects&/projects&post&201():::EXIT,return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.created_at),"pm.expect(return_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",post+projects,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,text,GitLab Branch API,created_at
/projects&/projects&post&201():::EXIT,LENGTH(return.last_activity_at)==24,daikon.inv.unary.string.FixedLengthString,(return.last_activity_at),pm.expect(return_last_activity_at).to.have.length(24),post+projects,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,text,GitLab Branch API,last_activity_at
/projects&/projects&post&201():::EXIT,return.last_activity_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.last_activity_at),"pm.expect(return_last_activity_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",post+projects,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,text,GitLab Branch API,last_activity_at
/projects&/projects&post&201():::EXIT,return.namespace.id >= 1,daikon.inv.unary.scalar.LowerBound,(return.namespace.id),pm.expect(return_namespace_id).to.be.at.least(1),post+projects,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,text,GitLab Branch API,namespace.id
/projects&/projects&post&201():::EXIT,"return.namespace.kind one of { ""group"", ""user"" }",daikon.inv.unary.string.OneOfString,(return.namespace.kind),"pm.expect([""group"", ""user""].includes(return_namespace_kind)).to.be.true",post+projects,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Branch API,namespace.kind
/projects&/projects&post&201():::EXIT,"return.import_status == ""none""",daikon.inv.unary.string.OneOfString,(return.import_status),"pm.expect([""none""].includes(return_import_status)).to.be.true",post+projects,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Branch API,import_status
/projects&/projects&post&201():::EXIT,LENGTH(return.import_status)==4,daikon.inv.unary.string.FixedLengthString,(return.import_status),pm.expect(return_import_status).to.have.length(4),post+projects,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,text,GitLab Branch API,import_status
/projects&/projects&post&201():::EXIT,return.permissions == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions),pm.expect(return_permissions).to.be.null,post+projects,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Branch API,permissions
/projects&/projects&post&201():::EXIT,return.permissions.project_access == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.project_access),pm.expect(return_permissions_project_access).to.be.null,post+projects,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Branch API,permissions.project_access
/projects&/projects&post&201():::EXIT,return.permissions.group_access == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.group_access),pm.expect(return_permissions_group_access).to.be.null,post+projects,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Branch API,permissions.group_access
/projects&/projects&post&201():::EXIT,return.archived == false,daikon.inv.unary.scalar.OneOfScalar,(return.archived),pm.expect(return_archived).to.eql(false),post+projects,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Branch API,archived
/projects&/projects&post&201():::EXIT,LENGTH(return.runners_token)==29,daikon.inv.unary.string.FixedLengthString,(return.runners_token),pm.expect(return_runners_token).to.have.length(29),post+projects,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,text,GitLab Branch API,runners_token
/projects&/projects&post&201():::EXIT,return.ci_default_git_depth == 20,daikon.inv.unary.scalar.OneOfScalar,(return.ci_default_git_depth),pm.expect([20].includes(return_ci_default_git_depth)).to.be.true,post+projects,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Branch API,ci_default_git_depth
/projects&/projects&post&201():::EXIT,return.ci_forward_deployment_enabled == true,daikon.inv.unary.scalar.OneOfScalar,(return.ci_forward_deployment_enabled),pm.expect(return_ci_forward_deployment_enabled).to.eql(true),post+projects,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Branch API,ci_forward_deployment_enabled
/projects&/projects&post&201():::EXIT,return.shared_with_groups[] == [],daikon.inv.unary.sequence.OneOfSequence,(return.shared_with_groups[..]),pm.expect([[]].some(value => pm.expect(return_shared_with_groups_array).to.deep.equal(value).that)).to.be.true,post+projects,1.0,,,"Represents long[] variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Branch API,shared_with_groups
/projects&/projects&post&201():::EXIT,"return.merge_method one of { ""ff"", ""merge"", ""rebase_merge"" }",daikon.inv.unary.string.OneOfString,(return.merge_method),"pm.expect([""ff"", ""merge"", ""rebase_merge""].includes(return_merge_method)).to.be.true",post+projects,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Branch API,merge_method
/projects&/projects&post&201():::EXIT,"return.auto_devops_deploy_strategy one of { ""continuous"", ""manual"", ""timed_incremental"" }",daikon.inv.unary.string.OneOfString,(return.auto_devops_deploy_strategy),"pm.expect([""continuous"", ""manual"", ""timed_incremental""].includes(return_auto_devops_deploy_strategy)).to.be.true",post+projects,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Branch API,auto_devops_deploy_strategy
/projects&/projects&post&201():::EXIT,"return.repository_storage == ""default""",daikon.inv.unary.string.OneOfString,(return.repository_storage),"pm.expect([""default""].includes(return_repository_storage)).to.be.true",post+projects,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Branch API,repository_storage
/projects&/projects&post&201():::EXIT,LENGTH(return.repository_storage)==7,daikon.inv.unary.string.FixedLengthString,(return.repository_storage),pm.expect(return_repository_storage).to.have.length(7),post+projects,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,text,GitLab Branch API,repository_storage
/projects&/projects&post&201():::EXIT,return.statistics == null,daikon.inv.unary.scalar.OneOfScalar,(return.statistics),pm.expect(return_statistics).to.be.null,post+projects,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Branch API,statistics
/projects&/projects&post&201():::EXIT,input.default_branch is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(input.default_branch, return.readme_url)",pm.expect(return_readme_url.includes(input_default_branch)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Branch API,readme_url
/projects&/projects&post&201():::EXIT,input.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(input.name, return.name_with_namespace)",pm.expect(return_name_with_namespace.includes(input_name)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Branch API,name_with_namespace
/projects&/projects&post&201():::EXIT,input.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(input.path, return.path_with_namespace)",pm.expect(return_path_with_namespace.includes(input_path)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Branch API,path_with_namespace
/projects&/projects&post&201():::EXIT,return.id > return.namespace.id,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.id, return.namespace.id)",pm.expect(return_id).to.be.greaterThan(return_namespace_id),post+projects,,1.0,,Represents an invariant of > between two long scalars. Prints as x > y.,,text,GitLab Branch API,id
/projects&/projects&post&201():::EXIT,return.default_branch is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.default_branch, return.readme_url)",pm.expect(return_readme_url.includes(return_default_branch)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Branch API,default_branch
/projects&/projects&post&201():::EXIT,return.path_with_namespace is a substring of return.ssh_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.ssh_url_to_repo, return.path_with_namespace)",pm.expect(return_ssh_url_to_repo.includes(return_path_with_namespace)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Branch API,path_with_namespace
/projects&/projects&post&201():::EXIT,return.web_url is a substring of return.http_url_to_repo,daikon.inv.binary.twoString.StdString$SubString,"(return.http_url_to_repo, return.web_url)",pm.expect(return_http_url_to_repo.includes(return_web_url)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Branch API,web_url
/projects&/projects&post&201():::EXIT,return.web_url is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.readme_url)",pm.expect(return_readme_url.includes(return_web_url)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Branch API,web_url
/projects&/projects&post&201():::EXIT,return.path_with_namespace is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(return.web_url, return.path_with_namespace)",pm.expect(return_web_url.includes(return_path_with_namespace)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Branch API,path_with_namespace
/projects&/projects&post&201():::EXIT,return.owner.id <= return.namespace.id,daikon.inv.binary.twoScalar.IntLessEqual,"(return.owner.id, return.namespace.id)",pm.expect(return_owner_id).to.be.lte(return_namespace_id),post+projects,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,text,GitLab Branch API,owner.id
/projects&/projects&post&201():::EXIT,return.owner.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.owner.name, return.name_with_namespace)",pm.expect(return_name_with_namespace.includes(return_owner_name)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Branch API,name_with_namespace
/projects&/projects&post&201():::EXIT,return.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.name, return.name_with_namespace)",pm.expect(return_name_with_namespace.includes(return_name)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Branch API,name_with_namespace
/projects&/projects&post&201():::EXIT,return.namespace.name is a substring of return.name_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.name_with_namespace, return.namespace.name)",pm.expect(return_name_with_namespace.includes(return_namespace_name)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Branch API,name_with_namespace
/projects&/projects&post&201():::EXIT,return.path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path, return.path_with_namespace)",pm.expect(return_path_with_namespace.includes(return_path)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Branch API,path_with_namespace
/projects&/projects&post&201():::EXIT,return.namespace.full_path is a substring of return.path_with_namespace,daikon.inv.binary.twoString.StdString$SubString,"(return.path_with_namespace, return.namespace.full_path)",pm.expect(return_path_with_namespace.includes(return_namespace_full_path)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Branch API,path_with_namespace
/projects&/projects&post&201():::EXIT,return.open_issues_count <= size(return.tag_list[]),daikon.inv.binary.twoScalar.IntLessEqual,"(return.open_issues_count, size(return.tag_list[..]))",pm.expect(return_open_issues_count).to.be.lte(return_tag_list_size_array),post+projects,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,text,GitLab Branch API,tag_list
/projects&/projects&post&201():::EXIT,return.creator_id <= return.namespace.id,daikon.inv.binary.twoScalar.IntLessEqual,"(return.creator_id, return.namespace.id)",pm.expect(return_creator_id).to.be.lte(return_namespace_id),post+projects,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,text,GitLab Branch API,creator_id
/projects&/projects&post&201():::EXIT,return.namespace.path is a substring of return.namespace.full_path,daikon.inv.binary.twoString.StdString$SubString,"(return.namespace.path, return.namespace.full_path)",pm.expect(return_namespace_full_path.includes(return_namespace_path)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Branch API,namespace.path
/projects&/projects&post&201():::EXIT,return.forks_count <= size(return.tag_list[]),daikon.inv.binary.twoScalar.IntLessEqual,"(return.forks_count, size(return.tag_list[..]))",pm.expect(return_forks_count).to.be.lte(return_tag_list_size_array),post+projects,1.0,,,Represents an invariant of <= between two long scalars. Prints as x <= y.,,text,GitLab Branch API,tag_list
/projects&/projects&post&201():::EXIT,return._links.self is a substring of return._links.issues,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.issues)",pm.expect(return__links_issues.includes(return__links_self)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Branch API,_links.self
/projects&/projects&post&201():::EXIT,return._links.self is a substring of return._links.merge_requests,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.merge_requests)",pm.expect(return__links_merge_requests.includes(return__links_self)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Branch API,_links.self
/projects&/projects&post&201():::EXIT,return._links.self is a substring of return._links.repo_branches,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.repo_branches)",pm.expect(return__links_repo_branches.includes(return__links_self)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Branch API,_links.self
/projects&/projects&post&201():::EXIT,return._links.self is a substring of return._links.labels,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.labels)",pm.expect(return__links_labels.includes(return__links_self)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Branch API,_links.self
/projects&/projects&post&201():::EXIT,return._links.self is a substring of return._links.events,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.events)",pm.expect(return__links_events.includes(return__links_self)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Branch API,_links.self
/projects&/projects&post&201():::EXIT,return._links.self is a substring of return._links.members,daikon.inv.binary.twoString.StdString$SubString,"(return._links.self, return._links.members)",pm.expect(return__links_members.includes(return__links_self)).to.be.true,post+projects,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Branch API,_links.self
/projects/{id}/protected_branches&/projects/{id}/protected_branches&post&201&merge_access_levels():::EXIT,return.access_level >= 0,daikon.inv.unary.scalar.LowerBound,(return.access_level),pm.expect(return_access_level).to.be.at.least(0),post+projects_{id}_protected_branches,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,text,GitLab Branch API,merge_access_levels.access_level
/projects/{id}/protected_branches&/projects/{id}/protected_branches&post&201&merge_access_levels():::EXIT,"return.access_level_description one of { ""Developers + Maintainers"", ""Maintainers"", ""No one"" }",daikon.inv.unary.string.OneOfString,(return.access_level_description),"pm.expect([""Developers + Maintainers"", ""Maintainers"", ""No one""].includes(return_access_level_description)).to.be.true",post+projects_{id}_protected_branches,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Branch API,merge_access_levels.access_level_description
/projects/{id}/protected_branches&/projects/{id}/protected_branches&post&201&push_access_levels():::EXIT,return.access_level >= 0,daikon.inv.unary.scalar.LowerBound,(return.access_level),pm.expect(return_access_level).to.be.at.least(0),post+projects_{id}_protected_branches,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,text,GitLab Branch API,push_access_levels.access_level
/projects/{id}/protected_branches&/projects/{id}/protected_branches&post&201&push_access_levels():::EXIT,"return.access_level_description one of { ""Developers + Maintainers"", ""Maintainers"", ""No one"" }",daikon.inv.unary.string.OneOfString,(return.access_level_description),"pm.expect([""Developers + Maintainers"", ""Maintainers"", ""No one""].includes(return_access_level_description)).to.be.true",post+projects_{id}_protected_branches,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Branch API,push_access_levels.access_level_description
/projects/{id}/protected_branches&/projects/{id}/protected_branches&post&201&unprotect_access_levels():::EXIT,return.access_level >= 0,daikon.inv.unary.scalar.LowerBound,(return.access_level),pm.expect(return_access_level).to.be.at.least(0),post+projects_{id}_protected_branches,1.0,,,"Represents the invariant x >= c, where c is a constant and x is a long scalar.",,text,GitLab Branch API,unprotect_access_levels.access_level
/projects/{id}/protected_branches&/projects/{id}/protected_branches&post&201&unprotect_access_levels():::EXIT,"return.access_level_description one of { ""Developers + Maintainers"", ""Maintainers"", ""No one"" }",daikon.inv.unary.string.OneOfString,(return.access_level_description),"pm.expect([""Developers + Maintainers"", ""Maintainers"", ""No one""].includes(return_access_level_description)).to.be.true",post+projects_{id}_protected_branches,1.0,,,"Represents String variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Branch API,unprotect_access_levels.access_level_description
/projects/{id}/protected_branches&/projects/{id}/protected_branches&post&201():::EXIT,input.name == return.name,daikon.inv.binary.twoString.StringEqual,"(input.name, return.name)",pm.expect(input_name).to.eql(return_name),post+projects_{id}_protected_branches,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,text,GitLab Branch API,name
/projects/{id}/protected_branches&/projects/{id}/protected_branches&post&201():::EXIT,input.allow_force_push == return.allow_force_push,daikon.inv.binary.twoScalar.IntEqual,"(input.allow_force_push, return.allow_force_push)",pm.expect(input_allow_force_push).to.eql(return_allow_force_push),post+projects_{id}_protected_branches,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Branch API,allow_force_push
/projects/{id}/protected_branches&/projects/{id}/protected_branches&post&201():::EXIT,size(return.merge_access_levels[]) == size(return.push_access_levels[]),daikon.inv.binary.twoScalar.IntEqual,"(size(return.merge_access_levels[..]), size(return.push_access_levels[..]))",pm.expect(return_merge_access_levels_size_array).to.eql(return_push_access_levels_size_array),post+projects_{id}_protected_branches,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Branch API,merge_access_levels
/projects/{id}/protected_branches&/projects/{id}/protected_branches&post&201():::EXIT,size(return.merge_access_levels[]) == size(return.push_access_levels[]),daikon.inv.binary.twoScalar.IntEqual,"(size(return.merge_access_levels[..]), size(return.push_access_levels[..]))",pm.expect(return_merge_access_levels_size_array).to.eql(return_push_access_levels_size_array),post+projects_{id}_protected_branches,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Branch API,merge_access_levels
/projects/{id}/protected_branches&/projects/{id}/protected_branches&post&201():::EXIT,size(return.merge_access_levels[]) == size(return.unprotect_access_levels[]),daikon.inv.binary.twoScalar.IntEqual,"(size(return.merge_access_levels[..]), size(return.unprotect_access_levels[..]))",pm.expect(return_merge_access_levels_size_array).to.eql(return_unprotect_access_levels_size_array),post+projects_{id}_protected_branches,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Branch API,merge_access_levels
/projects/{id}/protected_branches&/projects/{id}/protected_branches&post&201():::EXIT,size(return.merge_access_levels[]) == size(return.unprotect_access_levels[]),daikon.inv.binary.twoScalar.IntEqual,"(size(return.merge_access_levels[..]), size(return.unprotect_access_levels[..]))",pm.expect(return_merge_access_levels_size_array).to.eql(return_unprotect_access_levels_size_array),post+projects_{id}_protected_branches,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Branch API,merge_access_levels
/projects/{id}/protected_branches&/projects/{id}/protected_branches&post&201():::EXIT,return.code_owner_approval_required == false,daikon.inv.unary.scalar.OneOfScalar,(return.code_owner_approval_required),pm.expect(return_code_owner_approval_required).to.eql(false),post+projects_{id}_protected_branches,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Branch API,code_owner_approval_required
/projects/{id}/protected_branches&/projects/{id}/protected_branches&post&201():::EXIT,size(return.merge_access_levels[]) == 1,daikon.inv.unary.scalar.OneOfScalar,(size(return.merge_access_levels[..])),pm.expect([1].includes(return_merge_access_levels_size_array)).to.be.true,post+projects_{id}_protected_branches,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Branch API,merge_access_levels
/projects/{id}/repository/branches&/projects/{id}/repository/branches&post&201():::EXIT,input.branch == return.name,daikon.inv.binary.twoString.StringEqual,"(input.branch, return.name)",pm.expect(input_branch).to.eql(return_name),post+projects_{id}_repository_branches,1.0,,,Represents an invariant of == between two String scalars. Prints as x == y.,,text,GitLab Branch API,name
/projects/{id}/repository/branches&/projects/{id}/repository/branches&post&201():::EXIT,return.default == return.developers_can_merge,daikon.inv.binary.twoScalar.IntEqual,"(return.default, return.developers_can_merge)",pm.expect(return_default).to.eql(return_developers_can_merge),post+projects_{id}_repository_branches,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Branch API,default
/projects/{id}/repository/branches&/projects/{id}/repository/branches&post&201():::EXIT,return.default == return.developers_can_push,daikon.inv.binary.twoScalar.IntEqual,"(return.default, return.developers_can_push)",pm.expect(return_default).to.eql(return_developers_can_push),post+projects_{id}_repository_branches,1.0,,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Branch API,default
/projects/{id}/repository/branches&/projects/{id}/repository/branches&post&201():::EXIT,return.default == return.protected,daikon.inv.binary.twoScalar.IntEqual,"(return.default, return.protected)",pm.expect(return_default).to.eql(return_protected),post+projects_{id}_repository_branches,,1.0,,Represents an invariant of == between two long scalars. Prints as x == y.,,text,GitLab Branch API,default
/projects/{id}/repository/branches&/projects/{id}/repository/branches&post&201():::EXIT,return.can_push == true,daikon.inv.unary.scalar.OneOfScalar,(return.can_push),pm.expect(return_can_push).to.eql(true),post+projects_{id}_repository_branches,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Branch API,can_push
/projects/{id}/repository/branches&/projects/{id}/repository/branches&post&201():::EXIT,LENGTH(return.commit.authored_date)==29,daikon.inv.unary.string.FixedLengthString,(return.commit.authored_date),pm.expect(return_commit_authored_date).to.have.length(29),post+projects_{id}_repository_branches,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,text,GitLab Branch API,commit.authored_date
/projects/{id}/repository/branches&/projects/{id}/repository/branches&post&201():::EXIT,return.commit.authored_date is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.commit.authored_date),"pm.expect(return_commit_authored_date).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",post+projects_{id}_repository_branches,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,text,GitLab Branch API,commit.authored_date
/projects/{id}/repository/branches&/projects/{id}/repository/branches&post&201():::EXIT,return.commit.author_email is Email,daikon.inv.unary.string.IsEmail,(return.commit.author_email),"pm.expect(return_commit_author_email).to.match(/^(?:[A-Za-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[A-Za-z0-9!#$%&'*+/=?^_`{|}~-]+)*|""(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*"")@(?:(?:[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?\.)+[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9]^[0-9]?|[A-Za-z0-9-]*[A-Za-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])$/)",post+projects_{id}_repository_branches,1.0,,,Indicates that a string variable consistently holds values that match the format of an email address.,,text,GitLab Branch API,commit.author_email
/projects/{id}/repository/branches&/projects/{id}/repository/branches&post&201():::EXIT,return.commit.committer_email is Email,daikon.inv.unary.string.IsEmail,(return.commit.committer_email),"pm.expect(return_commit_committer_email).to.match(/^(?:[A-Za-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[A-Za-z0-9!#$%&'*+/=?^_`{|}~-]+)*|""(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*"")@(?:(?:[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?\.)+[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9]^[0-9]?|[A-Za-z0-9-]*[A-Za-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])$/)",post+projects_{id}_repository_branches,1.0,,,Indicates that a string variable consistently holds values that match the format of an email address.,,text,GitLab Branch API,commit.committer_email
/projects/{id}/repository/branches&/projects/{id}/repository/branches&post&201():::EXIT,LENGTH(return.commit.created_at)==29,daikon.inv.unary.string.FixedLengthString,(return.commit.created_at),pm.expect(return_commit_created_at).to.have.length(29),post+projects_{id}_repository_branches,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,text,GitLab Branch API,commit.created_at
/projects/{id}/repository/branches&/projects/{id}/repository/branches&post&201():::EXIT,return.commit.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional),daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm,(return.commit.created_at),"pm.expect(return_commit_created_at).to.match(/^[0-9]{4}-((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(02)-(0[1-9]|[12][0-9]))T(0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3}){0,1}(Z|(-|\+)(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$/)",post+projects_{id}_repository_branches,1.0,,,Indicates that the value of a string variable is always a timestamp. Represented as x is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional).,,text,GitLab Branch API,commit.created_at
/projects/{id}/repository/branches&/projects/{id}/repository/branches&post&201():::EXIT,LENGTH(return.commit.id)==40,daikon.inv.unary.string.FixedLengthString,(return.commit.id),pm.expect(return_commit_id).to.have.length(40),post+projects_{id}_repository_branches,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,text,GitLab Branch API,commit.id
/projects/{id}/repository/branches&/projects/{id}/repository/branches&post&201():::EXIT,LENGTH(return.commit.short_id)==8,daikon.inv.unary.string.FixedLengthString,(return.commit.short_id),pm.expect(return_commit_short_id).to.have.length(8),post+projects_{id}_repository_branches,1.0,,,Indicates that the value of a string variable always has a fixed length n. Represented as LENGTH(x)==n.,,text,GitLab Branch API,commit.short_id
/projects/{id}/repository/branches&/projects/{id}/repository/branches&post&201():::EXIT,All the elements of return.commit.parent_ids[] have LENGTH=40,daikon.inv.unary.stringsequence.SequenceFixedLengthString,(return.commit.parent_ids[..]),pm.expect(return_commit_parent_ids_array.every(element => element.length === 40)).to.be.true,post+projects_{id}_repository_branches,1.0,,,Indicates that all the elements of an array of strings have a fixed length n. Represented as All the elements of x have LENGTH=n.,,text,GitLab Branch API,commit.parent_ids
/projects/{id}/repository/branches&/projects/{id}/repository/branches&post&201():::EXIT,return.default == false,daikon.inv.unary.scalar.OneOfScalar,(return.default),pm.expect(return_default).to.eql(false),post+projects_{id}_repository_branches,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Branch API,default
/projects/{id}/repository/branches&/projects/{id}/repository/branches&post&201():::EXIT,"size(return.commit.parent_ids[]) one of { 0, 1, 2 }",daikon.inv.unary.scalar.OneOfScalar,(size(return.commit.parent_ids[..])),"pm.expect([0, 1, 2].includes(return_commit_parent_ids_size_array)).to.be.true",post+projects_{id}_repository_branches,1.0,,,"Represents long variables that take on only a few distinct values. Prints as either x == c (when there is only one value) or as x one of {c1, c2, c3} (when there are multiple values).",,text,GitLab Branch API,commit.parent_ids
/projects/{id}/repository/branches&/projects/{id}/repository/branches&post&201():::EXIT,input.branch is a substring of return.web_url,daikon.inv.binary.twoString.StdString$SubString,"(input.branch, return.web_url)",pm.expect(return_web_url.includes(input_branch)).to.be.true,post+projects_{id}_repository_branches,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Branch API,web_url
/projects/{id}/repository/branches&/projects/{id}/repository/branches&post&201():::EXIT,return.commit.short_id is a substring of return.commit.id,daikon.inv.binary.twoString.StdString$SubString,"(return.commit.id, return.commit.short_id)",pm.expect(return_commit_id.includes(return_commit_short_id)).to.be.true,post+projects_{id}_repository_branches,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Branch API,commit.id
/projects/{id}/repository/branches&/projects/{id}/repository/branches&post&201():::EXIT,return.commit.title is a substring of return.commit.message,daikon.inv.binary.twoString.StdString$SubString,"(return.commit.message, return.commit.title)",pm.expect(return_commit_message.includes(return_commit_title)).to.be.true,post+projects_{id}_repository_branches,1.0,,,Represents the substring invariant between two String scalars. Prints as x is a substring of y.,,text,GitLab Branch API,commit.message
