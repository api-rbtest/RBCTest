endpoint,group,invariant,invariantType,variables,pptname,tp
get+projects,_links.self,"return._links.self is a substring of return._links.issues
return._links.self is a substring of return._links.merge_requests
return._links.self is a substring of return._links.repo_branches
return._links.self is a substring of return._links.labels
return._links.self is a substring of return._links.events
return._links.self is a substring of return._links.members","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return._links.self, return._links.issues)
(return._links.self, return._links.merge_requests)
(return._links.self, return._links.repo_branches)
(return._links.self, return._links.labels)
(return._links.self, return._links.events)
(return._links.self, return._links.members)","/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT",1.0
get+projects,archived,input.archived == return.archived,daikon.inv.binary.twoScalar.IntEqual,"(input.archived, return.archived)",/projects&/projects&get&200():::EXIT,1.0
get+projects,array,input.id_after > size(return.array[]),daikon.inv.binary.twoScalar.IntGreaterThan,"(input.id_after, size(return.array[..]))",/projects&/projects&get&200%array():::EXIT,0.0
get+projects,auto_devops_deploy_strategy,"return.auto_devops_deploy_strategy one of { ""continuous"", ""manual"", ""timed_incremental"" }",daikon.inv.unary.string.OneOfString,(return.auto_devops_deploy_strategy),/projects&/projects&get&200():::EXIT,1.0
get+projects,avatar_url,"return.avatar_url one of { ""https://gitlab.com/gropoutoux/bvcbvc/-/avatar"", ""https://gitlab.com/uploads/-/system/project/avatar/53268997/rect1.png"" }
return.avatar_url is Url","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.IsUrl","(return.avatar_url)
(return.avatar_url)","/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT",0.5
get+projects,created_at,"LENGTH(return.created_at)==24
return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.created_at)
(return.created_at)","/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT",1.0
get+projects,creator_id,"return.creator_id >= 1
input.id_before > return.creator_id
return.creator_id >= size(return.shared_with_groups[])","daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.twoScalar.IntGreaterThan
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.creator_id)
(input.id_before, return.creator_id)
(return.creator_id, size(return.shared_with_groups[..]))","/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT",0.3333333333333333
get+projects,default_branch,return.default_branch is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.default_branch, return.readme_url)",/projects&/projects&get&200():::EXIT,1.0
get+projects,external_authorization_classification_label,"return.external_authorization_classification_label == """"
LENGTH(return.external_authorization_classification_label)==0","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.external_authorization_classification_label)
(return.external_authorization_classification_label)","/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT",0.0
get+projects,forks_count,"return.forks_count >= 0
return.forks_count >= return.statistics.lfs_objects_size","daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.forks_count)
(return.forks_count, return.statistics.lfs_objects_size)","/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT",0.5
get+projects,id,"input.id_after < return.id
input.id_before > return.id
return.id > return.open_issues_count
return.id > return.forks_count
return.id > return.star_count","daikon.inv.binary.twoScalar.IntLessThan
daikon.inv.binary.twoScalar.IntGreaterThan
daikon.inv.binary.twoScalar.IntGreaterThan
daikon.inv.binary.twoScalar.IntGreaterThan
daikon.inv.binary.twoScalar.IntGreaterThan","(input.id_after, return.id)
(input.id_before, return.id)
(return.id, return.open_issues_count)
(return.id, return.forks_count)
(return.id, return.star_count)","/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT",0.6
get+projects,import_status,"return.import_status one of { ""finished"", ""none"" }",daikon.inv.unary.string.OneOfString,(return.import_status),/projects&/projects&get&200():::EXIT,0.0
get+projects,last_activity_at,"LENGTH(return.last_activity_at)==24
return.last_activity_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.last_activity_at)
(return.last_activity_at)","/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT",1.0
get+projects,merge_method,"return.merge_method one of { ""ff"", ""merge"", ""rebase_merge"" }",daikon.inv.unary.string.OneOfString,(return.merge_method),/projects&/projects&get&200():::EXIT,1.0
get+projects,name_with_namespace,"return.owner.name is a substring of return.name_with_namespace
return.name is a substring of return.name_with_namespace
return.namespace.name is a substring of return.name_with_namespace","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return.owner.name, return.name_with_namespace)
(return.name, return.name_with_namespace)
(return.name_with_namespace, return.namespace.name)","/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT",1.0
get+projects,namespace.id,"return.namespace.id >= 1
return.namespace.id > size(return.shared_with_groups[])","daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.twoScalar.IntGreaterThan","(return.namespace.id)
(return.namespace.id, size(return.shared_with_groups[..]))","/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT",0.5
get+projects,namespace.kind,"return.namespace.kind one of { ""group"", ""user"" }",daikon.inv.unary.string.OneOfString,(return.namespace.kind),/projects&/projects&get&200():::EXIT,1.0
get+projects,namespace.path,return.namespace.path is a substring of return.namespace.full_path,daikon.inv.binary.twoString.StdString$SubString,"(return.namespace.path, return.namespace.full_path)",/projects&/projects&get&200():::EXIT,1.0
get+projects,open_issues_count,"return.open_issues_count >= 0
return.open_issues_count >= return.statistics.lfs_objects_size","daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.open_issues_count)
(return.open_issues_count, return.statistics.lfs_objects_size)","/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT",0.5
get+projects,owner.id,"return.owner.id >= 1
input.id_before > return.owner.id
return.owner.id > size(return.shared_with_groups[])","daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.twoScalar.IntGreaterThan
daikon.inv.binary.twoScalar.IntGreaterThan","(return.owner.id)
(input.id_before, return.owner.id)
(return.owner.id, size(return.shared_with_groups[..]))","/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT",0.3333333333333333
get+projects,owner.name,"return.owner.name == return.namespace.name
return.owner.name is a substring of return.avatar_url","daikon.inv.binary.twoString.StringEqual
daikon.inv.binary.twoString.StdString$SubString","(return.owner.name, return.namespace.name)
(return.owner.name, return.avatar_url)","/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT",0.5
get+projects,path_with_namespace,"return.path_with_namespace is a substring of return.ssh_url_to_repo
return.path_with_namespace is a substring of return.web_url
return.path is a substring of return.path_with_namespace
return.namespace.full_path is a substring of return.path_with_namespace","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return.ssh_url_to_repo, return.path_with_namespace)
(return.web_url, return.path_with_namespace)
(return.path, return.path_with_namespace)
(return.path_with_namespace, return.namespace.full_path)","/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT",1.0
get+projects,permissions.group_access.access_level,return.permissions.group_access.access_level == 50,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.group_access.access_level),/projects&/projects&get&200():::EXIT,0.0
get+projects,permissions.group_access.notification_level,"return.permissions.group_access.notification_level == 3
return.permissions.group_access.notification_level >= return.forks_count","daikon.inv.unary.scalar.OneOfScalar
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.permissions.group_access.notification_level)
(return.permissions.group_access.notification_level, return.forks_count)","/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT",0.5
get+projects,permissions.project_access.access_level,"return.permissions.project_access.access_level == return.permissions.group_access.access_level
return.permissions.project_access.access_level == 50","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.OneOfScalar","(return.permissions.project_access.access_level, return.permissions.group_access.access_level)
(return.permissions.project_access.access_level)","/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT",0.5
get+projects,permissions.project_access.notification_level,"return.permissions.project_access.notification_level == return.permissions.group_access.notification_level
return.permissions.project_access.notification_level == 3","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.OneOfScalar","(return.permissions.project_access.notification_level, return.permissions.group_access.notification_level)
(return.permissions.project_access.notification_level)","/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT",1.0
get+projects,repository_storage,"return.repository_storage == ""default""
LENGTH(return.repository_storage)==7","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.repository_storage)
(return.repository_storage)","/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT",1.0
get+projects,runners_token,LENGTH(return.runners_token)==29,daikon.inv.unary.string.FixedLengthString,(return.runners_token),/projects&/projects&get&200():::EXIT,1.0
get+projects,service_desk_enabled,"input.simple == return.service_desk_enabled
return.service_desk_enabled == false","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.OneOfScalar","(input.simple, return.service_desk_enabled)
(return.service_desk_enabled)","/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT",0.0
get+projects,shared_with_groups,"size(return.shared_with_groups[]) one of { 0, 1 }",daikon.inv.unary.scalar.OneOfScalar,(size(return.shared_with_groups[..])),/projects&/projects&get&200():::EXIT,0.0
get+projects,shared_with_groups.group_access_level,"return.group_access_level one of { 20, 30 }",daikon.inv.unary.scalar.OneOfScalar,(return.group_access_level),/projects&/projects&get&200&shared_with_groups():::EXIT,0.0
get+projects,shared_with_groups.group_full_path,"return.group_full_path one of { ""myjane"", ""salubriousness"" }",daikon.inv.unary.string.OneOfString,(return.group_full_path),/projects&/projects&get&200&shared_with_groups():::EXIT,0.0
get+projects,shared_with_groups.group_id,"return.group_id one of { 176, 1070 }",daikon.inv.unary.scalar.OneOfScalar,(return.group_id),/projects&/projects&get&200&shared_with_groups():::EXIT,0.0
get+projects,shared_with_groups.group_name,"return.group_name one of { ""effortlessly"", ""myjane"" }",daikon.inv.unary.string.OneOfString,(return.group_name),/projects&/projects&get&200&shared_with_groups():::EXIT,0.0
get+projects,star_count,"return.star_count >= 0
return.star_count >= return.statistics.lfs_objects_size","daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.star_count)
(return.star_count, return.statistics.lfs_objects_size)","/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT",0.5
get+projects,statistics.commit_count,"return.statistics.commit_count >= 0
return.statistics.commit_count >= return.statistics.lfs_objects_size
return.statistics.commit_count >= size(return.shared_with_groups[])","daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.statistics.commit_count)
(return.statistics.commit_count, return.statistics.lfs_objects_size)
(return.statistics.commit_count, size(return.shared_with_groups[..]))","/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT",0.3333333333333333
get+projects,statistics.job_artifacts_size,return.statistics.lfs_objects_size == return.statistics.job_artifacts_size,daikon.inv.binary.twoScalar.IntEqual,"(return.statistics.lfs_objects_size, return.statistics.job_artifacts_size)",/projects&/projects&get&200():::EXIT,0.0
get+projects,statistics.lfs_objects_size,"return.statistics.lfs_objects_size == return.statistics.packages_size
return.statistics.lfs_objects_size == return.statistics.snippets_size
return.statistics.lfs_objects_size == 0
return.statistics.lfs_objects_size <= size(return.shared_with_groups[])","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.OneOfScalar
daikon.inv.binary.twoScalar.IntLessEqual","(return.statistics.lfs_objects_size, return.statistics.packages_size)
(return.statistics.lfs_objects_size, return.statistics.snippets_size)
(return.statistics.lfs_objects_size)
(return.statistics.lfs_objects_size, size(return.shared_with_groups[..]))","/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT",0.0
get+projects,statistics.repository_size,"return.statistics.repository_size >= 0
return.statistics.repository_size >= return.statistics.lfs_objects_size
return.statistics.repository_size >= size(return.shared_with_groups[])","daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.statistics.repository_size)
(return.statistics.repository_size, return.statistics.lfs_objects_size)
(return.statistics.repository_size, size(return.shared_with_groups[..]))","/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT",0.6666666666666666
get+projects,statistics.storage_size,"return.statistics.storage_size >= 0
return.statistics.storage_size >= return.statistics.repository_size
return.statistics.storage_size >= return.statistics.wiki_size
return.statistics.storage_size >= return.statistics.lfs_objects_size
return.statistics.storage_size >= size(return.shared_with_groups[])","daikon.inv.unary.scalar.LowerBound
daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.statistics.storage_size)
(return.statistics.storage_size, return.statistics.repository_size)
(return.statistics.storage_size, return.statistics.wiki_size)
(return.statistics.storage_size, return.statistics.lfs_objects_size)
(return.statistics.storage_size, size(return.shared_with_groups[..]))","/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT",0.8
get+projects,statistics.wiki_size,"return.statistics.wiki_size one of { 0, 41943 }
return.statistics.wiki_size >= return.statistics.lfs_objects_size","daikon.inv.unary.scalar.OneOfScalar
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.statistics.wiki_size)
(return.statistics.wiki_size, return.statistics.lfs_objects_size)","/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT",0.0
get+projects,tag_list,"return.id > size(return.tag_list[])
return.permissions.group_access.notification_level >= size(return.tag_list[])
return.statistics.lfs_objects_size <= size(return.tag_list[])","daikon.inv.binary.twoScalar.IntGreaterThan
daikon.inv.binary.twoScalar.IntGreaterEqual
daikon.inv.binary.twoScalar.IntLessEqual","(return.id, size(return.tag_list[..]))
(return.permissions.group_access.notification_level, size(return.tag_list[..]))
(return.statistics.lfs_objects_size, size(return.tag_list[..]))","/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT",0.3333333333333333
get+projects,visibility,"input.visibility == return.visibility
return.visibility one of { ""internal"", ""private"", ""public"" }","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.OneOfString","(input.visibility, return.visibility)
(return.visibility)","/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT",1.0
get+projects,web_url,"return.web_url is a substring of return.http_url_to_repo
return.web_url is a substring of return.readme_url","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return.http_url_to_repo, return.web_url)
(return.web_url, return.readme_url)","/projects&/projects&get&200():::EXIT
/projects&/projects&get&200():::EXIT",1.0
get+projects_{id}_repository_compare,commit.authored_date,"LENGTH(return.commit.authored_date)==29
return.commit.authored_date is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.commit.authored_date)
(return.commit.authored_date)","/projects/{id}/repository/compare&/projects/{id}/repository/compare&get&200():::EXIT
/projects/{id}/repository/compare&/projects/{id}/repository/compare&get&200():::EXIT",1.0
get+projects_{id}_repository_compare,commit.committer_email,return.commit.committer_email is Email,daikon.inv.unary.string.IsEmail,(return.commit.committer_email),/projects/{id}/repository/compare&/projects/{id}/repository/compare&get&200():::EXIT,1.0
get+projects_{id}_repository_compare,commit.created_at,"LENGTH(return.commit.created_at)==29
return.commit.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.commit.created_at)
(return.commit.created_at)","/projects/{id}/repository/compare&/projects/{id}/repository/compare&get&200():::EXIT
/projects/{id}/repository/compare&/projects/{id}/repository/compare&get&200():::EXIT",1.0
get+projects_{id}_repository_compare,commit.id,"LENGTH(return.commit.id)==40
return.commit.short_id is a substring of return.commit.id","daikon.inv.unary.string.FixedLengthString
daikon.inv.binary.twoString.StdString$SubString","(return.commit.id)
(return.commit.id, return.commit.short_id)","/projects/{id}/repository/compare&/projects/{id}/repository/compare&get&200():::EXIT
/projects/{id}/repository/compare&/projects/{id}/repository/compare&get&200():::EXIT",1.0
get+projects_{id}_repository_compare,commit.message,return.commit.title is a substring of return.commit.message,daikon.inv.binary.twoString.StdString$SubString,"(return.commit.message, return.commit.title)",/projects/{id}/repository/compare&/projects/{id}/repository/compare&get&200():::EXIT,1.0
get+projects_{id}_repository_compare,commit.parent_ids,"All the elements of return.commit.parent_ids[] have LENGTH=40
size(return.commit.parent_ids[]) one of { 1, 2 }
size(return.commit.parent_ids[]) <= size(return.commits[])","daikon.inv.unary.stringsequence.SequenceFixedLengthString
daikon.inv.unary.scalar.OneOfScalar
daikon.inv.binary.twoScalar.IntLessEqual","(return.commit.parent_ids[..])
(size(return.commit.parent_ids[..]))
(size(return.commit.parent_ids[..]), size(return.commits[..]))","/projects/{id}/repository/compare&/projects/{id}/repository/compare&get&200():::EXIT
/projects/{id}/repository/compare&/projects/{id}/repository/compare&get&200():::EXIT
/projects/{id}/repository/compare&/projects/{id}/repository/compare&get&200():::EXIT",0.6666666666666666
get+projects_{id}_repository_compare,commit.short_id,LENGTH(return.commit.short_id)==8,daikon.inv.unary.string.FixedLengthString,(return.commit.short_id),/projects/{id}/repository/compare&/projects/{id}/repository/compare&get&200():::EXIT,1.0
get+projects_{id}_repository_compare,commits.authored_date,"LENGTH(return.authored_date)==29
return.authored_date is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.authored_date)
(return.authored_date)","/projects/{id}/repository/compare&/projects/{id}/repository/compare&get&200&commits():::EXIT
/projects/{id}/repository/compare&/projects/{id}/repository/compare&get&200&commits():::EXIT",1.0
get+projects_{id}_repository_compare,commits.committer_email,return.committer_email is Email,daikon.inv.unary.string.IsEmail,(return.committer_email),/projects/{id}/repository/compare&/projects/{id}/repository/compare&get&200&commits():::EXIT,1.0
get+projects_{id}_repository_compare,commits.created_at,"LENGTH(return.created_at)==29
return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.created_at)
(return.created_at)","/projects/{id}/repository/compare&/projects/{id}/repository/compare&get&200&commits():::EXIT
/projects/{id}/repository/compare&/projects/{id}/repository/compare&get&200&commits():::EXIT",1.0
get+projects_{id}_repository_compare,commits.id,"LENGTH(return.id)==40
return.short_id is a substring of return.id","daikon.inv.unary.string.FixedLengthString
daikon.inv.binary.twoString.StdString$SubString","(return.id)
(return.id, return.short_id)","/projects/{id}/repository/compare&/projects/{id}/repository/compare&get&200&commits():::EXIT
/projects/{id}/repository/compare&/projects/{id}/repository/compare&get&200&commits():::EXIT",1.0
get+projects_{id}_repository_compare,commits.message,return.title is a substring of return.message,daikon.inv.binary.twoString.StdString$SubString,"(return.message, return.title)",/projects/{id}/repository/compare&/projects/{id}/repository/compare&get&200&commits():::EXIT,1.0
get+projects_{id}_repository_compare,commits.parent_ids,"All the elements of return.parent_ids[] have LENGTH=40
size(return.parent_ids[]) one of { 0, 1, 2 }","daikon.inv.unary.stringsequence.SequenceFixedLengthString
daikon.inv.unary.scalar.OneOfScalar","(return.parent_ids[..])
(size(return.parent_ids[..]))","/projects/{id}/repository/compare&/projects/{id}/repository/compare&get&200&commits():::EXIT
/projects/{id}/repository/compare&/projects/{id}/repository/compare&get&200&commits():::EXIT",1.0
get+projects_{id}_repository_compare,commits.short_id,LENGTH(return.short_id)==8,daikon.inv.unary.string.FixedLengthString,(return.short_id),/projects/{id}/repository/compare&/projects/{id}/repository/compare&get&200&commits():::EXIT,1.0
get+projects_{id}_repository_compare,compare_same_ref,"return.compare_same_ref one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.compare_same_ref),/projects/{id}/repository/compare&/projects/{id}/repository/compare&get&200():::EXIT,1.0
get+projects_{id}_repository_compare,compare_timeout,"return.compare_timeout one of { ""false"", ""true"" }",daikon.inv.unary.string.OneOfString,(return.compare_timeout),/projects/{id}/repository/compare&/projects/{id}/repository/compare&get&200():::EXIT,1.0
get+projects_{id}_repository_contributors,additions,"return.additions == return.deletions
return.additions == ""0""
LENGTH(return.additions)==1
return.additions is Numeric","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.IsNumeric","(return.additions, return.deletions)
(return.additions)
(return.additions)
(return.additions)","/projects/{id}/repository/contributors&/projects/{id}/repository/contributors&get&200():::EXIT
/projects/{id}/repository/contributors&/projects/{id}/repository/contributors&get&200():::EXIT
/projects/{id}/repository/contributors&/projects/{id}/repository/contributors&get&200():::EXIT
/projects/{id}/repository/contributors&/projects/{id}/repository/contributors&get&200():::EXIT",0.25
get+projects_{id}_repository_contributors,commits,return.commits is Numeric,daikon.inv.unary.string.IsNumeric,(return.commits),/projects/{id}/repository/contributors&/projects/{id}/repository/contributors&get&200():::EXIT,1.0
get+projects_{id}_repository_merge_base,authored_date,"LENGTH(return.authored_date)==29
return.authored_date is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.authored_date)
(return.authored_date)","/projects/{id}/repository/merge_base&/projects/{id}/repository/merge_base&get&200():::EXIT
/projects/{id}/repository/merge_base&/projects/{id}/repository/merge_base&get&200():::EXIT",1.0
get+projects_{id}_repository_merge_base,committed_date,"return.committed_date == return.created_at
LENGTH(return.committed_date)==29
return.committed_date is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.committed_date, return.created_at)
(return.committed_date)
(return.committed_date)","/projects/{id}/repository/merge_base&/projects/{id}/repository/merge_base&get&200():::EXIT
/projects/{id}/repository/merge_base&/projects/{id}/repository/merge_base&get&200():::EXIT
/projects/{id}/repository/merge_base&/projects/{id}/repository/merge_base&get&200():::EXIT",1.0
get+projects_{id}_repository_merge_base,committer_email,return.committer_email is Email,daikon.inv.unary.string.IsEmail,(return.committer_email),/projects/{id}/repository/merge_base&/projects/{id}/repository/merge_base&get&200():::EXIT,1.0
get+projects_{id}_repository_merge_base,id,"LENGTH(return.id)==40
return.short_id is a substring of return.id","daikon.inv.unary.string.FixedLengthString
daikon.inv.binary.twoString.StdString$SubString","(return.id)
(return.id, return.short_id)","/projects/{id}/repository/merge_base&/projects/{id}/repository/merge_base&get&200():::EXIT
/projects/{id}/repository/merge_base&/projects/{id}/repository/merge_base&get&200():::EXIT",1.0
get+projects_{id}_repository_merge_base,message,return.title is a substring of return.message,daikon.inv.binary.twoString.StdString$SubString,"(return.message, return.title)",/projects/{id}/repository/merge_base&/projects/{id}/repository/merge_base&get&200():::EXIT,1.0
get+projects_{id}_repository_merge_base,parent_ids,"All the elements of return.parent_ids[] have LENGTH=40
size(return.parent_ids[]) one of { 0, 1, 2 }
size(input.refs[]) >= size(return.parent_ids[])","daikon.inv.unary.stringsequence.SequenceFixedLengthString
daikon.inv.unary.scalar.OneOfScalar
daikon.inv.binary.twoScalar.IntGreaterEqual","(return.parent_ids[..])
(size(return.parent_ids[..]))
(size(input.refs[..]), size(return.parent_ids[..]))","/projects/{id}/repository/merge_base&/projects/{id}/repository/merge_base&get&200():::EXIT
/projects/{id}/repository/merge_base&/projects/{id}/repository/merge_base&get&200():::EXIT
/projects/{id}/repository/merge_base&/projects/{id}/repository/merge_base&get&200():::EXIT",1.0
get+projects_{id}_repository_merge_base,short_id,LENGTH(return.short_id)==8,daikon.inv.unary.string.FixedLengthString,(return.short_id),/projects/{id}/repository/merge_base&/projects/{id}/repository/merge_base&get&200():::EXIT,1.0
get+projects_{id}_repository_tree,array,input.per_page >= size(return.array[]),daikon.inv.binary.twoScalar.IntGreaterEqual,"(input.per_page, size(return.array[..]))",/projects/{id}/repository/tree&/projects/{id}/repository/tree&get&200%array():::EXIT,1.0
get+projects_{id}_repository_tree,id,LENGTH(return.id)==40,daikon.inv.unary.string.FixedLengthString,(return.id),/projects/{id}/repository/tree&/projects/{id}/repository/tree&get&200():::EXIT,1.0
get+projects_{id}_repository_tree,mode,"return.mode one of { ""040000"", ""100644"", ""100755"" }
LENGTH(return.mode)==6
return.mode is Numeric","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.IsNumeric","(return.mode)
(return.mode)
(return.mode)","/projects/{id}/repository/tree&/projects/{id}/repository/tree&get&200():::EXIT
/projects/{id}/repository/tree&/projects/{id}/repository/tree&get&200():::EXIT
/projects/{id}/repository/tree&/projects/{id}/repository/tree&get&200():::EXIT",0.6666666666666666
get+projects_{id}_repository_tree,name,return.name is a substring of return.path,daikon.inv.binary.twoString.StdString$SubString,"(return.name, return.path)",/projects/{id}/repository/tree&/projects/{id}/repository/tree&get&200():::EXIT,1.0
get+projects_{id}_repository_tree,type,"return.type one of { ""blob"", ""tree"" }
LENGTH(return.type)==4","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.type)
(return.type)","/projects/{id}/repository/tree&/projects/{id}/repository/tree&get&200():::EXIT
/projects/{id}/repository/tree&/projects/{id}/repository/tree&get&200():::EXIT",1.0
post+projects,_links.self,"return._links.self is a substring of return._links.issues
return._links.self is a substring of return._links.merge_requests
return._links.self is a substring of return._links.repo_branches
return._links.self is a substring of return._links.labels
return._links.self is a substring of return._links.events
return._links.self is a substring of return._links.members","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return._links.self, return._links.issues)
(return._links.self, return._links.merge_requests)
(return._links.self, return._links.repo_branches)
(return._links.self, return._links.labels)
(return._links.self, return._links.events)
(return._links.self, return._links.members)","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT",1.0
post+projects,allow_merge_on_skipped_pipeline,input.allow_merge_on_skipped_pipeline == return.allow_merge_on_skipped_pipeline,daikon.inv.binary.twoScalar.IntEqual,"(input.allow_merge_on_skipped_pipeline, return.allow_merge_on_skipped_pipeline)",/projects&/projects&post&201():::EXIT,1.0
post+projects,archived,"return.archived == return.service_desk_enabled
return.archived == false","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.OneOfScalar","(return.archived, return.service_desk_enabled)
(return.archived)","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT",1.0
post+projects,auto_devops_deploy_strategy,"input.auto_devops_deploy_strategy == return.auto_devops_deploy_strategy
return.auto_devops_deploy_strategy one of { ""continuous"", ""manual"", ""timed_incremental"" }","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.OneOfString","(input.auto_devops_deploy_strategy, return.auto_devops_deploy_strategy)
(return.auto_devops_deploy_strategy)","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT",1.0
post+projects,auto_devops_enabled,input.auto_devops_enabled == return.auto_devops_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.auto_devops_enabled, return.auto_devops_enabled)",/projects&/projects&post&201():::EXIT,1.0
post+projects,autoclose_referenced_issues,input.autoclose_referenced_issues == return.autoclose_referenced_issues,daikon.inv.binary.twoScalar.IntEqual,"(input.autoclose_referenced_issues, return.autoclose_referenced_issues)",/projects&/projects&post&201():::EXIT,1.0
post+projects,ci_default_git_depth,return.ci_default_git_depth == 20,daikon.inv.unary.scalar.OneOfScalar,(return.ci_default_git_depth),/projects&/projects&post&201():::EXIT,1.0
post+projects,ci_forward_deployment_enabled,return.ci_forward_deployment_enabled == true,daikon.inv.unary.scalar.OneOfScalar,(return.ci_forward_deployment_enabled),/projects&/projects&post&201():::EXIT,1.0
post+projects,container_registry_enabled,input.container_registry_enabled == return.container_registry_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.container_registry_enabled, return.container_registry_enabled)",/projects&/projects&post&201():::EXIT,1.0
post+projects,created_at,"LENGTH(return.created_at)==24
return.created_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.created_at)
(return.created_at)","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT",1.0
post+projects,creator_id,return.creator_id <= return.namespace.id,daikon.inv.binary.twoScalar.IntLessEqual,"(return.creator_id, return.namespace.id)",/projects&/projects&post&201():::EXIT,1.0
post+projects,default_branch,return.default_branch is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(return.default_branch, return.readme_url)",/projects&/projects&post&201():::EXIT,1.0
post+projects,description,input.description == return.description,daikon.inv.binary.twoString.StringEqual,"(input.description, return.description)",/projects&/projects&post&201():::EXIT,1.0
post+projects,forks_count,"return.forks_count == return.star_count
return.forks_count == size(return.shared_with_groups[])
return.forks_count == size(return.shared_with_groups[])","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntEqual","(return.forks_count, return.star_count)
(return.forks_count, size(return.shared_with_groups[..]))
(return.forks_count, size(return.shared_with_groups[..]))","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT",1.0
post+projects,id,return.id > return.namespace.id,daikon.inv.binary.twoScalar.IntGreaterThan,"(return.id, return.namespace.id)",/projects&/projects&post&201():::EXIT,0.0
post+projects,import_status,"return.import_status == ""none""
LENGTH(return.import_status)==4","daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(return.import_status)
(return.import_status)","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT",1.0
post+projects,last_activity_at,"LENGTH(return.last_activity_at)==24
return.last_activity_at is Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional)","daikon.inv.unary.string.FixedLengthString
daikon.inv.unary.string.dates.IsTimestampYYYYMMHHThhmmssmm","(return.last_activity_at)
(return.last_activity_at)","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT",1.0
post+projects,merge_method,"input.merge_method == return.merge_method
return.merge_method one of { ""ff"", ""merge"", ""rebase_merge"" }","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.OneOfString","(input.merge_method, return.merge_method)
(return.merge_method)","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT",1.0
post+projects,merge_requests_enabled,return.merge_requests_enabled == return.can_create_merge_request_in,daikon.inv.binary.twoScalar.IntEqual,"(return.merge_requests_enabled, return.can_create_merge_request_in)",/projects&/projects&post&201():::EXIT,0.0
post+projects,name,input.name == return.name,daikon.inv.binary.twoString.StringEqual,"(input.name, return.name)",/projects&/projects&post&201():::EXIT,1.0
post+projects,name_with_namespace,"input.name is a substring of return.name_with_namespace
return.owner.name is a substring of return.name_with_namespace
return.name is a substring of return.name_with_namespace
return.namespace.name is a substring of return.name_with_namespace","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(input.name, return.name_with_namespace)
(return.owner.name, return.name_with_namespace)
(return.name, return.name_with_namespace)
(return.name_with_namespace, return.namespace.name)","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT",1.0
post+projects,namespace.id,"input.namespace_id == return.namespace.id
return.namespace.id >= 1","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.LowerBound","(input.namespace_id, return.namespace.id)
(return.namespace.id)","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT",1.0
post+projects,namespace.kind,"return.namespace.kind one of { ""group"", ""user"" }",daikon.inv.unary.string.OneOfString,(return.namespace.kind),/projects&/projects&post&201():::EXIT,1.0
post+projects,namespace.path,return.namespace.path is a substring of return.namespace.full_path,daikon.inv.binary.twoString.StdString$SubString,"(return.namespace.path, return.namespace.full_path)",/projects&/projects&post&201():::EXIT,1.0
post+projects,only_allow_merge_if_all_discussions_are_resolved,input.only_allow_merge_if_all_discussions_are_resolved == return.only_allow_merge_if_all_discussions_are_resolved,daikon.inv.binary.twoScalar.IntEqual,"(input.only_allow_merge_if_all_discussions_are_resolved, return.only_allow_merge_if_all_discussions_are_resolved)",/projects&/projects&post&201():::EXIT,1.0
post+projects,only_allow_merge_if_pipeline_succeeds,input.only_allow_merge_if_pipeline_succeeds == return.only_allow_merge_if_pipeline_succeeds,daikon.inv.binary.twoScalar.IntEqual,"(input.only_allow_merge_if_pipeline_succeeds, return.only_allow_merge_if_pipeline_succeeds)",/projects&/projects&post&201():::EXIT,1.0
post+projects,open_issues_count,"return.open_issues_count == return.forks_count
return.open_issues_count == 0","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.unary.scalar.OneOfScalar","(return.open_issues_count, return.forks_count)
(return.open_issues_count)","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT",0.5
post+projects,owner.id,"return.owner.id == return.creator_id
return.owner.id <= return.namespace.id","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntLessEqual","(return.owner.id, return.creator_id)
(return.owner.id, return.namespace.id)","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT",1.0
post+projects,owner.name,return.owner.name == return.namespace.name,daikon.inv.binary.twoString.StringEqual,"(return.owner.name, return.namespace.name)",/projects&/projects&post&201():::EXIT,1.0
post+projects,packages_enabled,input.packages_enabled == return.packages_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.packages_enabled, return.packages_enabled)",/projects&/projects&post&201():::EXIT,1.0
post+projects,path,input.path == return.path,daikon.inv.binary.twoString.StringEqual,"(input.path, return.path)",/projects&/projects&post&201():::EXIT,1.0
post+projects,path_with_namespace,"input.path is a substring of return.path_with_namespace
return.path_with_namespace is a substring of return.ssh_url_to_repo
return.path_with_namespace is a substring of return.web_url
return.path is a substring of return.path_with_namespace
return.namespace.full_path is a substring of return.path_with_namespace","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(input.path, return.path_with_namespace)
(return.ssh_url_to_repo, return.path_with_namespace)
(return.web_url, return.path_with_namespace)
(return.path, return.path_with_namespace)
(return.path_with_namespace, return.namespace.full_path)","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT",1.0
post+projects,permissions,return.permissions == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions),/projects&/projects&post&201():::EXIT,1.0
post+projects,permissions.group_access,return.permissions.group_access == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.group_access),/projects&/projects&post&201():::EXIT,1.0
post+projects,permissions.project_access,return.permissions.project_access == null,daikon.inv.unary.scalar.OneOfScalar,(return.permissions.project_access),/projects&/projects&post&201():::EXIT,1.0
post+projects,public_jobs,input.public_builds == return.public_jobs,daikon.inv.binary.twoScalar.IntEqual,"(input.public_builds, return.public_jobs)",/projects&/projects&post&201():::EXIT,1.0
post+projects,readme_url,input.default_branch is a substring of return.readme_url,daikon.inv.binary.twoString.StdString$SubString,"(input.default_branch, return.readme_url)",/projects&/projects&post&201():::EXIT,1.0
post+projects,remove_source_branch_after_merge,input.remove_source_branch_after_merge == return.remove_source_branch_after_merge,daikon.inv.binary.twoScalar.IntEqual,"(input.remove_source_branch_after_merge, return.remove_source_branch_after_merge)",/projects&/projects&post&201():::EXIT,1.0
post+projects,repository_storage,"input.repository_storage == return.repository_storage
return.repository_storage == ""default""
LENGTH(return.repository_storage)==7","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.OneOfString
daikon.inv.unary.string.FixedLengthString","(input.repository_storage, return.repository_storage)
(return.repository_storage)
(return.repository_storage)","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT",1.0
post+projects,request_access_enabled,input.request_access_enabled == return.request_access_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.request_access_enabled, return.request_access_enabled)",/projects&/projects&post&201():::EXIT,1.0
post+projects,resolve_outdated_diff_discussions,input.resolve_outdated_diff_discussions == return.resolve_outdated_diff_discussions,daikon.inv.binary.twoScalar.IntEqual,"(input.resolve_outdated_diff_discussions, return.resolve_outdated_diff_discussions)",/projects&/projects&post&201():::EXIT,1.0
post+projects,runners_token,LENGTH(return.runners_token)==29,daikon.inv.unary.string.FixedLengthString,(return.runners_token),/projects&/projects&post&201():::EXIT,1.0
post+projects,shared_runners_enabled,input.shared_runners_enabled == return.shared_runners_enabled,daikon.inv.binary.twoScalar.IntEqual,"(input.shared_runners_enabled, return.shared_runners_enabled)",/projects&/projects&post&201():::EXIT,1.0
post+projects,shared_with_groups,return.shared_with_groups[] == [],daikon.inv.unary.sequence.OneOfSequence,(return.shared_with_groups[..]),/projects&/projects&post&201():::EXIT,1.0
post+projects,statistics,return.statistics == null,daikon.inv.unary.scalar.OneOfScalar,(return.statistics),/projects&/projects&post&201():::EXIT,1.0
post+projects,tag_list,"size(input.tag_list[]) == size(return.tag_list[])
return.open_issues_count <= size(return.tag_list[])
return.forks_count <= size(return.tag_list[])","daikon.inv.binary.twoScalar.IntEqual
daikon.inv.binary.twoScalar.IntLessEqual
daikon.inv.binary.twoScalar.IntLessEqual","(size(input.tag_list[..]), size(return.tag_list[..]))
(return.open_issues_count, size(return.tag_list[..]))
(return.forks_count, size(return.tag_list[..]))","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT",1.0
post+projects,visibility,"input.visibility == return.visibility
return.visibility one of { ""internal"", ""private"", ""public"" }","daikon.inv.binary.twoString.StringEqual
daikon.inv.unary.string.OneOfString","(input.visibility, return.visibility)
(return.visibility)","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT",1.0
post+projects,web_url,"return.web_url is a substring of return.http_url_to_repo
return.web_url is a substring of return.readme_url","daikon.inv.binary.twoString.StdString$SubString
daikon.inv.binary.twoString.StdString$SubString","(return.http_url_to_repo, return.web_url)
(return.web_url, return.readme_url)","/projects&/projects&post&201():::EXIT
/projects&/projects&post&201():::EXIT",1.0
